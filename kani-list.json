{
  "kani-version": "0.63.0",
  "file-version": "0.1",
  "standard-harnesses": {
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/addr2line-0.25.0/src/line.rs": [
      "line::LazyLines::new"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/adler2-2.0.1/src/algo.rs": [
      "algo::U32X4"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/adler2-2.0.1/src/lib.rs": [
      "<Adler32 as rustc_std_workspace_core::default::Default>::default",
      "Adler32::from_checksum",
      "Adler32::new"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gimli-0.32.0/src/common.rs": [
      "<common::DwarfFileType as rustc_std_workspace_core::default::Default>::default",
      "<common::LineEncoding as rustc_std_workspace_core::default::Default>::default",
      "common::DebugTypeSignature",
      "common::DwoId",
      "common::Register"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gimli-0.32.0/src/constants.rs": [
      "constants::DwAccess",
      "constants::DwAddr",
      "constants::DwAt",
      "constants::DwAte",
      "constants::DwCc",
      "constants::DwCfa",
      "constants::DwChildren",
      "constants::DwDefaulted",
      "constants::DwDs",
      "constants::DwDsc",
      "constants::DwEhPe",
      "constants::DwEnd",
      "constants::DwForm",
      "constants::DwId",
      "constants::DwIdx",
      "constants::DwInl",
      "constants::DwLang",
      "constants::DwLle",
      "constants::DwLnct",
      "constants::DwLne",
      "constants::DwLns",
      "constants::DwMacinfo",
      "constants::DwMacro",
      "constants::DwOp",
      "constants::DwOrd",
      "constants::DwRle",
      "constants::DwSect",
      "constants::DwSectV2",
      "constants::DwTag",
      "constants::DwUt",
      "constants::DwVirtuality",
      "constants::DwVis"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gimli-0.32.0/src/endianity.rs": [
      "<endianity::BigEndian as rustc_std_workspace_core::default::Default>::default",
      "<endianity::LittleEndian as rustc_std_workspace_core::default::Default>::default",
      "<endianity::RunTimeEndian as rustc_std_workspace_core::default::Default>::default"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gimli-0.32.0/src/leb128.rs": [
      "leb128::low_bits_of_byte",
      "leb128::low_bits_of_u64"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gimli-0.32.0/src/read/abbrev.rs": [
      "<read::abbrev::Abbreviations as rustc_std_workspace_core::default::Default>::default",
      "<read::abbrev::AbbreviationsCache as rustc_std_workspace_core::default::Default>::default",
      "read::abbrev::Abbreviations::empty",
      "read::abbrev::AbbreviationsCache::new",
      "read::abbrev::Attributes::new"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gimli-0.32.0/src/read/cfi.rs": [
      "<read::cfi::Augmentation as rustc_std_workspace_core::default::Default>::default",
      "<read::cfi::AugmentationData as rustc_std_workspace_core::default::Default>::default",
      "<read::cfi::BaseAddresses as rustc_std_workspace_core::default::Default>::default",
      "<read::cfi::Pointer as rustc_std_workspace_core::default::Default>::default",
      "<read::cfi::SectionBaseAddresses as rustc_std_workspace_core::default::Default>::default",
      "read::cfi::Pointer::Direct",
      "read::cfi::Pointer::Indirect"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gimli-0.32.0/src/read/endian_slice.rs": [
      "read::endian_slice::DebugByte",
      "read::endian_slice::DebugLen"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gimli-0.32.0/src/read/line.rs": [
      "read::line::ColumnType::Column"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gimli-0.32.0/src/read/lists.rs": [
      "<read::lists::ListsHeader as rustc_std_workspace_core::default::Default>::default"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gimli-0.32.0/src/read/mod.rs": [
      "read::<impl common::Register>::from_u64",
      "read::Error::BadBranchTarget",
      "read::Error::InvalidDerefSize",
      "read::Error::InvalidExpressionTerminator",
      "read::Error::UnknownAbbreviation",
      "read::Error::UnknownVersion",
      "read::Error::UnsupportedAddressSize",
      "read::Error::UnsupportedFieldSize",
      "read::Error::UnsupportedOffsetSize",
      "read::Error::UnsupportedRegister"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gimli-0.32.0/src/read/reader.rs": [
      "<u32 as read::reader::ReaderOffset>::checked_sub",
      "<u32 as read::reader::ReaderOffset>::from_i16",
      "<u32 as read::reader::ReaderOffset>::from_u16",
      "<u32 as read::reader::ReaderOffset>::from_u32",
      "<u32 as read::reader::ReaderOffset>::from_u64",
      "<u32 as read::reader::ReaderOffset>::from_u8",
      "<u32 as read::reader::ReaderOffset>::into_u64",
      "<u32 as read::reader::ReaderOffset>::wrapping_add",
      "<u64 as read::reader::ReaderAddress>::add_sized",
      "<u64 as read::reader::ReaderAddress>::ones_sized",
      "<u64 as read::reader::ReaderAddress>::wrapping_add_sized",
      "<u64 as read::reader::ReaderOffset>::checked_sub",
      "<u64 as read::reader::ReaderOffset>::from_i16",
      "<u64 as read::reader::ReaderOffset>::from_u16",
      "<u64 as read::reader::ReaderOffset>::from_u32",
      "<u64 as read::reader::ReaderOffset>::from_u64",
      "<u64 as read::reader::ReaderOffset>::from_u8",
      "<u64 as read::reader::ReaderOffset>::into_u64",
      "<u64 as read::reader::ReaderOffset>::wrapping_add",
      "<usize as read::reader::ReaderOffset>::checked_sub",
      "<usize as read::reader::ReaderOffset>::from_i16",
      "<usize as read::reader::ReaderOffset>::from_u16",
      "<usize as read::reader::ReaderOffset>::from_u32",
      "<usize as read::reader::ReaderOffset>::from_u64",
      "<usize as read::reader::ReaderOffset>::from_u8",
      "<usize as read::reader::ReaderOffset>::into_u64",
      "<usize as read::reader::ReaderOffset>::wrapping_add",
      "read::reader::ReaderOffsetId"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gimli-0.32.0/src/read/value.rs": [
      "read::value::Value::F32",
      "read::value::Value::F64",
      "read::value::Value::Generic",
      "read::value::Value::I16",
      "read::value::Value::I32",
      "read::value::Value::I64",
      "read::value::Value::I8",
      "read::value::Value::U16",
      "read::value::Value::U32",
      "read::value::Value::U64",
      "read::value::Value::U8",
      "read::value::mask_bit_size",
      "read::value::sign_extend"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/src/control/bitmask.rs": [
      "control::bitmask::BitMask",
      "control::bitmask::BitMask::nonzero_trailing_zeros"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/src/control/group/sse2.rs": [
      "control::group::sse2::Group::static_empty"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/src/control/tag.rs": [
      "control::tag::Tag",
      "control::tag::Tag::full"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/src/map.rs": [
      "map::assert_covariance"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/src/raw/mod.rs": [
      "raw::RawTableInner::new",
      "raw::bucket_mask_to_capacity",
      "raw::h1"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/src/set.rs": [
      "set::assert_covariance"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.172/src/macros.rs": [
      "unix::htonl",
      "unix::htons",
      "unix::linux_like::CMSG_ALIGN",
      "unix::linux_like::CMSG_LEN",
      "unix::linux_like::CMSG_SPACE",
      "unix::linux_like::IPOPT_CLASS",
      "unix::linux_like::IPOPT_COPIED",
      "unix::linux_like::IPOPT_NUMBER",
      "unix::linux_like::IPTOS_ECN",
      "unix::linux_like::KERNEL_VERSION",
      "unix::linux_like::QCMD",
      "unix::linux_like::SIGRTMAX",
      "unix::linux_like::SIGRTMIN",
      "unix::linux_like::WCOREDUMP",
      "unix::linux_like::WEXITSTATUS",
      "unix::linux_like::WIFCONTINUED",
      "unix::linux_like::WIFEXITED",
      "unix::linux_like::WIFSIGNALED",
      "unix::linux_like::WIFSTOPPED",
      "unix::linux_like::WSTOPSIG",
      "unix::linux_like::WTERMSIG",
      "unix::linux_like::W_EXITCODE",
      "unix::linux_like::W_STOPCODE",
      "unix::linux_like::linux::BPF_CLASS",
      "unix::linux_like::linux::BPF_JUMP",
      "unix::linux_like::linux::BPF_MISCOP",
      "unix::linux_like::linux::BPF_MODE",
      "unix::linux_like::linux::BPF_OP",
      "unix::linux_like::linux::BPF_RVAL",
      "unix::linux_like::linux::BPF_SIZE",
      "unix::linux_like::linux::BPF_SRC",
      "unix::linux_like::linux::BPF_STMT",
      "unix::linux_like::linux::CPU_ALLOC_SIZE",
      "unix::linux_like::linux::ELF32_R_INFO",
      "unix::linux_like::linux::ELF32_R_SYM",
      "unix::linux_like::linux::ELF32_R_TYPE",
      "unix::linux_like::linux::ELF64_R_INFO",
      "unix::linux_like::linux::ELF64_R_SYM",
      "unix::linux_like::linux::ELF64_R_TYPE",
      "unix::linux_like::linux::IPTOS_PREC",
      "unix::linux_like::linux::IPTOS_TOS",
      "unix::linux_like::linux::NLA_ALIGN",
      "unix::linux_like::linux::RT_ADDRCLASS",
      "unix::linux_like::linux::RT_LOCALADDR",
      "unix::linux_like::linux::RT_TOS",
      "unix::linux_like::linux::SCTP_PR_INDEX",
      "unix::linux_like::linux::SCTP_PR_POLICY",
      "unix::linux_like::linux::SCTP_PR_PRIO_ENABLED",
      "unix::linux_like::linux::SCTP_PR_RTX_ENABLED",
      "unix::linux_like::linux::SCTP_PR_TTL_ENABLED",
      "unix::linux_like::linux::TPACKET_ALIGN",
      "unix::linux_like::linux::major",
      "unix::linux_like::linux::makedev",
      "unix::linux_like::linux::minor",
      "unix::ntohl",
      "unix::ntohs"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.172/src/unix/linux_like/linux/mod.rs": [
      "unix::linux_like::linux::FUTEX_OP",
      "unix::linux_like::linux::_IO"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.172/src/unix/linux_like/mod.rs": [
      "unix::linux_like::_IOC"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/arch/all/memchr.rs": [
      "arch::all::memchr::One::new",
      "arch::all::memchr::Three::new",
      "arch::all::memchr::Two::new",
      "arch::all::memchr::has_zero_byte",
      "arch::all::memchr::splat"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/arch/all/rabinkarp.rs": [
      "<arch::all::rabinkarp::Hash as rustc_std_workspace_core::default::Default>::default",
      "arch::all::rabinkarp::Hash",
      "arch::all::rabinkarp::Hash::new"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/arch/all/twoway.rs": [
      "arch::all::twoway::ApproximateByteSet"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/arch/x86_64/avx2/memchr.rs": [
      "arch::x86_64::avx2::memchr::One::is_available",
      "arch::x86_64::avx2::memchr::One::new",
      "arch::x86_64::avx2::memchr::One::new_unchecked",
      "arch::x86_64::avx2::memchr::Three::is_available",
      "arch::x86_64::avx2::memchr::Three::new",
      "arch::x86_64::avx2::memchr::Three::new_unchecked",
      "arch::x86_64::avx2::memchr::Two::is_available",
      "arch::x86_64::avx2::memchr::Two::new",
      "arch::x86_64::avx2::memchr::Two::new_unchecked"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/arch/x86_64/avx2/packedpair.rs": [
      "arch::x86_64::avx2::packedpair::Finder::is_available"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/arch/x86_64/sse2/memchr.rs": [
      "arch::x86_64::sse2::memchr::One::is_available",
      "arch::x86_64::sse2::memchr::One::new",
      "arch::x86_64::sse2::memchr::One::new_unchecked",
      "arch::x86_64::sse2::memchr::Three::is_available",
      "arch::x86_64::sse2::memchr::Three::new",
      "arch::x86_64::sse2::memchr::Three::new_unchecked",
      "arch::x86_64::sse2::memchr::Two::is_available",
      "arch::x86_64::sse2::memchr::Two::new",
      "arch::x86_64::sse2::memchr::Two::new_unchecked"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/arch/x86_64/sse2/packedpair.rs": [
      "arch::x86_64::sse2::packedpair::Finder::is_available"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/memmem/mod.rs": [
      "<memmem::FinderBuilder as rustc_std_workspace_core::default::Default>::default",
      "memmem::FinderBuilder::new"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/memmem/searcher.rs": [
      "<memmem::searcher::PrefilterConfig as rustc_std_workspace_core::default::Default>::default",
      "memmem::searcher::PrefilterState::new"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/vector.rs": [
      "<vector::SensibleMoveMask as vector::MoveMask>::all_zeros_except_least_significant",
      "vector::SensibleMoveMask",
      "vector::x86avx2::<impl vector::Vector for rustc_std_workspace_core::arch::x86_64::__m256i>::splat",
      "vector::x86sse2::<impl vector::Vector for rustc_std_workspace_core::arch::x86_64::__m128i>::splat"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/miniz_oxide-0.8.9/src/inflate/core.rs": [
      "<inflate::core::DecompressorOxide as rustc_std_workspace_core::default::Default>::default",
      "inflate::core::DecompressorOxide::new",
      "inflate::core::HuffmanTable::new",
      "inflate::core::end_of_input",
      "inflate::core::num_extra_bits_for_distance_code",
      "inflate::core::reverse_bits",
      "inflate::core::validate_zlib_header"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/miniz_oxide-0.8.9/src/inflate/mod.rs": [
      "inflate::TINFLStatus::from_i32"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/miniz_oxide-0.8.9/src/lib.rs": [
      "MZFlush::new"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/archive.rs": [
      "archive::AixMemberOffset"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/common.rs": [
      "common::BinaryFormat::native_object",
      "common::SectionKind::Elf"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/elf.rs": [
      "elf::ef_e2k_flag_to_mach",
      "elf::ef_e2k_mach_to_flag"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/endian.rs": [
      "<endian::BigEndian as endian::Endian>::from_big_endian",
      "<endian::BigEndian as rustc_std_workspace_core::default::Default>::default",
      "<endian::Endianness as endian::Endian>::from_big_endian",
      "<endian::Endianness as rustc_std_workspace_core::default::Default>::default",
      "<endian::LittleEndian as endian::Endian>::from_big_endian",
      "<endian::LittleEndian as rustc_std_workspace_core::default::Default>::default"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/macho.rs": [
      "macho::DyldCacheSlidePointer3",
      "macho::DyldCacheSlidePointer5",
      "macho::cpu_subtype_intel",
      "macho::cpu_subtype_intel_family",
      "macho::cpu_subtype_intel_model"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/pe.rs": [
      "<pe::ImageSectionHeader as rustc_std_workspace_core::default::Default>::default",
      "pe::Guid",
      "pe::ImageSymbolBytes",
      "pe::ImageSymbolExBytes"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/read/archive.rs": [
      "read::archive::ArchiveOffset"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/read/coff/file.rs": [
      "<pe::AnonObjectHeaderBigobj as read::coff::file::CoffHeader>::is_type_bigobj",
      "<pe::ImageFileHeader as read::coff::file::CoffHeader>::is_type_bigobj"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/read/coff/import.rs": [
      "read::coff::import::ImportName::<'_>::Ordinal"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/read/coff/section.rs": [
      "<read::coff::section::SectionTable<'_> as rustc_std_workspace_core::default::Default>::default"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/read/elf/relocation.rs": [
      "<read::elf::relocation::RelocationSections as rustc_std_workspace_core::default::Default>::default"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/read/elf/version.rs": [
      "<read::elf::version::Version<'_> as rustc_std_workspace_core::default::Default>::default",
      "<read::elf::version::VersionIndex as rustc_std_workspace_core::default::Default>::default",
      "read::elf::version::VersionIndex"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/read/mod.rs": [
      "<read::ObjectMap<'_> as rustc_std_workspace_core::default::Default>::default",
      "<read::ObjectMapEntry<'_> as rustc_std_workspace_core::default::Default>::default",
      "<read::RelocationMap as rustc_std_workspace_core::default::Default>::default",
      "read::CompressedFileRange::none",
      "read::SectionIndex",
      "read::SymbolIndex"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/read/pe/export.rs": [
      "read::pe::export::ExportTarget::<'_>::Address"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/read/pe/import.rs": [
      "read::pe::import::Import::<'_>::Ordinal"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/read/pe/relocation.rs": [
      "<read::pe::relocation::Relocation as rustc_std_workspace_core::default::Default>::default",
      "<read::pe::relocation::RelocationBlockIterator<'_> as rustc_std_workspace_core::default::Default>::default"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/read/pe/resource.rs": [
      "read::pe::resource::ResourceNameOrId::Id"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/read/util.rs": [
      "<read::util::ByteString<'_> as rustc_std_workspace_core::default::Default>::default",
      "<read::util::Bytes<'_> as rustc_std_workspace_core::default::Default>::default",
      "read::util::DebugByte",
      "read::util::DebugLen",
      "read::util::align"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/object-0.37.1/src/xcoff.rs": [
      "xcoff::SymbolBytes"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc-demangle-0.1.25/src/lib.rs": [
      "is_ascii_alphanumeric",
      "is_ascii_punctuation"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc-demangle-0.1.25/src/v0.rs": [
      "v0::HexNibbles::<'s>::try_parse_str_chars::{closure#2}::{closure#0}::utf8_len_from_first_byte",
      "v0::basic_type"
    ],
    "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc-literal-escaper-0.0.2/src/lib.rs": [
      "<MixedUnit as rustc_std_workspace_std::convert::From<char>>::from",
      "<MixedUnit as rustc_std_workspace_std::convert::From<u8>>::from",
      "MixedUnit::Char",
      "MixedUnit::HighByte",
      "ascii_check",
      "byte_from_char"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/kani_build/library/kani_core/src/mem_init.rs": [
      "kani::mem_init::MemoryInitializationState::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/kani_build/library/kani_core/src/models.rs": [
      "<isize as kani::rustc_intrinsics::ToISize>::to_isize",
      "<usize as kani::rustc_intrinsics::ToISize>::to_isize"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/alloc.rs": [
      "<alloc::Global as core::default::Default>::default",
      "alloc::__alloc_error_handler::__rdl_oom",
      "alloc::alloc",
      "alloc::alloc_zeroed",
      "alloc::exchange_malloc",
      "alloc::handle_alloc_error",
      "alloc::handle_alloc_error::ct_error",
      "alloc::handle_alloc_error::rt_error"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/boxed.rs": [
      "<boxed::Box<str> as core::default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/boxed/thin.rs": [
      "boxed::thin::WithHeader::<H>::new_unsize_zst::max",
      "boxed::thin::WithOpaqueHeader"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/bstr.rs": [
      "<bstr::ByteString as core::default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/collections/binary_heap/mod.rs": [
      "collections::binary_heap::BinaryHeap::<T, A>::rebuild_tail::log2_fast"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/collections/btree/node.rs": [
      "collections::btree::node::marker::Immut::<'_>",
      "collections::btree::node::marker::Mut::<'_>",
      "collections::btree::node::marker::ValMut::<'_>",
      "collections::btree::node::splitpoint"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/collections/btree/search.rs": [
      "collections::btree::search::IndexResult::Edge",
      "collections::btree::search::IndexResult::KV"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/collections/btree/set_val.rs": [
      "<collections::btree::set_val::SetValZST as collections::btree::set_val::IsSetVal>::is_set_val",
      "<collections::btree::set_val::SetValZST as core::default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/collections/linked_list.rs": [
      "collections::linked_list::assert_covariance"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/collections/vec_deque/mod.rs": [
      "collections::vec_deque::verify::check_vecdeque_swap",
      "collections::vec_deque::wrap_index"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/ffi/c_str.rs": [
      "<ffi::c_str::CString as core::default::Default>::default",
      "ffi::c_str::<impl core::default::Default for boxed::Box<core::ffi::CStr>>::default",
      "ffi::c_str::<impl core::default::Default for rc::Rc<core::ffi::CStr>>::default",
      "ffi::c_str::FromBytesWithNulErrorKind::InteriorNul"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/raw_vec/mod.rs": [
      "raw_vec::RawVecInner::with_capacity",
      "raw_vec::alloc_guard",
      "raw_vec::capacity_overflow",
      "raw_vec::layout_array",
      "raw_vec::min_non_zero_cap"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/rc.rs": [
      "<rc::Rc<str> as core::default::Default>::default",
      "rc::data_offset_align",
      "rc::rc_inner_layout_for_value_layout"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/string.rs": [
      "<string::String as core::convert::From<char>>::from",
      "<string::String as core::default::Default>::default",
      "string::FromUtf16Error",
      "string::String::new",
      "string::String::try_with_capacity",
      "string::String::with_capacity"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/sync.rs": [
      "<sync::Arc<core::ffi::CStr> as core::default::Default>::default",
      "<sync::Arc<str> as core::default::Default>::default",
      "sync::Weak::<T, A>::upgrade::checked_increment",
      "sync::arcinner_layout_for_value_layout",
      "sync::data_offset_align"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/alloc/src/vec/mod.rs": [
      "vec::Vec::<T, A>::insert::assert_failed",
      "vec::Vec::<T, A>::remove::assert_failed",
      "vec::Vec::<T, A>::split_off::assert_failed",
      "vec::Vec::<T, A>::swap_remove::assert_failed",
      "vec::verify::verify_swap_remove"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/float/conv.rs": [
      "float::conv::int_to_float::u128_to_f128_bits",
      "float::conv::int_to_float::u128_to_f32_bits",
      "float::conv::int_to_float::u128_to_f64_bits",
      "float::conv::int_to_float::u32_to_f128_bits",
      "float::conv::int_to_float::u32_to_f32_bits",
      "float::conv::int_to_float::u32_to_f64_bits",
      "float::conv::int_to_float::u64_to_f128_bits",
      "float::conv::int_to_float::u64_to_f32_bits",
      "float::conv::int_to_float::u64_to_f64_bits"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/float/traits.rs": [
      "<f128 as float::traits::Float>::eq_repr",
      "<f128 as float::traits::Float>::eq_repr::is_nan",
      "<f128 as float::traits::Float>::exp",
      "<f128 as float::traits::Float>::frac",
      "<f128 as float::traits::Float>::from_bits",
      "<f128 as float::traits::Float>::from_parts",
      "<f128 as float::traits::Float>::imp_frac",
      "<f128 as float::traits::Float>::is_sign_negative",
      "<f128 as float::traits::Float>::is_subnormal",
      "<f128 as float::traits::Float>::normalize",
      "<f128 as float::traits::Float>::to_bits",
      "<f128 as float::traits::Float>::to_bits_signed",
      "<f16 as float::traits::Float>::eq_repr",
      "<f16 as float::traits::Float>::eq_repr::is_nan",
      "<f16 as float::traits::Float>::exp",
      "<f16 as float::traits::Float>::frac",
      "<f16 as float::traits::Float>::from_bits",
      "<f16 as float::traits::Float>::from_parts",
      "<f16 as float::traits::Float>::imp_frac",
      "<f16 as float::traits::Float>::is_sign_negative",
      "<f16 as float::traits::Float>::is_subnormal",
      "<f16 as float::traits::Float>::normalize",
      "<f16 as float::traits::Float>::to_bits",
      "<f16 as float::traits::Float>::to_bits_signed",
      "<f32 as float::traits::Float>::eq_repr",
      "<f32 as float::traits::Float>::eq_repr::is_nan",
      "<f32 as float::traits::Float>::exp",
      "<f32 as float::traits::Float>::frac",
      "<f32 as float::traits::Float>::from_bits",
      "<f32 as float::traits::Float>::from_parts",
      "<f32 as float::traits::Float>::imp_frac",
      "<f32 as float::traits::Float>::is_sign_negative",
      "<f32 as float::traits::Float>::is_subnormal",
      "<f32 as float::traits::Float>::normalize",
      "<f32 as float::traits::Float>::to_bits",
      "<f32 as float::traits::Float>::to_bits_signed",
      "<f64 as float::traits::Float>::eq_repr",
      "<f64 as float::traits::Float>::eq_repr::is_nan",
      "<f64 as float::traits::Float>::exp",
      "<f64 as float::traits::Float>::frac",
      "<f64 as float::traits::Float>::from_bits",
      "<f64 as float::traits::Float>::from_parts",
      "<f64 as float::traits::Float>::imp_frac",
      "<f64 as float::traits::Float>::is_sign_negative",
      "<f64 as float::traits::Float>::is_subnormal",
      "<f64 as float::traits::Float>::normalize",
      "<f64 as float::traits::Float>::to_bits",
      "<f64 as float::traits::Float>::to_bits_signed"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/int/big.rs": [
      "int::big::<impl int::traits::HInt for i128>::widen",
      "int::big::<impl int::traits::HInt for i128>::widen_hi",
      "int::big::<impl int::traits::HInt for i128>::widen_mul",
      "int::big::<impl int::traits::HInt for i128>::zero_widen",
      "int::big::<impl int::traits::HInt for i128>::zero_widen_mul",
      "int::big::<impl int::traits::HInt for u128>::widen",
      "int::big::<impl int::traits::HInt for u128>::widen_hi",
      "int::big::<impl int::traits::HInt for u128>::widen_mul",
      "int::big::<impl int::traits::HInt for u128>::zero_widen",
      "int::big::<impl int::traits::HInt for u128>::zero_widen_mul",
      "int::big::i256",
      "int::big::u256"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/int/mul.rs": [
      "int::mul::i128_overflowing_mul",
      "int::mul::i32_overflowing_mul",
      "int::mul::i64_overflowing_mul"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/int/specialized_div_rem/asymmetric.rs": [
      "int::specialized_div_rem::u128_div_rem"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/int/specialized_div_rem/binary_long.rs": [
      "int::specialized_div_rem::u32_div_rem",
      "int::specialized_div_rem::u64_div_rem"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/int/specialized_div_rem/mod.rs": [
      "int::specialized_div_rem::u128_by_u64_div_rem",
      "int::specialized_div_rem::u32_by_u32_div_rem",
      "int::specialized_div_rem::u64_by_u64_div_rem",
      "int::specialized_div_rem::zero_div_fn"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/int/specialized_div_rem/norm_shift.rs": [
      "int::specialized_div_rem::u32_normalization_shift",
      "int::specialized_div_rem::u64_normalization_shift"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/int/traits.rs": [
      "<i128 as int::traits::DInt>::hi",
      "<i128 as int::traits::DInt>::lo",
      "<i16 as int::traits::DInt>::hi",
      "<i16 as int::traits::DInt>::lo",
      "<i16 as int::traits::HInt>::widen",
      "<i16 as int::traits::HInt>::widen_hi",
      "<i16 as int::traits::HInt>::widen_mul",
      "<i16 as int::traits::HInt>::zero_widen",
      "<i16 as int::traits::HInt>::zero_widen_mul",
      "<i32 as int::traits::DInt>::hi",
      "<i32 as int::traits::DInt>::lo",
      "<i32 as int::traits::HInt>::widen",
      "<i32 as int::traits::HInt>::widen_hi",
      "<i32 as int::traits::HInt>::widen_mul",
      "<i32 as int::traits::HInt>::zero_widen",
      "<i32 as int::traits::HInt>::zero_widen_mul",
      "<i64 as int::traits::DInt>::hi",
      "<i64 as int::traits::DInt>::lo",
      "<i64 as int::traits::HInt>::widen",
      "<i64 as int::traits::HInt>::widen_hi",
      "<i64 as int::traits::HInt>::widen_mul",
      "<i64 as int::traits::HInt>::zero_widen",
      "<i64 as int::traits::HInt>::zero_widen_mul",
      "<i8 as int::traits::HInt>::widen",
      "<i8 as int::traits::HInt>::widen_hi",
      "<i8 as int::traits::HInt>::widen_mul",
      "<i8 as int::traits::HInt>::zero_widen",
      "<i8 as int::traits::HInt>::zero_widen_mul",
      "<u128 as int::traits::DInt>::hi",
      "<u128 as int::traits::DInt>::lo",
      "<u16 as int::traits::DInt>::hi",
      "<u16 as int::traits::DInt>::lo",
      "<u16 as int::traits::HInt>::widen",
      "<u16 as int::traits::HInt>::widen_hi",
      "<u16 as int::traits::HInt>::widen_mul",
      "<u16 as int::traits::HInt>::zero_widen",
      "<u16 as int::traits::HInt>::zero_widen_mul",
      "<u32 as int::traits::DInt>::hi",
      "<u32 as int::traits::DInt>::lo",
      "<u32 as int::traits::HInt>::widen",
      "<u32 as int::traits::HInt>::widen_hi",
      "<u32 as int::traits::HInt>::widen_mul",
      "<u32 as int::traits::HInt>::zero_widen",
      "<u32 as int::traits::HInt>::zero_widen_mul",
      "<u64 as int::traits::DInt>::hi",
      "<u64 as int::traits::DInt>::lo",
      "<u64 as int::traits::HInt>::widen",
      "<u64 as int::traits::HInt>::widen_hi",
      "<u64 as int::traits::HInt>::widen_mul",
      "<u64 as int::traits::HInt>::zero_widen",
      "<u64 as int::traits::HInt>::zero_widen_mul",
      "<u8 as int::traits::HInt>::widen",
      "<u8 as int::traits::HInt>::widen_hi",
      "<u8 as int::traits::HInt>::widen_mul",
      "<u8 as int::traits::HInt>::zero_widen",
      "<u8 as int::traits::HInt>::zero_widen_mul"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/macros.rs": [
      "float::add::__adddf3",
      "float::add::__adddf3::__adddf3",
      "float::add::__addsf3",
      "float::add::__addsf3::__addsf3",
      "float::add::__addtf3",
      "float::add::__addtf3::__addtf3",
      "float::cmp::__eqdf2",
      "float::cmp::__eqdf2::__eqdf2",
      "float::cmp::__eqsf2",
      "float::cmp::__eqsf2::__eqsf2",
      "float::cmp::__eqtf2",
      "float::cmp::__eqtf2::__eqtf2",
      "float::cmp::__gedf2",
      "float::cmp::__gedf2::__gedf2",
      "float::cmp::__gesf2",
      "float::cmp::__gesf2::__gesf2",
      "float::cmp::__getf2",
      "float::cmp::__getf2::__getf2",
      "float::cmp::__gtdf2",
      "float::cmp::__gtdf2::__gtdf2",
      "float::cmp::__gtsf2",
      "float::cmp::__gtsf2::__gtsf2",
      "float::cmp::__gttf2",
      "float::cmp::__gttf2::__gttf2",
      "float::cmp::__ledf2",
      "float::cmp::__ledf2::__ledf2",
      "float::cmp::__lesf2",
      "float::cmp::__lesf2::__lesf2",
      "float::cmp::__letf2",
      "float::cmp::__letf2::__letf2",
      "float::cmp::__ltdf2",
      "float::cmp::__ltdf2::__ltdf2",
      "float::cmp::__ltsf2",
      "float::cmp::__ltsf2::__ltsf2",
      "float::cmp::__lttf2",
      "float::cmp::__lttf2::__lttf2",
      "float::cmp::__nedf2",
      "float::cmp::__nedf2::__nedf2",
      "float::cmp::__nesf2",
      "float::cmp::__nesf2::__nesf2",
      "float::cmp::__netf2",
      "float::cmp::__netf2::__netf2",
      "float::cmp::__unorddf2",
      "float::cmp::__unorddf2::__unorddf2",
      "float::cmp::__unordsf2",
      "float::cmp::__unordsf2::__unordsf2",
      "float::cmp::__unordtf2",
      "float::cmp::__unordtf2::__unordtf2",
      "float::conv::__fixdfdi",
      "float::conv::__fixdfdi::__fixdfdi",
      "float::conv::__fixdfsi",
      "float::conv::__fixdfsi::__fixdfsi",
      "float::conv::__fixdfti",
      "float::conv::__fixdfti::__fixdfti",
      "float::conv::__fixsfdi",
      "float::conv::__fixsfdi::__fixsfdi",
      "float::conv::__fixsfsi",
      "float::conv::__fixsfsi::__fixsfsi",
      "float::conv::__fixsfti",
      "float::conv::__fixsfti::__fixsfti",
      "float::conv::__fixtfdi",
      "float::conv::__fixtfdi::__fixtfdi",
      "float::conv::__fixtfsi",
      "float::conv::__fixtfsi::__fixtfsi",
      "float::conv::__fixtfti",
      "float::conv::__fixtfti::__fixtfti",
      "float::conv::__fixunsdfdi",
      "float::conv::__fixunsdfdi::__fixunsdfdi",
      "float::conv::__fixunsdfsi",
      "float::conv::__fixunsdfsi::__fixunsdfsi",
      "float::conv::__fixunsdfti",
      "float::conv::__fixunsdfti::__fixunsdfti",
      "float::conv::__fixunssfdi",
      "float::conv::__fixunssfdi::__fixunssfdi",
      "float::conv::__fixunssfsi",
      "float::conv::__fixunssfsi::__fixunssfsi",
      "float::conv::__fixunssfti",
      "float::conv::__fixunssfti::__fixunssfti",
      "float::conv::__fixunstfdi",
      "float::conv::__fixunstfdi::__fixunstfdi",
      "float::conv::__fixunstfsi",
      "float::conv::__fixunstfsi::__fixunstfsi",
      "float::conv::__fixunstfti",
      "float::conv::__fixunstfti::__fixunstfti",
      "float::conv::__floatdidf",
      "float::conv::__floatdidf::__floatdidf",
      "float::conv::__floatdisf",
      "float::conv::__floatdisf::__floatdisf",
      "float::conv::__floatditf",
      "float::conv::__floatditf::__floatditf",
      "float::conv::__floatsidf",
      "float::conv::__floatsidf::__floatsidf",
      "float::conv::__floatsisf",
      "float::conv::__floatsisf::__floatsisf",
      "float::conv::__floatsitf",
      "float::conv::__floatsitf::__floatsitf",
      "float::conv::__floattidf",
      "float::conv::__floattidf::__floattidf",
      "float::conv::__floattisf",
      "float::conv::__floattisf::__floattisf",
      "float::conv::__floattitf",
      "float::conv::__floattitf::__floattitf",
      "float::conv::__floatundidf",
      "float::conv::__floatundidf::__floatundidf",
      "float::conv::__floatundisf",
      "float::conv::__floatundisf::__floatundisf",
      "float::conv::__floatunditf",
      "float::conv::__floatunditf::__floatunditf",
      "float::conv::__floatunsidf",
      "float::conv::__floatunsidf::__floatunsidf",
      "float::conv::__floatunsisf",
      "float::conv::__floatunsisf::__floatunsisf",
      "float::conv::__floatunsitf",
      "float::conv::__floatunsitf::__floatunsitf",
      "float::conv::__floatuntidf",
      "float::conv::__floatuntidf::__floatuntidf",
      "float::conv::__floatuntisf",
      "float::conv::__floatuntisf::__floatuntisf",
      "float::conv::__floatuntitf",
      "float::conv::__floatuntitf::__floatuntitf",
      "float::div::__divdf3",
      "float::div::__divdf3::__divdf3",
      "float::div::__divsf3",
      "float::div::__divsf3::__divsf3",
      "float::div::__divtf3",
      "float::div::__divtf3::__divtf3",
      "float::extend::__extenddftf2",
      "float::extend::__extenddftf2::__extenddftf2",
      "float::extend::__extendhfdf2",
      "float::extend::__extendhfdf2::__extendhfdf2",
      "float::extend::__extendhfsf2",
      "float::extend::__extendhfsf2::__extendhfsf2",
      "float::extend::__extendhftf2",
      "float::extend::__extendhftf2::__extendhftf2",
      "float::extend::__extendsfdf2",
      "float::extend::__extendsfdf2::__extendsfdf2",
      "float::extend::__extendsftf2",
      "float::extend::__extendsftf2::__extendsftf2",
      "float::extend::__gnu_h2f_ieee",
      "float::extend::__gnu_h2f_ieee::__gnu_h2f_ieee",
      "float::mul::__muldf3",
      "float::mul::__muldf3::__muldf3",
      "float::mul::__mulsf3",
      "float::mul::__mulsf3::__mulsf3",
      "float::mul::__multf3",
      "float::mul::__multf3::__multf3",
      "float::pow::__powidf2",
      "float::pow::__powidf2::__powidf2",
      "float::pow::__powisf2",
      "float::pow::__powisf2::__powisf2",
      "float::pow::__powitf2",
      "float::pow::__powitf2::__powitf2",
      "float::sub::__subdf3",
      "float::sub::__subdf3::__subdf3",
      "float::sub::__subsf3",
      "float::sub::__subsf3::__subsf3",
      "float::sub::__subtf3",
      "float::sub::__subtf3::__subtf3",
      "float::trunc::__gnu_f2h_ieee",
      "float::trunc::__gnu_f2h_ieee::__gnu_f2h_ieee",
      "float::trunc::__truncdfhf2",
      "float::trunc::__truncdfhf2::__truncdfhf2",
      "float::trunc::__truncdfsf2",
      "float::trunc::__truncdfsf2::__truncdfsf2",
      "float::trunc::__truncsfhf2",
      "float::trunc::__truncsfhf2::__truncsfhf2",
      "float::trunc::__trunctfdf2",
      "float::trunc::__trunctfdf2::__trunctfdf2",
      "float::trunc::__trunctfhf2",
      "float::trunc::__trunctfhf2::__trunctfhf2",
      "float::trunc::__trunctfsf2",
      "float::trunc::__trunctfsf2::__trunctfsf2",
      "int::addsub::__rust_i128_add",
      "int::addsub::__rust_i128_add::__rust_i128_add",
      "int::addsub::__rust_i128_sub",
      "int::addsub::__rust_i128_sub::__rust_i128_sub",
      "int::addsub::__rust_u128_add",
      "int::addsub::__rust_u128_add::__rust_u128_add",
      "int::addsub::__rust_u128_sub",
      "int::addsub::__rust_u128_sub::__rust_u128_sub",
      "int::bswap::__bswapdi2",
      "int::bswap::__bswapdi2::__bswapdi2",
      "int::bswap::__bswapsi2",
      "int::bswap::__bswapsi2::__bswapsi2",
      "int::bswap::__bswapti2",
      "int::bswap::__bswapti2::__bswapti2",
      "int::leading_zeros::__clzdi2",
      "int::leading_zeros::__clzdi2::__clzdi2",
      "int::leading_zeros::__clzsi2",
      "int::leading_zeros::__clzsi2::__clzsi2",
      "int::leading_zeros::__clzti2",
      "int::leading_zeros::__clzti2::__clzti2",
      "int::mul::__muldi3",
      "int::mul::__muldi3::__muldi3",
      "int::mul::__multi3",
      "int::mul::__multi3::__multi3",
      "int::sdiv::__divdi3",
      "int::sdiv::__divdi3::__divdi3",
      "int::sdiv::__divsi3",
      "int::sdiv::__divsi3::__divsi3",
      "int::sdiv::__divti3",
      "int::sdiv::__divti3::__divti3",
      "int::sdiv::__moddi3",
      "int::sdiv::__moddi3::__moddi3",
      "int::sdiv::__modsi3",
      "int::sdiv::__modsi3::__modsi3",
      "int::sdiv::__modti3",
      "int::sdiv::__modti3::__modti3",
      "int::shift::__ashldi3",
      "int::shift::__ashldi3::__ashldi3",
      "int::shift::__ashlsi3",
      "int::shift::__ashlsi3::__ashlsi3",
      "int::shift::__ashlti3",
      "int::shift::__ashlti3::__ashlti3",
      "int::shift::__ashrdi3",
      "int::shift::__ashrdi3::__ashrdi3",
      "int::shift::__ashrsi3",
      "int::shift::__ashrsi3::__ashrsi3",
      "int::shift::__ashrti3",
      "int::shift::__ashrti3::__ashrti3",
      "int::shift::__lshrdi3",
      "int::shift::__lshrdi3::__lshrdi3",
      "int::shift::__lshrsi3",
      "int::shift::__lshrsi3::__lshrsi3",
      "int::shift::__lshrti3",
      "int::shift::__lshrti3::__lshrti3",
      "int::trailing_zeros::__ctzdi2",
      "int::trailing_zeros::__ctzdi2::__ctzdi2",
      "int::trailing_zeros::__ctzsi2",
      "int::trailing_zeros::__ctzsi2::__ctzsi2",
      "int::trailing_zeros::__ctzti2",
      "int::trailing_zeros::__ctzti2::__ctzti2",
      "int::udiv::__udivdi3",
      "int::udiv::__udivdi3::__udivdi3",
      "int::udiv::__udivsi3",
      "int::udiv::__udivsi3::__udivsi3",
      "int::udiv::__udivti3",
      "int::udiv::__udivti3::__udivti3",
      "int::udiv::__umoddi3",
      "int::udiv::__umoddi3::__umoddi3",
      "int::udiv::__umodsi3",
      "int::udiv::__umodsi3::__umodsi3",
      "int::udiv::__umodti3",
      "int::udiv::__umodti3::__umodti3",
      "math::full_availability::cbrt",
      "math::full_availability::cbrt::cbrt",
      "math::full_availability::cbrtf",
      "math::full_availability::cbrtf::cbrtf",
      "math::full_availability::ceil",
      "math::full_availability::ceil::ceil",
      "math::full_availability::ceilf",
      "math::full_availability::ceilf128",
      "math::full_availability::ceilf128::ceilf128",
      "math::full_availability::ceilf16",
      "math::full_availability::ceilf16::ceilf16",
      "math::full_availability::ceilf::ceilf",
      "math::full_availability::copysign",
      "math::full_availability::copysign::copysign",
      "math::full_availability::copysignf",
      "math::full_availability::copysignf128",
      "math::full_availability::copysignf128::copysignf128",
      "math::full_availability::copysignf16",
      "math::full_availability::copysignf16::copysignf16",
      "math::full_availability::copysignf::copysignf",
      "math::full_availability::fabs",
      "math::full_availability::fabs::fabs",
      "math::full_availability::fabsf",
      "math::full_availability::fabsf128",
      "math::full_availability::fabsf128::fabsf128",
      "math::full_availability::fabsf16",
      "math::full_availability::fabsf16::fabsf16",
      "math::full_availability::fabsf::fabsf",
      "math::full_availability::fdim",
      "math::full_availability::fdim::fdim",
      "math::full_availability::fdimf",
      "math::full_availability::fdimf128",
      "math::full_availability::fdimf128::fdimf128",
      "math::full_availability::fdimf16",
      "math::full_availability::fdimf16::fdimf16",
      "math::full_availability::fdimf::fdimf",
      "math::full_availability::floor",
      "math::full_availability::floor::floor",
      "math::full_availability::floorf",
      "math::full_availability::floorf128",
      "math::full_availability::floorf128::floorf128",
      "math::full_availability::floorf16",
      "math::full_availability::floorf16::floorf16",
      "math::full_availability::floorf::floorf",
      "math::full_availability::fma",
      "math::full_availability::fma::fma",
      "math::full_availability::fmaf",
      "math::full_availability::fmaf128",
      "math::full_availability::fmaf128::fmaf128",
      "math::full_availability::fmaf::fmaf",
      "math::full_availability::fmax",
      "math::full_availability::fmax::fmax",
      "math::full_availability::fmaxf",
      "math::full_availability::fmaxf128",
      "math::full_availability::fmaxf128::fmaxf128",
      "math::full_availability::fmaxf16",
      "math::full_availability::fmaxf16::fmaxf16",
      "math::full_availability::fmaxf::fmaxf",
      "math::full_availability::fmaximum",
      "math::full_availability::fmaximum::fmaximum",
      "math::full_availability::fmaximumf",
      "math::full_availability::fmaximumf128",
      "math::full_availability::fmaximumf128::fmaximumf128",
      "math::full_availability::fmaximumf16",
      "math::full_availability::fmaximumf16::fmaximumf16",
      "math::full_availability::fmaximumf::fmaximumf",
      "math::full_availability::fmin",
      "math::full_availability::fmin::fmin",
      "math::full_availability::fminf",
      "math::full_availability::fminf128",
      "math::full_availability::fminf128::fminf128",
      "math::full_availability::fminf16",
      "math::full_availability::fminf16::fminf16",
      "math::full_availability::fminf::fminf",
      "math::full_availability::fminimum",
      "math::full_availability::fminimum::fminimum",
      "math::full_availability::fminimumf",
      "math::full_availability::fminimumf128",
      "math::full_availability::fminimumf128::fminimumf128",
      "math::full_availability::fminimumf16",
      "math::full_availability::fminimumf16::fminimumf16",
      "math::full_availability::fminimumf::fminimumf",
      "math::full_availability::fmod",
      "math::full_availability::fmod::fmod",
      "math::full_availability::fmodf",
      "math::full_availability::fmodf128",
      "math::full_availability::fmodf128::fmodf128",
      "math::full_availability::fmodf16",
      "math::full_availability::fmodf16::fmodf16",
      "math::full_availability::fmodf::fmodf",
      "math::full_availability::rint",
      "math::full_availability::rint::rint",
      "math::full_availability::rintf",
      "math::full_availability::rintf128",
      "math::full_availability::rintf128::rintf128",
      "math::full_availability::rintf16",
      "math::full_availability::rintf16::rintf16",
      "math::full_availability::rintf::rintf",
      "math::full_availability::round",
      "math::full_availability::round::round",
      "math::full_availability::roundeven",
      "math::full_availability::roundeven::roundeven",
      "math::full_availability::roundevenf",
      "math::full_availability::roundevenf128",
      "math::full_availability::roundevenf128::roundevenf128",
      "math::full_availability::roundevenf16",
      "math::full_availability::roundevenf16::roundevenf16",
      "math::full_availability::roundevenf::roundevenf",
      "math::full_availability::roundf",
      "math::full_availability::roundf128",
      "math::full_availability::roundf128::roundf128",
      "math::full_availability::roundf16",
      "math::full_availability::roundf16::roundf16",
      "math::full_availability::roundf::roundf",
      "math::full_availability::sqrt",
      "math::full_availability::sqrt::sqrt",
      "math::full_availability::sqrtf",
      "math::full_availability::sqrtf128",
      "math::full_availability::sqrtf128::sqrtf128",
      "math::full_availability::sqrtf16",
      "math::full_availability::sqrtf16::sqrtf16",
      "math::full_availability::sqrtf::sqrtf",
      "math::full_availability::trunc",
      "math::full_availability::trunc::trunc",
      "math::full_availability::truncf",
      "math::full_availability::truncf128",
      "math::full_availability::truncf128::truncf128",
      "math::full_availability::truncf16",
      "math::full_availability::truncf16::truncf16",
      "math::full_availability::truncf::truncf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/acos.rs": [
      "math::libm_math::acos::acos",
      "math::libm_math::acos::r"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/acosf.rs": [
      "math::libm_math::acosf::acosf",
      "math::libm_math::acosf::r"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/acosh.rs": [
      "math::libm_math::acosh::acosh"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/acoshf.rs": [
      "math::libm_math::acoshf::acoshf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/arch/x86.rs": [
      "math::libm_math::arch::x86::sqrt",
      "math::libm_math::arch::x86::sqrtf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/arch/x86/detect.rs": [
      "math::libm_math::arch::x86::detect::get_cpu_features",
      "math::libm_math::arch::x86::detect::load_x86_features"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/arch/x86/fma.rs": [
      "math::libm_math::arch::x86::fma::fma",
      "math::libm_math::arch::x86::fma::fma_fallback",
      "math::libm_math::arch::x86::fma::fma_with_fma",
      "math::libm_math::arch::x86::fma::fma_with_fma4",
      "math::libm_math::arch::x86::fma::fmaf",
      "math::libm_math::arch::x86::fma::fmaf_fallback",
      "math::libm_math::arch::x86::fma::fmaf_with_fma",
      "math::libm_math::arch::x86::fma::fmaf_with_fma4"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/asin.rs": [
      "math::libm_math::asin::asin",
      "math::libm_math::asin::comp_r"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/asinf.rs": [
      "math::libm_math::asinf::asinf",
      "math::libm_math::asinf::r"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/asinh.rs": [
      "math::libm_math::asinh::asinh"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/asinhf.rs": [
      "math::libm_math::asinhf::asinhf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/atan.rs": [
      "math::libm_math::atan::atan"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/atan2.rs": [
      "math::libm_math::atan2::atan2"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/atan2f.rs": [
      "math::libm_math::atan2f::atan2f"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/atanf.rs": [
      "math::libm_math::atanf::atanf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/atanh.rs": [
      "math::libm_math::atanh::atanh"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/atanhf.rs": [
      "math::libm_math::atanhf::atanhf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/cbrt.rs": [
      "math::libm_math::cbrt::cbrt"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/cbrtf.rs": [
      "math::libm_math::cbrtf::cbrtf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/ceil.rs": [
      "math::libm_math::ceil::ceil",
      "math::libm_math::ceil::ceilf",
      "math::libm_math::ceil::ceilf128",
      "math::libm_math::ceil::ceilf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/copysign.rs": [
      "math::libm_math::copysign::copysign",
      "math::libm_math::copysign::copysignf",
      "math::libm_math::copysign::copysignf128",
      "math::libm_math::copysign::copysignf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/cos.rs": [
      "math::libm_math::cos::cos"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/cosf.rs": [
      "math::libm_math::cosf::cosf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/cosh.rs": [
      "math::libm_math::cosh::cosh"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/coshf.rs": [
      "math::libm_math::coshf::coshf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/erf.rs": [
      "math::libm_math::erf::erf",
      "math::libm_math::erf::erfc",
      "math::libm_math::erf::erfc1",
      "math::libm_math::erf::erfc2"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/erff.rs": [
      "math::libm_math::erff::erfc1",
      "math::libm_math::erff::erfc2",
      "math::libm_math::erff::erfcf",
      "math::libm_math::erff::erff"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/exp.rs": [
      "math::libm_math::exp::exp"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/exp10.rs": [
      "math::libm_math::exp10::exp10"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/exp10f.rs": [
      "math::libm_math::exp10f::exp10f"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/exp2.rs": [
      "math::libm_math::exp2::exp2"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/exp2f.rs": [
      "math::libm_math::exp2f::exp2f"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/expf.rs": [
      "math::libm_math::expf::expf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/expm1.rs": [
      "math::libm_math::expm1::expm1"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/expm1f.rs": [
      "math::libm_math::expm1f::expm1f"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/expo2.rs": [
      "math::libm_math::expo2::expo2"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/fabs.rs": [
      "math::libm_math::fabs::fabs",
      "math::libm_math::fabs::fabsf",
      "math::libm_math::fabs::fabsf128",
      "math::libm_math::fabs::fabsf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/fdim.rs": [
      "math::libm_math::fdim::fdim",
      "math::libm_math::fdim::fdimf",
      "math::libm_math::fdim::fdimf128",
      "math::libm_math::fdim::fdimf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/floor.rs": [
      "math::libm_math::floor::floor",
      "math::libm_math::floor::floorf",
      "math::libm_math::floor::floorf128",
      "math::libm_math::floor::floorf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/fma.rs": [
      "math::libm_math::fma::fma",
      "math::libm_math::fma::fmaf",
      "math::libm_math::fma::fmaf128",
      "math::libm_math::fma::fmaf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/fmin_fmax.rs": [
      "math::libm_math::fmin_fmax::fmax",
      "math::libm_math::fmin_fmax::fmaxf",
      "math::libm_math::fmin_fmax::fmaxf128",
      "math::libm_math::fmin_fmax::fmaxf16",
      "math::libm_math::fmin_fmax::fmin",
      "math::libm_math::fmin_fmax::fminf",
      "math::libm_math::fmin_fmax::fminf128",
      "math::libm_math::fmin_fmax::fminf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/fminimum_fmaximum.rs": [
      "math::libm_math::fminimum_fmaximum::fmaximum",
      "math::libm_math::fminimum_fmaximum::fmaximumf",
      "math::libm_math::fminimum_fmaximum::fmaximumf128",
      "math::libm_math::fminimum_fmaximum::fmaximumf16",
      "math::libm_math::fminimum_fmaximum::fminimum",
      "math::libm_math::fminimum_fmaximum::fminimumf",
      "math::libm_math::fminimum_fmaximum::fminimumf128",
      "math::libm_math::fminimum_fmaximum::fminimumf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/fminimum_fmaximum_num.rs": [
      "math::libm_math::fminimum_fmaximum_num::fmaximum_num",
      "math::libm_math::fminimum_fmaximum_num::fmaximum_numf",
      "math::libm_math::fminimum_fmaximum_num::fmaximum_numf128",
      "math::libm_math::fminimum_fmaximum_num::fmaximum_numf16",
      "math::libm_math::fminimum_fmaximum_num::fminimum_num",
      "math::libm_math::fminimum_fmaximum_num::fminimum_numf",
      "math::libm_math::fminimum_fmaximum_num::fminimum_numf128",
      "math::libm_math::fminimum_fmaximum_num::fminimum_numf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/fmod.rs": [
      "math::libm_math::fmod::fmod",
      "math::libm_math::fmod::fmodf",
      "math::libm_math::fmod::fmodf128",
      "math::libm_math::fmod::fmodf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/frexp.rs": [
      "math::libm_math::frexp::frexp"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/frexpf.rs": [
      "math::libm_math::frexpf::frexpf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/hypot.rs": [
      "math::libm_math::hypot::hypot",
      "math::libm_math::hypot::sq"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/hypotf.rs": [
      "math::libm_math::hypotf::hypotf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/ilogb.rs": [
      "math::libm_math::ilogb::ilogb"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/ilogbf.rs": [
      "math::libm_math::ilogbf::ilogbf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/j0.rs": [
      "math::libm_math::j0::common",
      "math::libm_math::j0::j0",
      "math::libm_math::j0::pzero",
      "math::libm_math::j0::qzero",
      "math::libm_math::j0::y0"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/j0f.rs": [
      "math::libm_math::j0f::common",
      "math::libm_math::j0f::j0f",
      "math::libm_math::j0f::pzerof",
      "math::libm_math::j0f::qzerof",
      "math::libm_math::j0f::y0f"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/j1.rs": [
      "math::libm_math::j1::common",
      "math::libm_math::j1::j1",
      "math::libm_math::j1::pone",
      "math::libm_math::j1::qone",
      "math::libm_math::j1::y1"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/j1f.rs": [
      "math::libm_math::j1f::common",
      "math::libm_math::j1f::j1f",
      "math::libm_math::j1f::ponef",
      "math::libm_math::j1f::qonef",
      "math::libm_math::j1f::y1f"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/jn.rs": [
      "math::libm_math::jn::jn",
      "math::libm_math::jn::yn"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/jnf.rs": [
      "math::libm_math::jnf::jnf",
      "math::libm_math::jnf::ynf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/k_cos.rs": [
      "math::libm_math::k_cos::k_cos"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/k_cosf.rs": [
      "math::libm_math::k_cosf::k_cosf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/k_expo2.rs": [
      "math::libm_math::k_expo2::k_expo2"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/k_expo2f.rs": [
      "math::libm_math::k_expo2f::k_expo2f"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/k_sin.rs": [
      "math::libm_math::k_sin::k_sin"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/k_sinf.rs": [
      "math::libm_math::k_sinf::k_sinf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/k_tan.rs": [
      "math::libm_math::k_tan::k_tan",
      "math::libm_math::k_tan::zero_low_word"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/k_tanf.rs": [
      "math::libm_math::k_tanf::k_tanf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/ldexp.rs": [
      "math::libm_math::ldexp::ldexp",
      "math::libm_math::ldexp::ldexpf",
      "math::libm_math::ldexp::ldexpf128",
      "math::libm_math::ldexp::ldexpf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/lgamma.rs": [
      "math::libm_math::lgamma::lgamma"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/lgamma_r.rs": [
      "math::libm_math::lgamma_r::lgamma_r",
      "math::libm_math::lgamma_r::sin_pi"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/lgammaf.rs": [
      "math::libm_math::lgammaf::lgammaf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/lgammaf_r.rs": [
      "math::libm_math::lgammaf_r::lgammaf_r",
      "math::libm_math::lgammaf_r::sin_pi"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/log.rs": [
      "math::libm_math::log::log"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/log10.rs": [
      "math::libm_math::log10::log10"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/log10f.rs": [
      "math::libm_math::log10f::log10f"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/log1p.rs": [
      "math::libm_math::log1p::log1p"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/log1pf.rs": [
      "math::libm_math::log1pf::log1pf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/log2.rs": [
      "math::libm_math::log2::log2"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/log2f.rs": [
      "math::libm_math::log2f::log2f"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/logf.rs": [
      "math::libm_math::logf::logf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/mod.rs": [
      "math::libm_math::combine_words",
      "math::libm_math::get_high_word",
      "math::libm_math::get_low_word",
      "math::libm_math::with_set_high_word",
      "math::libm_math::with_set_low_word"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/modf.rs": [
      "math::libm_math::modf::modf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/modff.rs": [
      "math::libm_math::modff::modff"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/nextafter.rs": [
      "math::libm_math::nextafter::nextafter"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/nextafterf.rs": [
      "math::libm_math::nextafterf::nextafterf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/pow.rs": [
      "math::libm_math::pow::pow"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/powf.rs": [
      "math::libm_math::powf::powf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/rem_pio2.rs": [
      "math::libm_math::rem_pio2::rem_pio2",
      "math::libm_math::rem_pio2::rem_pio2::medium"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/rem_pio2f.rs": [
      "math::libm_math::rem_pio2f::rem_pio2f"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/remainder.rs": [
      "math::libm_math::remainder::remainder"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/remainderf.rs": [
      "math::libm_math::remainderf::remainderf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/remquo.rs": [
      "math::libm_math::remquo::remquo"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/remquof.rs": [
      "math::libm_math::remquof::remquof"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/rint.rs": [
      "math::libm_math::rint::rint",
      "math::libm_math::rint::rintf",
      "math::libm_math::rint::rintf128",
      "math::libm_math::rint::rintf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/round.rs": [
      "math::libm_math::round::round",
      "math::libm_math::round::roundf",
      "math::libm_math::round::roundf128",
      "math::libm_math::round::roundf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/roundeven.rs": [
      "math::libm_math::roundeven::roundeven",
      "math::libm_math::roundeven::roundevenf",
      "math::libm_math::roundeven::roundevenf128",
      "math::libm_math::roundeven::roundevenf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/scalbn.rs": [
      "math::libm_math::scalbn::scalbn",
      "math::libm_math::scalbn::scalbnf",
      "math::libm_math::scalbn::scalbnf128",
      "math::libm_math::scalbn::scalbnf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/sin.rs": [
      "math::libm_math::sin::sin"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/sincos.rs": [
      "math::libm_math::sincos::sincos"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/sincosf.rs": [
      "math::libm_math::sincosf::sincosf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/sinf.rs": [
      "math::libm_math::sinf::sinf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/sinh.rs": [
      "math::libm_math::sinh::sinh"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/sinhf.rs": [
      "math::libm_math::sinhf::sinhf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/sqrt.rs": [
      "math::libm_math::sqrt::sqrt",
      "math::libm_math::sqrt::sqrtf",
      "math::libm_math::sqrt::sqrtf128",
      "math::libm_math::sqrt::sqrtf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/support/big.rs": [
      "math::libm_math::support::big::<impl math::libm_math::support::int_traits::HInt for i128>::widen",
      "math::libm_math::support::big::<impl math::libm_math::support::int_traits::HInt for i128>::widen_hi",
      "math::libm_math::support::big::<impl math::libm_math::support::int_traits::HInt for i128>::widen_mul",
      "math::libm_math::support::big::<impl math::libm_math::support::int_traits::HInt for i128>::zero_widen",
      "math::libm_math::support::big::<impl math::libm_math::support::int_traits::HInt for i128>::zero_widen_mul",
      "math::libm_math::support::big::<impl math::libm_math::support::int_traits::HInt for u128>::widen",
      "math::libm_math::support::big::<impl math::libm_math::support::int_traits::HInt for u128>::widen_hi",
      "math::libm_math::support::big::<impl math::libm_math::support::int_traits::HInt for u128>::widen_mul",
      "math::libm_math::support::big::<impl math::libm_math::support::int_traits::HInt for u128>::zero_widen",
      "math::libm_math::support::big::<impl math::libm_math::support::int_traits::HInt for u128>::zero_widen_mul"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/support/env.rs": [
      "math::libm_math::support::env::Status"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/support/feature_detect.rs": [
      "math::libm_math::arch::x86::fma::fma::initializer",
      "math::libm_math::arch::x86::fma::fmaf::initializer",
      "math::libm_math::support::feature_detect::Flags",
      "math::libm_math::support::feature_detect::Flags::empty",
      "math::libm_math::support::feature_detect::Flags::from_bits"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/support/float_traits.rs": [
      "<f128 as math::libm_math::support::float_traits::DFloat>::narrow",
      "<f128 as math::libm_math::support::float_traits::Float>::abs",
      "<f128 as math::libm_math::support::float_traits::Float>::copysign",
      "<f128 as math::libm_math::support::float_traits::Float>::fma",
      "<f128 as math::libm_math::support::float_traits::Float>::from_bits",
      "<f128 as math::libm_math::support::float_traits::Float>::is_infinite",
      "<f128 as math::libm_math::support::float_traits::Float>::is_nan",
      "<f128 as math::libm_math::support::float_traits::Float>::is_sign_negative",
      "<f128 as math::libm_math::support::float_traits::Float>::normalize",
      "<f128 as math::libm_math::support::float_traits::Float>::to_bits",
      "<f16 as math::libm_math::support::float_traits::Float>::abs",
      "<f16 as math::libm_math::support::float_traits::Float>::copysign",
      "<f16 as math::libm_math::support::float_traits::Float>::fma",
      "<f16 as math::libm_math::support::float_traits::Float>::from_bits",
      "<f16 as math::libm_math::support::float_traits::Float>::is_infinite",
      "<f16 as math::libm_math::support::float_traits::Float>::is_nan",
      "<f16 as math::libm_math::support::float_traits::Float>::is_sign_negative",
      "<f16 as math::libm_math::support::float_traits::Float>::normalize",
      "<f16 as math::libm_math::support::float_traits::Float>::to_bits",
      "<f16 as math::libm_math::support::float_traits::HFloat>::widen",
      "<f32 as math::libm_math::support::float_traits::DFloat>::narrow",
      "<f32 as math::libm_math::support::float_traits::Float>::abs",
      "<f32 as math::libm_math::support::float_traits::Float>::copysign",
      "<f32 as math::libm_math::support::float_traits::Float>::fma",
      "<f32 as math::libm_math::support::float_traits::Float>::from_bits",
      "<f32 as math::libm_math::support::float_traits::Float>::is_infinite",
      "<f32 as math::libm_math::support::float_traits::Float>::is_nan",
      "<f32 as math::libm_math::support::float_traits::Float>::is_sign_negative",
      "<f32 as math::libm_math::support::float_traits::Float>::normalize",
      "<f32 as math::libm_math::support::float_traits::Float>::to_bits",
      "<f32 as math::libm_math::support::float_traits::HFloat>::widen",
      "<f64 as math::libm_math::support::float_traits::DFloat>::narrow",
      "<f64 as math::libm_math::support::float_traits::Float>::abs",
      "<f64 as math::libm_math::support::float_traits::Float>::copysign",
      "<f64 as math::libm_math::support::float_traits::Float>::fma",
      "<f64 as math::libm_math::support::float_traits::Float>::from_bits",
      "<f64 as math::libm_math::support::float_traits::Float>::is_infinite",
      "<f64 as math::libm_math::support::float_traits::Float>::is_nan",
      "<f64 as math::libm_math::support::float_traits::Float>::is_sign_negative",
      "<f64 as math::libm_math::support::float_traits::Float>::normalize",
      "<f64 as math::libm_math::support::float_traits::Float>::to_bits",
      "<f64 as math::libm_math::support::float_traits::HFloat>::widen",
      "math::libm_math::support::float_traits::f32_from_bits",
      "math::libm_math::support::float_traits::f32_to_bits",
      "math::libm_math::support::float_traits::f64_from_bits",
      "math::libm_math::support::float_traits::f64_to_bits"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/support/hex_float.rs": [
      "math::libm_math::support::hex_float::dec_digit",
      "math::libm_math::support::hex_float::hex_digit",
      "math::libm_math::support::hex_float::shr_odd_rounding",
      "math::libm_math::support::hex_float::u128_ilog2"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/support/int_traits.rs": [
      "<i128 as math::libm_math::support::int_traits::CastInto<f128>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<f128>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<f16>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<f16>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<f32>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<f32>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<f64>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<f64>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<i128>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<i128>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<i16>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<i16>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<i32>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<i32>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<i64>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<i64>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<i8>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<i8>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<isize>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<isize>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<u128>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<u128>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<u16>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<u16>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<u32>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<u32>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<u64>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<u64>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<u8>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<u8>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::CastInto<usize>>::cast",
      "<i128 as math::libm_math::support::int_traits::CastInto<usize>>::cast_lossy",
      "<i128 as math::libm_math::support::int_traits::DInt>::hi",
      "<i128 as math::libm_math::support::int_traits::DInt>::lo",
      "<i128 as math::libm_math::support::int_traits::Int>::abs",
      "<i128 as math::libm_math::support::int_traits::Int>::abs_diff",
      "<i128 as math::libm_math::support::int_traits::Int>::checked_add",
      "<i128 as math::libm_math::support::int_traits::Int>::checked_sub",
      "<i128 as math::libm_math::support::int_traits::Int>::from_bool",
      "<i128 as math::libm_math::support::int_traits::Int>::from_unsigned",
      "<i128 as math::libm_math::support::int_traits::Int>::ilog2",
      "<i128 as math::libm_math::support::int_traits::Int>::is_zero",
      "<i128 as math::libm_math::support::int_traits::Int>::leading_zeros",
      "<i128 as math::libm_math::support::int_traits::Int>::logical_shr",
      "<i128 as math::libm_math::support::int_traits::Int>::overflowing_add",
      "<i128 as math::libm_math::support::int_traits::Int>::overflowing_sub",
      "<i128 as math::libm_math::support::int_traits::Int>::rotate_left",
      "<i128 as math::libm_math::support::int_traits::Int>::signed",
      "<i128 as math::libm_math::support::int_traits::Int>::unsigned",
      "<i128 as math::libm_math::support::int_traits::Int>::unsigned_abs",
      "<i128 as math::libm_math::support::int_traits::Int>::wrapping_add",
      "<i128 as math::libm_math::support::int_traits::Int>::wrapping_mul",
      "<i128 as math::libm_math::support::int_traits::Int>::wrapping_neg",
      "<i128 as math::libm_math::support::int_traits::Int>::wrapping_shl",
      "<i128 as math::libm_math::support::int_traits::Int>::wrapping_shr",
      "<i128 as math::libm_math::support::int_traits::Int>::wrapping_sub",
      "<i16 as math::libm_math::support::int_traits::CastInto<f128>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<f128>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<f16>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<f16>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<f32>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<f32>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<f64>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<f64>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<i128>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<i128>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<i16>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<i16>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<i32>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<i32>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<i64>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<i64>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<i8>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<i8>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<isize>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<isize>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<u128>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<u128>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<u16>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<u16>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<u32>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<u32>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<u64>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<u64>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<u8>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<u8>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::CastInto<usize>>::cast",
      "<i16 as math::libm_math::support::int_traits::CastInto<usize>>::cast_lossy",
      "<i16 as math::libm_math::support::int_traits::DInt>::hi",
      "<i16 as math::libm_math::support::int_traits::DInt>::lo",
      "<i16 as math::libm_math::support::int_traits::HInt>::widen",
      "<i16 as math::libm_math::support::int_traits::HInt>::widen_hi",
      "<i16 as math::libm_math::support::int_traits::HInt>::widen_mul",
      "<i16 as math::libm_math::support::int_traits::HInt>::zero_widen",
      "<i16 as math::libm_math::support::int_traits::HInt>::zero_widen_mul",
      "<i16 as math::libm_math::support::int_traits::Int>::abs",
      "<i16 as math::libm_math::support::int_traits::Int>::abs_diff",
      "<i16 as math::libm_math::support::int_traits::Int>::checked_add",
      "<i16 as math::libm_math::support::int_traits::Int>::checked_sub",
      "<i16 as math::libm_math::support::int_traits::Int>::from_bool",
      "<i16 as math::libm_math::support::int_traits::Int>::from_unsigned",
      "<i16 as math::libm_math::support::int_traits::Int>::ilog2",
      "<i16 as math::libm_math::support::int_traits::Int>::is_zero",
      "<i16 as math::libm_math::support::int_traits::Int>::leading_zeros",
      "<i16 as math::libm_math::support::int_traits::Int>::logical_shr",
      "<i16 as math::libm_math::support::int_traits::Int>::overflowing_add",
      "<i16 as math::libm_math::support::int_traits::Int>::overflowing_sub",
      "<i16 as math::libm_math::support::int_traits::Int>::rotate_left",
      "<i16 as math::libm_math::support::int_traits::Int>::signed",
      "<i16 as math::libm_math::support::int_traits::Int>::unsigned",
      "<i16 as math::libm_math::support::int_traits::Int>::unsigned_abs",
      "<i16 as math::libm_math::support::int_traits::Int>::wrapping_add",
      "<i16 as math::libm_math::support::int_traits::Int>::wrapping_mul",
      "<i16 as math::libm_math::support::int_traits::Int>::wrapping_neg",
      "<i16 as math::libm_math::support::int_traits::Int>::wrapping_shl",
      "<i16 as math::libm_math::support::int_traits::Int>::wrapping_shr",
      "<i16 as math::libm_math::support::int_traits::Int>::wrapping_sub",
      "<i32 as math::libm_math::support::int_traits::CastInto<f128>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<f128>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<f16>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<f16>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<f32>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<f32>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<f64>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<f64>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<i128>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<i128>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<i16>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<i16>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<i32>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<i32>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<i64>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<i64>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<i8>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<i8>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<isize>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<isize>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<u128>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<u128>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<u16>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<u16>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<u32>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<u32>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<u64>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<u64>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<u8>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<u8>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::CastInto<usize>>::cast",
      "<i32 as math::libm_math::support::int_traits::CastInto<usize>>::cast_lossy",
      "<i32 as math::libm_math::support::int_traits::DInt>::hi",
      "<i32 as math::libm_math::support::int_traits::DInt>::lo",
      "<i32 as math::libm_math::support::int_traits::HInt>::widen",
      "<i32 as math::libm_math::support::int_traits::HInt>::widen_hi",
      "<i32 as math::libm_math::support::int_traits::HInt>::widen_mul",
      "<i32 as math::libm_math::support::int_traits::HInt>::zero_widen",
      "<i32 as math::libm_math::support::int_traits::HInt>::zero_widen_mul",
      "<i32 as math::libm_math::support::int_traits::Int>::abs",
      "<i32 as math::libm_math::support::int_traits::Int>::abs_diff",
      "<i32 as math::libm_math::support::int_traits::Int>::checked_add",
      "<i32 as math::libm_math::support::int_traits::Int>::checked_sub",
      "<i32 as math::libm_math::support::int_traits::Int>::from_bool",
      "<i32 as math::libm_math::support::int_traits::Int>::from_unsigned",
      "<i32 as math::libm_math::support::int_traits::Int>::ilog2",
      "<i32 as math::libm_math::support::int_traits::Int>::is_zero",
      "<i32 as math::libm_math::support::int_traits::Int>::leading_zeros",
      "<i32 as math::libm_math::support::int_traits::Int>::logical_shr",
      "<i32 as math::libm_math::support::int_traits::Int>::overflowing_add",
      "<i32 as math::libm_math::support::int_traits::Int>::overflowing_sub",
      "<i32 as math::libm_math::support::int_traits::Int>::rotate_left",
      "<i32 as math::libm_math::support::int_traits::Int>::signed",
      "<i32 as math::libm_math::support::int_traits::Int>::unsigned",
      "<i32 as math::libm_math::support::int_traits::Int>::unsigned_abs",
      "<i32 as math::libm_math::support::int_traits::Int>::wrapping_add",
      "<i32 as math::libm_math::support::int_traits::Int>::wrapping_mul",
      "<i32 as math::libm_math::support::int_traits::Int>::wrapping_neg",
      "<i32 as math::libm_math::support::int_traits::Int>::wrapping_shl",
      "<i32 as math::libm_math::support::int_traits::Int>::wrapping_shr",
      "<i32 as math::libm_math::support::int_traits::Int>::wrapping_sub",
      "<i64 as math::libm_math::support::int_traits::CastInto<f128>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<f128>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<f16>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<f16>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<f32>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<f32>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<f64>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<f64>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<i128>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<i128>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<i16>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<i16>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<i32>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<i32>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<i64>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<i64>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<i8>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<i8>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<isize>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<isize>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<u128>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<u128>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<u16>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<u16>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<u32>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<u32>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<u64>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<u64>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<u8>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<u8>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::CastInto<usize>>::cast",
      "<i64 as math::libm_math::support::int_traits::CastInto<usize>>::cast_lossy",
      "<i64 as math::libm_math::support::int_traits::DInt>::hi",
      "<i64 as math::libm_math::support::int_traits::DInt>::lo",
      "<i64 as math::libm_math::support::int_traits::HInt>::widen",
      "<i64 as math::libm_math::support::int_traits::HInt>::widen_hi",
      "<i64 as math::libm_math::support::int_traits::HInt>::widen_mul",
      "<i64 as math::libm_math::support::int_traits::HInt>::zero_widen",
      "<i64 as math::libm_math::support::int_traits::HInt>::zero_widen_mul",
      "<i64 as math::libm_math::support::int_traits::Int>::abs",
      "<i64 as math::libm_math::support::int_traits::Int>::abs_diff",
      "<i64 as math::libm_math::support::int_traits::Int>::checked_add",
      "<i64 as math::libm_math::support::int_traits::Int>::checked_sub",
      "<i64 as math::libm_math::support::int_traits::Int>::from_bool",
      "<i64 as math::libm_math::support::int_traits::Int>::from_unsigned",
      "<i64 as math::libm_math::support::int_traits::Int>::ilog2",
      "<i64 as math::libm_math::support::int_traits::Int>::is_zero",
      "<i64 as math::libm_math::support::int_traits::Int>::leading_zeros",
      "<i64 as math::libm_math::support::int_traits::Int>::logical_shr",
      "<i64 as math::libm_math::support::int_traits::Int>::overflowing_add",
      "<i64 as math::libm_math::support::int_traits::Int>::overflowing_sub",
      "<i64 as math::libm_math::support::int_traits::Int>::rotate_left",
      "<i64 as math::libm_math::support::int_traits::Int>::signed",
      "<i64 as math::libm_math::support::int_traits::Int>::unsigned",
      "<i64 as math::libm_math::support::int_traits::Int>::unsigned_abs",
      "<i64 as math::libm_math::support::int_traits::Int>::wrapping_add",
      "<i64 as math::libm_math::support::int_traits::Int>::wrapping_mul",
      "<i64 as math::libm_math::support::int_traits::Int>::wrapping_neg",
      "<i64 as math::libm_math::support::int_traits::Int>::wrapping_shl",
      "<i64 as math::libm_math::support::int_traits::Int>::wrapping_shr",
      "<i64 as math::libm_math::support::int_traits::Int>::wrapping_sub",
      "<i8 as math::libm_math::support::int_traits::CastInto<f128>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<f128>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<f16>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<f16>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<f32>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<f32>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<f64>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<f64>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<i128>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<i128>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<i16>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<i16>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<i32>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<i32>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<i64>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<i64>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<i8>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<i8>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<isize>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<isize>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<u128>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<u128>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<u16>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<u16>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<u32>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<u32>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<u64>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<u64>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<u8>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<u8>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::CastInto<usize>>::cast",
      "<i8 as math::libm_math::support::int_traits::CastInto<usize>>::cast_lossy",
      "<i8 as math::libm_math::support::int_traits::HInt>::widen",
      "<i8 as math::libm_math::support::int_traits::HInt>::widen_hi",
      "<i8 as math::libm_math::support::int_traits::HInt>::widen_mul",
      "<i8 as math::libm_math::support::int_traits::HInt>::zero_widen",
      "<i8 as math::libm_math::support::int_traits::HInt>::zero_widen_mul",
      "<i8 as math::libm_math::support::int_traits::Int>::abs",
      "<i8 as math::libm_math::support::int_traits::Int>::abs_diff",
      "<i8 as math::libm_math::support::int_traits::Int>::checked_add",
      "<i8 as math::libm_math::support::int_traits::Int>::checked_sub",
      "<i8 as math::libm_math::support::int_traits::Int>::from_bool",
      "<i8 as math::libm_math::support::int_traits::Int>::from_unsigned",
      "<i8 as math::libm_math::support::int_traits::Int>::ilog2",
      "<i8 as math::libm_math::support::int_traits::Int>::is_zero",
      "<i8 as math::libm_math::support::int_traits::Int>::leading_zeros",
      "<i8 as math::libm_math::support::int_traits::Int>::logical_shr",
      "<i8 as math::libm_math::support::int_traits::Int>::overflowing_add",
      "<i8 as math::libm_math::support::int_traits::Int>::overflowing_sub",
      "<i8 as math::libm_math::support::int_traits::Int>::rotate_left",
      "<i8 as math::libm_math::support::int_traits::Int>::signed",
      "<i8 as math::libm_math::support::int_traits::Int>::unsigned",
      "<i8 as math::libm_math::support::int_traits::Int>::unsigned_abs",
      "<i8 as math::libm_math::support::int_traits::Int>::wrapping_add",
      "<i8 as math::libm_math::support::int_traits::Int>::wrapping_mul",
      "<i8 as math::libm_math::support::int_traits::Int>::wrapping_neg",
      "<i8 as math::libm_math::support::int_traits::Int>::wrapping_shl",
      "<i8 as math::libm_math::support::int_traits::Int>::wrapping_shr",
      "<i8 as math::libm_math::support::int_traits::Int>::wrapping_sub",
      "<isize as math::libm_math::support::int_traits::CastInto<i128>>::cast",
      "<isize as math::libm_math::support::int_traits::CastInto<i128>>::cast_lossy",
      "<isize as math::libm_math::support::int_traits::CastInto<i16>>::cast",
      "<isize as math::libm_math::support::int_traits::CastInto<i16>>::cast_lossy",
      "<isize as math::libm_math::support::int_traits::CastInto<i32>>::cast",
      "<isize as math::libm_math::support::int_traits::CastInto<i32>>::cast_lossy",
      "<isize as math::libm_math::support::int_traits::CastInto<i64>>::cast",
      "<isize as math::libm_math::support::int_traits::CastInto<i64>>::cast_lossy",
      "<isize as math::libm_math::support::int_traits::CastInto<i8>>::cast",
      "<isize as math::libm_math::support::int_traits::CastInto<i8>>::cast_lossy",
      "<isize as math::libm_math::support::int_traits::CastInto<isize>>::cast",
      "<isize as math::libm_math::support::int_traits::CastInto<isize>>::cast_lossy",
      "<isize as math::libm_math::support::int_traits::CastInto<u128>>::cast",
      "<isize as math::libm_math::support::int_traits::CastInto<u128>>::cast_lossy",
      "<isize as math::libm_math::support::int_traits::CastInto<u16>>::cast",
      "<isize as math::libm_math::support::int_traits::CastInto<u16>>::cast_lossy",
      "<isize as math::libm_math::support::int_traits::CastInto<u32>>::cast",
      "<isize as math::libm_math::support::int_traits::CastInto<u32>>::cast_lossy",
      "<isize as math::libm_math::support::int_traits::CastInto<u64>>::cast",
      "<isize as math::libm_math::support::int_traits::CastInto<u64>>::cast_lossy",
      "<isize as math::libm_math::support::int_traits::CastInto<u8>>::cast",
      "<isize as math::libm_math::support::int_traits::CastInto<u8>>::cast_lossy",
      "<isize as math::libm_math::support::int_traits::CastInto<usize>>::cast",
      "<isize as math::libm_math::support::int_traits::CastInto<usize>>::cast_lossy",
      "<isize as math::libm_math::support::int_traits::Int>::abs",
      "<isize as math::libm_math::support::int_traits::Int>::abs_diff",
      "<isize as math::libm_math::support::int_traits::Int>::checked_add",
      "<isize as math::libm_math::support::int_traits::Int>::checked_sub",
      "<isize as math::libm_math::support::int_traits::Int>::from_bool",
      "<isize as math::libm_math::support::int_traits::Int>::from_unsigned",
      "<isize as math::libm_math::support::int_traits::Int>::ilog2",
      "<isize as math::libm_math::support::int_traits::Int>::is_zero",
      "<isize as math::libm_math::support::int_traits::Int>::leading_zeros",
      "<isize as math::libm_math::support::int_traits::Int>::logical_shr",
      "<isize as math::libm_math::support::int_traits::Int>::overflowing_add",
      "<isize as math::libm_math::support::int_traits::Int>::overflowing_sub",
      "<isize as math::libm_math::support::int_traits::Int>::rotate_left",
      "<isize as math::libm_math::support::int_traits::Int>::signed",
      "<isize as math::libm_math::support::int_traits::Int>::unsigned",
      "<isize as math::libm_math::support::int_traits::Int>::unsigned_abs",
      "<isize as math::libm_math::support::int_traits::Int>::wrapping_add",
      "<isize as math::libm_math::support::int_traits::Int>::wrapping_mul",
      "<isize as math::libm_math::support::int_traits::Int>::wrapping_neg",
      "<isize as math::libm_math::support::int_traits::Int>::wrapping_shl",
      "<isize as math::libm_math::support::int_traits::Int>::wrapping_shr",
      "<isize as math::libm_math::support::int_traits::Int>::wrapping_sub",
      "<u128 as math::libm_math::support::int_traits::CastInto<i128>>::cast",
      "<u128 as math::libm_math::support::int_traits::CastInto<i128>>::cast_lossy",
      "<u128 as math::libm_math::support::int_traits::CastInto<i16>>::cast",
      "<u128 as math::libm_math::support::int_traits::CastInto<i16>>::cast_lossy",
      "<u128 as math::libm_math::support::int_traits::CastInto<i32>>::cast",
      "<u128 as math::libm_math::support::int_traits::CastInto<i32>>::cast_lossy",
      "<u128 as math::libm_math::support::int_traits::CastInto<i64>>::cast",
      "<u128 as math::libm_math::support::int_traits::CastInto<i64>>::cast_lossy",
      "<u128 as math::libm_math::support::int_traits::CastInto<i8>>::cast",
      "<u128 as math::libm_math::support::int_traits::CastInto<i8>>::cast_lossy",
      "<u128 as math::libm_math::support::int_traits::CastInto<isize>>::cast",
      "<u128 as math::libm_math::support::int_traits::CastInto<isize>>::cast_lossy",
      "<u128 as math::libm_math::support::int_traits::CastInto<u128>>::cast",
      "<u128 as math::libm_math::support::int_traits::CastInto<u128>>::cast_lossy",
      "<u128 as math::libm_math::support::int_traits::CastInto<u16>>::cast",
      "<u128 as math::libm_math::support::int_traits::CastInto<u16>>::cast_lossy",
      "<u128 as math::libm_math::support::int_traits::CastInto<u32>>::cast",
      "<u128 as math::libm_math::support::int_traits::CastInto<u32>>::cast_lossy",
      "<u128 as math::libm_math::support::int_traits::CastInto<u64>>::cast",
      "<u128 as math::libm_math::support::int_traits::CastInto<u64>>::cast_lossy",
      "<u128 as math::libm_math::support::int_traits::CastInto<u8>>::cast",
      "<u128 as math::libm_math::support::int_traits::CastInto<u8>>::cast_lossy",
      "<u128 as math::libm_math::support::int_traits::CastInto<usize>>::cast",
      "<u128 as math::libm_math::support::int_traits::CastInto<usize>>::cast_lossy",
      "<u128 as math::libm_math::support::int_traits::DInt>::hi",
      "<u128 as math::libm_math::support::int_traits::DInt>::lo",
      "<u128 as math::libm_math::support::int_traits::Int>::abs",
      "<u128 as math::libm_math::support::int_traits::Int>::abs_diff",
      "<u128 as math::libm_math::support::int_traits::Int>::checked_add",
      "<u128 as math::libm_math::support::int_traits::Int>::checked_sub",
      "<u128 as math::libm_math::support::int_traits::Int>::from_bool",
      "<u128 as math::libm_math::support::int_traits::Int>::from_unsigned",
      "<u128 as math::libm_math::support::int_traits::Int>::ilog2",
      "<u128 as math::libm_math::support::int_traits::Int>::is_zero",
      "<u128 as math::libm_math::support::int_traits::Int>::leading_zeros",
      "<u128 as math::libm_math::support::int_traits::Int>::logical_shr",
      "<u128 as math::libm_math::support::int_traits::Int>::overflowing_add",
      "<u128 as math::libm_math::support::int_traits::Int>::overflowing_sub",
      "<u128 as math::libm_math::support::int_traits::Int>::rotate_left",
      "<u128 as math::libm_math::support::int_traits::Int>::signed",
      "<u128 as math::libm_math::support::int_traits::Int>::unsigned",
      "<u128 as math::libm_math::support::int_traits::Int>::unsigned_abs",
      "<u128 as math::libm_math::support::int_traits::Int>::wrapping_add",
      "<u128 as math::libm_math::support::int_traits::Int>::wrapping_mul",
      "<u128 as math::libm_math::support::int_traits::Int>::wrapping_neg",
      "<u128 as math::libm_math::support::int_traits::Int>::wrapping_shl",
      "<u128 as math::libm_math::support::int_traits::Int>::wrapping_shr",
      "<u128 as math::libm_math::support::int_traits::Int>::wrapping_sub",
      "<u16 as math::libm_math::support::int_traits::CastInto<i128>>::cast",
      "<u16 as math::libm_math::support::int_traits::CastInto<i128>>::cast_lossy",
      "<u16 as math::libm_math::support::int_traits::CastInto<i16>>::cast",
      "<u16 as math::libm_math::support::int_traits::CastInto<i16>>::cast_lossy",
      "<u16 as math::libm_math::support::int_traits::CastInto<i32>>::cast",
      "<u16 as math::libm_math::support::int_traits::CastInto<i32>>::cast_lossy",
      "<u16 as math::libm_math::support::int_traits::CastInto<i64>>::cast",
      "<u16 as math::libm_math::support::int_traits::CastInto<i64>>::cast_lossy",
      "<u16 as math::libm_math::support::int_traits::CastInto<i8>>::cast",
      "<u16 as math::libm_math::support::int_traits::CastInto<i8>>::cast_lossy",
      "<u16 as math::libm_math::support::int_traits::CastInto<isize>>::cast",
      "<u16 as math::libm_math::support::int_traits::CastInto<isize>>::cast_lossy",
      "<u16 as math::libm_math::support::int_traits::CastInto<u128>>::cast",
      "<u16 as math::libm_math::support::int_traits::CastInto<u128>>::cast_lossy",
      "<u16 as math::libm_math::support::int_traits::CastInto<u16>>::cast",
      "<u16 as math::libm_math::support::int_traits::CastInto<u16>>::cast_lossy",
      "<u16 as math::libm_math::support::int_traits::CastInto<u32>>::cast",
      "<u16 as math::libm_math::support::int_traits::CastInto<u32>>::cast_lossy",
      "<u16 as math::libm_math::support::int_traits::CastInto<u64>>::cast",
      "<u16 as math::libm_math::support::int_traits::CastInto<u64>>::cast_lossy",
      "<u16 as math::libm_math::support::int_traits::CastInto<u8>>::cast",
      "<u16 as math::libm_math::support::int_traits::CastInto<u8>>::cast_lossy",
      "<u16 as math::libm_math::support::int_traits::CastInto<usize>>::cast",
      "<u16 as math::libm_math::support::int_traits::CastInto<usize>>::cast_lossy",
      "<u16 as math::libm_math::support::int_traits::DInt>::hi",
      "<u16 as math::libm_math::support::int_traits::DInt>::lo",
      "<u16 as math::libm_math::support::int_traits::HInt>::widen",
      "<u16 as math::libm_math::support::int_traits::HInt>::widen_hi",
      "<u16 as math::libm_math::support::int_traits::HInt>::widen_mul",
      "<u16 as math::libm_math::support::int_traits::HInt>::zero_widen",
      "<u16 as math::libm_math::support::int_traits::HInt>::zero_widen_mul",
      "<u16 as math::libm_math::support::int_traits::Int>::abs",
      "<u16 as math::libm_math::support::int_traits::Int>::abs_diff",
      "<u16 as math::libm_math::support::int_traits::Int>::checked_add",
      "<u16 as math::libm_math::support::int_traits::Int>::checked_sub",
      "<u16 as math::libm_math::support::int_traits::Int>::from_bool",
      "<u16 as math::libm_math::support::int_traits::Int>::from_unsigned",
      "<u16 as math::libm_math::support::int_traits::Int>::ilog2",
      "<u16 as math::libm_math::support::int_traits::Int>::is_zero",
      "<u16 as math::libm_math::support::int_traits::Int>::leading_zeros",
      "<u16 as math::libm_math::support::int_traits::Int>::logical_shr",
      "<u16 as math::libm_math::support::int_traits::Int>::overflowing_add",
      "<u16 as math::libm_math::support::int_traits::Int>::overflowing_sub",
      "<u16 as math::libm_math::support::int_traits::Int>::rotate_left",
      "<u16 as math::libm_math::support::int_traits::Int>::signed",
      "<u16 as math::libm_math::support::int_traits::Int>::unsigned",
      "<u16 as math::libm_math::support::int_traits::Int>::unsigned_abs",
      "<u16 as math::libm_math::support::int_traits::Int>::wrapping_add",
      "<u16 as math::libm_math::support::int_traits::Int>::wrapping_mul",
      "<u16 as math::libm_math::support::int_traits::Int>::wrapping_neg",
      "<u16 as math::libm_math::support::int_traits::Int>::wrapping_shl",
      "<u16 as math::libm_math::support::int_traits::Int>::wrapping_shr",
      "<u16 as math::libm_math::support::int_traits::Int>::wrapping_sub",
      "<u32 as math::libm_math::support::int_traits::CastInto<i128>>::cast",
      "<u32 as math::libm_math::support::int_traits::CastInto<i128>>::cast_lossy",
      "<u32 as math::libm_math::support::int_traits::CastInto<i16>>::cast",
      "<u32 as math::libm_math::support::int_traits::CastInto<i16>>::cast_lossy",
      "<u32 as math::libm_math::support::int_traits::CastInto<i32>>::cast",
      "<u32 as math::libm_math::support::int_traits::CastInto<i32>>::cast_lossy",
      "<u32 as math::libm_math::support::int_traits::CastInto<i64>>::cast",
      "<u32 as math::libm_math::support::int_traits::CastInto<i64>>::cast_lossy",
      "<u32 as math::libm_math::support::int_traits::CastInto<i8>>::cast",
      "<u32 as math::libm_math::support::int_traits::CastInto<i8>>::cast_lossy",
      "<u32 as math::libm_math::support::int_traits::CastInto<isize>>::cast",
      "<u32 as math::libm_math::support::int_traits::CastInto<isize>>::cast_lossy",
      "<u32 as math::libm_math::support::int_traits::CastInto<u128>>::cast",
      "<u32 as math::libm_math::support::int_traits::CastInto<u128>>::cast_lossy",
      "<u32 as math::libm_math::support::int_traits::CastInto<u16>>::cast",
      "<u32 as math::libm_math::support::int_traits::CastInto<u16>>::cast_lossy",
      "<u32 as math::libm_math::support::int_traits::CastInto<u32>>::cast",
      "<u32 as math::libm_math::support::int_traits::CastInto<u32>>::cast_lossy",
      "<u32 as math::libm_math::support::int_traits::CastInto<u64>>::cast",
      "<u32 as math::libm_math::support::int_traits::CastInto<u64>>::cast_lossy",
      "<u32 as math::libm_math::support::int_traits::CastInto<u8>>::cast",
      "<u32 as math::libm_math::support::int_traits::CastInto<u8>>::cast_lossy",
      "<u32 as math::libm_math::support::int_traits::CastInto<usize>>::cast",
      "<u32 as math::libm_math::support::int_traits::CastInto<usize>>::cast_lossy",
      "<u32 as math::libm_math::support::int_traits::DInt>::hi",
      "<u32 as math::libm_math::support::int_traits::DInt>::lo",
      "<u32 as math::libm_math::support::int_traits::HInt>::widen",
      "<u32 as math::libm_math::support::int_traits::HInt>::widen_hi",
      "<u32 as math::libm_math::support::int_traits::HInt>::widen_mul",
      "<u32 as math::libm_math::support::int_traits::HInt>::zero_widen",
      "<u32 as math::libm_math::support::int_traits::HInt>::zero_widen_mul",
      "<u32 as math::libm_math::support::int_traits::Int>::abs",
      "<u32 as math::libm_math::support::int_traits::Int>::abs_diff",
      "<u32 as math::libm_math::support::int_traits::Int>::checked_add",
      "<u32 as math::libm_math::support::int_traits::Int>::checked_sub",
      "<u32 as math::libm_math::support::int_traits::Int>::from_bool",
      "<u32 as math::libm_math::support::int_traits::Int>::from_unsigned",
      "<u32 as math::libm_math::support::int_traits::Int>::ilog2",
      "<u32 as math::libm_math::support::int_traits::Int>::is_zero",
      "<u32 as math::libm_math::support::int_traits::Int>::leading_zeros",
      "<u32 as math::libm_math::support::int_traits::Int>::logical_shr",
      "<u32 as math::libm_math::support::int_traits::Int>::overflowing_add",
      "<u32 as math::libm_math::support::int_traits::Int>::overflowing_sub",
      "<u32 as math::libm_math::support::int_traits::Int>::rotate_left",
      "<u32 as math::libm_math::support::int_traits::Int>::signed",
      "<u32 as math::libm_math::support::int_traits::Int>::unsigned",
      "<u32 as math::libm_math::support::int_traits::Int>::unsigned_abs",
      "<u32 as math::libm_math::support::int_traits::Int>::wrapping_add",
      "<u32 as math::libm_math::support::int_traits::Int>::wrapping_mul",
      "<u32 as math::libm_math::support::int_traits::Int>::wrapping_neg",
      "<u32 as math::libm_math::support::int_traits::Int>::wrapping_shl",
      "<u32 as math::libm_math::support::int_traits::Int>::wrapping_shr",
      "<u32 as math::libm_math::support::int_traits::Int>::wrapping_sub",
      "<u64 as math::libm_math::support::int_traits::CastInto<i128>>::cast",
      "<u64 as math::libm_math::support::int_traits::CastInto<i128>>::cast_lossy",
      "<u64 as math::libm_math::support::int_traits::CastInto<i16>>::cast",
      "<u64 as math::libm_math::support::int_traits::CastInto<i16>>::cast_lossy",
      "<u64 as math::libm_math::support::int_traits::CastInto<i32>>::cast",
      "<u64 as math::libm_math::support::int_traits::CastInto<i32>>::cast_lossy",
      "<u64 as math::libm_math::support::int_traits::CastInto<i64>>::cast",
      "<u64 as math::libm_math::support::int_traits::CastInto<i64>>::cast_lossy",
      "<u64 as math::libm_math::support::int_traits::CastInto<i8>>::cast",
      "<u64 as math::libm_math::support::int_traits::CastInto<i8>>::cast_lossy",
      "<u64 as math::libm_math::support::int_traits::CastInto<isize>>::cast",
      "<u64 as math::libm_math::support::int_traits::CastInto<isize>>::cast_lossy",
      "<u64 as math::libm_math::support::int_traits::CastInto<u128>>::cast",
      "<u64 as math::libm_math::support::int_traits::CastInto<u128>>::cast_lossy",
      "<u64 as math::libm_math::support::int_traits::CastInto<u16>>::cast",
      "<u64 as math::libm_math::support::int_traits::CastInto<u16>>::cast_lossy",
      "<u64 as math::libm_math::support::int_traits::CastInto<u32>>::cast",
      "<u64 as math::libm_math::support::int_traits::CastInto<u32>>::cast_lossy",
      "<u64 as math::libm_math::support::int_traits::CastInto<u64>>::cast",
      "<u64 as math::libm_math::support::int_traits::CastInto<u64>>::cast_lossy",
      "<u64 as math::libm_math::support::int_traits::CastInto<u8>>::cast",
      "<u64 as math::libm_math::support::int_traits::CastInto<u8>>::cast_lossy",
      "<u64 as math::libm_math::support::int_traits::CastInto<usize>>::cast",
      "<u64 as math::libm_math::support::int_traits::CastInto<usize>>::cast_lossy",
      "<u64 as math::libm_math::support::int_traits::DInt>::hi",
      "<u64 as math::libm_math::support::int_traits::DInt>::lo",
      "<u64 as math::libm_math::support::int_traits::HInt>::widen",
      "<u64 as math::libm_math::support::int_traits::HInt>::widen_hi",
      "<u64 as math::libm_math::support::int_traits::HInt>::widen_mul",
      "<u64 as math::libm_math::support::int_traits::HInt>::zero_widen",
      "<u64 as math::libm_math::support::int_traits::HInt>::zero_widen_mul",
      "<u64 as math::libm_math::support::int_traits::Int>::abs",
      "<u64 as math::libm_math::support::int_traits::Int>::abs_diff",
      "<u64 as math::libm_math::support::int_traits::Int>::checked_add",
      "<u64 as math::libm_math::support::int_traits::Int>::checked_sub",
      "<u64 as math::libm_math::support::int_traits::Int>::from_bool",
      "<u64 as math::libm_math::support::int_traits::Int>::from_unsigned",
      "<u64 as math::libm_math::support::int_traits::Int>::ilog2",
      "<u64 as math::libm_math::support::int_traits::Int>::is_zero",
      "<u64 as math::libm_math::support::int_traits::Int>::leading_zeros",
      "<u64 as math::libm_math::support::int_traits::Int>::logical_shr",
      "<u64 as math::libm_math::support::int_traits::Int>::overflowing_add",
      "<u64 as math::libm_math::support::int_traits::Int>::overflowing_sub",
      "<u64 as math::libm_math::support::int_traits::Int>::rotate_left",
      "<u64 as math::libm_math::support::int_traits::Int>::signed",
      "<u64 as math::libm_math::support::int_traits::Int>::unsigned",
      "<u64 as math::libm_math::support::int_traits::Int>::unsigned_abs",
      "<u64 as math::libm_math::support::int_traits::Int>::wrapping_add",
      "<u64 as math::libm_math::support::int_traits::Int>::wrapping_mul",
      "<u64 as math::libm_math::support::int_traits::Int>::wrapping_neg",
      "<u64 as math::libm_math::support::int_traits::Int>::wrapping_shl",
      "<u64 as math::libm_math::support::int_traits::Int>::wrapping_shr",
      "<u64 as math::libm_math::support::int_traits::Int>::wrapping_sub",
      "<u8 as math::libm_math::support::int_traits::CastInto<i128>>::cast",
      "<u8 as math::libm_math::support::int_traits::CastInto<i128>>::cast_lossy",
      "<u8 as math::libm_math::support::int_traits::CastInto<i16>>::cast",
      "<u8 as math::libm_math::support::int_traits::CastInto<i16>>::cast_lossy",
      "<u8 as math::libm_math::support::int_traits::CastInto<i32>>::cast",
      "<u8 as math::libm_math::support::int_traits::CastInto<i32>>::cast_lossy",
      "<u8 as math::libm_math::support::int_traits::CastInto<i64>>::cast",
      "<u8 as math::libm_math::support::int_traits::CastInto<i64>>::cast_lossy",
      "<u8 as math::libm_math::support::int_traits::CastInto<i8>>::cast",
      "<u8 as math::libm_math::support::int_traits::CastInto<i8>>::cast_lossy",
      "<u8 as math::libm_math::support::int_traits::CastInto<isize>>::cast",
      "<u8 as math::libm_math::support::int_traits::CastInto<isize>>::cast_lossy",
      "<u8 as math::libm_math::support::int_traits::CastInto<u128>>::cast",
      "<u8 as math::libm_math::support::int_traits::CastInto<u128>>::cast_lossy",
      "<u8 as math::libm_math::support::int_traits::CastInto<u16>>::cast",
      "<u8 as math::libm_math::support::int_traits::CastInto<u16>>::cast_lossy",
      "<u8 as math::libm_math::support::int_traits::CastInto<u32>>::cast",
      "<u8 as math::libm_math::support::int_traits::CastInto<u32>>::cast_lossy",
      "<u8 as math::libm_math::support::int_traits::CastInto<u64>>::cast",
      "<u8 as math::libm_math::support::int_traits::CastInto<u64>>::cast_lossy",
      "<u8 as math::libm_math::support::int_traits::CastInto<u8>>::cast",
      "<u8 as math::libm_math::support::int_traits::CastInto<u8>>::cast_lossy",
      "<u8 as math::libm_math::support::int_traits::CastInto<usize>>::cast",
      "<u8 as math::libm_math::support::int_traits::CastInto<usize>>::cast_lossy",
      "<u8 as math::libm_math::support::int_traits::HInt>::widen",
      "<u8 as math::libm_math::support::int_traits::HInt>::widen_hi",
      "<u8 as math::libm_math::support::int_traits::HInt>::widen_mul",
      "<u8 as math::libm_math::support::int_traits::HInt>::zero_widen",
      "<u8 as math::libm_math::support::int_traits::HInt>::zero_widen_mul",
      "<u8 as math::libm_math::support::int_traits::Int>::abs",
      "<u8 as math::libm_math::support::int_traits::Int>::abs_diff",
      "<u8 as math::libm_math::support::int_traits::Int>::checked_add",
      "<u8 as math::libm_math::support::int_traits::Int>::checked_sub",
      "<u8 as math::libm_math::support::int_traits::Int>::from_bool",
      "<u8 as math::libm_math::support::int_traits::Int>::from_unsigned",
      "<u8 as math::libm_math::support::int_traits::Int>::ilog2",
      "<u8 as math::libm_math::support::int_traits::Int>::is_zero",
      "<u8 as math::libm_math::support::int_traits::Int>::leading_zeros",
      "<u8 as math::libm_math::support::int_traits::Int>::logical_shr",
      "<u8 as math::libm_math::support::int_traits::Int>::overflowing_add",
      "<u8 as math::libm_math::support::int_traits::Int>::overflowing_sub",
      "<u8 as math::libm_math::support::int_traits::Int>::rotate_left",
      "<u8 as math::libm_math::support::int_traits::Int>::signed",
      "<u8 as math::libm_math::support::int_traits::Int>::unsigned",
      "<u8 as math::libm_math::support::int_traits::Int>::unsigned_abs",
      "<u8 as math::libm_math::support::int_traits::Int>::wrapping_add",
      "<u8 as math::libm_math::support::int_traits::Int>::wrapping_mul",
      "<u8 as math::libm_math::support::int_traits::Int>::wrapping_neg",
      "<u8 as math::libm_math::support::int_traits::Int>::wrapping_shl",
      "<u8 as math::libm_math::support::int_traits::Int>::wrapping_shr",
      "<u8 as math::libm_math::support::int_traits::Int>::wrapping_sub",
      "<usize as math::libm_math::support::int_traits::CastInto<i128>>::cast",
      "<usize as math::libm_math::support::int_traits::CastInto<i128>>::cast_lossy",
      "<usize as math::libm_math::support::int_traits::CastInto<i16>>::cast",
      "<usize as math::libm_math::support::int_traits::CastInto<i16>>::cast_lossy",
      "<usize as math::libm_math::support::int_traits::CastInto<i32>>::cast",
      "<usize as math::libm_math::support::int_traits::CastInto<i32>>::cast_lossy",
      "<usize as math::libm_math::support::int_traits::CastInto<i64>>::cast",
      "<usize as math::libm_math::support::int_traits::CastInto<i64>>::cast_lossy",
      "<usize as math::libm_math::support::int_traits::CastInto<i8>>::cast",
      "<usize as math::libm_math::support::int_traits::CastInto<i8>>::cast_lossy",
      "<usize as math::libm_math::support::int_traits::CastInto<isize>>::cast",
      "<usize as math::libm_math::support::int_traits::CastInto<isize>>::cast_lossy",
      "<usize as math::libm_math::support::int_traits::CastInto<u128>>::cast",
      "<usize as math::libm_math::support::int_traits::CastInto<u128>>::cast_lossy",
      "<usize as math::libm_math::support::int_traits::CastInto<u16>>::cast",
      "<usize as math::libm_math::support::int_traits::CastInto<u16>>::cast_lossy",
      "<usize as math::libm_math::support::int_traits::CastInto<u32>>::cast",
      "<usize as math::libm_math::support::int_traits::CastInto<u32>>::cast_lossy",
      "<usize as math::libm_math::support::int_traits::CastInto<u64>>::cast",
      "<usize as math::libm_math::support::int_traits::CastInto<u64>>::cast_lossy",
      "<usize as math::libm_math::support::int_traits::CastInto<u8>>::cast",
      "<usize as math::libm_math::support::int_traits::CastInto<u8>>::cast_lossy",
      "<usize as math::libm_math::support::int_traits::CastInto<usize>>::cast",
      "<usize as math::libm_math::support::int_traits::CastInto<usize>>::cast_lossy",
      "<usize as math::libm_math::support::int_traits::Int>::abs",
      "<usize as math::libm_math::support::int_traits::Int>::abs_diff",
      "<usize as math::libm_math::support::int_traits::Int>::checked_add",
      "<usize as math::libm_math::support::int_traits::Int>::checked_sub",
      "<usize as math::libm_math::support::int_traits::Int>::from_bool",
      "<usize as math::libm_math::support::int_traits::Int>::from_unsigned",
      "<usize as math::libm_math::support::int_traits::Int>::ilog2",
      "<usize as math::libm_math::support::int_traits::Int>::is_zero",
      "<usize as math::libm_math::support::int_traits::Int>::leading_zeros",
      "<usize as math::libm_math::support::int_traits::Int>::logical_shr",
      "<usize as math::libm_math::support::int_traits::Int>::overflowing_add",
      "<usize as math::libm_math::support::int_traits::Int>::overflowing_sub",
      "<usize as math::libm_math::support::int_traits::Int>::rotate_left",
      "<usize as math::libm_math::support::int_traits::Int>::signed",
      "<usize as math::libm_math::support::int_traits::Int>::unsigned",
      "<usize as math::libm_math::support::int_traits::Int>::unsigned_abs",
      "<usize as math::libm_math::support::int_traits::Int>::wrapping_add",
      "<usize as math::libm_math::support::int_traits::Int>::wrapping_mul",
      "<usize as math::libm_math::support::int_traits::Int>::wrapping_neg",
      "<usize as math::libm_math::support::int_traits::Int>::wrapping_shl",
      "<usize as math::libm_math::support::int_traits::Int>::wrapping_shr",
      "<usize as math::libm_math::support::int_traits::Int>::wrapping_sub"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/support/mod.rs": [
      "math::libm_math::support::cold_path"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/tan.rs": [
      "math::libm_math::tan::tan"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/tanf.rs": [
      "math::libm_math::tanf::tanf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/tanh.rs": [
      "math::libm_math::tanh::tanh"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/tanhf.rs": [
      "math::libm_math::tanhf::tanhf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/tgamma.rs": [
      "math::libm_math::tgamma::s",
      "math::libm_math::tgamma::sinpi",
      "math::libm_math::tgamma::tgamma"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/tgammaf.rs": [
      "math::libm_math::tgammaf::tgammaf"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/math/../../../libm/src/math/trunc.rs": [
      "math::libm_math::trunc::trunc",
      "math::libm_math::trunc::truncf",
      "math::libm_math::trunc::truncf128",
      "math::libm_math::trunc::truncf16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/compiler-builtins/compiler-builtins/src/probestack.rs": [
      "probestack::__rust_probestack"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../portable-simd/crates/core_simd/src/masks.rs": [
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for i16>::eq",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for i16>::max_unsigned",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for i16>::to_usize",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for i32>::eq",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for i32>::max_unsigned",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for i32>::to_usize",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for i64>::eq",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for i64>::max_unsigned",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for i64>::to_usize",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for i8>::eq",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for i8>::max_unsigned",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for i8>::to_usize",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for isize>::eq",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for isize>::max_unsigned",
      "core_simd::masks::<impl core_simd::masks::sealed::Sealed for isize>::to_usize"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../portable-simd/crates/core_simd/src/masks/full_masks.rs": [
      "<u16 as core_simd::masks::mask_impl::ReverseBits>::reverse_bits",
      "<u32 as core_simd::masks::mask_impl::ReverseBits>::reverse_bits",
      "<u64 as core_simd::masks::mask_impl::ReverseBits>::reverse_bits",
      "<u8 as core_simd::masks::mask_impl::ReverseBits>::reverse_bits"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../portable-simd/crates/core_simd/src/swizzle_dyn.rs": [
      "core_simd::swizzle_dyn::avx2_pshufb"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../portable-simd/crates/core_simd/src/to_bytes.rs": [
      "<core_simd::vector::Simd<f32, 16> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<f32, 16> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<f32, 16> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<f32, 16> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<f32, 16> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<f32, 16> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<f32, 1> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<f32, 1> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<f32, 1> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<f32, 1> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<f32, 1> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<f32, 1> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<f32, 2> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<f32, 2> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<f32, 2> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<f32, 2> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<f32, 2> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<f32, 2> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<f32, 4> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<f32, 4> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<f32, 4> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<f32, 4> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<f32, 4> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<f32, 4> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<f32, 8> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<f32, 8> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<f32, 8> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<f32, 8> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<f32, 8> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<f32, 8> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<f64, 1> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<f64, 1> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<f64, 1> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<f64, 1> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<f64, 1> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<f64, 1> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<f64, 2> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<f64, 2> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<f64, 2> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<f64, 2> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<f64, 2> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<f64, 2> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<f64, 4> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<f64, 4> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<f64, 4> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<f64, 4> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<f64, 4> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<f64, 4> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<f64, 8> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<f64, 8> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<f64, 8> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<f64, 8> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<f64, 8> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<f64, 8> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i16, 16> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i16, 16> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i16, 16> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i16, 16> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i16, 16> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i16, 16> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i16, 1> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i16, 1> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i16, 1> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i16, 1> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i16, 1> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i16, 1> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i16, 2> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i16, 2> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i16, 2> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i16, 2> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i16, 2> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i16, 2> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i16, 32> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i16, 32> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i16, 32> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i16, 32> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i16, 32> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i16, 32> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i16, 4> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i16, 4> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i16, 4> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i16, 4> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i16, 4> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i16, 4> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i16, 8> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i16, 8> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i16, 8> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i16, 8> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i16, 8> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i16, 8> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i32, 16> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i32, 16> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i32, 16> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i32, 16> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i32, 16> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i32, 16> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i32, 1> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i32, 1> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i32, 1> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i32, 1> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i32, 1> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i32, 1> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i32, 2> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i32, 2> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i32, 2> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i32, 2> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i32, 2> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i32, 2> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i32, 4> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i32, 4> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i32, 4> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i32, 4> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i32, 4> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i32, 4> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i32, 8> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i32, 8> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i32, 8> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i32, 8> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i32, 8> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i32, 8> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i64, 1> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i64, 1> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i64, 1> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i64, 1> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i64, 1> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i64, 1> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i64, 2> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i64, 2> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i64, 2> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i64, 2> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i64, 2> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i64, 2> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i64, 4> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i64, 4> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i64, 4> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i64, 4> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i64, 4> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i64, 4> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i64, 8> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i64, 8> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i64, 8> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i64, 8> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i64, 8> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i64, 8> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i8, 16> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i8, 16> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i8, 16> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i8, 16> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i8, 16> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i8, 16> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i8, 1> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i8, 1> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i8, 1> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i8, 1> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i8, 1> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i8, 1> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i8, 2> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i8, 2> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i8, 2> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i8, 2> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i8, 2> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i8, 2> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i8, 32> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i8, 32> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i8, 32> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i8, 32> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i8, 32> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i8, 32> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i8, 4> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i8, 4> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i8, 4> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i8, 4> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i8, 4> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i8, 4> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i8, 64> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i8, 64> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i8, 64> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i8, 64> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i8, 64> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i8, 64> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<i8, 8> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<i8, 8> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<i8, 8> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<i8, 8> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<i8, 8> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<i8, 8> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<isize, 1> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<isize, 1> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<isize, 1> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<isize, 1> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<isize, 1> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<isize, 1> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<isize, 2> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<isize, 2> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<isize, 2> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<isize, 2> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<isize, 2> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<isize, 2> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<isize, 4> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<isize, 4> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<isize, 4> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<isize, 4> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<isize, 4> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<isize, 4> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<isize, 8> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<isize, 8> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<isize, 8> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<isize, 8> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<isize, 8> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<isize, 8> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u16, 16> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u16, 16> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u16, 16> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u16, 16> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u16, 16> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u16, 16> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u16, 1> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u16, 1> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u16, 1> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u16, 1> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u16, 1> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u16, 1> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u16, 2> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u16, 2> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u16, 2> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u16, 2> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u16, 2> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u16, 2> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u16, 32> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u16, 32> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u16, 32> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u16, 32> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u16, 32> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u16, 32> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u16, 4> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u16, 4> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u16, 4> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u16, 4> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u16, 4> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u16, 4> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u16, 8> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u16, 8> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u16, 8> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u16, 8> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u16, 8> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u16, 8> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u32, 16> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u32, 16> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u32, 16> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u32, 16> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u32, 16> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u32, 16> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u32, 1> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u32, 1> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u32, 1> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u32, 1> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u32, 1> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u32, 1> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u32, 2> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u32, 2> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u32, 2> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u32, 2> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u32, 2> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u32, 2> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u32, 4> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u32, 4> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u32, 4> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u32, 4> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u32, 4> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u32, 4> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u32, 8> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u32, 8> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u32, 8> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u32, 8> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u32, 8> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u32, 8> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u64, 1> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u64, 1> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u64, 1> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u64, 1> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u64, 1> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u64, 1> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u64, 2> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u64, 2> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u64, 2> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u64, 2> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u64, 2> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u64, 2> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u64, 4> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u64, 4> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u64, 4> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u64, 4> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u64, 4> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u64, 4> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u64, 8> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u64, 8> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u64, 8> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u64, 8> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u64, 8> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u64, 8> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u8, 16> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u8, 16> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u8, 16> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u8, 16> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u8, 16> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u8, 16> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u8, 1> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u8, 1> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u8, 1> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u8, 1> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u8, 1> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u8, 1> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u8, 2> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u8, 2> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u8, 2> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u8, 2> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u8, 2> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u8, 2> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u8, 32> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u8, 32> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u8, 32> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u8, 32> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u8, 32> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u8, 32> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u8, 4> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u8, 4> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u8, 4> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u8, 4> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u8, 4> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u8, 4> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u8, 64> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u8, 64> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u8, 64> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u8, 64> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u8, 64> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u8, 64> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<u8, 8> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<u8, 8> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<u8, 8> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<u8, 8> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<u8, 8> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<u8, 8> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<usize, 1> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<usize, 1> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<usize, 1> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<usize, 1> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<usize, 1> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<usize, 1> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<usize, 2> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<usize, 2> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<usize, 2> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<usize, 2> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<usize, 2> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<usize, 2> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<usize, 4> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<usize, 4> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<usize, 4> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<usize, 4> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<usize, 4> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<usize, 4> as core_simd::to_bytes::ToBytes>::to_ne_bytes",
      "<core_simd::vector::Simd<usize, 8> as core_simd::to_bytes::ToBytes>::from_be_bytes",
      "<core_simd::vector::Simd<usize, 8> as core_simd::to_bytes::ToBytes>::from_le_bytes",
      "<core_simd::vector::Simd<usize, 8> as core_simd::to_bytes::ToBytes>::from_ne_bytes",
      "<core_simd::vector::Simd<usize, 8> as core_simd::to_bytes::ToBytes>::to_be_bytes",
      "<core_simd::vector::Simd<usize, 8> as core_simd::to_bytes::ToBytes>::to_le_bytes",
      "<core_simd::vector::Simd<usize, 8> as core_simd::to_bytes::ToBytes>::to_ne_bytes"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../portable-simd/crates/core_simd/src/vendor.rs": [
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<f32, 16>> for core_arch::x86::__m512>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<f32, 4>> for core_arch::x86::__m128>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<f32, 8>> for core_arch::x86::__m256>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<f64, 2>> for core_arch::x86::__m128d>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<f64, 4>> for core_arch::x86::__m256d>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<f64, 8>> for core_arch::x86::__m512d>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<i16, 16>> for core_arch::x86::__m256i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<i16, 32>> for core_arch::x86::__m512i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<i16, 8>> for core_arch::x86::__m128i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<i32, 16>> for core_arch::x86::__m512i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<i32, 4>> for core_arch::x86::__m128i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<i32, 8>> for core_arch::x86::__m256i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<i64, 2>> for core_arch::x86::__m128i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<i64, 4>> for core_arch::x86::__m256i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<i64, 8>> for core_arch::x86::__m512i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<i8, 16>> for core_arch::x86::__m128i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<i8, 32>> for core_arch::x86::__m256i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<i8, 64>> for core_arch::x86::__m512i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<u16, 16>> for core_arch::x86::__m256i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<u16, 32>> for core_arch::x86::__m512i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<u16, 8>> for core_arch::x86::__m128i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<u32, 16>> for core_arch::x86::__m512i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<u32, 4>> for core_arch::x86::__m128i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<u32, 8>> for core_arch::x86::__m256i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<u64, 2>> for core_arch::x86::__m128i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<u64, 4>> for core_arch::x86::__m256i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<u64, 8>> for core_arch::x86::__m512i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<u8, 16>> for core_arch::x86::__m128i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<u8, 32>> for core_arch::x86::__m256i>::from",
      "core_simd::vendor::x86::<impl convert::From<core_simd::vector::Simd<u8, 64>> for core_arch::x86::__m512i>::from",
      "core_simd::vendor::x86::p64::<impl convert::From<core_simd::vector::Simd<isize, 2>> for core_arch::x86::__m128i>::from",
      "core_simd::vendor::x86::p64::<impl convert::From<core_simd::vector::Simd<isize, 4>> for core_arch::x86::__m256i>::from",
      "core_simd::vendor::x86::p64::<impl convert::From<core_simd::vector::Simd<isize, 8>> for core_arch::x86::__m512i>::from",
      "core_simd::vendor::x86::p64::<impl convert::From<core_simd::vector::Simd<usize, 2>> for core_arch::x86::__m128i>::from",
      "core_simd::vendor::x86::p64::<impl convert::From<core_simd::vector::Simd<usize, 4>> for core_arch::x86::__m256i>::from",
      "core_simd::vendor::x86::p64::<impl convert::From<core_simd::vector::Simd<usize, 8>> for core_arch::x86::__m512i>::from"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/macros.rs": [
      "core_arch::x86::__m128",
      "core_arch::x86::__m128::splat",
      "core_arch::x86::__m128::splat::JustOne",
      "core_arch::x86::__m128bh",
      "core_arch::x86::__m128bh::splat",
      "core_arch::x86::__m128bh::splat::JustOne",
      "core_arch::x86::__m128d",
      "core_arch::x86::__m128d::splat",
      "core_arch::x86::__m128d::splat::JustOne",
      "core_arch::x86::__m128h",
      "core_arch::x86::__m128h::splat",
      "core_arch::x86::__m128h::splat::JustOne",
      "core_arch::x86::__m128i",
      "core_arch::x86::__m128i::splat",
      "core_arch::x86::__m128i::splat::JustOne",
      "core_arch::x86::__m256",
      "core_arch::x86::__m256::splat",
      "core_arch::x86::__m256::splat::JustOne",
      "core_arch::x86::__m256bh",
      "core_arch::x86::__m256bh::splat",
      "core_arch::x86::__m256bh::splat::JustOne",
      "core_arch::x86::__m256d",
      "core_arch::x86::__m256d::splat",
      "core_arch::x86::__m256d::splat::JustOne",
      "core_arch::x86::__m256h",
      "core_arch::x86::__m256h::splat",
      "core_arch::x86::__m256h::splat::JustOne",
      "core_arch::x86::__m256i",
      "core_arch::x86::__m256i::splat",
      "core_arch::x86::__m256i::splat::JustOne",
      "core_arch::x86::__m512",
      "core_arch::x86::__m512::splat",
      "core_arch::x86::__m512::splat::JustOne",
      "core_arch::x86::__m512bh",
      "core_arch::x86::__m512bh::splat",
      "core_arch::x86::__m512bh::splat::JustOne",
      "core_arch::x86::__m512d",
      "core_arch::x86::__m512d::splat",
      "core_arch::x86::__m512d::splat::JustOne",
      "core_arch::x86::__m512h",
      "core_arch::x86::__m512h::splat",
      "core_arch::x86::__m512h::splat::JustOne",
      "core_arch::x86::__m512i",
      "core_arch::x86::__m512i::splat",
      "core_arch::x86::__m512i::splat::JustOne"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/simd.rs": [
      "core_arch::simd::f16x16",
      "core_arch::simd::f16x16::from_array",
      "core_arch::simd::f16x16::new",
      "core_arch::simd::f16x16::splat",
      "core_arch::simd::f16x16::splat::JustOne",
      "core_arch::simd::f16x32",
      "core_arch::simd::f16x32::from_array",
      "core_arch::simd::f16x32::new",
      "core_arch::simd::f16x32::splat",
      "core_arch::simd::f16x32::splat::JustOne",
      "core_arch::simd::f16x4",
      "core_arch::simd::f16x4::from_array",
      "core_arch::simd::f16x4::new",
      "core_arch::simd::f16x4::splat",
      "core_arch::simd::f16x4::splat::JustOne",
      "core_arch::simd::f16x8",
      "core_arch::simd::f16x8::from_array",
      "core_arch::simd::f16x8::new",
      "core_arch::simd::f16x8::splat",
      "core_arch::simd::f16x8::splat::JustOne",
      "core_arch::simd::f32x16",
      "core_arch::simd::f32x16::from_array",
      "core_arch::simd::f32x16::new",
      "core_arch::simd::f32x16::splat",
      "core_arch::simd::f32x16::splat::JustOne",
      "core_arch::simd::f32x2",
      "core_arch::simd::f32x2::from_array",
      "core_arch::simd::f32x2::new",
      "core_arch::simd::f32x2::splat",
      "core_arch::simd::f32x2::splat::JustOne",
      "core_arch::simd::f32x4",
      "core_arch::simd::f32x4::from_array",
      "core_arch::simd::f32x4::new",
      "core_arch::simd::f32x4::splat",
      "core_arch::simd::f32x4::splat::JustOne",
      "core_arch::simd::f32x8",
      "core_arch::simd::f32x8::from_array",
      "core_arch::simd::f32x8::new",
      "core_arch::simd::f32x8::splat",
      "core_arch::simd::f32x8::splat::JustOne",
      "core_arch::simd::f64x1",
      "core_arch::simd::f64x1::from_array",
      "core_arch::simd::f64x1::new",
      "core_arch::simd::f64x1::splat",
      "core_arch::simd::f64x1::splat::JustOne",
      "core_arch::simd::f64x2",
      "core_arch::simd::f64x2::from_array",
      "core_arch::simd::f64x2::new",
      "core_arch::simd::f64x2::splat",
      "core_arch::simd::f64x2::splat::JustOne",
      "core_arch::simd::f64x4",
      "core_arch::simd::f64x4::from_array",
      "core_arch::simd::f64x4::new",
      "core_arch::simd::f64x4::splat",
      "core_arch::simd::f64x4::splat::JustOne",
      "core_arch::simd::f64x8",
      "core_arch::simd::f64x8::from_array",
      "core_arch::simd::f64x8::new",
      "core_arch::simd::f64x8::splat",
      "core_arch::simd::f64x8::splat::JustOne",
      "core_arch::simd::i16x16",
      "core_arch::simd::i16x16::from_array",
      "core_arch::simd::i16x16::new",
      "core_arch::simd::i16x16::splat",
      "core_arch::simd::i16x16::splat::JustOne",
      "core_arch::simd::i16x2",
      "core_arch::simd::i16x2::from_array",
      "core_arch::simd::i16x2::new",
      "core_arch::simd::i16x2::splat",
      "core_arch::simd::i16x2::splat::JustOne",
      "core_arch::simd::i16x32",
      "core_arch::simd::i16x32::from_array",
      "core_arch::simd::i16x32::new",
      "core_arch::simd::i16x32::splat",
      "core_arch::simd::i16x32::splat::JustOne",
      "core_arch::simd::i16x4",
      "core_arch::simd::i16x4::from_array",
      "core_arch::simd::i16x4::new",
      "core_arch::simd::i16x4::splat",
      "core_arch::simd::i16x4::splat::JustOne",
      "core_arch::simd::i16x8",
      "core_arch::simd::i16x8::from_array",
      "core_arch::simd::i16x8::new",
      "core_arch::simd::i16x8::splat",
      "core_arch::simd::i16x8::splat::JustOne",
      "core_arch::simd::i32x16",
      "core_arch::simd::i32x16::from_array",
      "core_arch::simd::i32x16::new",
      "core_arch::simd::i32x16::splat",
      "core_arch::simd::i32x16::splat::JustOne",
      "core_arch::simd::i32x2",
      "core_arch::simd::i32x2::from_array",
      "core_arch::simd::i32x2::new",
      "core_arch::simd::i32x2::splat",
      "core_arch::simd::i32x2::splat::JustOne",
      "core_arch::simd::i32x32",
      "core_arch::simd::i32x32::from_array",
      "core_arch::simd::i32x32::new",
      "core_arch::simd::i32x32::splat",
      "core_arch::simd::i32x32::splat::JustOne",
      "core_arch::simd::i32x4",
      "core_arch::simd::i32x4::from_array",
      "core_arch::simd::i32x4::new",
      "core_arch::simd::i32x4::splat",
      "core_arch::simd::i32x4::splat::JustOne",
      "core_arch::simd::i32x8",
      "core_arch::simd::i32x8::from_array",
      "core_arch::simd::i32x8::new",
      "core_arch::simd::i32x8::splat",
      "core_arch::simd::i32x8::splat::JustOne",
      "core_arch::simd::i64x1",
      "core_arch::simd::i64x1::from_array",
      "core_arch::simd::i64x1::new",
      "core_arch::simd::i64x1::splat",
      "core_arch::simd::i64x1::splat::JustOne",
      "core_arch::simd::i64x2",
      "core_arch::simd::i64x2::from_array",
      "core_arch::simd::i64x2::new",
      "core_arch::simd::i64x2::splat",
      "core_arch::simd::i64x2::splat::JustOne",
      "core_arch::simd::i64x4",
      "core_arch::simd::i64x4::from_array",
      "core_arch::simd::i64x4::new",
      "core_arch::simd::i64x4::splat",
      "core_arch::simd::i64x4::splat::JustOne",
      "core_arch::simd::i64x8",
      "core_arch::simd::i64x8::from_array",
      "core_arch::simd::i64x8::new",
      "core_arch::simd::i64x8::splat",
      "core_arch::simd::i64x8::splat::JustOne",
      "core_arch::simd::i8x16",
      "core_arch::simd::i8x16::from_array",
      "core_arch::simd::i8x16::new",
      "core_arch::simd::i8x16::splat",
      "core_arch::simd::i8x16::splat::JustOne",
      "core_arch::simd::i8x2",
      "core_arch::simd::i8x2::from_array",
      "core_arch::simd::i8x2::new",
      "core_arch::simd::i8x2::splat",
      "core_arch::simd::i8x2::splat::JustOne",
      "core_arch::simd::i8x32",
      "core_arch::simd::i8x32::from_array",
      "core_arch::simd::i8x32::new",
      "core_arch::simd::i8x32::splat",
      "core_arch::simd::i8x32::splat::JustOne",
      "core_arch::simd::i8x4",
      "core_arch::simd::i8x4::from_array",
      "core_arch::simd::i8x4::new",
      "core_arch::simd::i8x4::splat",
      "core_arch::simd::i8x4::splat::JustOne",
      "core_arch::simd::i8x64",
      "core_arch::simd::i8x64::from_array",
      "core_arch::simd::i8x64::new",
      "core_arch::simd::i8x64::splat",
      "core_arch::simd::i8x64::splat::JustOne",
      "core_arch::simd::i8x8",
      "core_arch::simd::i8x8::from_array",
      "core_arch::simd::i8x8::new",
      "core_arch::simd::i8x8::splat",
      "core_arch::simd::i8x8::splat::JustOne",
      "core_arch::simd::m16x16",
      "core_arch::simd::m16x16::bool_to_internal",
      "core_arch::simd::m16x16::new",
      "core_arch::simd::m16x16::splat",
      "core_arch::simd::m16x16::splat::JustOne",
      "core_arch::simd::m16x8",
      "core_arch::simd::m16x8::bool_to_internal",
      "core_arch::simd::m16x8::new",
      "core_arch::simd::m16x8::splat",
      "core_arch::simd::m16x8::splat::JustOne",
      "core_arch::simd::m32x4",
      "core_arch::simd::m32x4::bool_to_internal",
      "core_arch::simd::m32x4::new",
      "core_arch::simd::m32x4::splat",
      "core_arch::simd::m32x4::splat::JustOne",
      "core_arch::simd::m32x8",
      "core_arch::simd::m32x8::bool_to_internal",
      "core_arch::simd::m32x8::new",
      "core_arch::simd::m32x8::splat",
      "core_arch::simd::m32x8::splat::JustOne",
      "core_arch::simd::m64x2",
      "core_arch::simd::m64x2::bool_to_internal",
      "core_arch::simd::m64x2::new",
      "core_arch::simd::m64x2::splat",
      "core_arch::simd::m64x2::splat::JustOne",
      "core_arch::simd::m8x16",
      "core_arch::simd::m8x16::bool_to_internal",
      "core_arch::simd::m8x16::new",
      "core_arch::simd::m8x16::splat",
      "core_arch::simd::m8x16::splat::JustOne",
      "core_arch::simd::m8x32",
      "core_arch::simd::m8x32::bool_to_internal",
      "core_arch::simd::m8x32::new",
      "core_arch::simd::m8x32::splat",
      "core_arch::simd::m8x32::splat::JustOne",
      "core_arch::simd::u16x16",
      "core_arch::simd::u16x16::from_array",
      "core_arch::simd::u16x16::new",
      "core_arch::simd::u16x16::splat",
      "core_arch::simd::u16x16::splat::JustOne",
      "core_arch::simd::u16x2",
      "core_arch::simd::u16x2::from_array",
      "core_arch::simd::u16x2::new",
      "core_arch::simd::u16x2::splat",
      "core_arch::simd::u16x2::splat::JustOne",
      "core_arch::simd::u16x32",
      "core_arch::simd::u16x32::from_array",
      "core_arch::simd::u16x32::new",
      "core_arch::simd::u16x32::splat",
      "core_arch::simd::u16x32::splat::JustOne",
      "core_arch::simd::u16x4",
      "core_arch::simd::u16x4::from_array",
      "core_arch::simd::u16x4::new",
      "core_arch::simd::u16x4::splat",
      "core_arch::simd::u16x4::splat::JustOne",
      "core_arch::simd::u16x64",
      "core_arch::simd::u16x64::from_array",
      "core_arch::simd::u16x64::new",
      "core_arch::simd::u16x64::splat",
      "core_arch::simd::u16x64::splat::JustOne",
      "core_arch::simd::u16x8",
      "core_arch::simd::u16x8::from_array",
      "core_arch::simd::u16x8::new",
      "core_arch::simd::u16x8::splat",
      "core_arch::simd::u16x8::splat::JustOne",
      "core_arch::simd::u32x16",
      "core_arch::simd::u32x16::from_array",
      "core_arch::simd::u32x16::new",
      "core_arch::simd::u32x16::splat",
      "core_arch::simd::u32x16::splat::JustOne",
      "core_arch::simd::u32x2",
      "core_arch::simd::u32x2::from_array",
      "core_arch::simd::u32x2::new",
      "core_arch::simd::u32x2::splat",
      "core_arch::simd::u32x2::splat::JustOne",
      "core_arch::simd::u32x32",
      "core_arch::simd::u32x32::from_array",
      "core_arch::simd::u32x32::new",
      "core_arch::simd::u32x32::splat",
      "core_arch::simd::u32x32::splat::JustOne",
      "core_arch::simd::u32x4",
      "core_arch::simd::u32x4::from_array",
      "core_arch::simd::u32x4::new",
      "core_arch::simd::u32x4::splat",
      "core_arch::simd::u32x4::splat::JustOne",
      "core_arch::simd::u32x8",
      "core_arch::simd::u32x8::from_array",
      "core_arch::simd::u32x8::new",
      "core_arch::simd::u32x8::splat",
      "core_arch::simd::u32x8::splat::JustOne",
      "core_arch::simd::u64x1",
      "core_arch::simd::u64x1::from_array",
      "core_arch::simd::u64x1::new",
      "core_arch::simd::u64x1::splat",
      "core_arch::simd::u64x1::splat::JustOne",
      "core_arch::simd::u64x2",
      "core_arch::simd::u64x2::from_array",
      "core_arch::simd::u64x2::new",
      "core_arch::simd::u64x2::splat",
      "core_arch::simd::u64x2::splat::JustOne",
      "core_arch::simd::u64x4",
      "core_arch::simd::u64x4::from_array",
      "core_arch::simd::u64x4::new",
      "core_arch::simd::u64x4::splat",
      "core_arch::simd::u64x4::splat::JustOne",
      "core_arch::simd::u64x8",
      "core_arch::simd::u64x8::from_array",
      "core_arch::simd::u64x8::new",
      "core_arch::simd::u64x8::splat",
      "core_arch::simd::u64x8::splat::JustOne",
      "core_arch::simd::u8x16",
      "core_arch::simd::u8x16::from_array",
      "core_arch::simd::u8x16::new",
      "core_arch::simd::u8x16::splat",
      "core_arch::simd::u8x16::splat::JustOne",
      "core_arch::simd::u8x2",
      "core_arch::simd::u8x2::from_array",
      "core_arch::simd::u8x2::new",
      "core_arch::simd::u8x2::splat",
      "core_arch::simd::u8x2::splat::JustOne",
      "core_arch::simd::u8x32",
      "core_arch::simd::u8x32::from_array",
      "core_arch::simd::u8x32::new",
      "core_arch::simd::u8x32::splat",
      "core_arch::simd::u8x32::splat::JustOne",
      "core_arch::simd::u8x4",
      "core_arch::simd::u8x4::from_array",
      "core_arch::simd::u8x4::new",
      "core_arch::simd::u8x4::splat",
      "core_arch::simd::u8x4::splat::JustOne",
      "core_arch::simd::u8x64",
      "core_arch::simd::u8x64::from_array",
      "core_arch::simd::u8x64::new",
      "core_arch::simd::u8x64::splat",
      "core_arch::simd::u8x64::splat::JustOne",
      "core_arch::simd::u8x8",
      "core_arch::simd::u8x8::from_array",
      "core_arch::simd::u8x8::new",
      "core_arch::simd::u8x8::splat",
      "core_arch::simd::u8x8::splat::JustOne"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/abm.rs": [
      "core_arch::x86::abm::_lzcnt_u32",
      "core_arch::x86::abm::_popcnt32"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/avx.rs": [
      "core_arch::x86::avx::_mm256_set1_epi16",
      "core_arch::x86::avx::_mm256_set1_epi32",
      "core_arch::x86::avx::_mm256_set1_epi64x",
      "core_arch::x86::avx::_mm256_set1_epi8",
      "core_arch::x86::avx::_mm256_set1_pd",
      "core_arch::x86::avx::_mm256_set1_ps",
      "core_arch::x86::avx::_mm256_set_epi16",
      "core_arch::x86::avx::_mm256_set_epi32",
      "core_arch::x86::avx::_mm256_set_epi64x",
      "core_arch::x86::avx::_mm256_set_epi8",
      "core_arch::x86::avx::_mm256_set_pd",
      "core_arch::x86::avx::_mm256_set_ps",
      "core_arch::x86::avx::_mm256_setr_epi16",
      "core_arch::x86::avx::_mm256_setr_epi32",
      "core_arch::x86::avx::_mm256_setr_epi64x",
      "core_arch::x86::avx::_mm256_setr_epi8",
      "core_arch::x86::avx::_mm256_setr_pd",
      "core_arch::x86::avx::_mm256_setr_ps",
      "core_arch::x86::avx::_mm256_setzero_pd",
      "core_arch::x86::avx::_mm256_setzero_ps",
      "core_arch::x86::avx::_mm256_setzero_si256",
      "core_arch::x86::avx::_mm256_undefined_pd",
      "core_arch::x86::avx::_mm256_undefined_ps",
      "core_arch::x86::avx::_mm256_undefined_si256",
      "core_arch::x86::avx::_mm256_zeroall",
      "core_arch::x86::avx::_mm256_zeroupper"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/avx2.rs": [
      "core_arch::x86::avx2::_mm256_bslli_epi128::mask"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/avx512bf16.rs": [
      "core_arch::x86::avx512bf16::_mm_cvtness_sbh"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/avx512bw.rs": [
      "core_arch::x86::avx512bw::_cvtmask32_u32",
      "core_arch::x86::avx512bw::_cvtu32_mask32",
      "core_arch::x86::avx512bw::_kadd_mask32",
      "core_arch::x86::avx512bw::_kadd_mask64",
      "core_arch::x86::avx512bw::_kand_mask32",
      "core_arch::x86::avx512bw::_kand_mask64",
      "core_arch::x86::avx512bw::_kandn_mask32",
      "core_arch::x86::avx512bw::_kandn_mask64",
      "core_arch::x86::avx512bw::_knot_mask32",
      "core_arch::x86::avx512bw::_knot_mask64",
      "core_arch::x86::avx512bw::_kor_mask32",
      "core_arch::x86::avx512bw::_kor_mask64",
      "core_arch::x86::avx512bw::_kortestc_mask32_u8",
      "core_arch::x86::avx512bw::_kortestc_mask64_u8",
      "core_arch::x86::avx512bw::_kortestz_mask32_u8",
      "core_arch::x86::avx512bw::_kortestz_mask64_u8",
      "core_arch::x86::avx512bw::_ktestc_mask32_u8",
      "core_arch::x86::avx512bw::_ktestc_mask64_u8",
      "core_arch::x86::avx512bw::_ktestz_mask32_u8",
      "core_arch::x86::avx512bw::_ktestz_mask64_u8",
      "core_arch::x86::avx512bw::_kxnor_mask32",
      "core_arch::x86::avx512bw::_kxnor_mask64",
      "core_arch::x86::avx512bw::_kxor_mask32",
      "core_arch::x86::avx512bw::_kxor_mask64",
      "core_arch::x86::avx512bw::_mm256_maskz_set1_epi16",
      "core_arch::x86::avx512bw::_mm256_maskz_set1_epi8",
      "core_arch::x86::avx512bw::_mm256_movm_epi16",
      "core_arch::x86::avx512bw::_mm256_movm_epi8",
      "core_arch::x86::avx512bw::_mm512_bslli_epi128::mask",
      "core_arch::x86::avx512bw::_mm512_kunpackd",
      "core_arch::x86::avx512bw::_mm512_kunpackw",
      "core_arch::x86::avx512bw::_mm512_maskz_set1_epi16",
      "core_arch::x86::avx512bw::_mm512_maskz_set1_epi8",
      "core_arch::x86::avx512bw::_mm512_movm_epi16",
      "core_arch::x86::avx512bw::_mm512_movm_epi8",
      "core_arch::x86::avx512bw::_mm_maskz_set1_epi16",
      "core_arch::x86::avx512bw::_mm_maskz_set1_epi8",
      "core_arch::x86::avx512bw::_mm_movm_epi16",
      "core_arch::x86::avx512bw::_mm_movm_epi8"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/avx512cd.rs": [
      "core_arch::x86::avx512cd::_mm256_broadcastmb_epi64",
      "core_arch::x86::avx512cd::_mm256_broadcastmw_epi32",
      "core_arch::x86::avx512cd::_mm512_broadcastmb_epi64",
      "core_arch::x86::avx512cd::_mm512_broadcastmw_epi32",
      "core_arch::x86::avx512cd::_mm_broadcastmb_epi64",
      "core_arch::x86::avx512cd::_mm_broadcastmw_epi32"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/avx512dq.rs": [
      "core_arch::x86::avx512dq::_cvtmask8_u32",
      "core_arch::x86::avx512dq::_cvtu32_mask8",
      "core_arch::x86::avx512dq::_kadd_mask16",
      "core_arch::x86::avx512dq::_kadd_mask8",
      "core_arch::x86::avx512dq::_kand_mask8",
      "core_arch::x86::avx512dq::_kandn_mask8",
      "core_arch::x86::avx512dq::_knot_mask8",
      "core_arch::x86::avx512dq::_kor_mask8",
      "core_arch::x86::avx512dq::_kortestc_mask8_u8",
      "core_arch::x86::avx512dq::_kortestz_mask8_u8",
      "core_arch::x86::avx512dq::_ktestc_mask16_u8",
      "core_arch::x86::avx512dq::_ktestc_mask8_u8",
      "core_arch::x86::avx512dq::_ktestz_mask16_u8",
      "core_arch::x86::avx512dq::_ktestz_mask8_u8",
      "core_arch::x86::avx512dq::_kxnor_mask8",
      "core_arch::x86::avx512dq::_kxor_mask8",
      "core_arch::x86::avx512dq::_mm256_movm_epi32",
      "core_arch::x86::avx512dq::_mm256_movm_epi64",
      "core_arch::x86::avx512dq::_mm512_movm_epi32",
      "core_arch::x86::avx512dq::_mm512_movm_epi64",
      "core_arch::x86::avx512dq::_mm_movm_epi32",
      "core_arch::x86::avx512dq::_mm_movm_epi64"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/avx512f.rs": [
      "core_arch::x86::avx512f::_cvtmask16_u32",
      "core_arch::x86::avx512f::_cvtu32_mask16",
      "core_arch::x86::avx512f::_kand_mask16",
      "core_arch::x86::avx512f::_kandn_mask16",
      "core_arch::x86::avx512f::_knot_mask16",
      "core_arch::x86::avx512f::_kor_mask16",
      "core_arch::x86::avx512f::_kortestc_mask16_u8",
      "core_arch::x86::avx512f::_kortestz_mask16_u8",
      "core_arch::x86::avx512f::_kxnor_mask16",
      "core_arch::x86::avx512f::_kxor_mask16",
      "core_arch::x86::avx512f::_mm256_maskz_set1_epi32",
      "core_arch::x86::avx512f::_mm256_maskz_set1_epi64",
      "core_arch::x86::avx512f::_mm512_int2mask",
      "core_arch::x86::avx512f::_mm512_kand",
      "core_arch::x86::avx512f::_mm512_kandn",
      "core_arch::x86::avx512f::_mm512_kmov",
      "core_arch::x86::avx512f::_mm512_knot",
      "core_arch::x86::avx512f::_mm512_kor",
      "core_arch::x86::avx512f::_mm512_kortestc",
      "core_arch::x86::avx512f::_mm512_kortestz",
      "core_arch::x86::avx512f::_mm512_kunpackb",
      "core_arch::x86::avx512f::_mm512_kxnor",
      "core_arch::x86::avx512f::_mm512_kxor",
      "core_arch::x86::avx512f::_mm512_mask2int",
      "core_arch::x86::avx512f::_mm512_maskz_set1_epi32",
      "core_arch::x86::avx512f::_mm512_maskz_set1_epi64",
      "core_arch::x86::avx512f::_mm512_set1_epi16",
      "core_arch::x86::avx512f::_mm512_set1_epi32",
      "core_arch::x86::avx512f::_mm512_set1_epi64",
      "core_arch::x86::avx512f::_mm512_set1_epi8",
      "core_arch::x86::avx512f::_mm512_set1_pd",
      "core_arch::x86::avx512f::_mm512_set1_ps",
      "core_arch::x86::avx512f::_mm512_set4_epi32",
      "core_arch::x86::avx512f::_mm512_set4_epi64",
      "core_arch::x86::avx512f::_mm512_set4_pd",
      "core_arch::x86::avx512f::_mm512_set4_ps",
      "core_arch::x86::avx512f::_mm512_set_epi16",
      "core_arch::x86::avx512f::_mm512_set_epi32",
      "core_arch::x86::avx512f::_mm512_set_epi64",
      "core_arch::x86::avx512f::_mm512_set_epi8",
      "core_arch::x86::avx512f::_mm512_set_pd",
      "core_arch::x86::avx512f::_mm512_set_ps",
      "core_arch::x86::avx512f::_mm512_setr4_epi32",
      "core_arch::x86::avx512f::_mm512_setr4_epi64",
      "core_arch::x86::avx512f::_mm512_setr4_pd",
      "core_arch::x86::avx512f::_mm512_setr4_ps",
      "core_arch::x86::avx512f::_mm512_setr_epi32",
      "core_arch::x86::avx512f::_mm512_setr_epi64",
      "core_arch::x86::avx512f::_mm512_setr_pd",
      "core_arch::x86::avx512f::_mm512_setr_ps",
      "core_arch::x86::avx512f::_mm512_setzero",
      "core_arch::x86::avx512f::_mm512_setzero_epi32",
      "core_arch::x86::avx512f::_mm512_setzero_pd",
      "core_arch::x86::avx512f::_mm512_setzero_ps",
      "core_arch::x86::avx512f::_mm512_setzero_si512",
      "core_arch::x86::avx512f::_mm512_undefined",
      "core_arch::x86::avx512f::_mm512_undefined_epi32",
      "core_arch::x86::avx512f::_mm512_undefined_pd",
      "core_arch::x86::avx512f::_mm512_undefined_ps",
      "core_arch::x86::avx512f::_mm_maskz_set1_epi32",
      "core_arch::x86::avx512f::_mm_maskz_set1_epi64"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/avx512fp16.rs": [
      "core_arch::x86::avx512fp16::_mm256_set1_ph",
      "core_arch::x86::avx512fp16::_mm256_set_ph",
      "core_arch::x86::avx512fp16::_mm256_setr_ph",
      "core_arch::x86::avx512fp16::_mm256_setzero_ph",
      "core_arch::x86::avx512fp16::_mm256_undefined_ph",
      "core_arch::x86::avx512fp16::_mm512_set1_ph",
      "core_arch::x86::avx512fp16::_mm512_set_ph",
      "core_arch::x86::avx512fp16::_mm512_setr_ph",
      "core_arch::x86::avx512fp16::_mm512_setzero_ph",
      "core_arch::x86::avx512fp16::_mm512_undefined_ph",
      "core_arch::x86::avx512fp16::_mm_cvtsi16_si128",
      "core_arch::x86::avx512fp16::_mm_set1_ph",
      "core_arch::x86::avx512fp16::_mm_set_ph",
      "core_arch::x86::avx512fp16::_mm_set_sh",
      "core_arch::x86::avx512fp16::_mm_setr_ph",
      "core_arch::x86::avx512fp16::_mm_setzero_ph",
      "core_arch::x86::avx512fp16::_mm_undefined_ph"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/bmi1.rs": [
      "core_arch::x86::bmi1::_andn_u32",
      "core_arch::x86::bmi1::_bextr2_u32",
      "core_arch::x86::bmi1::_bextr_u32",
      "core_arch::x86::bmi1::_blsi_u32",
      "core_arch::x86::bmi1::_blsmsk_u32",
      "core_arch::x86::bmi1::_blsr_u32",
      "core_arch::x86::bmi1::_mm_tzcnt_32",
      "core_arch::x86::bmi1::_tzcnt_u16",
      "core_arch::x86::bmi1::_tzcnt_u32"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/bmi2.rs": [
      "core_arch::x86::bmi2::_bzhi_u32",
      "core_arch::x86::bmi2::_pdep_u32",
      "core_arch::x86::bmi2::_pext_u32"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/bswap.rs": [
      "core_arch::x86::bswap::_bswap"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/cpuid.rs": [
      "core_arch::x86::cpuid::__cpuid",
      "core_arch::x86::cpuid::__cpuid_count",
      "core_arch::x86::cpuid::__get_cpuid_max"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/eflags.rs": [
      "core_arch::x86::eflags::__readeflags",
      "core_arch::x86::eflags::__writeeflags"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/mod.rs": [
      "core_arch::x86::bf16",
      "core_arch::x86::bf16::from_bits"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/rdtsc.rs": [
      "core_arch::x86::rdtsc::_rdtsc"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/rtm.rs": [
      "core_arch::x86::rtm::_xabort_code",
      "core_arch::x86::rtm::_xbegin",
      "core_arch::x86::rtm::_xend",
      "core_arch::x86::rtm::_xtest"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/sse.rs": [
      "core_arch::x86::sse::_MM_GET_EXCEPTION_MASK",
      "core_arch::x86::sse::_MM_GET_EXCEPTION_STATE",
      "core_arch::x86::sse::_MM_GET_FLUSH_ZERO_MODE",
      "core_arch::x86::sse::_MM_GET_ROUNDING_MODE",
      "core_arch::x86::sse::_MM_SET_EXCEPTION_MASK",
      "core_arch::x86::sse::_MM_SET_EXCEPTION_STATE",
      "core_arch::x86::sse::_MM_SET_FLUSH_ZERO_MODE",
      "core_arch::x86::sse::_MM_SET_ROUNDING_MODE",
      "core_arch::x86::sse::_MM_SHUFFLE",
      "core_arch::x86::sse::_mm_getcsr",
      "core_arch::x86::sse::_mm_set1_ps",
      "core_arch::x86::sse::_mm_set_ps",
      "core_arch::x86::sse::_mm_set_ps1",
      "core_arch::x86::sse::_mm_set_ss",
      "core_arch::x86::sse::_mm_setcsr",
      "core_arch::x86::sse::_mm_setr_ps",
      "core_arch::x86::sse::_mm_setzero_ps",
      "core_arch::x86::sse::_mm_sfence",
      "core_arch::x86::sse::_mm_undefined_ps"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs": [
      "core_arch::x86::sse2::_mm_cvtsi32_si128",
      "core_arch::x86::sse2::_mm_lfence",
      "core_arch::x86::sse2::_mm_mfence",
      "core_arch::x86::sse2::_mm_pause",
      "core_arch::x86::sse2::_mm_set1_epi16",
      "core_arch::x86::sse2::_mm_set1_epi32",
      "core_arch::x86::sse2::_mm_set1_epi64x",
      "core_arch::x86::sse2::_mm_set1_epi8",
      "core_arch::x86::sse2::_mm_set1_pd",
      "core_arch::x86::sse2::_mm_set_epi16",
      "core_arch::x86::sse2::_mm_set_epi32",
      "core_arch::x86::sse2::_mm_set_epi64x",
      "core_arch::x86::sse2::_mm_set_epi8",
      "core_arch::x86::sse2::_mm_set_pd",
      "core_arch::x86::sse2::_mm_set_pd1",
      "core_arch::x86::sse2::_mm_set_sd",
      "core_arch::x86::sse2::_mm_setr_epi16",
      "core_arch::x86::sse2::_mm_setr_epi32",
      "core_arch::x86::sse2::_mm_setr_epi8",
      "core_arch::x86::sse2::_mm_setr_pd",
      "core_arch::x86::sse2::_mm_setzero_pd",
      "core_arch::x86::sse2::_mm_setzero_si128",
      "core_arch::x86::sse2::_mm_slli_si128_impl::mask",
      "core_arch::x86::sse2::_mm_srli_si128_impl::mask",
      "core_arch::x86::sse2::_mm_undefined_pd",
      "core_arch::x86::sse2::_mm_undefined_si128"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/sse42.rs": [
      "core_arch::x86::sse42::_mm_crc32_u16",
      "core_arch::x86::sse42::_mm_crc32_u32",
      "core_arch::x86::sse42::_mm_crc32_u8"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/ssse3.rs": [
      "core_arch::x86::ssse3::_mm_alignr_epi8::mask"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/tbm.rs": [
      "core_arch::x86::tbm::_blcfill_u32",
      "core_arch::x86::tbm::_blci_u32",
      "core_arch::x86::tbm::_blcic_u32",
      "core_arch::x86::tbm::_blcmsk_u32",
      "core_arch::x86::tbm::_blcs_u32",
      "core_arch::x86::tbm::_blsfill_u32",
      "core_arch::x86::tbm::_blsic_u32",
      "core_arch::x86::tbm::_t1mskc_u32",
      "core_arch::x86::tbm::_tzmsk_u32"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86/xsave.rs": [
      "core_arch::x86::xsave::_xgetbv",
      "core_arch::x86::xsave::_xsetbv"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86_64/abm.rs": [
      "core_arch::x86_64::abm::_lzcnt_u64",
      "core_arch::x86_64::abm::_popcnt64"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86_64/amx.rs": [
      "core_arch::x86_64::amx::_tile_release"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86_64/avx512bw.rs": [
      "core_arch::x86_64::avx512bw::_cvtmask64_u64",
      "core_arch::x86_64::avx512bw::_cvtu64_mask64"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86_64/bmi.rs": [
      "core_arch::x86_64::bmi::_andn_u64",
      "core_arch::x86_64::bmi::_bextr2_u64",
      "core_arch::x86_64::bmi::_bextr_u64",
      "core_arch::x86_64::bmi::_blsi_u64",
      "core_arch::x86_64::bmi::_blsmsk_u64",
      "core_arch::x86_64::bmi::_blsr_u64",
      "core_arch::x86_64::bmi::_mm_tzcnt_64",
      "core_arch::x86_64::bmi::_tzcnt_u64"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86_64/bmi2.rs": [
      "core_arch::x86_64::bmi2::_bzhi_u64",
      "core_arch::x86_64::bmi2::_pdep_u64",
      "core_arch::x86_64::bmi2::_pext_u64"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86_64/bswap.rs": [
      "core_arch::x86_64::bswap::_bswap64"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86_64/sse2.rs": [
      "core_arch::x86_64::sse2::_mm_cvtsi64_si128",
      "core_arch::x86_64::sse2::_mm_cvtsi64x_si128"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86_64/sse42.rs": [
      "core_arch::x86_64::sse42::_mm_crc32_u64"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/../../stdarch/crates/core_arch/src/x86_64/tbm.rs": [
      "core_arch::x86_64::tbm::_blcfill_u64",
      "core_arch::x86_64::tbm::_blci_u64",
      "core_arch::x86_64::tbm::_blcic_u64",
      "core_arch::x86_64::tbm::_blcmsk_u64",
      "core_arch::x86_64::tbm::_blcs_u64",
      "core_arch::x86_64::tbm::_blsfill_u64",
      "core_arch::x86_64::tbm::_blsic_u64",
      "core_arch::x86_64::tbm::_t1mskc_u64",
      "core_arch::x86_64::tbm::_tzmsk_u64"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs": [
      "alloc::layout::Layout::array::inner",
      "alloc::layout::Layout::array::{closure#0}::{closure#1}::{closure#2}::inner",
      "alloc::layout::Layout::array::{closure#2}::{closure#2}::inner",
      "alloc::layout::Layout::array::{closure#3}::{closure#0}::inner",
      "alloc::layout::Layout::from_size_alignment",
      "alloc::layout::Layout::is_size_align_valid",
      "alloc::layout::Layout::max_size_for_align",
      "alloc::layout::verify::check_align",
      "alloc::layout::verify::check_size"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/arch.rs": [
      "arch::breakpoint"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/array/mod.rs": [
      "array::TryFromSliceError"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ascii.rs": [
      "ascii::EscapeDefault::empty",
      "ascii::EscapeDefault::new",
      "ascii::escape_default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ascii/ascii_char.rs": [
      "ascii::ascii_char::AsciiChar::digit",
      "ascii::ascii_char::AsciiChar::digit_unchecked"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/bstr/mod.rs": [
      "<&bstr::ByteStr as default::Default>::default",
      "<&mut bstr::ByteStr as default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/cell.rs": [
      "cell::is_reading",
      "cell::is_writing"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/cell/lazy.rs": [
      "cell::lazy::panic_poisoned"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/char/convert.rs": [
      "char::convert::<impl convert::From<char> for u128>::from",
      "char::convert::<impl convert::From<char> for u32>::from",
      "char::convert::<impl convert::From<char> for u64>::from",
      "char::convert::<impl convert::From<u8> for char>::from",
      "char::convert::<impl convert::TryFrom<char> for u16>::try_from",
      "char::convert::<impl convert::TryFrom<char> for u8>::try_from",
      "char::convert::<impl convert::TryFrom<u32> for char>::try_from",
      "char::convert::CharTryFromError",
      "char::convert::char_try_from_u32",
      "char::convert::from_digit",
      "char::convert::from_u32"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/char/methods.rs": [
      "char::methods::<impl char>::escape_debug",
      "char::methods::<impl char>::escape_default",
      "char::methods::<impl char>::escape_unicode",
      "char::methods::<impl char>::from_digit",
      "char::methods::<impl char>::from_u32",
      "char::methods::<impl char>::from_u32_unchecked",
      "char::methods::<impl char>::is_alphabetic",
      "char::methods::<impl char>::is_alphanumeric",
      "char::methods::<impl char>::is_control",
      "char::methods::<impl char>::is_digit",
      "char::methods::<impl char>::is_grapheme_extended",
      "char::methods::<impl char>::is_lowercase",
      "char::methods::<impl char>::is_numeric",
      "char::methods::<impl char>::is_uppercase",
      "char::methods::<impl char>::is_whitespace",
      "char::methods::<impl char>::len_utf16",
      "char::methods::<impl char>::len_utf8",
      "char::methods::<impl char>::to_digit",
      "char::methods::<impl char>::to_lowercase",
      "char::methods::<impl char>::to_uppercase",
      "char::methods::len_utf16",
      "char::methods::len_utf8"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/char/mod.rs": [
      "char::CaseMappingIter::new",
      "char::EscapeDebug::printable",
      "char::EscapeDebug::unicode",
      "char::EscapeDebugInner::Char",
      "char::EscapeDefault::unicode",
      "char::EscapeUnicode::new",
      "char::TryFromCharError",
      "char::from_digit",
      "char::from_u32",
      "char::from_u32_unchecked"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/cmp.rs": [
      "cmp::impls::<impl cmp::Ord for bool>::clamp",
      "cmp::impls::<impl cmp::Ord for bool>::max",
      "cmp::impls::<impl cmp::Ord for bool>::min"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs": [
      "convert::num::<impl convert::From<bool> for f128>::from",
      "convert::num::<impl convert::From<bool> for f16>::from",
      "convert::num::<impl convert::From<bool> for f32>::from",
      "convert::num::<impl convert::From<bool> for f64>::from",
      "convert::num::<impl convert::From<bool> for i128>::from",
      "convert::num::<impl convert::From<bool> for i16>::from",
      "convert::num::<impl convert::From<bool> for i32>::from",
      "convert::num::<impl convert::From<bool> for i64>::from",
      "convert::num::<impl convert::From<bool> for i8>::from",
      "convert::num::<impl convert::From<bool> for isize>::from",
      "convert::num::<impl convert::From<bool> for u128>::from",
      "convert::num::<impl convert::From<bool> for u16>::from",
      "convert::num::<impl convert::From<bool> for u32>::from",
      "convert::num::<impl convert::From<bool> for u64>::from",
      "convert::num::<impl convert::From<bool> for u8>::from",
      "convert::num::<impl convert::From<bool> for usize>::from",
      "convert::num::<impl convert::From<f16> for f128>::from",
      "convert::num::<impl convert::From<f16> for f64>::from",
      "convert::num::<impl convert::From<f32> for f128>::from",
      "convert::num::<impl convert::From<f32> for f64>::from",
      "convert::num::<impl convert::From<f64> for f128>::from",
      "convert::num::<impl convert::From<i16> for f128>::from",
      "convert::num::<impl convert::From<i16> for f32>::from",
      "convert::num::<impl convert::From<i16> for f64>::from",
      "convert::num::<impl convert::From<i16> for i128>::from",
      "convert::num::<impl convert::From<i16> for i32>::from",
      "convert::num::<impl convert::From<i16> for i64>::from",
      "convert::num::<impl convert::From<i16> for isize>::from",
      "convert::num::<impl convert::From<i32> for f128>::from",
      "convert::num::<impl convert::From<i32> for f64>::from",
      "convert::num::<impl convert::From<i32> for i128>::from",
      "convert::num::<impl convert::From<i32> for i64>::from",
      "convert::num::<impl convert::From<i64> for i128>::from",
      "convert::num::<impl convert::From<i8> for f128>::from",
      "convert::num::<impl convert::From<i8> for f16>::from",
      "convert::num::<impl convert::From<i8> for f32>::from",
      "convert::num::<impl convert::From<i8> for f64>::from",
      "convert::num::<impl convert::From<i8> for i128>::from",
      "convert::num::<impl convert::From<i8> for i16>::from",
      "convert::num::<impl convert::From<i8> for i32>::from",
      "convert::num::<impl convert::From<i8> for i64>::from",
      "convert::num::<impl convert::From<i8> for isize>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<i16>> for num::nonzero::NonZero<i128>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<i16>> for num::nonzero::NonZero<i32>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<i16>> for num::nonzero::NonZero<i64>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<i16>> for num::nonzero::NonZero<isize>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<i32>> for num::nonzero::NonZero<i128>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<i32>> for num::nonzero::NonZero<i64>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<i64>> for num::nonzero::NonZero<i128>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<i8>> for num::nonzero::NonZero<i128>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<i8>> for num::nonzero::NonZero<i16>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<i8>> for num::nonzero::NonZero<i32>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<i8>> for num::nonzero::NonZero<i64>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<i8>> for num::nonzero::NonZero<isize>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u16>> for num::nonzero::NonZero<i128>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u16>> for num::nonzero::NonZero<i32>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u16>> for num::nonzero::NonZero<i64>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u16>> for num::nonzero::NonZero<u128>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u16>> for num::nonzero::NonZero<u32>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u16>> for num::nonzero::NonZero<u64>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u16>> for num::nonzero::NonZero<usize>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u32>> for num::nonzero::NonZero<i128>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u32>> for num::nonzero::NonZero<i64>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u32>> for num::nonzero::NonZero<u128>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u32>> for num::nonzero::NonZero<u64>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u64>> for num::nonzero::NonZero<i128>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u64>> for num::nonzero::NonZero<u128>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u8>> for num::nonzero::NonZero<i128>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u8>> for num::nonzero::NonZero<i16>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u8>> for num::nonzero::NonZero<i32>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u8>> for num::nonzero::NonZero<i64>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u8>> for num::nonzero::NonZero<isize>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u8>> for num::nonzero::NonZero<u128>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u8>> for num::nonzero::NonZero<u16>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u8>> for num::nonzero::NonZero<u32>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u8>> for num::nonzero::NonZero<u64>>::from",
      "convert::num::<impl convert::From<num::nonzero::NonZero<u8>> for num::nonzero::NonZero<usize>>::from",
      "convert::num::<impl convert::From<u16> for f128>::from",
      "convert::num::<impl convert::From<u16> for f32>::from",
      "convert::num::<impl convert::From<u16> for f64>::from",
      "convert::num::<impl convert::From<u16> for i128>::from",
      "convert::num::<impl convert::From<u16> for i32>::from",
      "convert::num::<impl convert::From<u16> for i64>::from",
      "convert::num::<impl convert::From<u16> for u128>::from",
      "convert::num::<impl convert::From<u16> for u32>::from",
      "convert::num::<impl convert::From<u16> for u64>::from",
      "convert::num::<impl convert::From<u16> for usize>::from",
      "convert::num::<impl convert::From<u32> for f128>::from",
      "convert::num::<impl convert::From<u32> for f64>::from",
      "convert::num::<impl convert::From<u32> for i128>::from",
      "convert::num::<impl convert::From<u32> for i64>::from",
      "convert::num::<impl convert::From<u32> for u128>::from",
      "convert::num::<impl convert::From<u32> for u64>::from",
      "convert::num::<impl convert::From<u64> for i128>::from",
      "convert::num::<impl convert::From<u64> for u128>::from",
      "convert::num::<impl convert::From<u8> for f128>::from",
      "convert::num::<impl convert::From<u8> for f16>::from",
      "convert::num::<impl convert::From<u8> for f32>::from",
      "convert::num::<impl convert::From<u8> for f64>::from",
      "convert::num::<impl convert::From<u8> for i128>::from",
      "convert::num::<impl convert::From<u8> for i16>::from",
      "convert::num::<impl convert::From<u8> for i32>::from",
      "convert::num::<impl convert::From<u8> for i64>::from",
      "convert::num::<impl convert::From<u8> for isize>::from",
      "convert::num::<impl convert::From<u8> for u128>::from",
      "convert::num::<impl convert::From<u8> for u16>::from",
      "convert::num::<impl convert::From<u8> for u32>::from",
      "convert::num::<impl convert::From<u8> for u64>::from",
      "convert::num::<impl convert::From<u8> for usize>::from",
      "convert::num::<impl convert::TryFrom<i128> for i16>::try_from",
      "convert::num::<impl convert::TryFrom<i128> for i32>::try_from",
      "convert::num::<impl convert::TryFrom<i128> for i64>::try_from",
      "convert::num::<impl convert::TryFrom<i128> for i8>::try_from",
      "convert::num::<impl convert::TryFrom<i128> for num::nonzero::NonZero<i128>>::try_from",
      "convert::num::<impl convert::TryFrom<i128> for u128>::try_from",
      "convert::num::<impl convert::TryFrom<i128> for u16>::try_from",
      "convert::num::<impl convert::TryFrom<i128> for u32>::try_from",
      "convert::num::<impl convert::TryFrom<i128> for u64>::try_from",
      "convert::num::<impl convert::TryFrom<i128> for u8>::try_from",
      "convert::num::<impl convert::TryFrom<i16> for i8>::try_from",
      "convert::num::<impl convert::TryFrom<i16> for num::nonzero::NonZero<i16>>::try_from",
      "convert::num::<impl convert::TryFrom<i16> for u128>::try_from",
      "convert::num::<impl convert::TryFrom<i16> for u16>::try_from",
      "convert::num::<impl convert::TryFrom<i16> for u32>::try_from",
      "convert::num::<impl convert::TryFrom<i16> for u64>::try_from",
      "convert::num::<impl convert::TryFrom<i16> for u8>::try_from",
      "convert::num::<impl convert::TryFrom<i32> for i16>::try_from",
      "convert::num::<impl convert::TryFrom<i32> for i8>::try_from",
      "convert::num::<impl convert::TryFrom<i32> for num::nonzero::NonZero<i32>>::try_from",
      "convert::num::<impl convert::TryFrom<i32> for u128>::try_from",
      "convert::num::<impl convert::TryFrom<i32> for u16>::try_from",
      "convert::num::<impl convert::TryFrom<i32> for u32>::try_from",
      "convert::num::<impl convert::TryFrom<i32> for u64>::try_from",
      "convert::num::<impl convert::TryFrom<i32> for u8>::try_from",
      "convert::num::<impl convert::TryFrom<i64> for i16>::try_from",
      "convert::num::<impl convert::TryFrom<i64> for i32>::try_from",
      "convert::num::<impl convert::TryFrom<i64> for i8>::try_from",
      "convert::num::<impl convert::TryFrom<i64> for num::nonzero::NonZero<i64>>::try_from",
      "convert::num::<impl convert::TryFrom<i64> for u128>::try_from",
      "convert::num::<impl convert::TryFrom<i64> for u16>::try_from",
      "convert::num::<impl convert::TryFrom<i64> for u32>::try_from",
      "convert::num::<impl convert::TryFrom<i64> for u64>::try_from",
      "convert::num::<impl convert::TryFrom<i64> for u8>::try_from",
      "convert::num::<impl convert::TryFrom<i8> for num::nonzero::NonZero<i8>>::try_from",
      "convert::num::<impl convert::TryFrom<i8> for u128>::try_from",
      "convert::num::<impl convert::TryFrom<i8> for u16>::try_from",
      "convert::num::<impl convert::TryFrom<i8> for u32>::try_from",
      "convert::num::<impl convert::TryFrom<i8> for u64>::try_from",
      "convert::num::<impl convert::TryFrom<i8> for u8>::try_from",
      "convert::num::<impl convert::TryFrom<isize> for num::nonzero::NonZero<isize>>::try_from",
      "convert::num::<impl convert::TryFrom<isize> for usize>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i128>> for num::nonzero::NonZero<i16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i128>> for num::nonzero::NonZero<i32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i128>> for num::nonzero::NonZero<i64>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i128>> for num::nonzero::NonZero<i8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i128>> for num::nonzero::NonZero<isize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i128>> for num::nonzero::NonZero<u128>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i128>> for num::nonzero::NonZero<u16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i128>> for num::nonzero::NonZero<u32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i128>> for num::nonzero::NonZero<u64>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i128>> for num::nonzero::NonZero<u8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i128>> for num::nonzero::NonZero<usize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i16>> for num::nonzero::NonZero<i8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i16>> for num::nonzero::NonZero<u128>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i16>> for num::nonzero::NonZero<u16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i16>> for num::nonzero::NonZero<u32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i16>> for num::nonzero::NonZero<u64>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i16>> for num::nonzero::NonZero<u8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i16>> for num::nonzero::NonZero<usize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i32>> for num::nonzero::NonZero<i16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i32>> for num::nonzero::NonZero<i8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i32>> for num::nonzero::NonZero<isize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i32>> for num::nonzero::NonZero<u128>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i32>> for num::nonzero::NonZero<u16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i32>> for num::nonzero::NonZero<u32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i32>> for num::nonzero::NonZero<u64>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i32>> for num::nonzero::NonZero<u8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i32>> for num::nonzero::NonZero<usize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i64>> for num::nonzero::NonZero<i16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i64>> for num::nonzero::NonZero<i32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i64>> for num::nonzero::NonZero<i8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i64>> for num::nonzero::NonZero<isize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i64>> for num::nonzero::NonZero<u128>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i64>> for num::nonzero::NonZero<u16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i64>> for num::nonzero::NonZero<u32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i64>> for num::nonzero::NonZero<u64>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i64>> for num::nonzero::NonZero<u8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i64>> for num::nonzero::NonZero<usize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i8>> for num::nonzero::NonZero<u128>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i8>> for num::nonzero::NonZero<u16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i8>> for num::nonzero::NonZero<u32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i8>> for num::nonzero::NonZero<u64>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i8>> for num::nonzero::NonZero<u8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<i8>> for num::nonzero::NonZero<usize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<isize>> for num::nonzero::NonZero<i128>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<isize>> for num::nonzero::NonZero<i16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<isize>> for num::nonzero::NonZero<i32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<isize>> for num::nonzero::NonZero<i64>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<isize>> for num::nonzero::NonZero<i8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<isize>> for num::nonzero::NonZero<u128>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<isize>> for num::nonzero::NonZero<u16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<isize>> for num::nonzero::NonZero<u32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<isize>> for num::nonzero::NonZero<u64>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<isize>> for num::nonzero::NonZero<u8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<isize>> for num::nonzero::NonZero<usize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u128>> for num::nonzero::NonZero<i128>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u128>> for num::nonzero::NonZero<i16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u128>> for num::nonzero::NonZero<i32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u128>> for num::nonzero::NonZero<i64>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u128>> for num::nonzero::NonZero<i8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u128>> for num::nonzero::NonZero<isize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u128>> for num::nonzero::NonZero<u16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u128>> for num::nonzero::NonZero<u32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u128>> for num::nonzero::NonZero<u64>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u128>> for num::nonzero::NonZero<u8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u128>> for num::nonzero::NonZero<usize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u16>> for num::nonzero::NonZero<i16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u16>> for num::nonzero::NonZero<i8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u16>> for num::nonzero::NonZero<isize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u16>> for num::nonzero::NonZero<u8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u32>> for num::nonzero::NonZero<i16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u32>> for num::nonzero::NonZero<i32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u32>> for num::nonzero::NonZero<i8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u32>> for num::nonzero::NonZero<isize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u32>> for num::nonzero::NonZero<u16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u32>> for num::nonzero::NonZero<u8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u32>> for num::nonzero::NonZero<usize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u64>> for num::nonzero::NonZero<i16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u64>> for num::nonzero::NonZero<i32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u64>> for num::nonzero::NonZero<i64>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u64>> for num::nonzero::NonZero<i8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u64>> for num::nonzero::NonZero<isize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u64>> for num::nonzero::NonZero<u16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u64>> for num::nonzero::NonZero<u32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u64>> for num::nonzero::NonZero<u8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u64>> for num::nonzero::NonZero<usize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<u8>> for num::nonzero::NonZero<i8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<usize>> for num::nonzero::NonZero<i128>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<usize>> for num::nonzero::NonZero<i16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<usize>> for num::nonzero::NonZero<i32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<usize>> for num::nonzero::NonZero<i64>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<usize>> for num::nonzero::NonZero<i8>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<usize>> for num::nonzero::NonZero<isize>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<usize>> for num::nonzero::NonZero<u128>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<usize>> for num::nonzero::NonZero<u16>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<usize>> for num::nonzero::NonZero<u32>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<usize>> for num::nonzero::NonZero<u64>>::try_from",
      "convert::num::<impl convert::TryFrom<num::nonzero::NonZero<usize>> for num::nonzero::NonZero<u8>>::try_from",
      "convert::num::<impl convert::TryFrom<u128> for i128>::try_from",
      "convert::num::<impl convert::TryFrom<u128> for i16>::try_from",
      "convert::num::<impl convert::TryFrom<u128> for i32>::try_from",
      "convert::num::<impl convert::TryFrom<u128> for i64>::try_from",
      "convert::num::<impl convert::TryFrom<u128> for i8>::try_from",
      "convert::num::<impl convert::TryFrom<u128> for num::nonzero::NonZero<u128>>::try_from",
      "convert::num::<impl convert::TryFrom<u128> for u16>::try_from",
      "convert::num::<impl convert::TryFrom<u128> for u32>::try_from",
      "convert::num::<impl convert::TryFrom<u128> for u64>::try_from",
      "convert::num::<impl convert::TryFrom<u128> for u8>::try_from",
      "convert::num::<impl convert::TryFrom<u16> for i16>::try_from",
      "convert::num::<impl convert::TryFrom<u16> for i8>::try_from",
      "convert::num::<impl convert::TryFrom<u16> for num::nonzero::NonZero<u16>>::try_from",
      "convert::num::<impl convert::TryFrom<u16> for u8>::try_from",
      "convert::num::<impl convert::TryFrom<u32> for i16>::try_from",
      "convert::num::<impl convert::TryFrom<u32> for i32>::try_from",
      "convert::num::<impl convert::TryFrom<u32> for i8>::try_from",
      "convert::num::<impl convert::TryFrom<u32> for num::nonzero::NonZero<u32>>::try_from",
      "convert::num::<impl convert::TryFrom<u32> for u16>::try_from",
      "convert::num::<impl convert::TryFrom<u32> for u8>::try_from",
      "convert::num::<impl convert::TryFrom<u64> for i16>::try_from",
      "convert::num::<impl convert::TryFrom<u64> for i32>::try_from",
      "convert::num::<impl convert::TryFrom<u64> for i64>::try_from",
      "convert::num::<impl convert::TryFrom<u64> for i8>::try_from",
      "convert::num::<impl convert::TryFrom<u64> for num::nonzero::NonZero<u64>>::try_from",
      "convert::num::<impl convert::TryFrom<u64> for u16>::try_from",
      "convert::num::<impl convert::TryFrom<u64> for u32>::try_from",
      "convert::num::<impl convert::TryFrom<u64> for u8>::try_from",
      "convert::num::<impl convert::TryFrom<u8> for i8>::try_from",
      "convert::num::<impl convert::TryFrom<u8> for num::nonzero::NonZero<u8>>::try_from",
      "convert::num::<impl convert::TryFrom<usize> for isize>::try_from",
      "convert::num::<impl convert::TryFrom<usize> for num::nonzero::NonZero<usize>>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<i128> for isize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<i128> for usize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<i16> for usize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<i32> for isize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<i32> for usize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<i64> for isize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<i64> for usize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<i8> for usize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<isize> for i128>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<isize> for i16>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<isize> for i32>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<isize> for i64>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<isize> for i8>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<isize> for u128>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<isize> for u16>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<isize> for u32>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<isize> for u64>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<isize> for u8>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<u128> for isize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<u128> for usize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<u16> for isize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<u32> for isize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<u32> for usize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<u64> for isize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<u64> for usize>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<usize> for i128>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<usize> for i16>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<usize> for i32>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<usize> for i64>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<usize> for i8>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<usize> for u128>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<usize> for u16>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<usize> for u32>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<usize> for u64>::try_from",
      "convert::num::ptr_try_from_impls::<impl convert::TryFrom<usize> for u8>::try_from",
      "convert::num::verify::check_nonzero_int_from_i16::i128::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_i16::i32::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_i16::i64::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_i16::isize::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_i32::i128::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_i32::i64::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_i64::i128::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_i8::i128::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_i8::i16::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_i8::i32::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_i8::i64::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_i8::isize::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u16::i128::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u16::i32::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u16::i64::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u16::u128::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u16::u32::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u16::u64::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u16::usize::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u32::i128::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u32::i64::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u32::u128::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u32::u64::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u64::i128::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u64::u128::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u8::i128::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u8::i16::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u8::i32::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u8::i64::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u8::isize::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u8::u128::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u8::u16::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u8::u32::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u8::u64::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_from_u8::usize::check_nonzero_int_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i128::i16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i128::i16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i128::i32::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i128::i32::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i128::i64::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i128::i64::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i128::i8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i128::i8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i128::isize::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i128::isize::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i128::u128::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i128::u128::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i128::u16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i128::u16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i128::u32::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i128::u32::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i128::u64::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i128::u64::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i128::u8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i128::u8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i128::usize::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i128::usize::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i16::i8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i16::i8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i16::u128::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i16::u128::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i16::u16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i16::u16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i16::u32::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i16::u32::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i16::u64::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i16::u64::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i16::u8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i16::u8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i16::usize::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i16::usize::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i32::i16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i32::i16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i32::i8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i32::i8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i32::isize::check_nonzero_int_try_from_nonzero_int_infallible",
      "convert::num::verify::check_nonzero_int_try_from_i32::u128::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i32::u128::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i32::u16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i32::u16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i32::u32::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i32::u32::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i32::u64::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i32::u64::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i32::u8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i32::u8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i32::usize::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i32::usize::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i64::i16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i64::i16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i64::i32::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i64::i32::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i64::i8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i64::i8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i64::isize::check_nonzero_int_try_from_nonzero_int_infallible",
      "convert::num::verify::check_nonzero_int_try_from_i64::u128::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i64::u128::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i64::u16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i64::u16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i64::u32::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i64::u32::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i64::u64::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i64::u64::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i64::u8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i64::u8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i64::usize::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i64::usize::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i8::u128::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i8::u128::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i8::u16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i8::u16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i8::u32::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i8::u32::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i8::u64::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i8::u64::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i8::u8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i8::u8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_i8::usize::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_i8::usize::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u128::i128::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u128::i128::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u128::i16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u128::i16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u128::i32::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u128::i32::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u128::i64::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u128::i64::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u128::i8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u128::i8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u128::isize::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u128::isize::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u128::u16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u128::u16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u128::u32::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u128::u32::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u128::u64::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u128::u64::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u128::u8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u128::u8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u128::usize::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u128::usize::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u16::i16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u16::i16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u16::i8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u16::i8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u16::isize::check_nonzero_int_try_from_nonzero_int_infallible",
      "convert::num::verify::check_nonzero_int_try_from_u16::u8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u16::u8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u32::i16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u32::i16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u32::i32::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u32::i32::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u32::i8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u32::i8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u32::isize::check_nonzero_int_try_from_nonzero_int_infallible",
      "convert::num::verify::check_nonzero_int_try_from_u32::u16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u32::u16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u32::u8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u32::u8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u32::usize::check_nonzero_int_try_from_nonzero_int_infallible",
      "convert::num::verify::check_nonzero_int_try_from_u64::i16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u64::i16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u64::i32::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u64::i32::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u64::i64::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u64::i64::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u64::i8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u64::i8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u64::isize::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u64::isize::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u64::u16::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u64::u16::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u64::u32::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u64::u32::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u64::u8::check_nonzero_int_try_from_nonzero_int",
      "convert::num::verify::check_nonzero_int_try_from_u64::u8::check_nonzero_int_try_from_nonzero_int_should_panic",
      "convert::num::verify::check_nonzero_int_try_from_u64::usize::check_nonzero_int_try_from_nonzero_int_infallible"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/default.rs": [
      "<() as default::Default>::default",
      "<ascii::ascii_char::AsciiChar as default::Default>::default",
      "<bool as default::Default>::default",
      "<char as default::Default>::default",
      "<f128 as default::Default>::default",
      "<f16 as default::Default>::default",
      "<f32 as default::Default>::default",
      "<f64 as default::Default>::default",
      "<i128 as default::Default>::default",
      "<i16 as default::Default>::default",
      "<i32 as default::Default>::default",
      "<i64 as default::Default>::default",
      "<i8 as default::Default>::default",
      "<isize as default::Default>::default",
      "<u128 as default::Default>::default",
      "<u16 as default::Default>::default",
      "<u32 as default::Default>::default",
      "<u64 as default::Default>::default",
      "<u8 as default::Default>::default",
      "<usize as default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ffi/c_str.rs": [
      "<&ffi::c_str::CStr as default::Default>::default",
      "ffi::c_str::FromBytesUntilNulError",
      "ffi::c_str::verify::check_as_ptr",
      "ffi::c_str::verify::check_bytes",
      "ffi::c_str::verify::check_count_bytes",
      "ffi::c_str::verify::check_from_bytes_until_nul",
      "ffi::c_str::verify::check_from_bytes_with_nul",
      "ffi::c_str::verify::check_is_empty",
      "ffi::c_str::verify::check_to_bytes",
      "ffi::c_str::verify::check_to_bytes_with_nul",
      "ffi::c_str::verify::check_to_str"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/fmt/builders.rs": [
      "<fmt::builders::PadAdapterState as default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/fmt/mod.rs": [
      "<fmt::Error as default::Default>::default",
      "<fmt::FormattingOptions as default::Default>::default",
      "<str as fmt::Debug>::fmt::needs_escape",
      "fmt::FormattingOptions::new",
      "fmt::PostPadding::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/fmt/num.rs": [
      "<fmt::num::Binary as fmt::num::GenericRadix>::digit",
      "<fmt::num::LowerHex as fmt::num::GenericRadix>::digit",
      "<fmt::num::Octal as fmt::num::GenericRadix>::digit",
      "<fmt::num::UpperHex as fmt::num::GenericRadix>::digit",
      "<i128 as fmt::num::DisplayInt>::from_u8",
      "<i128 as fmt::num::DisplayInt>::zero",
      "<i16 as fmt::num::DisplayInt>::from_u8",
      "<i16 as fmt::num::DisplayInt>::zero",
      "<i32 as fmt::num::DisplayInt>::from_u8",
      "<i32 as fmt::num::DisplayInt>::zero",
      "<i64 as fmt::num::DisplayInt>::from_u8",
      "<i64 as fmt::num::DisplayInt>::zero",
      "<i8 as fmt::num::DisplayInt>::from_u8",
      "<i8 as fmt::num::DisplayInt>::zero",
      "<isize as fmt::num::DisplayInt>::from_u8",
      "<isize as fmt::num::DisplayInt>::zero",
      "<u128 as fmt::num::DisplayInt>::from_u8",
      "<u128 as fmt::num::DisplayInt>::zero",
      "<u16 as fmt::num::DisplayInt>::from_u8",
      "<u16 as fmt::num::DisplayInt>::zero",
      "<u32 as fmt::num::DisplayInt>::from_u8",
      "<u32 as fmt::num::DisplayInt>::zero",
      "<u64 as fmt::num::DisplayInt>::from_u8",
      "<u64 as fmt::num::DisplayInt>::zero",
      "<u8 as fmt::num::DisplayInt>::from_u8",
      "<u8 as fmt::num::DisplayInt>::zero",
      "<usize as fmt::num::DisplayInt>::from_u8",
      "<usize as fmt::num::DisplayInt>::zero",
      "fmt::num::div_rem_1e16"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/fmt/rt.rs": [
      "fmt::rt::Argument::<'_>::none",
      "fmt::rt::ArgumentType::<'_>::Count",
      "fmt::rt::Count::Is",
      "fmt::rt::Count::Param",
      "fmt::rt::UnsafeArg::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/future/mod.rs": [
      "future::ResumeTy"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/hash/sip.rs": [
      "<hash::sip::Sip13Rounds as default::Default>::default",
      "<hash::sip::Sip24Rounds as default::Default>::default",
      "<hash::sip::SipHasher as default::Default>::default",
      "<hash::sip::SipHasher13 as default::Default>::default",
      "<hash::sip::SipHasher24 as default::Default>::default",
      "hash::sip::SipHasher13::new",
      "hash::sip::SipHasher13::new_with_keys",
      "hash::sip::SipHasher::new",
      "hash::sip::SipHasher::new_with_keys"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/hint.rs": [
      "hint::assert_unchecked",
      "hint::cold_path",
      "hint::likely",
      "hint::spin_loop",
      "hint::unlikely",
      "hint::unreachable_unchecked"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs": [
      "<i128 as intrinsics::fallback::CarryingMulAdd>::carrying_mul_add",
      "<i16 as intrinsics::fallback::CarryingMulAdd>::carrying_mul_add",
      "<i32 as intrinsics::fallback::CarryingMulAdd>::carrying_mul_add",
      "<i64 as intrinsics::fallback::CarryingMulAdd>::carrying_mul_add",
      "<i8 as intrinsics::fallback::CarryingMulAdd>::carrying_mul_add",
      "<isize as intrinsics::fallback::CarryingMulAdd>::carrying_mul_add",
      "<u128 as intrinsics::fallback::CarryingMulAdd>::carrying_mul_add",
      "<u16 as intrinsics::fallback::CarryingMulAdd>::carrying_mul_add",
      "<u32 as intrinsics::fallback::CarryingMulAdd>::carrying_mul_add",
      "<u64 as intrinsics::fallback::CarryingMulAdd>::carrying_mul_add",
      "<u8 as intrinsics::fallback::CarryingMulAdd>::carrying_mul_add",
      "<usize as intrinsics::fallback::CarryingMulAdd>::carrying_mul_add",
      "intrinsics::fallback::wide_mul_u128",
      "intrinsics::fallback::wide_mul_u128::from_low_high",
      "intrinsics::fallback::wide_mul_u128::scalar_mul",
      "intrinsics::fallback::wide_mul_u128::to_low_high"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/mir.rs": [
      "intrinsics::mir::Assume",
      "intrinsics::mir::Return",
      "intrinsics::mir::Unreachable",
      "intrinsics::mir::UnwindContinue",
      "intrinsics::mir::UnwindResume",
      "intrinsics::mir::UnwindUnreachable"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/mod.rs": [
      "char::methods::encode_utf16_raw::do_panic::compiletime",
      "char::methods::encode_utf16_raw::do_panic::runtime",
      "char::methods::encode_utf8_raw::do_panic::compiletime",
      "char::methods::encode_utf8_raw::do_panic::runtime",
      "f128::<impl f128>::clamp::do_panic::compiletime",
      "f128::<impl f128>::clamp::do_panic::runtime",
      "f16::<impl f16>::clamp::do_panic::compiletime",
      "f16::<impl f16>::clamp::do_panic::runtime",
      "f32::<impl f32>::clamp::do_panic::compiletime",
      "f32::<impl f32>::clamp::do_panic::runtime",
      "f64::<impl f64>::clamp::do_panic::compiletime",
      "f64::<impl f64>::clamp::do_panic::runtime",
      "intrinsics::assume",
      "intrinsics::cold_path",
      "intrinsics::const_allocate",
      "intrinsics::contract_checks",
      "intrinsics::likely",
      "intrinsics::maximumf128",
      "intrinsics::maximumf16",
      "intrinsics::maximumf32",
      "intrinsics::maximumf64",
      "intrinsics::minimumf128",
      "intrinsics::minimumf16",
      "intrinsics::minimumf32",
      "intrinsics::minimumf64",
      "intrinsics::ub_checks",
      "intrinsics::unlikely",
      "intrinsics::verify::arr_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::arr_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::arr_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::arr_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::arr_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::arr_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::arr_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::arr_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::arr_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::arr_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::arr_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::arr_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::bool_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::bool_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::bool_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::bool_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::bool_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::bool_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::bool_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::bool_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::bool_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::bool_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::bool_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::bool_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::char_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::char_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::char_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::char_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::char_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::char_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::char_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::char_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::char_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::char_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::char_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::char_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::check_transmute_ptr_address",
      "intrinsics::verify::check_transmute_ref_address",
      "intrinsics::verify::check_transmute_slice_metadata",
      "intrinsics::verify::check_transmute_unchecked_ptr_address",
      "intrinsics::verify::check_transmute_unchecked_ref_address",
      "intrinsics::verify::check_transmute_unchecked_slice_metadata",
      "intrinsics::verify::i128_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::i128_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::i128_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::i128_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::i128_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::i128_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::i128_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::i128_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::i128_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::i128_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::i128_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::i128_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::i16_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::i16_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::i16_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::i16_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::i16_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::i16_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::i16_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::i16_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::i16_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::i16_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::i16_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::i16_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::i32_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::i32_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::i32_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::i32_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::i32_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::i32_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::i32_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::i32_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::i32_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::i32_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::i32_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::i32_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::i64_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::i64_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::i64_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::i64_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::i64_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::i64_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::i64_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::i64_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::i64_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::i64_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::i64_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::i64_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::i8_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::i8_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::i8_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::i8_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::i8_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::i8_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::i8_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::i8_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::i8_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::i8_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::i8_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::i8_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::should_fail_f32_to_char",
      "intrinsics::verify::should_fail_i32_to_char",
      "intrinsics::verify::should_fail_i8_to_bool",
      "intrinsics::verify::should_fail_tuple_to_array",
      "intrinsics::verify::should_fail_tuple_to_struct",
      "intrinsics::verify::should_fail_tuple_to_tuple",
      "intrinsics::verify::should_fail_u32_to_char",
      "intrinsics::verify::should_fail_u8_to_bool",
      "intrinsics::verify::should_succeed_bool_to_i8",
      "intrinsics::verify::should_succeed_bool_to_u8",
      "intrinsics::verify::should_succeed_char_to_f32",
      "intrinsics::verify::should_succeed_char_to_i32",
      "intrinsics::verify::should_succeed_char_to_u32",
      "intrinsics::verify::should_succeed_f32_to_char",
      "intrinsics::verify::should_succeed_f32_to_i32",
      "intrinsics::verify::should_succeed_f32_to_u32",
      "intrinsics::verify::should_succeed_f64_to_i64",
      "intrinsics::verify::should_succeed_f64_to_u64",
      "intrinsics::verify::should_succeed_i128_to_u128",
      "intrinsics::verify::should_succeed_i16_to_u16",
      "intrinsics::verify::should_succeed_i32_to_char",
      "intrinsics::verify::should_succeed_i32_to_f32",
      "intrinsics::verify::should_succeed_i32_to_u32",
      "intrinsics::verify::should_succeed_i64_to_f64",
      "intrinsics::verify::should_succeed_i64_to_u64",
      "intrinsics::verify::should_succeed_i8_to_bool",
      "intrinsics::verify::should_succeed_i8_to_u8",
      "intrinsics::verify::should_succeed_tuple_to_array",
      "intrinsics::verify::should_succeed_tuple_to_struct",
      "intrinsics::verify::should_succeed_tuple_to_tuple",
      "intrinsics::verify::should_succeed_u128_to_i128",
      "intrinsics::verify::should_succeed_u16_to_i16",
      "intrinsics::verify::should_succeed_u32_to_char",
      "intrinsics::verify::should_succeed_u32_to_f32",
      "intrinsics::verify::should_succeed_u32_to_i32",
      "intrinsics::verify::should_succeed_u64_to_f64",
      "intrinsics::verify::should_succeed_u64_to_i64",
      "intrinsics::verify::should_succeed_u8_to_bool",
      "intrinsics::verify::should_succeed_u8_to_i8",
      "intrinsics::verify::struct_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::struct_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::struct_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::struct_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::struct_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::struct_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::struct_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::struct_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::struct_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::struct_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::struct_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::struct_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::supported_status",
      "intrinsics::verify::transmute_2ways_bool_to_i8",
      "intrinsics::verify::transmute_2ways_bool_to_u8",
      "intrinsics::verify::transmute_2ways_char_to_f32",
      "intrinsics::verify::transmute_2ways_char_to_i32",
      "intrinsics::verify::transmute_2ways_char_to_u32",
      "intrinsics::verify::transmute_2ways_f32_to_char",
      "intrinsics::verify::transmute_2ways_f32_to_i32",
      "intrinsics::verify::transmute_2ways_f32_to_u32",
      "intrinsics::verify::transmute_2ways_f64_to_i64",
      "intrinsics::verify::transmute_2ways_f64_to_u64",
      "intrinsics::verify::transmute_2ways_i128_to_u128",
      "intrinsics::verify::transmute_2ways_i16_to_u16",
      "intrinsics::verify::transmute_2ways_i32_to_char",
      "intrinsics::verify::transmute_2ways_i32_to_f32",
      "intrinsics::verify::transmute_2ways_i32_to_u32",
      "intrinsics::verify::transmute_2ways_i64_to_f64",
      "intrinsics::verify::transmute_2ways_i64_to_u64",
      "intrinsics::verify::transmute_2ways_i8_to_bool",
      "intrinsics::verify::transmute_2ways_i8_to_u8",
      "intrinsics::verify::transmute_2ways_u128_to_i128",
      "intrinsics::verify::transmute_2ways_u16_to_i16",
      "intrinsics::verify::transmute_2ways_u32_to_char",
      "intrinsics::verify::transmute_2ways_u32_to_f32",
      "intrinsics::verify::transmute_2ways_u32_to_i32",
      "intrinsics::verify::transmute_2ways_u64_to_f64",
      "intrinsics::verify::transmute_2ways_u64_to_i64",
      "intrinsics::verify::transmute_2ways_u8_to_bool",
      "intrinsics::verify::transmute_2ways_u8_to_i8",
      "intrinsics::verify::transmute_unchecked_2ways_bool_to_i8",
      "intrinsics::verify::transmute_unchecked_2ways_bool_to_u8",
      "intrinsics::verify::transmute_unchecked_2ways_char_to_f32",
      "intrinsics::verify::transmute_unchecked_2ways_char_to_i32",
      "intrinsics::verify::transmute_unchecked_2ways_char_to_u32",
      "intrinsics::verify::transmute_unchecked_2ways_f32_to_char",
      "intrinsics::verify::transmute_unchecked_2ways_f32_to_i32",
      "intrinsics::verify::transmute_unchecked_2ways_f32_to_u32",
      "intrinsics::verify::transmute_unchecked_2ways_f64_to_i64",
      "intrinsics::verify::transmute_unchecked_2ways_f64_to_u64",
      "intrinsics::verify::transmute_unchecked_2ways_i128_to_u128",
      "intrinsics::verify::transmute_unchecked_2ways_i16_to_u16",
      "intrinsics::verify::transmute_unchecked_2ways_i32_to_char",
      "intrinsics::verify::transmute_unchecked_2ways_i32_to_f32",
      "intrinsics::verify::transmute_unchecked_2ways_i32_to_u32",
      "intrinsics::verify::transmute_unchecked_2ways_i64_to_f64",
      "intrinsics::verify::transmute_unchecked_2ways_i64_to_u64",
      "intrinsics::verify::transmute_unchecked_2ways_i8_to_bool",
      "intrinsics::verify::transmute_unchecked_2ways_i8_to_u8",
      "intrinsics::verify::transmute_unchecked_2ways_u128_to_i128",
      "intrinsics::verify::transmute_unchecked_2ways_u16_to_i16",
      "intrinsics::verify::transmute_unchecked_2ways_u32_to_char",
      "intrinsics::verify::transmute_unchecked_2ways_u32_to_f32",
      "intrinsics::verify::transmute_unchecked_2ways_u32_to_i32",
      "intrinsics::verify::transmute_unchecked_2ways_u64_to_f64",
      "intrinsics::verify::transmute_unchecked_2ways_u64_to_i64",
      "intrinsics::verify::transmute_unchecked_2ways_u8_to_bool",
      "intrinsics::verify::transmute_unchecked_2ways_u8_to_i8",
      "intrinsics::verify::tuple_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::tuple_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::tuple_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::tuple_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::tuple_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::tuple_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::tuple_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::tuple_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::tuple_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::tuple_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::tuple_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::tuple_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::u128_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::u128_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::u128_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::u128_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::u128_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::u128_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::u128_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::u128_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::u128_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::u128_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::u128_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::u128_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::u16_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::u16_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::u16_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::u16_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::u16_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::u16_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::u16_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::u16_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::u16_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::u16_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::u16_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::u16_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::u32_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::u32_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::u32_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::u32_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::u32_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::u32_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::u32_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::u32_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::u32_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::u32_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::u32_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::u32_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::u64_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::u64_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::u64_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::u64_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::u64_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::u64_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::u64_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::u64_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::u64_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::u64_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::u64_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::u64_mod::transmute_unchecked_2ways_tuple_to_struct",
      "intrinsics::verify::u8_mod::transmute_2ways_arr_to_struct",
      "intrinsics::verify::u8_mod::transmute_2ways_arr_to_tuple",
      "intrinsics::verify::u8_mod::transmute_2ways_struct_to_arr",
      "intrinsics::verify::u8_mod::transmute_2ways_struct_to_tuple",
      "intrinsics::verify::u8_mod::transmute_2ways_tuple_to_arr",
      "intrinsics::verify::u8_mod::transmute_2ways_tuple_to_struct",
      "intrinsics::verify::u8_mod::transmute_unchecked_2ways_arr_to_struct",
      "intrinsics::verify::u8_mod::transmute_unchecked_2ways_arr_to_tuple",
      "intrinsics::verify::u8_mod::transmute_unchecked_2ways_struct_to_arr",
      "intrinsics::verify::u8_mod::transmute_unchecked_2ways_struct_to_tuple",
      "intrinsics::verify::u8_mod::transmute_unchecked_2ways_tuple_to_arr",
      "intrinsics::verify::u8_mod::transmute_unchecked_2ways_tuple_to_struct",
      "num::from_ascii_radix_panic::do_panic::compiletime",
      "num::from_ascii_radix_panic::do_panic::runtime",
      "slice::<impl [T]>::copy_from_slice::len_mismatch_fail::do_panic::compiletime",
      "slice::<impl [T]>::copy_from_slice::len_mismatch_fail::do_panic::runtime",
      "slice::index::slice_end_index_len_fail::do_panic::compiletime",
      "slice::index::slice_end_index_len_fail::do_panic::runtime",
      "slice::index::slice_index_order_fail::do_panic::compiletime",
      "slice::index::slice_index_order_fail::do_panic::runtime",
      "slice::index::slice_start_index_len_fail::do_panic::compiletime",
      "slice::index::slice_start_index_len_fail::do_panic::runtime",
      "ub_checks::check_language_ub::compiletime",
      "ub_checks::check_language_ub::runtime"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/iter/adapters/step_by.rs": [
      "<iter::adapters::step_by::StepBy<I> as iter::adapters::step_by::StepByImpl<I>>::spec_size_hint::first_size",
      "<iter::adapters::step_by::StepBy<I> as iter::adapters::step_by::StepByImpl<I>>::spec_size_hint::other_size",
      "<ops::range::Range<u16> as iter::adapters::step_by::SpecRangeSetup<ops::range::Range<u16>>>::setup",
      "<ops::range::Range<u32> as iter::adapters::step_by::SpecRangeSetup<ops::range::Range<u32>>>::setup",
      "<ops::range::Range<u64> as iter::adapters::step_by::SpecRangeSetup<ops::range::Range<u64>>>::setup",
      "<ops::range::Range<u8> as iter::adapters::step_by::SpecRangeSetup<ops::range::Range<u8>>>::setup",
      "<ops::range::Range<usize> as iter::adapters::step_by::SpecRangeSetup<ops::range::Range<usize>>>::setup"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/iter/range.rs": [
      "<char as iter::range::Step>::backward_checked",
      "<char as iter::range::Step>::backward_unchecked",
      "<char as iter::range::Step>::forward_checked",
      "<char as iter::range::Step>::forward_unchecked",
      "<i128 as iter::range::Step>::backward",
      "<i128 as iter::range::Step>::backward_checked",
      "<i128 as iter::range::Step>::backward_unchecked",
      "<i128 as iter::range::Step>::forward",
      "<i128 as iter::range::Step>::forward_checked",
      "<i128 as iter::range::Step>::forward_unchecked",
      "<i16 as iter::range::Step>::backward",
      "<i16 as iter::range::Step>::backward_checked",
      "<i16 as iter::range::Step>::backward_unchecked",
      "<i16 as iter::range::Step>::forward",
      "<i16 as iter::range::Step>::forward_checked",
      "<i16 as iter::range::Step>::forward_unchecked",
      "<i32 as iter::range::Step>::backward",
      "<i32 as iter::range::Step>::backward_checked",
      "<i32 as iter::range::Step>::backward_unchecked",
      "<i32 as iter::range::Step>::forward",
      "<i32 as iter::range::Step>::forward_checked",
      "<i32 as iter::range::Step>::forward_unchecked",
      "<i64 as iter::range::Step>::backward",
      "<i64 as iter::range::Step>::backward_checked",
      "<i64 as iter::range::Step>::backward_unchecked",
      "<i64 as iter::range::Step>::forward",
      "<i64 as iter::range::Step>::forward_checked",
      "<i64 as iter::range::Step>::forward_unchecked",
      "<i8 as iter::range::Step>::backward",
      "<i8 as iter::range::Step>::backward_checked",
      "<i8 as iter::range::Step>::backward_unchecked",
      "<i8 as iter::range::Step>::forward",
      "<i8 as iter::range::Step>::forward_checked",
      "<i8 as iter::range::Step>::forward_unchecked",
      "<isize as iter::range::Step>::backward",
      "<isize as iter::range::Step>::backward_checked",
      "<isize as iter::range::Step>::backward_unchecked",
      "<isize as iter::range::Step>::forward",
      "<isize as iter::range::Step>::forward_checked",
      "<isize as iter::range::Step>::forward_unchecked",
      "<u128 as iter::range::Step>::backward",
      "<u128 as iter::range::Step>::backward_checked",
      "<u128 as iter::range::Step>::backward_unchecked",
      "<u128 as iter::range::Step>::forward",
      "<u128 as iter::range::Step>::forward_checked",
      "<u128 as iter::range::Step>::forward_unchecked",
      "<u16 as iter::range::Step>::backward",
      "<u16 as iter::range::Step>::backward_checked",
      "<u16 as iter::range::Step>::backward_unchecked",
      "<u16 as iter::range::Step>::forward",
      "<u16 as iter::range::Step>::forward_checked",
      "<u16 as iter::range::Step>::forward_unchecked",
      "<u32 as iter::range::Step>::backward",
      "<u32 as iter::range::Step>::backward_checked",
      "<u32 as iter::range::Step>::backward_unchecked",
      "<u32 as iter::range::Step>::forward",
      "<u32 as iter::range::Step>::forward_checked",
      "<u32 as iter::range::Step>::forward_unchecked",
      "<u64 as iter::range::Step>::backward",
      "<u64 as iter::range::Step>::backward_checked",
      "<u64 as iter::range::Step>::backward_unchecked",
      "<u64 as iter::range::Step>::forward",
      "<u64 as iter::range::Step>::forward_checked",
      "<u64 as iter::range::Step>::forward_unchecked",
      "<u8 as iter::range::Step>::backward",
      "<u8 as iter::range::Step>::backward_checked",
      "<u8 as iter::range::Step>::backward_unchecked",
      "<u8 as iter::range::Step>::forward",
      "<u8 as iter::range::Step>::forward_checked",
      "<u8 as iter::range::Step>::forward_unchecked",
      "<usize as iter::range::Step>::backward",
      "<usize as iter::range::Step>::backward_checked",
      "<usize as iter::range::Step>::backward_unchecked",
      "<usize as iter::range::Step>::forward",
      "<usize as iter::range::Step>::forward_checked",
      "<usize as iter::range::Step>::forward_unchecked"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/marker.rs": [
      "<marker::PhantomPinned as default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/marker/variance.rs": [
      "<marker::variance::PhantomContravariantLifetime<'_> as default::Default>::default",
      "<marker::variance::PhantomCovariantLifetime<'_> as default::Default>::default",
      "<marker::variance::PhantomInvariantLifetime<'_> as default::Default>::default",
      "marker::variance::PhantomContravariantLifetime::<'_>::new",
      "marker::variance::PhantomCovariantLifetime::<'_>::new",
      "marker::variance::PhantomInvariantLifetime::<'_>::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/net/ip_addr.rs": [
      "<<net::ip_addr::Ipv6Addr as fmt::Display>::fmt::Span as default::Default>::default",
      "<net::ip_addr::IpAddr as convert::From<[u16; 8]>>::from",
      "<net::ip_addr::IpAddr as convert::From<[u8; 16]>>::from",
      "<net::ip_addr::IpAddr as convert::From<[u8; 4]>>::from",
      "<net::ip_addr::Ipv4Addr as convert::From<[u8; 4]>>::from",
      "<net::ip_addr::Ipv4Addr as convert::From<u32>>::from",
      "<net::ip_addr::Ipv6Addr as convert::From<[u16; 8]>>::from",
      "<net::ip_addr::Ipv6Addr as convert::From<[u8; 16]>>::from",
      "<net::ip_addr::Ipv6Addr as convert::From<u128>>::from",
      "net::ip_addr::Ipv4Addr::from_bits",
      "net::ip_addr::Ipv4Addr::from_octets",
      "net::ip_addr::Ipv4Addr::new",
      "net::ip_addr::Ipv6Addr::from_bits",
      "net::ip_addr::Ipv6Addr::from_octets",
      "net::ip_addr::Ipv6Addr::from_segments",
      "net::ip_addr::Ipv6Addr::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/bignum.rs": [
      "<u16 as num::bignum::FullOps>::full_div_rem",
      "<u16 as num::bignum::FullOps>::full_mul_add",
      "<u32 as num::bignum::FullOps>::full_div_rem",
      "<u32 as num::bignum::FullOps>::full_mul_add",
      "<u8 as num::bignum::FullOps>::full_div_rem",
      "<u8 as num::bignum::FullOps>::full_mul_add",
      "num::bignum::Big32x40::from_small",
      "num::bignum::Big32x40::from_u64",
      "num::bignum::tests::Big8x3::from_small",
      "num::bignum::tests::Big8x3::from_u64"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/dec2flt/common.rs": [
      "<num::dec2flt::common::BiasedFp as default::Default>::default",
      "num::dec2flt::common::BiasedFp::zero_pow2",
      "num::dec2flt::common::is_8digits"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/dec2flt/decimal.rs": [
      "<num::dec2flt::decimal::Decimal as default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/dec2flt/decimal_seq.rs": [
      "<num::dec2flt::decimal_seq::DecimalSeq as default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/dec2flt/float.rs": [
      "<f16 as num::dec2flt::float::RawFloat>::classify",
      "<f16 as num::dec2flt::float::RawFloat>::from_u64",
      "<f16 as num::dec2flt::float::RawFloat>::from_u64_bits",
      "<f16 as num::dec2flt::float::RawFloat>::pow10_fast_path",
      "<f16 as num::dec2flt::float::RawFloat>::to_bits",
      "<f32 as num::dec2flt::float::RawFloat>::classify",
      "<f32 as num::dec2flt::float::RawFloat>::from_u64",
      "<f32 as num::dec2flt::float::RawFloat>::from_u64_bits",
      "<f32 as num::dec2flt::float::RawFloat>::pow10_fast_path",
      "<f32 as num::dec2flt::float::RawFloat>::to_bits",
      "<f64 as num::dec2flt::float::RawFloat>::classify",
      "<f64 as num::dec2flt::float::RawFloat>::from_u64",
      "<f64 as num::dec2flt::float::RawFloat>::from_u64_bits",
      "<f64 as num::dec2flt::float::RawFloat>::pow10_fast_path",
      "<f64 as num::dec2flt::float::RawFloat>::to_bits",
      "<u16 as num::dec2flt::float::CastInto<i16>>::cast",
      "<u32 as num::dec2flt::float::CastInto<i16>>::cast",
      "<u64 as num::dec2flt::float::CastInto<i16>>::cast",
      "num::dec2flt::float::pow2_to_pow10"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/dec2flt/lemire.rs": [
      "num::dec2flt::lemire::compute_product_approx",
      "num::dec2flt::lemire::full_multiplication",
      "num::dec2flt::lemire::power"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/dec2flt/mod.rs": [
      "num::dec2flt::pfe_empty",
      "num::dec2flt::pfe_invalid"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/dec2flt/parse.rs": [
      "num::dec2flt::parse::parse_8digits"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/error.rs": [
      "num::error::TryFromIntError"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/f128.rs": [
      "f128::<impl f128>::abs",
      "f128::<impl f128>::algebraic_add",
      "f128::<impl f128>::algebraic_div",
      "f128::<impl f128>::algebraic_mul",
      "f128::<impl f128>::algebraic_rem",
      "f128::<impl f128>::algebraic_sub",
      "f128::<impl f128>::ceil",
      "f128::<impl f128>::clamp",
      "f128::<impl f128>::classify",
      "f128::<impl f128>::copysign",
      "f128::<impl f128>::div_euclid",
      "f128::<impl f128>::floor",
      "f128::<impl f128>::fract",
      "f128::<impl f128>::from_be_bytes",
      "f128::<impl f128>::from_bits",
      "f128::<impl f128>::from_le_bytes",
      "f128::<impl f128>::from_ne_bytes",
      "f128::<impl f128>::is_finite",
      "f128::<impl f128>::is_infinite",
      "f128::<impl f128>::is_nan",
      "f128::<impl f128>::is_normal",
      "f128::<impl f128>::is_sign_negative",
      "f128::<impl f128>::is_sign_positive",
      "f128::<impl f128>::is_subnormal",
      "f128::<impl f128>::max",
      "f128::<impl f128>::maximum",
      "f128::<impl f128>::midpoint",
      "f128::<impl f128>::min",
      "f128::<impl f128>::minimum",
      "f128::<impl f128>::mul_add",
      "f128::<impl f128>::next_down",
      "f128::<impl f128>::next_up",
      "f128::<impl f128>::powi",
      "f128::<impl f128>::recip",
      "f128::<impl f128>::rem_euclid",
      "f128::<impl f128>::round",
      "f128::<impl f128>::round_ties_even",
      "f128::<impl f128>::signum",
      "f128::<impl f128>::sqrt",
      "f128::<impl f128>::to_be_bytes",
      "f128::<impl f128>::to_bits",
      "f128::<impl f128>::to_degrees",
      "f128::<impl f128>::to_le_bytes",
      "f128::<impl f128>::to_ne_bytes",
      "f128::<impl f128>::to_radians",
      "f128::<impl f128>::trunc"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/f16.rs": [
      "f16::<impl f16>::abs",
      "f16::<impl f16>::algebraic_add",
      "f16::<impl f16>::algebraic_div",
      "f16::<impl f16>::algebraic_mul",
      "f16::<impl f16>::algebraic_rem",
      "f16::<impl f16>::algebraic_sub",
      "f16::<impl f16>::cbrt",
      "f16::<impl f16>::ceil",
      "f16::<impl f16>::clamp",
      "f16::<impl f16>::classify",
      "f16::<impl f16>::copysign",
      "f16::<impl f16>::div_euclid",
      "f16::<impl f16>::floor",
      "f16::<impl f16>::fract",
      "f16::<impl f16>::from_be_bytes",
      "f16::<impl f16>::from_bits",
      "f16::<impl f16>::from_le_bytes",
      "f16::<impl f16>::from_ne_bytes",
      "f16::<impl f16>::is_finite",
      "f16::<impl f16>::is_infinite",
      "f16::<impl f16>::is_nan",
      "f16::<impl f16>::is_normal",
      "f16::<impl f16>::is_sign_negative",
      "f16::<impl f16>::is_sign_positive",
      "f16::<impl f16>::is_subnormal",
      "f16::<impl f16>::max",
      "f16::<impl f16>::maximum",
      "f16::<impl f16>::midpoint",
      "f16::<impl f16>::min",
      "f16::<impl f16>::minimum",
      "f16::<impl f16>::mul_add",
      "f16::<impl f16>::next_down",
      "f16::<impl f16>::next_up",
      "f16::<impl f16>::powi",
      "f16::<impl f16>::recip",
      "f16::<impl f16>::rem_euclid",
      "f16::<impl f16>::round",
      "f16::<impl f16>::round_ties_even",
      "f16::<impl f16>::signum",
      "f16::<impl f16>::sqrt",
      "f16::<impl f16>::to_be_bytes",
      "f16::<impl f16>::to_bits",
      "f16::<impl f16>::to_degrees",
      "f16::<impl f16>::to_le_bytes",
      "f16::<impl f16>::to_ne_bytes",
      "f16::<impl f16>::to_radians",
      "f16::<impl f16>::trunc"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/f32.rs": [
      "f32::<impl f32>::abs",
      "f32::<impl f32>::algebraic_add",
      "f32::<impl f32>::algebraic_div",
      "f32::<impl f32>::algebraic_mul",
      "f32::<impl f32>::algebraic_rem",
      "f32::<impl f32>::algebraic_sub",
      "f32::<impl f32>::clamp",
      "f32::<impl f32>::classify",
      "f32::<impl f32>::copysign",
      "f32::<impl f32>::from_be_bytes",
      "f32::<impl f32>::from_bits",
      "f32::<impl f32>::from_le_bytes",
      "f32::<impl f32>::from_ne_bytes",
      "f32::<impl f32>::is_finite",
      "f32::<impl f32>::is_infinite",
      "f32::<impl f32>::is_nan",
      "f32::<impl f32>::is_normal",
      "f32::<impl f32>::is_sign_negative",
      "f32::<impl f32>::is_sign_positive",
      "f32::<impl f32>::is_subnormal",
      "f32::<impl f32>::max",
      "f32::<impl f32>::maximum",
      "f32::<impl f32>::midpoint",
      "f32::<impl f32>::min",
      "f32::<impl f32>::minimum",
      "f32::<impl f32>::next_down",
      "f32::<impl f32>::next_up",
      "f32::<impl f32>::recip",
      "f32::<impl f32>::signum",
      "f32::<impl f32>::to_be_bytes",
      "f32::<impl f32>::to_bits",
      "f32::<impl f32>::to_degrees",
      "f32::<impl f32>::to_le_bytes",
      "f32::<impl f32>::to_ne_bytes",
      "f32::<impl f32>::to_radians",
      "f32::math::abs_sub",
      "f32::math::cbrt",
      "f32::math::ceil",
      "f32::math::div_euclid",
      "f32::math::floor",
      "f32::math::fract",
      "f32::math::mul_add",
      "f32::math::powi",
      "f32::math::rem_euclid",
      "f32::math::round",
      "f32::math::round_ties_even",
      "f32::math::sqrt",
      "f32::math::trunc"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/f64.rs": [
      "f64::<impl f64>::abs",
      "f64::<impl f64>::algebraic_add",
      "f64::<impl f64>::algebraic_div",
      "f64::<impl f64>::algebraic_mul",
      "f64::<impl f64>::algebraic_rem",
      "f64::<impl f64>::algebraic_sub",
      "f64::<impl f64>::clamp",
      "f64::<impl f64>::classify",
      "f64::<impl f64>::copysign",
      "f64::<impl f64>::from_be_bytes",
      "f64::<impl f64>::from_bits",
      "f64::<impl f64>::from_le_bytes",
      "f64::<impl f64>::from_ne_bytes",
      "f64::<impl f64>::is_finite",
      "f64::<impl f64>::is_infinite",
      "f64::<impl f64>::is_nan",
      "f64::<impl f64>::is_negative",
      "f64::<impl f64>::is_normal",
      "f64::<impl f64>::is_positive",
      "f64::<impl f64>::is_sign_negative",
      "f64::<impl f64>::is_sign_positive",
      "f64::<impl f64>::is_subnormal",
      "f64::<impl f64>::max",
      "f64::<impl f64>::maximum",
      "f64::<impl f64>::midpoint",
      "f64::<impl f64>::min",
      "f64::<impl f64>::minimum",
      "f64::<impl f64>::next_down",
      "f64::<impl f64>::next_up",
      "f64::<impl f64>::recip",
      "f64::<impl f64>::signum",
      "f64::<impl f64>::to_be_bytes",
      "f64::<impl f64>::to_bits",
      "f64::<impl f64>::to_degrees",
      "f64::<impl f64>::to_le_bytes",
      "f64::<impl f64>::to_ne_bytes",
      "f64::<impl f64>::to_radians",
      "f64::math::abs_sub",
      "f64::math::cbrt",
      "f64::math::ceil",
      "f64::math::div_euclid",
      "f64::math::floor",
      "f64::math::fract",
      "f64::math::mul_add",
      "f64::math::powi",
      "f64::math::rem_euclid",
      "f64::math::round",
      "f64::math::round_ties_even",
      "f64::math::sqrt",
      "f64::math::trunc"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/flt2dec/decoder.rs": [
      "<f16 as num::flt2dec::decoder::DecodableFloat>::min_pos_norm_value",
      "<f32 as num::flt2dec::decoder::DecodableFloat>::min_pos_norm_value",
      "<f64 as num::flt2dec::decoder::DecodableFloat>::min_pos_norm_value"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/flt2dec/estimator.rs": [
      "num::flt2dec::estimator::estimate_scaling_factor"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/flt2dec/mod.rs": [
      "num::flt2dec::estimate_max_buf_len"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/flt2dec/strategy/grisu.rs": [
      "num::flt2dec::strategy::grisu::cached_power",
      "num::flt2dec::strategy::grisu::max_pow10_no_more_than"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/fmt.rs": [
      "num::fmt::Part::<'_>::Num",
      "num::fmt::Part::<'_>::Zero"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_log10.rs": [
      "num::int_log10::i128",
      "num::int_log10::i16",
      "num::int_log10::i32",
      "num::int_log10::i64",
      "num::int_log10::i8",
      "num::int_log10::less_than_5",
      "num::int_log10::panic_for_nonpositive_argument",
      "num::int_log10::u128",
      "num::int_log10::u16",
      "num::int_log10::u32",
      "num::int_log10::u64",
      "num::int_log10::u8",
      "num::int_log10::usize"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs": [
      "num::<impl i128>::abs",
      "num::<impl i128>::abs_diff",
      "num::<impl i128>::borrowing_sub",
      "num::<impl i128>::carrying_add",
      "num::<impl i128>::carrying_mul",
      "num::<impl i128>::carrying_mul_add",
      "num::<impl i128>::cast_unsigned",
      "num::<impl i128>::checked_abs",
      "num::<impl i128>::checked_add",
      "num::<impl i128>::checked_add_unsigned",
      "num::<impl i128>::checked_div",
      "num::<impl i128>::checked_div_euclid",
      "num::<impl i128>::checked_exact_div",
      "num::<impl i128>::checked_ilog",
      "num::<impl i128>::checked_ilog10",
      "num::<impl i128>::checked_ilog2",
      "num::<impl i128>::checked_isqrt",
      "num::<impl i128>::checked_mul",
      "num::<impl i128>::checked_neg",
      "num::<impl i128>::checked_next_multiple_of",
      "num::<impl i128>::checked_pow",
      "num::<impl i128>::checked_rem",
      "num::<impl i128>::checked_rem_euclid",
      "num::<impl i128>::checked_shl",
      "num::<impl i128>::checked_shr",
      "num::<impl i128>::checked_sub",
      "num::<impl i128>::checked_sub_unsigned",
      "num::<impl i128>::count_ones",
      "num::<impl i128>::count_zeros",
      "num::<impl i128>::div_ceil",
      "num::<impl i128>::div_euclid",
      "num::<impl i128>::div_floor",
      "num::<impl i128>::exact_div",
      "num::<impl i128>::from_be",
      "num::<impl i128>::from_be_bytes",
      "num::<impl i128>::from_le",
      "num::<impl i128>::from_le_bytes",
      "num::<impl i128>::from_ne_bytes",
      "num::<impl i128>::ilog",
      "num::<impl i128>::ilog10",
      "num::<impl i128>::ilog2",
      "num::<impl i128>::is_negative",
      "num::<impl i128>::is_positive",
      "num::<impl i128>::isolate_least_significant_one",
      "num::<impl i128>::isolate_most_significant_one",
      "num::<impl i128>::isqrt",
      "num::<impl i128>::leading_ones",
      "num::<impl i128>::leading_zeros",
      "num::<impl i128>::max_value",
      "num::<impl i128>::min_value",
      "num::<impl i128>::next_multiple_of",
      "num::<impl i128>::overflowing_abs",
      "num::<impl i128>::overflowing_add",
      "num::<impl i128>::overflowing_add_unsigned",
      "num::<impl i128>::overflowing_div",
      "num::<impl i128>::overflowing_div_euclid",
      "num::<impl i128>::overflowing_mul",
      "num::<impl i128>::overflowing_neg",
      "num::<impl i128>::overflowing_pow",
      "num::<impl i128>::overflowing_rem",
      "num::<impl i128>::overflowing_rem_euclid",
      "num::<impl i128>::overflowing_shl",
      "num::<impl i128>::overflowing_shr",
      "num::<impl i128>::overflowing_sub",
      "num::<impl i128>::overflowing_sub_unsigned",
      "num::<impl i128>::pow",
      "num::<impl i128>::rem_euclid",
      "num::<impl i128>::reverse_bits",
      "num::<impl i128>::rotate_left",
      "num::<impl i128>::rotate_right",
      "num::<impl i128>::saturating_abs",
      "num::<impl i128>::saturating_add",
      "num::<impl i128>::saturating_add_unsigned",
      "num::<impl i128>::saturating_div",
      "num::<impl i128>::saturating_mul",
      "num::<impl i128>::saturating_neg",
      "num::<impl i128>::saturating_pow",
      "num::<impl i128>::saturating_sub",
      "num::<impl i128>::saturating_sub_unsigned",
      "num::<impl i128>::signum",
      "num::<impl i128>::strict_abs",
      "num::<impl i128>::strict_add",
      "num::<impl i128>::strict_add_unsigned",
      "num::<impl i128>::strict_div",
      "num::<impl i128>::strict_div_euclid",
      "num::<impl i128>::strict_mul",
      "num::<impl i128>::strict_neg",
      "num::<impl i128>::strict_pow",
      "num::<impl i128>::strict_rem",
      "num::<impl i128>::strict_rem_euclid",
      "num::<impl i128>::strict_shl",
      "num::<impl i128>::strict_shr",
      "num::<impl i128>::strict_sub",
      "num::<impl i128>::strict_sub_unsigned",
      "num::<impl i128>::swap_bytes",
      "num::<impl i128>::to_be",
      "num::<impl i128>::to_be_bytes",
      "num::<impl i128>::to_le",
      "num::<impl i128>::to_le_bytes",
      "num::<impl i128>::to_ne_bytes",
      "num::<impl i128>::trailing_ones",
      "num::<impl i128>::trailing_zeros",
      "num::<impl i128>::unbounded_shl",
      "num::<impl i128>::unbounded_shr",
      "num::<impl i128>::unchecked_exact_div",
      "num::<impl i128>::unsigned_abs",
      "num::<impl i128>::widening_mul",
      "num::<impl i128>::wrapping_abs",
      "num::<impl i128>::wrapping_add",
      "num::<impl i128>::wrapping_add_unsigned",
      "num::<impl i128>::wrapping_div",
      "num::<impl i128>::wrapping_div_euclid",
      "num::<impl i128>::wrapping_mul",
      "num::<impl i128>::wrapping_neg",
      "num::<impl i128>::wrapping_pow",
      "num::<impl i128>::wrapping_rem",
      "num::<impl i128>::wrapping_rem_euclid",
      "num::<impl i128>::wrapping_sub",
      "num::<impl i128>::wrapping_sub_unsigned",
      "num::<impl i16>::abs",
      "num::<impl i16>::abs_diff",
      "num::<impl i16>::borrowing_sub",
      "num::<impl i16>::carrying_add",
      "num::<impl i16>::carrying_mul",
      "num::<impl i16>::carrying_mul_add",
      "num::<impl i16>::cast_unsigned",
      "num::<impl i16>::checked_abs",
      "num::<impl i16>::checked_add",
      "num::<impl i16>::checked_add_unsigned",
      "num::<impl i16>::checked_div",
      "num::<impl i16>::checked_div_euclid",
      "num::<impl i16>::checked_exact_div",
      "num::<impl i16>::checked_ilog",
      "num::<impl i16>::checked_ilog10",
      "num::<impl i16>::checked_ilog2",
      "num::<impl i16>::checked_isqrt",
      "num::<impl i16>::checked_mul",
      "num::<impl i16>::checked_neg",
      "num::<impl i16>::checked_next_multiple_of",
      "num::<impl i16>::checked_pow",
      "num::<impl i16>::checked_rem",
      "num::<impl i16>::checked_rem_euclid",
      "num::<impl i16>::checked_shl",
      "num::<impl i16>::checked_shr",
      "num::<impl i16>::checked_sub",
      "num::<impl i16>::checked_sub_unsigned",
      "num::<impl i16>::count_ones",
      "num::<impl i16>::count_zeros",
      "num::<impl i16>::div_ceil",
      "num::<impl i16>::div_euclid",
      "num::<impl i16>::div_floor",
      "num::<impl i16>::exact_div",
      "num::<impl i16>::from_be",
      "num::<impl i16>::from_be_bytes",
      "num::<impl i16>::from_le",
      "num::<impl i16>::from_le_bytes",
      "num::<impl i16>::from_ne_bytes",
      "num::<impl i16>::ilog",
      "num::<impl i16>::ilog10",
      "num::<impl i16>::ilog2",
      "num::<impl i16>::is_negative",
      "num::<impl i16>::is_positive",
      "num::<impl i16>::isolate_least_significant_one",
      "num::<impl i16>::isolate_most_significant_one",
      "num::<impl i16>::isqrt",
      "num::<impl i16>::leading_ones",
      "num::<impl i16>::leading_zeros",
      "num::<impl i16>::max_value",
      "num::<impl i16>::min_value",
      "num::<impl i16>::next_multiple_of",
      "num::<impl i16>::overflowing_abs",
      "num::<impl i16>::overflowing_add",
      "num::<impl i16>::overflowing_add_unsigned",
      "num::<impl i16>::overflowing_div",
      "num::<impl i16>::overflowing_div_euclid",
      "num::<impl i16>::overflowing_mul",
      "num::<impl i16>::overflowing_neg",
      "num::<impl i16>::overflowing_pow",
      "num::<impl i16>::overflowing_rem",
      "num::<impl i16>::overflowing_rem_euclid",
      "num::<impl i16>::overflowing_shl",
      "num::<impl i16>::overflowing_shr",
      "num::<impl i16>::overflowing_sub",
      "num::<impl i16>::overflowing_sub_unsigned",
      "num::<impl i16>::pow",
      "num::<impl i16>::rem_euclid",
      "num::<impl i16>::reverse_bits",
      "num::<impl i16>::rotate_left",
      "num::<impl i16>::rotate_right",
      "num::<impl i16>::saturating_abs",
      "num::<impl i16>::saturating_add",
      "num::<impl i16>::saturating_add_unsigned",
      "num::<impl i16>::saturating_div",
      "num::<impl i16>::saturating_mul",
      "num::<impl i16>::saturating_neg",
      "num::<impl i16>::saturating_pow",
      "num::<impl i16>::saturating_sub",
      "num::<impl i16>::saturating_sub_unsigned",
      "num::<impl i16>::signum",
      "num::<impl i16>::strict_abs",
      "num::<impl i16>::strict_add",
      "num::<impl i16>::strict_add_unsigned",
      "num::<impl i16>::strict_div",
      "num::<impl i16>::strict_div_euclid",
      "num::<impl i16>::strict_mul",
      "num::<impl i16>::strict_neg",
      "num::<impl i16>::strict_pow",
      "num::<impl i16>::strict_rem",
      "num::<impl i16>::strict_rem_euclid",
      "num::<impl i16>::strict_shl",
      "num::<impl i16>::strict_shr",
      "num::<impl i16>::strict_sub",
      "num::<impl i16>::strict_sub_unsigned",
      "num::<impl i16>::swap_bytes",
      "num::<impl i16>::to_be",
      "num::<impl i16>::to_be_bytes",
      "num::<impl i16>::to_le",
      "num::<impl i16>::to_le_bytes",
      "num::<impl i16>::to_ne_bytes",
      "num::<impl i16>::trailing_ones",
      "num::<impl i16>::trailing_zeros",
      "num::<impl i16>::unbounded_shl",
      "num::<impl i16>::unbounded_shr",
      "num::<impl i16>::unchecked_exact_div",
      "num::<impl i16>::unsigned_abs",
      "num::<impl i16>::widening_mul",
      "num::<impl i16>::wrapping_abs",
      "num::<impl i16>::wrapping_add",
      "num::<impl i16>::wrapping_add_unsigned",
      "num::<impl i16>::wrapping_div",
      "num::<impl i16>::wrapping_div_euclid",
      "num::<impl i16>::wrapping_mul",
      "num::<impl i16>::wrapping_neg",
      "num::<impl i16>::wrapping_pow",
      "num::<impl i16>::wrapping_rem",
      "num::<impl i16>::wrapping_rem_euclid",
      "num::<impl i16>::wrapping_sub",
      "num::<impl i16>::wrapping_sub_unsigned",
      "num::<impl i32>::abs",
      "num::<impl i32>::abs_diff",
      "num::<impl i32>::borrowing_sub",
      "num::<impl i32>::carrying_add",
      "num::<impl i32>::carrying_mul",
      "num::<impl i32>::carrying_mul_add",
      "num::<impl i32>::cast_unsigned",
      "num::<impl i32>::checked_abs",
      "num::<impl i32>::checked_add",
      "num::<impl i32>::checked_add_unsigned",
      "num::<impl i32>::checked_div",
      "num::<impl i32>::checked_div_euclid",
      "num::<impl i32>::checked_exact_div",
      "num::<impl i32>::checked_ilog",
      "num::<impl i32>::checked_ilog10",
      "num::<impl i32>::checked_ilog2",
      "num::<impl i32>::checked_isqrt",
      "num::<impl i32>::checked_mul",
      "num::<impl i32>::checked_neg",
      "num::<impl i32>::checked_next_multiple_of",
      "num::<impl i32>::checked_pow",
      "num::<impl i32>::checked_rem",
      "num::<impl i32>::checked_rem_euclid",
      "num::<impl i32>::checked_shl",
      "num::<impl i32>::checked_shr",
      "num::<impl i32>::checked_sub",
      "num::<impl i32>::checked_sub_unsigned",
      "num::<impl i32>::count_ones",
      "num::<impl i32>::count_zeros",
      "num::<impl i32>::div_ceil",
      "num::<impl i32>::div_euclid",
      "num::<impl i32>::div_floor",
      "num::<impl i32>::exact_div",
      "num::<impl i32>::from_be",
      "num::<impl i32>::from_be_bytes",
      "num::<impl i32>::from_le",
      "num::<impl i32>::from_le_bytes",
      "num::<impl i32>::from_ne_bytes",
      "num::<impl i32>::ilog",
      "num::<impl i32>::ilog10",
      "num::<impl i32>::ilog2",
      "num::<impl i32>::is_negative",
      "num::<impl i32>::is_positive",
      "num::<impl i32>::isolate_least_significant_one",
      "num::<impl i32>::isolate_most_significant_one",
      "num::<impl i32>::isqrt",
      "num::<impl i32>::leading_ones",
      "num::<impl i32>::leading_zeros",
      "num::<impl i32>::max_value",
      "num::<impl i32>::min_value",
      "num::<impl i32>::next_multiple_of",
      "num::<impl i32>::overflowing_abs",
      "num::<impl i32>::overflowing_add",
      "num::<impl i32>::overflowing_add_unsigned",
      "num::<impl i32>::overflowing_div",
      "num::<impl i32>::overflowing_div_euclid",
      "num::<impl i32>::overflowing_mul",
      "num::<impl i32>::overflowing_neg",
      "num::<impl i32>::overflowing_pow",
      "num::<impl i32>::overflowing_rem",
      "num::<impl i32>::overflowing_rem_euclid",
      "num::<impl i32>::overflowing_shl",
      "num::<impl i32>::overflowing_shr",
      "num::<impl i32>::overflowing_sub",
      "num::<impl i32>::overflowing_sub_unsigned",
      "num::<impl i32>::pow",
      "num::<impl i32>::rem_euclid",
      "num::<impl i32>::reverse_bits",
      "num::<impl i32>::rotate_left",
      "num::<impl i32>::rotate_right",
      "num::<impl i32>::saturating_abs",
      "num::<impl i32>::saturating_add",
      "num::<impl i32>::saturating_add_unsigned",
      "num::<impl i32>::saturating_div",
      "num::<impl i32>::saturating_mul",
      "num::<impl i32>::saturating_neg",
      "num::<impl i32>::saturating_pow",
      "num::<impl i32>::saturating_sub",
      "num::<impl i32>::saturating_sub_unsigned",
      "num::<impl i32>::signum",
      "num::<impl i32>::strict_abs",
      "num::<impl i32>::strict_add",
      "num::<impl i32>::strict_add_unsigned",
      "num::<impl i32>::strict_div",
      "num::<impl i32>::strict_div_euclid",
      "num::<impl i32>::strict_mul",
      "num::<impl i32>::strict_neg",
      "num::<impl i32>::strict_pow",
      "num::<impl i32>::strict_rem",
      "num::<impl i32>::strict_rem_euclid",
      "num::<impl i32>::strict_shl",
      "num::<impl i32>::strict_shr",
      "num::<impl i32>::strict_sub",
      "num::<impl i32>::strict_sub_unsigned",
      "num::<impl i32>::swap_bytes",
      "num::<impl i32>::to_be",
      "num::<impl i32>::to_be_bytes",
      "num::<impl i32>::to_le",
      "num::<impl i32>::to_le_bytes",
      "num::<impl i32>::to_ne_bytes",
      "num::<impl i32>::trailing_ones",
      "num::<impl i32>::trailing_zeros",
      "num::<impl i32>::unbounded_shl",
      "num::<impl i32>::unbounded_shr",
      "num::<impl i32>::unchecked_exact_div",
      "num::<impl i32>::unsigned_abs",
      "num::<impl i32>::widening_mul",
      "num::<impl i32>::wrapping_abs",
      "num::<impl i32>::wrapping_add",
      "num::<impl i32>::wrapping_add_unsigned",
      "num::<impl i32>::wrapping_div",
      "num::<impl i32>::wrapping_div_euclid",
      "num::<impl i32>::wrapping_mul",
      "num::<impl i32>::wrapping_neg",
      "num::<impl i32>::wrapping_pow",
      "num::<impl i32>::wrapping_rem",
      "num::<impl i32>::wrapping_rem_euclid",
      "num::<impl i32>::wrapping_sub",
      "num::<impl i32>::wrapping_sub_unsigned",
      "num::<impl i64>::abs",
      "num::<impl i64>::abs_diff",
      "num::<impl i64>::borrowing_sub",
      "num::<impl i64>::carrying_add",
      "num::<impl i64>::carrying_mul",
      "num::<impl i64>::carrying_mul_add",
      "num::<impl i64>::cast_unsigned",
      "num::<impl i64>::checked_abs",
      "num::<impl i64>::checked_add",
      "num::<impl i64>::checked_add_unsigned",
      "num::<impl i64>::checked_div",
      "num::<impl i64>::checked_div_euclid",
      "num::<impl i64>::checked_exact_div",
      "num::<impl i64>::checked_ilog",
      "num::<impl i64>::checked_ilog10",
      "num::<impl i64>::checked_ilog2",
      "num::<impl i64>::checked_isqrt",
      "num::<impl i64>::checked_mul",
      "num::<impl i64>::checked_neg",
      "num::<impl i64>::checked_next_multiple_of",
      "num::<impl i64>::checked_pow",
      "num::<impl i64>::checked_rem",
      "num::<impl i64>::checked_rem_euclid",
      "num::<impl i64>::checked_shl",
      "num::<impl i64>::checked_shr",
      "num::<impl i64>::checked_sub",
      "num::<impl i64>::checked_sub_unsigned",
      "num::<impl i64>::count_ones",
      "num::<impl i64>::count_zeros",
      "num::<impl i64>::div_ceil",
      "num::<impl i64>::div_euclid",
      "num::<impl i64>::div_floor",
      "num::<impl i64>::exact_div",
      "num::<impl i64>::from_be",
      "num::<impl i64>::from_be_bytes",
      "num::<impl i64>::from_le",
      "num::<impl i64>::from_le_bytes",
      "num::<impl i64>::from_ne_bytes",
      "num::<impl i64>::ilog",
      "num::<impl i64>::ilog10",
      "num::<impl i64>::ilog2",
      "num::<impl i64>::is_negative",
      "num::<impl i64>::is_positive",
      "num::<impl i64>::isolate_least_significant_one",
      "num::<impl i64>::isolate_most_significant_one",
      "num::<impl i64>::isqrt",
      "num::<impl i64>::leading_ones",
      "num::<impl i64>::leading_zeros",
      "num::<impl i64>::max_value",
      "num::<impl i64>::min_value",
      "num::<impl i64>::next_multiple_of",
      "num::<impl i64>::overflowing_abs",
      "num::<impl i64>::overflowing_add",
      "num::<impl i64>::overflowing_add_unsigned",
      "num::<impl i64>::overflowing_div",
      "num::<impl i64>::overflowing_div_euclid",
      "num::<impl i64>::overflowing_mul",
      "num::<impl i64>::overflowing_neg",
      "num::<impl i64>::overflowing_pow",
      "num::<impl i64>::overflowing_rem",
      "num::<impl i64>::overflowing_rem_euclid",
      "num::<impl i64>::overflowing_shl",
      "num::<impl i64>::overflowing_shr",
      "num::<impl i64>::overflowing_sub",
      "num::<impl i64>::overflowing_sub_unsigned",
      "num::<impl i64>::pow",
      "num::<impl i64>::rem_euclid",
      "num::<impl i64>::reverse_bits",
      "num::<impl i64>::rotate_left",
      "num::<impl i64>::rotate_right",
      "num::<impl i64>::saturating_abs",
      "num::<impl i64>::saturating_add",
      "num::<impl i64>::saturating_add_unsigned",
      "num::<impl i64>::saturating_div",
      "num::<impl i64>::saturating_mul",
      "num::<impl i64>::saturating_neg",
      "num::<impl i64>::saturating_pow",
      "num::<impl i64>::saturating_sub",
      "num::<impl i64>::saturating_sub_unsigned",
      "num::<impl i64>::signum",
      "num::<impl i64>::strict_abs",
      "num::<impl i64>::strict_add",
      "num::<impl i64>::strict_add_unsigned",
      "num::<impl i64>::strict_div",
      "num::<impl i64>::strict_div_euclid",
      "num::<impl i64>::strict_mul",
      "num::<impl i64>::strict_neg",
      "num::<impl i64>::strict_pow",
      "num::<impl i64>::strict_rem",
      "num::<impl i64>::strict_rem_euclid",
      "num::<impl i64>::strict_shl",
      "num::<impl i64>::strict_shr",
      "num::<impl i64>::strict_sub",
      "num::<impl i64>::strict_sub_unsigned",
      "num::<impl i64>::swap_bytes",
      "num::<impl i64>::to_be",
      "num::<impl i64>::to_be_bytes",
      "num::<impl i64>::to_le",
      "num::<impl i64>::to_le_bytes",
      "num::<impl i64>::to_ne_bytes",
      "num::<impl i64>::trailing_ones",
      "num::<impl i64>::trailing_zeros",
      "num::<impl i64>::unbounded_shl",
      "num::<impl i64>::unbounded_shr",
      "num::<impl i64>::unchecked_exact_div",
      "num::<impl i64>::unsigned_abs",
      "num::<impl i64>::widening_mul",
      "num::<impl i64>::wrapping_abs",
      "num::<impl i64>::wrapping_add",
      "num::<impl i64>::wrapping_add_unsigned",
      "num::<impl i64>::wrapping_div",
      "num::<impl i64>::wrapping_div_euclid",
      "num::<impl i64>::wrapping_mul",
      "num::<impl i64>::wrapping_neg",
      "num::<impl i64>::wrapping_pow",
      "num::<impl i64>::wrapping_rem",
      "num::<impl i64>::wrapping_rem_euclid",
      "num::<impl i64>::wrapping_sub",
      "num::<impl i64>::wrapping_sub_unsigned",
      "num::<impl i8>::abs",
      "num::<impl i8>::abs_diff",
      "num::<impl i8>::borrowing_sub",
      "num::<impl i8>::carrying_add",
      "num::<impl i8>::carrying_mul",
      "num::<impl i8>::carrying_mul_add",
      "num::<impl i8>::cast_unsigned",
      "num::<impl i8>::checked_abs",
      "num::<impl i8>::checked_add",
      "num::<impl i8>::checked_add_unsigned",
      "num::<impl i8>::checked_div",
      "num::<impl i8>::checked_div_euclid",
      "num::<impl i8>::checked_exact_div",
      "num::<impl i8>::checked_ilog",
      "num::<impl i8>::checked_ilog10",
      "num::<impl i8>::checked_ilog2",
      "num::<impl i8>::checked_isqrt",
      "num::<impl i8>::checked_mul",
      "num::<impl i8>::checked_neg",
      "num::<impl i8>::checked_next_multiple_of",
      "num::<impl i8>::checked_pow",
      "num::<impl i8>::checked_rem",
      "num::<impl i8>::checked_rem_euclid",
      "num::<impl i8>::checked_shl",
      "num::<impl i8>::checked_shr",
      "num::<impl i8>::checked_sub",
      "num::<impl i8>::checked_sub_unsigned",
      "num::<impl i8>::count_ones",
      "num::<impl i8>::count_zeros",
      "num::<impl i8>::div_ceil",
      "num::<impl i8>::div_euclid",
      "num::<impl i8>::div_floor",
      "num::<impl i8>::exact_div",
      "num::<impl i8>::from_be",
      "num::<impl i8>::from_be_bytes",
      "num::<impl i8>::from_le",
      "num::<impl i8>::from_le_bytes",
      "num::<impl i8>::from_ne_bytes",
      "num::<impl i8>::ilog",
      "num::<impl i8>::ilog10",
      "num::<impl i8>::ilog2",
      "num::<impl i8>::is_negative",
      "num::<impl i8>::is_positive",
      "num::<impl i8>::isolate_least_significant_one",
      "num::<impl i8>::isolate_most_significant_one",
      "num::<impl i8>::isqrt",
      "num::<impl i8>::leading_ones",
      "num::<impl i8>::leading_zeros",
      "num::<impl i8>::max_value",
      "num::<impl i8>::min_value",
      "num::<impl i8>::next_multiple_of",
      "num::<impl i8>::overflowing_abs",
      "num::<impl i8>::overflowing_add",
      "num::<impl i8>::overflowing_add_unsigned",
      "num::<impl i8>::overflowing_div",
      "num::<impl i8>::overflowing_div_euclid",
      "num::<impl i8>::overflowing_mul",
      "num::<impl i8>::overflowing_neg",
      "num::<impl i8>::overflowing_pow",
      "num::<impl i8>::overflowing_rem",
      "num::<impl i8>::overflowing_rem_euclid",
      "num::<impl i8>::overflowing_shl",
      "num::<impl i8>::overflowing_shr",
      "num::<impl i8>::overflowing_sub",
      "num::<impl i8>::overflowing_sub_unsigned",
      "num::<impl i8>::pow",
      "num::<impl i8>::rem_euclid",
      "num::<impl i8>::reverse_bits",
      "num::<impl i8>::rotate_left",
      "num::<impl i8>::rotate_right",
      "num::<impl i8>::saturating_abs",
      "num::<impl i8>::saturating_add",
      "num::<impl i8>::saturating_add_unsigned",
      "num::<impl i8>::saturating_div",
      "num::<impl i8>::saturating_mul",
      "num::<impl i8>::saturating_neg",
      "num::<impl i8>::saturating_pow",
      "num::<impl i8>::saturating_sub",
      "num::<impl i8>::saturating_sub_unsigned",
      "num::<impl i8>::signum",
      "num::<impl i8>::strict_abs",
      "num::<impl i8>::strict_add",
      "num::<impl i8>::strict_add_unsigned",
      "num::<impl i8>::strict_div",
      "num::<impl i8>::strict_div_euclid",
      "num::<impl i8>::strict_mul",
      "num::<impl i8>::strict_neg",
      "num::<impl i8>::strict_pow",
      "num::<impl i8>::strict_rem",
      "num::<impl i8>::strict_rem_euclid",
      "num::<impl i8>::strict_shl",
      "num::<impl i8>::strict_shr",
      "num::<impl i8>::strict_sub",
      "num::<impl i8>::strict_sub_unsigned",
      "num::<impl i8>::swap_bytes",
      "num::<impl i8>::to_be",
      "num::<impl i8>::to_be_bytes",
      "num::<impl i8>::to_le",
      "num::<impl i8>::to_le_bytes",
      "num::<impl i8>::to_ne_bytes",
      "num::<impl i8>::trailing_ones",
      "num::<impl i8>::trailing_zeros",
      "num::<impl i8>::unbounded_shl",
      "num::<impl i8>::unbounded_shr",
      "num::<impl i8>::unchecked_exact_div",
      "num::<impl i8>::unsigned_abs",
      "num::<impl i8>::widening_mul",
      "num::<impl i8>::wrapping_abs",
      "num::<impl i8>::wrapping_add",
      "num::<impl i8>::wrapping_add_unsigned",
      "num::<impl i8>::wrapping_div",
      "num::<impl i8>::wrapping_div_euclid",
      "num::<impl i8>::wrapping_mul",
      "num::<impl i8>::wrapping_neg",
      "num::<impl i8>::wrapping_pow",
      "num::<impl i8>::wrapping_rem",
      "num::<impl i8>::wrapping_rem_euclid",
      "num::<impl i8>::wrapping_sub",
      "num::<impl i8>::wrapping_sub_unsigned",
      "num::<impl isize>::abs",
      "num::<impl isize>::abs_diff",
      "num::<impl isize>::borrowing_sub",
      "num::<impl isize>::carrying_add",
      "num::<impl isize>::carrying_mul",
      "num::<impl isize>::carrying_mul_add",
      "num::<impl isize>::cast_unsigned",
      "num::<impl isize>::checked_abs",
      "num::<impl isize>::checked_add",
      "num::<impl isize>::checked_add_unsigned",
      "num::<impl isize>::checked_div",
      "num::<impl isize>::checked_div_euclid",
      "num::<impl isize>::checked_exact_div",
      "num::<impl isize>::checked_ilog",
      "num::<impl isize>::checked_ilog10",
      "num::<impl isize>::checked_ilog2",
      "num::<impl isize>::checked_isqrt",
      "num::<impl isize>::checked_mul",
      "num::<impl isize>::checked_neg",
      "num::<impl isize>::checked_next_multiple_of",
      "num::<impl isize>::checked_pow",
      "num::<impl isize>::checked_rem",
      "num::<impl isize>::checked_rem_euclid",
      "num::<impl isize>::checked_shl",
      "num::<impl isize>::checked_shr",
      "num::<impl isize>::checked_sub",
      "num::<impl isize>::checked_sub_unsigned",
      "num::<impl isize>::count_ones",
      "num::<impl isize>::count_zeros",
      "num::<impl isize>::div_ceil",
      "num::<impl isize>::div_euclid",
      "num::<impl isize>::div_floor",
      "num::<impl isize>::exact_div",
      "num::<impl isize>::from_be",
      "num::<impl isize>::from_be_bytes",
      "num::<impl isize>::from_le",
      "num::<impl isize>::from_le_bytes",
      "num::<impl isize>::from_ne_bytes",
      "num::<impl isize>::ilog",
      "num::<impl isize>::ilog10",
      "num::<impl isize>::ilog2",
      "num::<impl isize>::is_negative",
      "num::<impl isize>::is_positive",
      "num::<impl isize>::isolate_least_significant_one",
      "num::<impl isize>::isolate_most_significant_one",
      "num::<impl isize>::isqrt",
      "num::<impl isize>::leading_ones",
      "num::<impl isize>::leading_zeros",
      "num::<impl isize>::max_value",
      "num::<impl isize>::min_value",
      "num::<impl isize>::next_multiple_of",
      "num::<impl isize>::overflowing_abs",
      "num::<impl isize>::overflowing_add",
      "num::<impl isize>::overflowing_add_unsigned",
      "num::<impl isize>::overflowing_div",
      "num::<impl isize>::overflowing_div_euclid",
      "num::<impl isize>::overflowing_mul",
      "num::<impl isize>::overflowing_neg",
      "num::<impl isize>::overflowing_pow",
      "num::<impl isize>::overflowing_rem",
      "num::<impl isize>::overflowing_rem_euclid",
      "num::<impl isize>::overflowing_shl",
      "num::<impl isize>::overflowing_shr",
      "num::<impl isize>::overflowing_sub",
      "num::<impl isize>::overflowing_sub_unsigned",
      "num::<impl isize>::pow",
      "num::<impl isize>::rem_euclid",
      "num::<impl isize>::reverse_bits",
      "num::<impl isize>::rotate_left",
      "num::<impl isize>::rotate_right",
      "num::<impl isize>::saturating_abs",
      "num::<impl isize>::saturating_add",
      "num::<impl isize>::saturating_add_unsigned",
      "num::<impl isize>::saturating_div",
      "num::<impl isize>::saturating_mul",
      "num::<impl isize>::saturating_neg",
      "num::<impl isize>::saturating_pow",
      "num::<impl isize>::saturating_sub",
      "num::<impl isize>::saturating_sub_unsigned",
      "num::<impl isize>::signum",
      "num::<impl isize>::strict_abs",
      "num::<impl isize>::strict_add",
      "num::<impl isize>::strict_add_unsigned",
      "num::<impl isize>::strict_div",
      "num::<impl isize>::strict_div_euclid",
      "num::<impl isize>::strict_mul",
      "num::<impl isize>::strict_neg",
      "num::<impl isize>::strict_pow",
      "num::<impl isize>::strict_rem",
      "num::<impl isize>::strict_rem_euclid",
      "num::<impl isize>::strict_shl",
      "num::<impl isize>::strict_shr",
      "num::<impl isize>::strict_sub",
      "num::<impl isize>::strict_sub_unsigned",
      "num::<impl isize>::swap_bytes",
      "num::<impl isize>::to_be",
      "num::<impl isize>::to_be_bytes",
      "num::<impl isize>::to_le",
      "num::<impl isize>::to_le_bytes",
      "num::<impl isize>::to_ne_bytes",
      "num::<impl isize>::trailing_ones",
      "num::<impl isize>::trailing_zeros",
      "num::<impl isize>::unbounded_shl",
      "num::<impl isize>::unbounded_shr",
      "num::<impl isize>::unchecked_exact_div",
      "num::<impl isize>::unsigned_abs",
      "num::<impl isize>::widening_mul",
      "num::<impl isize>::wrapping_abs",
      "num::<impl isize>::wrapping_add",
      "num::<impl isize>::wrapping_add_unsigned",
      "num::<impl isize>::wrapping_div",
      "num::<impl isize>::wrapping_div_euclid",
      "num::<impl isize>::wrapping_mul",
      "num::<impl isize>::wrapping_neg",
      "num::<impl isize>::wrapping_pow",
      "num::<impl isize>::wrapping_rem",
      "num::<impl isize>::wrapping_rem_euclid",
      "num::<impl isize>::wrapping_sub",
      "num::<impl isize>::wrapping_sub_unsigned"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_sqrt.rs": [
      "num::int_sqrt::i128",
      "num::int_sqrt::i16",
      "num::int_sqrt::i32",
      "num::int_sqrt::i64",
      "num::int_sqrt::i8",
      "num::int_sqrt::panic_for_negative_argument",
      "num::int_sqrt::u128",
      "num::int_sqrt::u128_stages",
      "num::int_sqrt::u16",
      "num::int_sqrt::u16_stages",
      "num::int_sqrt::u32",
      "num::int_sqrt::u32_stages",
      "num::int_sqrt::u64",
      "num::int_sqrt::u64_stages",
      "num::int_sqrt::u8"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/mod.rs": [
      "num::<impl i128>::midpoint",
      "num::<impl i16>::midpoint",
      "num::<impl i32>::midpoint",
      "num::<impl i64>::midpoint",
      "num::<impl i8>::midpoint",
      "num::<impl isize>::midpoint",
      "num::<impl u128>::midpoint",
      "num::<impl u16>::is_utf16_surrogate",
      "num::<impl u16>::midpoint",
      "num::<impl u32>::midpoint",
      "num::<impl u64>::midpoint",
      "num::<impl u8>::escape_ascii",
      "num::<impl u8>::is_utf8_char_boundary",
      "num::<impl u8>::midpoint",
      "num::<impl usize>::midpoint",
      "num::<impl usize>::repeat_u16",
      "num::<impl usize>::repeat_u8",
      "num::from_ascii_radix_panic",
      "num::verify::carrying_mul_u16_full_range",
      "num::verify::carrying_mul_u32_large",
      "num::verify::carrying_mul_u32_mid_edge",
      "num::verify::carrying_mul_u32_small",
      "num::verify::carrying_mul_u64_large",
      "num::verify::carrying_mul_u64_mid_edge",
      "num::verify::carrying_mul_u64_small",
      "num::verify::carrying_mul_u8_full_range",
      "num::verify::widening_mul_u16_large",
      "num::verify::widening_mul_u16_mid_edge",
      "num::verify::widening_mul_u16_small",
      "num::verify::widening_mul_u32_large",
      "num::verify::widening_mul_u32_mid_edge",
      "num::verify::widening_mul_u32_small",
      "num::verify::widening_mul_u64_large",
      "num::verify::widening_mul_u64_mid_edge",
      "num::verify::widening_mul_u64_small",
      "num::verify::widening_mul_u8"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/niche_types.rs": [
      "<num::niche_types::Nanoseconds as default::Default>::default",
      "num::niche_types::I32NotAllOnes",
      "num::niche_types::I32NotAllOnes::new",
      "num::niche_types::I32NotAllOnes::new_unchecked",
      "num::niche_types::I64NotAllOnes",
      "num::niche_types::I64NotAllOnes::new",
      "num::niche_types::I64NotAllOnes::new_unchecked",
      "num::niche_types::Nanoseconds",
      "num::niche_types::Nanoseconds::new",
      "num::niche_types::Nanoseconds::new_unchecked",
      "num::niche_types::NonZeroCharInner",
      "num::niche_types::NonZeroCharInner::new",
      "num::niche_types::NonZeroCharInner::new_unchecked",
      "num::niche_types::NonZeroI128Inner",
      "num::niche_types::NonZeroI128Inner::new",
      "num::niche_types::NonZeroI128Inner::new_unchecked",
      "num::niche_types::NonZeroI16Inner",
      "num::niche_types::NonZeroI16Inner::new",
      "num::niche_types::NonZeroI16Inner::new_unchecked",
      "num::niche_types::NonZeroI32Inner",
      "num::niche_types::NonZeroI32Inner::new",
      "num::niche_types::NonZeroI32Inner::new_unchecked",
      "num::niche_types::NonZeroI64Inner",
      "num::niche_types::NonZeroI64Inner::new",
      "num::niche_types::NonZeroI64Inner::new_unchecked",
      "num::niche_types::NonZeroI8Inner",
      "num::niche_types::NonZeroI8Inner::new",
      "num::niche_types::NonZeroI8Inner::new_unchecked",
      "num::niche_types::NonZeroIsizeInner",
      "num::niche_types::NonZeroIsizeInner::new",
      "num::niche_types::NonZeroIsizeInner::new_unchecked",
      "num::niche_types::NonZeroU128Inner",
      "num::niche_types::NonZeroU128Inner::new",
      "num::niche_types::NonZeroU128Inner::new_unchecked",
      "num::niche_types::NonZeroU16Inner",
      "num::niche_types::NonZeroU16Inner::new",
      "num::niche_types::NonZeroU16Inner::new_unchecked",
      "num::niche_types::NonZeroU32Inner",
      "num::niche_types::NonZeroU32Inner::new",
      "num::niche_types::NonZeroU32Inner::new_unchecked",
      "num::niche_types::NonZeroU64Inner",
      "num::niche_types::NonZeroU64Inner::new",
      "num::niche_types::NonZeroU64Inner::new_unchecked",
      "num::niche_types::NonZeroU8Inner",
      "num::niche_types::NonZeroU8Inner::new",
      "num::niche_types::NonZeroU8Inner::new_unchecked",
      "num::niche_types::NonZeroUsizeInner",
      "num::niche_types::NonZeroUsizeInner::new",
      "num::niche_types::NonZeroUsizeInner::new_unchecked",
      "num::niche_types::U32NotAllOnes",
      "num::niche_types::U32NotAllOnes::new",
      "num::niche_types::U32NotAllOnes::new_unchecked",
      "num::niche_types::U64NotAllOnes",
      "num::niche_types::U64NotAllOnes::new",
      "num::niche_types::U64NotAllOnes::new_unchecked",
      "num::niche_types::UsizeNoHighBit",
      "num::niche_types::UsizeNoHighBit::new",
      "num::niche_types::UsizeNoHighBit::new_unchecked"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs": [
      "<num::nonzero::NonZero<i128> as ops::arith::Neg>::neg",
      "<num::nonzero::NonZero<i16> as ops::arith::Neg>::neg",
      "<num::nonzero::NonZero<i32> as ops::arith::Neg>::neg",
      "<num::nonzero::NonZero<i64> as ops::arith::Neg>::neg",
      "<num::nonzero::NonZero<i8> as ops::arith::Neg>::neg",
      "<num::nonzero::NonZero<isize> as ops::arith::Neg>::neg",
      "num::nonzero::<impl ops::arith::Div<num::nonzero::NonZero<u128>> for u128>::div",
      "num::nonzero::<impl ops::arith::Div<num::nonzero::NonZero<u16>> for u16>::div",
      "num::nonzero::<impl ops::arith::Div<num::nonzero::NonZero<u32>> for u32>::div",
      "num::nonzero::<impl ops::arith::Div<num::nonzero::NonZero<u64>> for u64>::div",
      "num::nonzero::<impl ops::arith::Div<num::nonzero::NonZero<u8>> for u8>::div",
      "num::nonzero::<impl ops::arith::Div<num::nonzero::NonZero<usize>> for usize>::div",
      "num::nonzero::<impl ops::arith::Rem<num::nonzero::NonZero<u128>> for u128>::rem",
      "num::nonzero::<impl ops::arith::Rem<num::nonzero::NonZero<u16>> for u16>::rem",
      "num::nonzero::<impl ops::arith::Rem<num::nonzero::NonZero<u32>> for u32>::rem",
      "num::nonzero::<impl ops::arith::Rem<num::nonzero::NonZero<u64>> for u64>::rem",
      "num::nonzero::<impl ops::arith::Rem<num::nonzero::NonZero<u8>> for u8>::rem",
      "num::nonzero::<impl ops::arith::Rem<num::nonzero::NonZero<usize>> for usize>::rem",
      "num::nonzero::NonZero::<i128>::abs",
      "num::nonzero::NonZero::<i128>::cast_unsigned",
      "num::nonzero::NonZero::<i128>::checked_abs",
      "num::nonzero::NonZero::<i128>::checked_mul",
      "num::nonzero::NonZero::<i128>::checked_neg",
      "num::nonzero::NonZero::<i128>::checked_pow",
      "num::nonzero::NonZero::<i128>::from_be",
      "num::nonzero::NonZero::<i128>::from_le",
      "num::nonzero::NonZero::<i128>::is_negative",
      "num::nonzero::NonZero::<i128>::is_positive",
      "num::nonzero::NonZero::<i128>::isolate_least_significant_one",
      "num::nonzero::NonZero::<i128>::isolate_most_significant_one",
      "num::nonzero::NonZero::<i128>::leading_zeros",
      "num::nonzero::NonZero::<i128>::overflowing_abs",
      "num::nonzero::NonZero::<i128>::overflowing_neg",
      "num::nonzero::NonZero::<i128>::reverse_bits",
      "num::nonzero::NonZero::<i128>::saturating_abs",
      "num::nonzero::NonZero::<i128>::saturating_mul",
      "num::nonzero::NonZero::<i128>::saturating_neg",
      "num::nonzero::NonZero::<i128>::saturating_pow",
      "num::nonzero::NonZero::<i128>::swap_bytes",
      "num::nonzero::NonZero::<i128>::to_be",
      "num::nonzero::NonZero::<i128>::to_le",
      "num::nonzero::NonZero::<i128>::trailing_zeros",
      "num::nonzero::NonZero::<i128>::unsigned_abs",
      "num::nonzero::NonZero::<i128>::wrapping_abs",
      "num::nonzero::NonZero::<i128>::wrapping_neg",
      "num::nonzero::NonZero::<i16>::abs",
      "num::nonzero::NonZero::<i16>::cast_unsigned",
      "num::nonzero::NonZero::<i16>::checked_abs",
      "num::nonzero::NonZero::<i16>::checked_mul",
      "num::nonzero::NonZero::<i16>::checked_neg",
      "num::nonzero::NonZero::<i16>::checked_pow",
      "num::nonzero::NonZero::<i16>::from_be",
      "num::nonzero::NonZero::<i16>::from_le",
      "num::nonzero::NonZero::<i16>::is_negative",
      "num::nonzero::NonZero::<i16>::is_positive",
      "num::nonzero::NonZero::<i16>::isolate_least_significant_one",
      "num::nonzero::NonZero::<i16>::isolate_most_significant_one",
      "num::nonzero::NonZero::<i16>::leading_zeros",
      "num::nonzero::NonZero::<i16>::overflowing_abs",
      "num::nonzero::NonZero::<i16>::overflowing_neg",
      "num::nonzero::NonZero::<i16>::reverse_bits",
      "num::nonzero::NonZero::<i16>::saturating_abs",
      "num::nonzero::NonZero::<i16>::saturating_mul",
      "num::nonzero::NonZero::<i16>::saturating_neg",
      "num::nonzero::NonZero::<i16>::saturating_pow",
      "num::nonzero::NonZero::<i16>::swap_bytes",
      "num::nonzero::NonZero::<i16>::to_be",
      "num::nonzero::NonZero::<i16>::to_le",
      "num::nonzero::NonZero::<i16>::trailing_zeros",
      "num::nonzero::NonZero::<i16>::unsigned_abs",
      "num::nonzero::NonZero::<i16>::wrapping_abs",
      "num::nonzero::NonZero::<i16>::wrapping_neg",
      "num::nonzero::NonZero::<i32>::abs",
      "num::nonzero::NonZero::<i32>::cast_unsigned",
      "num::nonzero::NonZero::<i32>::checked_abs",
      "num::nonzero::NonZero::<i32>::checked_mul",
      "num::nonzero::NonZero::<i32>::checked_neg",
      "num::nonzero::NonZero::<i32>::checked_pow",
      "num::nonzero::NonZero::<i32>::from_be",
      "num::nonzero::NonZero::<i32>::from_le",
      "num::nonzero::NonZero::<i32>::is_negative",
      "num::nonzero::NonZero::<i32>::is_positive",
      "num::nonzero::NonZero::<i32>::isolate_least_significant_one",
      "num::nonzero::NonZero::<i32>::isolate_most_significant_one",
      "num::nonzero::NonZero::<i32>::leading_zeros",
      "num::nonzero::NonZero::<i32>::overflowing_abs",
      "num::nonzero::NonZero::<i32>::overflowing_neg",
      "num::nonzero::NonZero::<i32>::reverse_bits",
      "num::nonzero::NonZero::<i32>::saturating_abs",
      "num::nonzero::NonZero::<i32>::saturating_mul",
      "num::nonzero::NonZero::<i32>::saturating_neg",
      "num::nonzero::NonZero::<i32>::saturating_pow",
      "num::nonzero::NonZero::<i32>::swap_bytes",
      "num::nonzero::NonZero::<i32>::to_be",
      "num::nonzero::NonZero::<i32>::to_le",
      "num::nonzero::NonZero::<i32>::trailing_zeros",
      "num::nonzero::NonZero::<i32>::unsigned_abs",
      "num::nonzero::NonZero::<i32>::wrapping_abs",
      "num::nonzero::NonZero::<i32>::wrapping_neg",
      "num::nonzero::NonZero::<i64>::abs",
      "num::nonzero::NonZero::<i64>::cast_unsigned",
      "num::nonzero::NonZero::<i64>::checked_abs",
      "num::nonzero::NonZero::<i64>::checked_mul",
      "num::nonzero::NonZero::<i64>::checked_neg",
      "num::nonzero::NonZero::<i64>::checked_pow",
      "num::nonzero::NonZero::<i64>::from_be",
      "num::nonzero::NonZero::<i64>::from_le",
      "num::nonzero::NonZero::<i64>::is_negative",
      "num::nonzero::NonZero::<i64>::is_positive",
      "num::nonzero::NonZero::<i64>::isolate_least_significant_one",
      "num::nonzero::NonZero::<i64>::isolate_most_significant_one",
      "num::nonzero::NonZero::<i64>::leading_zeros",
      "num::nonzero::NonZero::<i64>::overflowing_abs",
      "num::nonzero::NonZero::<i64>::overflowing_neg",
      "num::nonzero::NonZero::<i64>::reverse_bits",
      "num::nonzero::NonZero::<i64>::saturating_abs",
      "num::nonzero::NonZero::<i64>::saturating_mul",
      "num::nonzero::NonZero::<i64>::saturating_neg",
      "num::nonzero::NonZero::<i64>::saturating_pow",
      "num::nonzero::NonZero::<i64>::swap_bytes",
      "num::nonzero::NonZero::<i64>::to_be",
      "num::nonzero::NonZero::<i64>::to_le",
      "num::nonzero::NonZero::<i64>::trailing_zeros",
      "num::nonzero::NonZero::<i64>::unsigned_abs",
      "num::nonzero::NonZero::<i64>::wrapping_abs",
      "num::nonzero::NonZero::<i64>::wrapping_neg",
      "num::nonzero::NonZero::<i8>::abs",
      "num::nonzero::NonZero::<i8>::cast_unsigned",
      "num::nonzero::NonZero::<i8>::checked_abs",
      "num::nonzero::NonZero::<i8>::checked_mul",
      "num::nonzero::NonZero::<i8>::checked_neg",
      "num::nonzero::NonZero::<i8>::checked_pow",
      "num::nonzero::NonZero::<i8>::from_be",
      "num::nonzero::NonZero::<i8>::from_le",
      "num::nonzero::NonZero::<i8>::is_negative",
      "num::nonzero::NonZero::<i8>::is_positive",
      "num::nonzero::NonZero::<i8>::isolate_least_significant_one",
      "num::nonzero::NonZero::<i8>::isolate_most_significant_one",
      "num::nonzero::NonZero::<i8>::leading_zeros",
      "num::nonzero::NonZero::<i8>::overflowing_abs",
      "num::nonzero::NonZero::<i8>::overflowing_neg",
      "num::nonzero::NonZero::<i8>::reverse_bits",
      "num::nonzero::NonZero::<i8>::saturating_abs",
      "num::nonzero::NonZero::<i8>::saturating_mul",
      "num::nonzero::NonZero::<i8>::saturating_neg",
      "num::nonzero::NonZero::<i8>::saturating_pow",
      "num::nonzero::NonZero::<i8>::swap_bytes",
      "num::nonzero::NonZero::<i8>::to_be",
      "num::nonzero::NonZero::<i8>::to_le",
      "num::nonzero::NonZero::<i8>::trailing_zeros",
      "num::nonzero::NonZero::<i8>::unsigned_abs",
      "num::nonzero::NonZero::<i8>::wrapping_abs",
      "num::nonzero::NonZero::<i8>::wrapping_neg",
      "num::nonzero::NonZero::<isize>::abs",
      "num::nonzero::NonZero::<isize>::cast_unsigned",
      "num::nonzero::NonZero::<isize>::checked_abs",
      "num::nonzero::NonZero::<isize>::checked_mul",
      "num::nonzero::NonZero::<isize>::checked_neg",
      "num::nonzero::NonZero::<isize>::checked_pow",
      "num::nonzero::NonZero::<isize>::from_be",
      "num::nonzero::NonZero::<isize>::from_le",
      "num::nonzero::NonZero::<isize>::is_negative",
      "num::nonzero::NonZero::<isize>::is_positive",
      "num::nonzero::NonZero::<isize>::isolate_least_significant_one",
      "num::nonzero::NonZero::<isize>::isolate_most_significant_one",
      "num::nonzero::NonZero::<isize>::leading_zeros",
      "num::nonzero::NonZero::<isize>::overflowing_abs",
      "num::nonzero::NonZero::<isize>::overflowing_neg",
      "num::nonzero::NonZero::<isize>::reverse_bits",
      "num::nonzero::NonZero::<isize>::saturating_abs",
      "num::nonzero::NonZero::<isize>::saturating_mul",
      "num::nonzero::NonZero::<isize>::saturating_neg",
      "num::nonzero::NonZero::<isize>::saturating_pow",
      "num::nonzero::NonZero::<isize>::swap_bytes",
      "num::nonzero::NonZero::<isize>::to_be",
      "num::nonzero::NonZero::<isize>::to_le",
      "num::nonzero::NonZero::<isize>::trailing_zeros",
      "num::nonzero::NonZero::<isize>::unsigned_abs",
      "num::nonzero::NonZero::<isize>::wrapping_abs",
      "num::nonzero::NonZero::<isize>::wrapping_neg",
      "num::nonzero::NonZero::<u128>::cast_signed",
      "num::nonzero::NonZero::<u128>::checked_add",
      "num::nonzero::NonZero::<u128>::checked_mul",
      "num::nonzero::NonZero::<u128>::checked_next_power_of_two",
      "num::nonzero::NonZero::<u128>::checked_pow",
      "num::nonzero::NonZero::<u128>::div_ceil",
      "num::nonzero::NonZero::<u128>::from_be",
      "num::nonzero::NonZero::<u128>::from_le",
      "num::nonzero::NonZero::<u128>::ilog10",
      "num::nonzero::NonZero::<u128>::ilog2",
      "num::nonzero::NonZero::<u128>::is_power_of_two",
      "num::nonzero::NonZero::<u128>::isolate_least_significant_one",
      "num::nonzero::NonZero::<u128>::isolate_most_significant_one",
      "num::nonzero::NonZero::<u128>::isqrt",
      "num::nonzero::NonZero::<u128>::leading_zeros",
      "num::nonzero::NonZero::<u128>::midpoint",
      "num::nonzero::NonZero::<u128>::reverse_bits",
      "num::nonzero::NonZero::<u128>::saturating_add",
      "num::nonzero::NonZero::<u128>::saturating_mul",
      "num::nonzero::NonZero::<u128>::saturating_pow",
      "num::nonzero::NonZero::<u128>::swap_bytes",
      "num::nonzero::NonZero::<u128>::to_be",
      "num::nonzero::NonZero::<u128>::to_le",
      "num::nonzero::NonZero::<u128>::trailing_zeros",
      "num::nonzero::NonZero::<u16>::cast_signed",
      "num::nonzero::NonZero::<u16>::checked_add",
      "num::nonzero::NonZero::<u16>::checked_mul",
      "num::nonzero::NonZero::<u16>::checked_next_power_of_two",
      "num::nonzero::NonZero::<u16>::checked_pow",
      "num::nonzero::NonZero::<u16>::div_ceil",
      "num::nonzero::NonZero::<u16>::from_be",
      "num::nonzero::NonZero::<u16>::from_le",
      "num::nonzero::NonZero::<u16>::ilog10",
      "num::nonzero::NonZero::<u16>::ilog2",
      "num::nonzero::NonZero::<u16>::is_power_of_two",
      "num::nonzero::NonZero::<u16>::isolate_least_significant_one",
      "num::nonzero::NonZero::<u16>::isolate_most_significant_one",
      "num::nonzero::NonZero::<u16>::isqrt",
      "num::nonzero::NonZero::<u16>::leading_zeros",
      "num::nonzero::NonZero::<u16>::midpoint",
      "num::nonzero::NonZero::<u16>::reverse_bits",
      "num::nonzero::NonZero::<u16>::saturating_add",
      "num::nonzero::NonZero::<u16>::saturating_mul",
      "num::nonzero::NonZero::<u16>::saturating_pow",
      "num::nonzero::NonZero::<u16>::swap_bytes",
      "num::nonzero::NonZero::<u16>::to_be",
      "num::nonzero::NonZero::<u16>::to_le",
      "num::nonzero::NonZero::<u16>::trailing_zeros",
      "num::nonzero::NonZero::<u32>::cast_signed",
      "num::nonzero::NonZero::<u32>::checked_add",
      "num::nonzero::NonZero::<u32>::checked_mul",
      "num::nonzero::NonZero::<u32>::checked_next_power_of_two",
      "num::nonzero::NonZero::<u32>::checked_pow",
      "num::nonzero::NonZero::<u32>::div_ceil",
      "num::nonzero::NonZero::<u32>::from_be",
      "num::nonzero::NonZero::<u32>::from_le",
      "num::nonzero::NonZero::<u32>::ilog10",
      "num::nonzero::NonZero::<u32>::ilog2",
      "num::nonzero::NonZero::<u32>::is_power_of_two",
      "num::nonzero::NonZero::<u32>::isolate_least_significant_one",
      "num::nonzero::NonZero::<u32>::isolate_most_significant_one",
      "num::nonzero::NonZero::<u32>::isqrt",
      "num::nonzero::NonZero::<u32>::leading_zeros",
      "num::nonzero::NonZero::<u32>::midpoint",
      "num::nonzero::NonZero::<u32>::reverse_bits",
      "num::nonzero::NonZero::<u32>::saturating_add",
      "num::nonzero::NonZero::<u32>::saturating_mul",
      "num::nonzero::NonZero::<u32>::saturating_pow",
      "num::nonzero::NonZero::<u32>::swap_bytes",
      "num::nonzero::NonZero::<u32>::to_be",
      "num::nonzero::NonZero::<u32>::to_le",
      "num::nonzero::NonZero::<u32>::trailing_zeros",
      "num::nonzero::NonZero::<u64>::cast_signed",
      "num::nonzero::NonZero::<u64>::checked_add",
      "num::nonzero::NonZero::<u64>::checked_mul",
      "num::nonzero::NonZero::<u64>::checked_next_power_of_two",
      "num::nonzero::NonZero::<u64>::checked_pow",
      "num::nonzero::NonZero::<u64>::div_ceil",
      "num::nonzero::NonZero::<u64>::from_be",
      "num::nonzero::NonZero::<u64>::from_le",
      "num::nonzero::NonZero::<u64>::ilog10",
      "num::nonzero::NonZero::<u64>::ilog2",
      "num::nonzero::NonZero::<u64>::is_power_of_two",
      "num::nonzero::NonZero::<u64>::isolate_least_significant_one",
      "num::nonzero::NonZero::<u64>::isolate_most_significant_one",
      "num::nonzero::NonZero::<u64>::isqrt",
      "num::nonzero::NonZero::<u64>::leading_zeros",
      "num::nonzero::NonZero::<u64>::midpoint",
      "num::nonzero::NonZero::<u64>::reverse_bits",
      "num::nonzero::NonZero::<u64>::saturating_add",
      "num::nonzero::NonZero::<u64>::saturating_mul",
      "num::nonzero::NonZero::<u64>::saturating_pow",
      "num::nonzero::NonZero::<u64>::swap_bytes",
      "num::nonzero::NonZero::<u64>::to_be",
      "num::nonzero::NonZero::<u64>::to_le",
      "num::nonzero::NonZero::<u64>::trailing_zeros",
      "num::nonzero::NonZero::<u8>::cast_signed",
      "num::nonzero::NonZero::<u8>::checked_add",
      "num::nonzero::NonZero::<u8>::checked_mul",
      "num::nonzero::NonZero::<u8>::checked_next_power_of_two",
      "num::nonzero::NonZero::<u8>::checked_pow",
      "num::nonzero::NonZero::<u8>::div_ceil",
      "num::nonzero::NonZero::<u8>::from_be",
      "num::nonzero::NonZero::<u8>::from_le",
      "num::nonzero::NonZero::<u8>::ilog10",
      "num::nonzero::NonZero::<u8>::ilog2",
      "num::nonzero::NonZero::<u8>::is_power_of_two",
      "num::nonzero::NonZero::<u8>::isolate_least_significant_one",
      "num::nonzero::NonZero::<u8>::isolate_most_significant_one",
      "num::nonzero::NonZero::<u8>::isqrt",
      "num::nonzero::NonZero::<u8>::leading_zeros",
      "num::nonzero::NonZero::<u8>::midpoint",
      "num::nonzero::NonZero::<u8>::reverse_bits",
      "num::nonzero::NonZero::<u8>::saturating_add",
      "num::nonzero::NonZero::<u8>::saturating_mul",
      "num::nonzero::NonZero::<u8>::saturating_pow",
      "num::nonzero::NonZero::<u8>::swap_bytes",
      "num::nonzero::NonZero::<u8>::to_be",
      "num::nonzero::NonZero::<u8>::to_le",
      "num::nonzero::NonZero::<u8>::trailing_zeros",
      "num::nonzero::NonZero::<usize>::cast_signed",
      "num::nonzero::NonZero::<usize>::checked_add",
      "num::nonzero::NonZero::<usize>::checked_mul",
      "num::nonzero::NonZero::<usize>::checked_next_power_of_two",
      "num::nonzero::NonZero::<usize>::checked_pow",
      "num::nonzero::NonZero::<usize>::div_ceil",
      "num::nonzero::NonZero::<usize>::from_be",
      "num::nonzero::NonZero::<usize>::from_le",
      "num::nonzero::NonZero::<usize>::ilog10",
      "num::nonzero::NonZero::<usize>::ilog2",
      "num::nonzero::NonZero::<usize>::is_power_of_two",
      "num::nonzero::NonZero::<usize>::isolate_least_significant_one",
      "num::nonzero::NonZero::<usize>::isolate_most_significant_one",
      "num::nonzero::NonZero::<usize>::isqrt",
      "num::nonzero::NonZero::<usize>::leading_zeros",
      "num::nonzero::NonZero::<usize>::midpoint",
      "num::nonzero::NonZero::<usize>::reverse_bits",
      "num::nonzero::NonZero::<usize>::saturating_add",
      "num::nonzero::NonZero::<usize>::saturating_mul",
      "num::nonzero::NonZero::<usize>::saturating_pow",
      "num::nonzero::NonZero::<usize>::swap_bytes",
      "num::nonzero::NonZero::<usize>::to_be",
      "num::nonzero::NonZero::<usize>::to_le",
      "num::nonzero::NonZero::<usize>::trailing_zeros",
      "num::nonzero::verify::nonzero_check_clamp_for_128",
      "num::nonzero::verify::nonzero_check_clamp_for_16",
      "num::nonzero::verify::nonzero_check_clamp_for_32",
      "num::nonzero::verify::nonzero_check_clamp_for_64",
      "num::nonzero::verify::nonzero_check_clamp_for_i8",
      "num::nonzero::verify::nonzero_check_clamp_for_isize",
      "num::nonzero::verify::nonzero_check_clamp_for_u128",
      "num::nonzero::verify::nonzero_check_clamp_for_u16",
      "num::nonzero::verify::nonzero_check_clamp_for_u32",
      "num::nonzero::verify::nonzero_check_clamp_for_u64",
      "num::nonzero::verify::nonzero_check_clamp_for_u8",
      "num::nonzero::verify::nonzero_check_clamp_for_usize",
      "num::nonzero::verify::nonzero_check_clamp_panic_for_128",
      "num::nonzero::verify::nonzero_check_clamp_panic_for_16",
      "num::nonzero::verify::nonzero_check_clamp_panic_for_32",
      "num::nonzero::verify::nonzero_check_clamp_panic_for_64",
      "num::nonzero::verify::nonzero_check_clamp_panic_for_i8",
      "num::nonzero::verify::nonzero_check_clamp_panic_for_isize",
      "num::nonzero::verify::nonzero_check_clamp_panic_for_u128",
      "num::nonzero::verify::nonzero_check_clamp_panic_for_u16",
      "num::nonzero::verify::nonzero_check_clamp_panic_for_u32",
      "num::nonzero::verify::nonzero_check_clamp_panic_for_u64",
      "num::nonzero::verify::nonzero_check_clamp_panic_for_u8",
      "num::nonzero::verify::nonzero_check_clamp_panic_for_usize",
      "num::nonzero::verify::nonzero_check_cmp_for_i128",
      "num::nonzero::verify::nonzero_check_cmp_for_i16",
      "num::nonzero::verify::nonzero_check_cmp_for_i32",
      "num::nonzero::verify::nonzero_check_cmp_for_i64",
      "num::nonzero::verify::nonzero_check_cmp_for_i8",
      "num::nonzero::verify::nonzero_check_cmp_for_isize",
      "num::nonzero::verify::nonzero_check_cmp_for_u128",
      "num::nonzero::verify::nonzero_check_cmp_for_u16",
      "num::nonzero::verify::nonzero_check_cmp_for_u32",
      "num::nonzero::verify::nonzero_check_cmp_for_u64",
      "num::nonzero::verify::nonzero_check_cmp_for_u8",
      "num::nonzero::verify::nonzero_check_cmp_for_usize",
      "num::nonzero::verify::nonzero_check_max_for_i128",
      "num::nonzero::verify::nonzero_check_max_for_i16",
      "num::nonzero::verify::nonzero_check_max_for_i32",
      "num::nonzero::verify::nonzero_check_max_for_i64",
      "num::nonzero::verify::nonzero_check_max_for_i8",
      "num::nonzero::verify::nonzero_check_max_for_isize",
      "num::nonzero::verify::nonzero_check_max_for_u128",
      "num::nonzero::verify::nonzero_check_max_for_u16",
      "num::nonzero::verify::nonzero_check_max_for_u32",
      "num::nonzero::verify::nonzero_check_max_for_u64",
      "num::nonzero::verify::nonzero_check_max_for_u8",
      "num::nonzero::verify::nonzero_check_max_for_usize",
      "num::nonzero::verify::nonzero_check_min_for_i128",
      "num::nonzero::verify::nonzero_check_min_for_i16",
      "num::nonzero::verify::nonzero_check_min_for_i32",
      "num::nonzero::verify::nonzero_check_min_for_i64",
      "num::nonzero::verify::nonzero_check_min_for_i8",
      "num::nonzero::verify::nonzero_check_min_for_isize",
      "num::nonzero::verify::nonzero_check_min_for_u128",
      "num::nonzero::verify::nonzero_check_min_for_u16",
      "num::nonzero::verify::nonzero_check_min_for_u32",
      "num::nonzero::verify::nonzero_check_min_for_u64",
      "num::nonzero::verify::nonzero_check_min_for_u8",
      "num::nonzero::verify::nonzero_check_min_for_usize"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/overflow_panic.rs": [
      "num::overflow_panic::add",
      "num::overflow_panic::div",
      "num::overflow_panic::mul",
      "num::overflow_panic::neg",
      "num::overflow_panic::rem",
      "num::overflow_panic::shl",
      "num::overflow_panic::shr",
      "num::overflow_panic::sub"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/saturating.rs": [
      "<num::saturating::Saturating<i128> as ops::arith::Add>::add",
      "<num::saturating::Saturating<i128> as ops::arith::Div>::div",
      "<num::saturating::Saturating<i128> as ops::arith::Mul>::mul",
      "<num::saturating::Saturating<i128> as ops::arith::Neg>::neg",
      "<num::saturating::Saturating<i128> as ops::arith::Rem>::rem",
      "<num::saturating::Saturating<i128> as ops::arith::Sub>::sub",
      "<num::saturating::Saturating<i128> as ops::bit::BitAnd>::bitand",
      "<num::saturating::Saturating<i128> as ops::bit::BitOr>::bitor",
      "<num::saturating::Saturating<i128> as ops::bit::BitXor>::bitxor",
      "<num::saturating::Saturating<i128> as ops::bit::Not>::not",
      "<num::saturating::Saturating<i16> as ops::arith::Add>::add",
      "<num::saturating::Saturating<i16> as ops::arith::Div>::div",
      "<num::saturating::Saturating<i16> as ops::arith::Mul>::mul",
      "<num::saturating::Saturating<i16> as ops::arith::Neg>::neg",
      "<num::saturating::Saturating<i16> as ops::arith::Rem>::rem",
      "<num::saturating::Saturating<i16> as ops::arith::Sub>::sub",
      "<num::saturating::Saturating<i16> as ops::bit::BitAnd>::bitand",
      "<num::saturating::Saturating<i16> as ops::bit::BitOr>::bitor",
      "<num::saturating::Saturating<i16> as ops::bit::BitXor>::bitxor",
      "<num::saturating::Saturating<i16> as ops::bit::Not>::not",
      "<num::saturating::Saturating<i32> as ops::arith::Add>::add",
      "<num::saturating::Saturating<i32> as ops::arith::Div>::div",
      "<num::saturating::Saturating<i32> as ops::arith::Mul>::mul",
      "<num::saturating::Saturating<i32> as ops::arith::Neg>::neg",
      "<num::saturating::Saturating<i32> as ops::arith::Rem>::rem",
      "<num::saturating::Saturating<i32> as ops::arith::Sub>::sub",
      "<num::saturating::Saturating<i32> as ops::bit::BitAnd>::bitand",
      "<num::saturating::Saturating<i32> as ops::bit::BitOr>::bitor",
      "<num::saturating::Saturating<i32> as ops::bit::BitXor>::bitxor",
      "<num::saturating::Saturating<i32> as ops::bit::Not>::not",
      "<num::saturating::Saturating<i64> as ops::arith::Add>::add",
      "<num::saturating::Saturating<i64> as ops::arith::Div>::div",
      "<num::saturating::Saturating<i64> as ops::arith::Mul>::mul",
      "<num::saturating::Saturating<i64> as ops::arith::Neg>::neg",
      "<num::saturating::Saturating<i64> as ops::arith::Rem>::rem",
      "<num::saturating::Saturating<i64> as ops::arith::Sub>::sub",
      "<num::saturating::Saturating<i64> as ops::bit::BitAnd>::bitand",
      "<num::saturating::Saturating<i64> as ops::bit::BitOr>::bitor",
      "<num::saturating::Saturating<i64> as ops::bit::BitXor>::bitxor",
      "<num::saturating::Saturating<i64> as ops::bit::Not>::not",
      "<num::saturating::Saturating<i8> as ops::arith::Add>::add",
      "<num::saturating::Saturating<i8> as ops::arith::Div>::div",
      "<num::saturating::Saturating<i8> as ops::arith::Mul>::mul",
      "<num::saturating::Saturating<i8> as ops::arith::Neg>::neg",
      "<num::saturating::Saturating<i8> as ops::arith::Rem>::rem",
      "<num::saturating::Saturating<i8> as ops::arith::Sub>::sub",
      "<num::saturating::Saturating<i8> as ops::bit::BitAnd>::bitand",
      "<num::saturating::Saturating<i8> as ops::bit::BitOr>::bitor",
      "<num::saturating::Saturating<i8> as ops::bit::BitXor>::bitxor",
      "<num::saturating::Saturating<i8> as ops::bit::Not>::not",
      "<num::saturating::Saturating<isize> as ops::arith::Add>::add",
      "<num::saturating::Saturating<isize> as ops::arith::Div>::div",
      "<num::saturating::Saturating<isize> as ops::arith::Mul>::mul",
      "<num::saturating::Saturating<isize> as ops::arith::Neg>::neg",
      "<num::saturating::Saturating<isize> as ops::arith::Rem>::rem",
      "<num::saturating::Saturating<isize> as ops::arith::Sub>::sub",
      "<num::saturating::Saturating<isize> as ops::bit::BitAnd>::bitand",
      "<num::saturating::Saturating<isize> as ops::bit::BitOr>::bitor",
      "<num::saturating::Saturating<isize> as ops::bit::BitXor>::bitxor",
      "<num::saturating::Saturating<isize> as ops::bit::Not>::not",
      "<num::saturating::Saturating<u128> as ops::arith::Add>::add",
      "<num::saturating::Saturating<u128> as ops::arith::Div>::div",
      "<num::saturating::Saturating<u128> as ops::arith::Mul>::mul",
      "<num::saturating::Saturating<u128> as ops::arith::Rem>::rem",
      "<num::saturating::Saturating<u128> as ops::arith::Sub>::sub",
      "<num::saturating::Saturating<u128> as ops::bit::BitAnd>::bitand",
      "<num::saturating::Saturating<u128> as ops::bit::BitOr>::bitor",
      "<num::saturating::Saturating<u128> as ops::bit::BitXor>::bitxor",
      "<num::saturating::Saturating<u128> as ops::bit::Not>::not",
      "<num::saturating::Saturating<u16> as ops::arith::Add>::add",
      "<num::saturating::Saturating<u16> as ops::arith::Div>::div",
      "<num::saturating::Saturating<u16> as ops::arith::Mul>::mul",
      "<num::saturating::Saturating<u16> as ops::arith::Rem>::rem",
      "<num::saturating::Saturating<u16> as ops::arith::Sub>::sub",
      "<num::saturating::Saturating<u16> as ops::bit::BitAnd>::bitand",
      "<num::saturating::Saturating<u16> as ops::bit::BitOr>::bitor",
      "<num::saturating::Saturating<u16> as ops::bit::BitXor>::bitxor",
      "<num::saturating::Saturating<u16> as ops::bit::Not>::not",
      "<num::saturating::Saturating<u32> as ops::arith::Add>::add",
      "<num::saturating::Saturating<u32> as ops::arith::Div>::div",
      "<num::saturating::Saturating<u32> as ops::arith::Mul>::mul",
      "<num::saturating::Saturating<u32> as ops::arith::Rem>::rem",
      "<num::saturating::Saturating<u32> as ops::arith::Sub>::sub",
      "<num::saturating::Saturating<u32> as ops::bit::BitAnd>::bitand",
      "<num::saturating::Saturating<u32> as ops::bit::BitOr>::bitor",
      "<num::saturating::Saturating<u32> as ops::bit::BitXor>::bitxor",
      "<num::saturating::Saturating<u32> as ops::bit::Not>::not",
      "<num::saturating::Saturating<u64> as ops::arith::Add>::add",
      "<num::saturating::Saturating<u64> as ops::arith::Div>::div",
      "<num::saturating::Saturating<u64> as ops::arith::Mul>::mul",
      "<num::saturating::Saturating<u64> as ops::arith::Rem>::rem",
      "<num::saturating::Saturating<u64> as ops::arith::Sub>::sub",
      "<num::saturating::Saturating<u64> as ops::bit::BitAnd>::bitand",
      "<num::saturating::Saturating<u64> as ops::bit::BitOr>::bitor",
      "<num::saturating::Saturating<u64> as ops::bit::BitXor>::bitxor",
      "<num::saturating::Saturating<u64> as ops::bit::Not>::not",
      "<num::saturating::Saturating<u8> as ops::arith::Add>::add",
      "<num::saturating::Saturating<u8> as ops::arith::Div>::div",
      "<num::saturating::Saturating<u8> as ops::arith::Mul>::mul",
      "<num::saturating::Saturating<u8> as ops::arith::Rem>::rem",
      "<num::saturating::Saturating<u8> as ops::arith::Sub>::sub",
      "<num::saturating::Saturating<u8> as ops::bit::BitAnd>::bitand",
      "<num::saturating::Saturating<u8> as ops::bit::BitOr>::bitor",
      "<num::saturating::Saturating<u8> as ops::bit::BitXor>::bitxor",
      "<num::saturating::Saturating<u8> as ops::bit::Not>::not",
      "<num::saturating::Saturating<usize> as ops::arith::Add>::add",
      "<num::saturating::Saturating<usize> as ops::arith::Div>::div",
      "<num::saturating::Saturating<usize> as ops::arith::Mul>::mul",
      "<num::saturating::Saturating<usize> as ops::arith::Rem>::rem",
      "<num::saturating::Saturating<usize> as ops::arith::Sub>::sub",
      "<num::saturating::Saturating<usize> as ops::bit::BitAnd>::bitand",
      "<num::saturating::Saturating<usize> as ops::bit::BitOr>::bitor",
      "<num::saturating::Saturating<usize> as ops::bit::BitXor>::bitxor",
      "<num::saturating::Saturating<usize> as ops::bit::Not>::not",
      "num::saturating::Saturating::<i128>::abs",
      "num::saturating::Saturating::<i128>::count_ones",
      "num::saturating::Saturating::<i128>::count_zeros",
      "num::saturating::Saturating::<i128>::from_be",
      "num::saturating::Saturating::<i128>::from_le",
      "num::saturating::Saturating::<i128>::is_negative",
      "num::saturating::Saturating::<i128>::is_positive",
      "num::saturating::Saturating::<i128>::leading_zeros",
      "num::saturating::Saturating::<i128>::pow",
      "num::saturating::Saturating::<i128>::reverse_bits",
      "num::saturating::Saturating::<i128>::rotate_left",
      "num::saturating::Saturating::<i128>::rotate_right",
      "num::saturating::Saturating::<i128>::signum",
      "num::saturating::Saturating::<i128>::swap_bytes",
      "num::saturating::Saturating::<i128>::to_be",
      "num::saturating::Saturating::<i128>::to_le",
      "num::saturating::Saturating::<i128>::trailing_zeros",
      "num::saturating::Saturating::<i16>::abs",
      "num::saturating::Saturating::<i16>::count_ones",
      "num::saturating::Saturating::<i16>::count_zeros",
      "num::saturating::Saturating::<i16>::from_be",
      "num::saturating::Saturating::<i16>::from_le",
      "num::saturating::Saturating::<i16>::is_negative",
      "num::saturating::Saturating::<i16>::is_positive",
      "num::saturating::Saturating::<i16>::leading_zeros",
      "num::saturating::Saturating::<i16>::pow",
      "num::saturating::Saturating::<i16>::reverse_bits",
      "num::saturating::Saturating::<i16>::rotate_left",
      "num::saturating::Saturating::<i16>::rotate_right",
      "num::saturating::Saturating::<i16>::signum",
      "num::saturating::Saturating::<i16>::swap_bytes",
      "num::saturating::Saturating::<i16>::to_be",
      "num::saturating::Saturating::<i16>::to_le",
      "num::saturating::Saturating::<i16>::trailing_zeros",
      "num::saturating::Saturating::<i32>::abs",
      "num::saturating::Saturating::<i32>::count_ones",
      "num::saturating::Saturating::<i32>::count_zeros",
      "num::saturating::Saturating::<i32>::from_be",
      "num::saturating::Saturating::<i32>::from_le",
      "num::saturating::Saturating::<i32>::is_negative",
      "num::saturating::Saturating::<i32>::is_positive",
      "num::saturating::Saturating::<i32>::leading_zeros",
      "num::saturating::Saturating::<i32>::pow",
      "num::saturating::Saturating::<i32>::reverse_bits",
      "num::saturating::Saturating::<i32>::rotate_left",
      "num::saturating::Saturating::<i32>::rotate_right",
      "num::saturating::Saturating::<i32>::signum",
      "num::saturating::Saturating::<i32>::swap_bytes",
      "num::saturating::Saturating::<i32>::to_be",
      "num::saturating::Saturating::<i32>::to_le",
      "num::saturating::Saturating::<i32>::trailing_zeros",
      "num::saturating::Saturating::<i64>::abs",
      "num::saturating::Saturating::<i64>::count_ones",
      "num::saturating::Saturating::<i64>::count_zeros",
      "num::saturating::Saturating::<i64>::from_be",
      "num::saturating::Saturating::<i64>::from_le",
      "num::saturating::Saturating::<i64>::is_negative",
      "num::saturating::Saturating::<i64>::is_positive",
      "num::saturating::Saturating::<i64>::leading_zeros",
      "num::saturating::Saturating::<i64>::pow",
      "num::saturating::Saturating::<i64>::reverse_bits",
      "num::saturating::Saturating::<i64>::rotate_left",
      "num::saturating::Saturating::<i64>::rotate_right",
      "num::saturating::Saturating::<i64>::signum",
      "num::saturating::Saturating::<i64>::swap_bytes",
      "num::saturating::Saturating::<i64>::to_be",
      "num::saturating::Saturating::<i64>::to_le",
      "num::saturating::Saturating::<i64>::trailing_zeros",
      "num::saturating::Saturating::<i8>::abs",
      "num::saturating::Saturating::<i8>::count_ones",
      "num::saturating::Saturating::<i8>::count_zeros",
      "num::saturating::Saturating::<i8>::from_be",
      "num::saturating::Saturating::<i8>::from_le",
      "num::saturating::Saturating::<i8>::is_negative",
      "num::saturating::Saturating::<i8>::is_positive",
      "num::saturating::Saturating::<i8>::leading_zeros",
      "num::saturating::Saturating::<i8>::pow",
      "num::saturating::Saturating::<i8>::reverse_bits",
      "num::saturating::Saturating::<i8>::rotate_left",
      "num::saturating::Saturating::<i8>::rotate_right",
      "num::saturating::Saturating::<i8>::signum",
      "num::saturating::Saturating::<i8>::swap_bytes",
      "num::saturating::Saturating::<i8>::to_be",
      "num::saturating::Saturating::<i8>::to_le",
      "num::saturating::Saturating::<i8>::trailing_zeros",
      "num::saturating::Saturating::<isize>::abs",
      "num::saturating::Saturating::<isize>::count_ones",
      "num::saturating::Saturating::<isize>::count_zeros",
      "num::saturating::Saturating::<isize>::from_be",
      "num::saturating::Saturating::<isize>::from_le",
      "num::saturating::Saturating::<isize>::is_negative",
      "num::saturating::Saturating::<isize>::is_positive",
      "num::saturating::Saturating::<isize>::leading_zeros",
      "num::saturating::Saturating::<isize>::pow",
      "num::saturating::Saturating::<isize>::reverse_bits",
      "num::saturating::Saturating::<isize>::rotate_left",
      "num::saturating::Saturating::<isize>::rotate_right",
      "num::saturating::Saturating::<isize>::signum",
      "num::saturating::Saturating::<isize>::swap_bytes",
      "num::saturating::Saturating::<isize>::to_be",
      "num::saturating::Saturating::<isize>::to_le",
      "num::saturating::Saturating::<isize>::trailing_zeros",
      "num::saturating::Saturating::<u128>::count_ones",
      "num::saturating::Saturating::<u128>::count_zeros",
      "num::saturating::Saturating::<u128>::from_be",
      "num::saturating::Saturating::<u128>::from_le",
      "num::saturating::Saturating::<u128>::is_power_of_two",
      "num::saturating::Saturating::<u128>::leading_zeros",
      "num::saturating::Saturating::<u128>::pow",
      "num::saturating::Saturating::<u128>::reverse_bits",
      "num::saturating::Saturating::<u128>::rotate_left",
      "num::saturating::Saturating::<u128>::rotate_right",
      "num::saturating::Saturating::<u128>::swap_bytes",
      "num::saturating::Saturating::<u128>::to_be",
      "num::saturating::Saturating::<u128>::to_le",
      "num::saturating::Saturating::<u128>::trailing_zeros",
      "num::saturating::Saturating::<u16>::count_ones",
      "num::saturating::Saturating::<u16>::count_zeros",
      "num::saturating::Saturating::<u16>::from_be",
      "num::saturating::Saturating::<u16>::from_le",
      "num::saturating::Saturating::<u16>::is_power_of_two",
      "num::saturating::Saturating::<u16>::leading_zeros",
      "num::saturating::Saturating::<u16>::pow",
      "num::saturating::Saturating::<u16>::reverse_bits",
      "num::saturating::Saturating::<u16>::rotate_left",
      "num::saturating::Saturating::<u16>::rotate_right",
      "num::saturating::Saturating::<u16>::swap_bytes",
      "num::saturating::Saturating::<u16>::to_be",
      "num::saturating::Saturating::<u16>::to_le",
      "num::saturating::Saturating::<u16>::trailing_zeros",
      "num::saturating::Saturating::<u32>::count_ones",
      "num::saturating::Saturating::<u32>::count_zeros",
      "num::saturating::Saturating::<u32>::from_be",
      "num::saturating::Saturating::<u32>::from_le",
      "num::saturating::Saturating::<u32>::is_power_of_two",
      "num::saturating::Saturating::<u32>::leading_zeros",
      "num::saturating::Saturating::<u32>::pow",
      "num::saturating::Saturating::<u32>::reverse_bits",
      "num::saturating::Saturating::<u32>::rotate_left",
      "num::saturating::Saturating::<u32>::rotate_right",
      "num::saturating::Saturating::<u32>::swap_bytes",
      "num::saturating::Saturating::<u32>::to_be",
      "num::saturating::Saturating::<u32>::to_le",
      "num::saturating::Saturating::<u32>::trailing_zeros",
      "num::saturating::Saturating::<u64>::count_ones",
      "num::saturating::Saturating::<u64>::count_zeros",
      "num::saturating::Saturating::<u64>::from_be",
      "num::saturating::Saturating::<u64>::from_le",
      "num::saturating::Saturating::<u64>::is_power_of_two",
      "num::saturating::Saturating::<u64>::leading_zeros",
      "num::saturating::Saturating::<u64>::pow",
      "num::saturating::Saturating::<u64>::reverse_bits",
      "num::saturating::Saturating::<u64>::rotate_left",
      "num::saturating::Saturating::<u64>::rotate_right",
      "num::saturating::Saturating::<u64>::swap_bytes",
      "num::saturating::Saturating::<u64>::to_be",
      "num::saturating::Saturating::<u64>::to_le",
      "num::saturating::Saturating::<u64>::trailing_zeros",
      "num::saturating::Saturating::<u8>::count_ones",
      "num::saturating::Saturating::<u8>::count_zeros",
      "num::saturating::Saturating::<u8>::from_be",
      "num::saturating::Saturating::<u8>::from_le",
      "num::saturating::Saturating::<u8>::is_power_of_two",
      "num::saturating::Saturating::<u8>::leading_zeros",
      "num::saturating::Saturating::<u8>::pow",
      "num::saturating::Saturating::<u8>::reverse_bits",
      "num::saturating::Saturating::<u8>::rotate_left",
      "num::saturating::Saturating::<u8>::rotate_right",
      "num::saturating::Saturating::<u8>::swap_bytes",
      "num::saturating::Saturating::<u8>::to_be",
      "num::saturating::Saturating::<u8>::to_le",
      "num::saturating::Saturating::<u8>::trailing_zeros",
      "num::saturating::Saturating::<usize>::count_ones",
      "num::saturating::Saturating::<usize>::count_zeros",
      "num::saturating::Saturating::<usize>::from_be",
      "num::saturating::Saturating::<usize>::from_le",
      "num::saturating::Saturating::<usize>::is_power_of_two",
      "num::saturating::Saturating::<usize>::leading_zeros",
      "num::saturating::Saturating::<usize>::pow",
      "num::saturating::Saturating::<usize>::reverse_bits",
      "num::saturating::Saturating::<usize>::rotate_left",
      "num::saturating::Saturating::<usize>::rotate_right",
      "num::saturating::Saturating::<usize>::swap_bytes",
      "num::saturating::Saturating::<usize>::to_be",
      "num::saturating::Saturating::<usize>::to_le",
      "num::saturating::Saturating::<usize>::trailing_zeros"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs": [
      "num::<impl u128>::abs_diff",
      "num::<impl u128>::bit_width",
      "num::<impl u128>::borrowing_sub",
      "num::<impl u128>::carrying_add",
      "num::<impl u128>::carrying_mul",
      "num::<impl u128>::carrying_mul_add",
      "num::<impl u128>::cast_signed",
      "num::<impl u128>::checked_add",
      "num::<impl u128>::checked_add_signed",
      "num::<impl u128>::checked_div",
      "num::<impl u128>::checked_div_euclid",
      "num::<impl u128>::checked_exact_div",
      "num::<impl u128>::checked_ilog",
      "num::<impl u128>::checked_ilog10",
      "num::<impl u128>::checked_ilog2",
      "num::<impl u128>::checked_mul",
      "num::<impl u128>::checked_neg",
      "num::<impl u128>::checked_next_multiple_of",
      "num::<impl u128>::checked_next_power_of_two",
      "num::<impl u128>::checked_pow",
      "num::<impl u128>::checked_rem",
      "num::<impl u128>::checked_rem_euclid",
      "num::<impl u128>::checked_shl",
      "num::<impl u128>::checked_shr",
      "num::<impl u128>::checked_signed_diff",
      "num::<impl u128>::checked_sub",
      "num::<impl u128>::checked_sub_signed",
      "num::<impl u128>::count_ones",
      "num::<impl u128>::count_zeros",
      "num::<impl u128>::div_ceil",
      "num::<impl u128>::div_euclid",
      "num::<impl u128>::div_floor",
      "num::<impl u128>::exact_div",
      "num::<impl u128>::from_be",
      "num::<impl u128>::from_be_bytes",
      "num::<impl u128>::from_le",
      "num::<impl u128>::from_le_bytes",
      "num::<impl u128>::from_ne_bytes",
      "num::<impl u128>::ilog",
      "num::<impl u128>::ilog10",
      "num::<impl u128>::ilog2",
      "num::<impl u128>::is_multiple_of",
      "num::<impl u128>::is_power_of_two",
      "num::<impl u128>::isolate_least_significant_one",
      "num::<impl u128>::isolate_most_significant_one",
      "num::<impl u128>::isqrt",
      "num::<impl u128>::leading_ones",
      "num::<impl u128>::leading_zeros",
      "num::<impl u128>::max_value",
      "num::<impl u128>::min_value",
      "num::<impl u128>::next_multiple_of",
      "num::<impl u128>::next_power_of_two",
      "num::<impl u128>::one_less_than_next_power_of_two",
      "num::<impl u128>::overflowing_add",
      "num::<impl u128>::overflowing_add_signed",
      "num::<impl u128>::overflowing_div",
      "num::<impl u128>::overflowing_div_euclid",
      "num::<impl u128>::overflowing_mul",
      "num::<impl u128>::overflowing_neg",
      "num::<impl u128>::overflowing_pow",
      "num::<impl u128>::overflowing_rem",
      "num::<impl u128>::overflowing_rem_euclid",
      "num::<impl u128>::overflowing_shl",
      "num::<impl u128>::overflowing_shr",
      "num::<impl u128>::overflowing_sub",
      "num::<impl u128>::overflowing_sub_signed",
      "num::<impl u128>::pow",
      "num::<impl u128>::rem_euclid",
      "num::<impl u128>::reverse_bits",
      "num::<impl u128>::rotate_left",
      "num::<impl u128>::rotate_right",
      "num::<impl u128>::saturating_add",
      "num::<impl u128>::saturating_add_signed",
      "num::<impl u128>::saturating_div",
      "num::<impl u128>::saturating_mul",
      "num::<impl u128>::saturating_pow",
      "num::<impl u128>::saturating_sub",
      "num::<impl u128>::saturating_sub_signed",
      "num::<impl u128>::strict_add",
      "num::<impl u128>::strict_add_signed",
      "num::<impl u128>::strict_div",
      "num::<impl u128>::strict_div_euclid",
      "num::<impl u128>::strict_mul",
      "num::<impl u128>::strict_neg",
      "num::<impl u128>::strict_pow",
      "num::<impl u128>::strict_rem",
      "num::<impl u128>::strict_rem_euclid",
      "num::<impl u128>::strict_shl",
      "num::<impl u128>::strict_shr",
      "num::<impl u128>::strict_sub",
      "num::<impl u128>::swap_bytes",
      "num::<impl u128>::to_be",
      "num::<impl u128>::to_be_bytes",
      "num::<impl u128>::to_le",
      "num::<impl u128>::to_le_bytes",
      "num::<impl u128>::to_ne_bytes",
      "num::<impl u128>::trailing_ones",
      "num::<impl u128>::trailing_zeros",
      "num::<impl u128>::unbounded_shl",
      "num::<impl u128>::unbounded_shr",
      "num::<impl u128>::unchecked_exact_div",
      "num::<impl u128>::widening_mul",
      "num::<impl u128>::wrapping_add",
      "num::<impl u128>::wrapping_add_signed",
      "num::<impl u128>::wrapping_div",
      "num::<impl u128>::wrapping_div_euclid",
      "num::<impl u128>::wrapping_mul",
      "num::<impl u128>::wrapping_neg",
      "num::<impl u128>::wrapping_next_power_of_two",
      "num::<impl u128>::wrapping_pow",
      "num::<impl u128>::wrapping_rem",
      "num::<impl u128>::wrapping_rem_euclid",
      "num::<impl u128>::wrapping_sub",
      "num::<impl u128>::wrapping_sub_signed",
      "num::<impl u16>::abs_diff",
      "num::<impl u16>::bit_width",
      "num::<impl u16>::borrowing_sub",
      "num::<impl u16>::carrying_add",
      "num::<impl u16>::carrying_mul",
      "num::<impl u16>::carrying_mul_add",
      "num::<impl u16>::cast_signed",
      "num::<impl u16>::checked_add",
      "num::<impl u16>::checked_add_signed",
      "num::<impl u16>::checked_div",
      "num::<impl u16>::checked_div_euclid",
      "num::<impl u16>::checked_exact_div",
      "num::<impl u16>::checked_ilog",
      "num::<impl u16>::checked_ilog10",
      "num::<impl u16>::checked_ilog2",
      "num::<impl u16>::checked_mul",
      "num::<impl u16>::checked_neg",
      "num::<impl u16>::checked_next_multiple_of",
      "num::<impl u16>::checked_next_power_of_two",
      "num::<impl u16>::checked_pow",
      "num::<impl u16>::checked_rem",
      "num::<impl u16>::checked_rem_euclid",
      "num::<impl u16>::checked_shl",
      "num::<impl u16>::checked_shr",
      "num::<impl u16>::checked_signed_diff",
      "num::<impl u16>::checked_sub",
      "num::<impl u16>::checked_sub_signed",
      "num::<impl u16>::count_ones",
      "num::<impl u16>::count_zeros",
      "num::<impl u16>::div_ceil",
      "num::<impl u16>::div_euclid",
      "num::<impl u16>::div_floor",
      "num::<impl u16>::exact_div",
      "num::<impl u16>::from_be",
      "num::<impl u16>::from_be_bytes",
      "num::<impl u16>::from_le",
      "num::<impl u16>::from_le_bytes",
      "num::<impl u16>::from_ne_bytes",
      "num::<impl u16>::ilog",
      "num::<impl u16>::ilog10",
      "num::<impl u16>::ilog2",
      "num::<impl u16>::is_multiple_of",
      "num::<impl u16>::is_power_of_two",
      "num::<impl u16>::isolate_least_significant_one",
      "num::<impl u16>::isolate_most_significant_one",
      "num::<impl u16>::isqrt",
      "num::<impl u16>::leading_ones",
      "num::<impl u16>::leading_zeros",
      "num::<impl u16>::max_value",
      "num::<impl u16>::min_value",
      "num::<impl u16>::next_multiple_of",
      "num::<impl u16>::next_power_of_two",
      "num::<impl u16>::one_less_than_next_power_of_two",
      "num::<impl u16>::overflowing_add",
      "num::<impl u16>::overflowing_add_signed",
      "num::<impl u16>::overflowing_div",
      "num::<impl u16>::overflowing_div_euclid",
      "num::<impl u16>::overflowing_mul",
      "num::<impl u16>::overflowing_neg",
      "num::<impl u16>::overflowing_pow",
      "num::<impl u16>::overflowing_rem",
      "num::<impl u16>::overflowing_rem_euclid",
      "num::<impl u16>::overflowing_shl",
      "num::<impl u16>::overflowing_shr",
      "num::<impl u16>::overflowing_sub",
      "num::<impl u16>::overflowing_sub_signed",
      "num::<impl u16>::pow",
      "num::<impl u16>::rem_euclid",
      "num::<impl u16>::reverse_bits",
      "num::<impl u16>::rotate_left",
      "num::<impl u16>::rotate_right",
      "num::<impl u16>::saturating_add",
      "num::<impl u16>::saturating_add_signed",
      "num::<impl u16>::saturating_div",
      "num::<impl u16>::saturating_mul",
      "num::<impl u16>::saturating_pow",
      "num::<impl u16>::saturating_sub",
      "num::<impl u16>::saturating_sub_signed",
      "num::<impl u16>::strict_add",
      "num::<impl u16>::strict_add_signed",
      "num::<impl u16>::strict_div",
      "num::<impl u16>::strict_div_euclid",
      "num::<impl u16>::strict_mul",
      "num::<impl u16>::strict_neg",
      "num::<impl u16>::strict_pow",
      "num::<impl u16>::strict_rem",
      "num::<impl u16>::strict_rem_euclid",
      "num::<impl u16>::strict_shl",
      "num::<impl u16>::strict_shr",
      "num::<impl u16>::strict_sub",
      "num::<impl u16>::swap_bytes",
      "num::<impl u16>::to_be",
      "num::<impl u16>::to_be_bytes",
      "num::<impl u16>::to_le",
      "num::<impl u16>::to_le_bytes",
      "num::<impl u16>::to_ne_bytes",
      "num::<impl u16>::trailing_ones",
      "num::<impl u16>::trailing_zeros",
      "num::<impl u16>::unbounded_shl",
      "num::<impl u16>::unbounded_shr",
      "num::<impl u16>::unchecked_exact_div",
      "num::<impl u16>::widening_mul",
      "num::<impl u16>::wrapping_add",
      "num::<impl u16>::wrapping_add_signed",
      "num::<impl u16>::wrapping_div",
      "num::<impl u16>::wrapping_div_euclid",
      "num::<impl u16>::wrapping_mul",
      "num::<impl u16>::wrapping_neg",
      "num::<impl u16>::wrapping_next_power_of_two",
      "num::<impl u16>::wrapping_pow",
      "num::<impl u16>::wrapping_rem",
      "num::<impl u16>::wrapping_rem_euclid",
      "num::<impl u16>::wrapping_sub",
      "num::<impl u16>::wrapping_sub_signed",
      "num::<impl u32>::abs_diff",
      "num::<impl u32>::bit_width",
      "num::<impl u32>::borrowing_sub",
      "num::<impl u32>::carrying_add",
      "num::<impl u32>::carrying_mul",
      "num::<impl u32>::carrying_mul_add",
      "num::<impl u32>::cast_signed",
      "num::<impl u32>::checked_add",
      "num::<impl u32>::checked_add_signed",
      "num::<impl u32>::checked_div",
      "num::<impl u32>::checked_div_euclid",
      "num::<impl u32>::checked_exact_div",
      "num::<impl u32>::checked_ilog",
      "num::<impl u32>::checked_ilog10",
      "num::<impl u32>::checked_ilog2",
      "num::<impl u32>::checked_mul",
      "num::<impl u32>::checked_neg",
      "num::<impl u32>::checked_next_multiple_of",
      "num::<impl u32>::checked_next_power_of_two",
      "num::<impl u32>::checked_pow",
      "num::<impl u32>::checked_rem",
      "num::<impl u32>::checked_rem_euclid",
      "num::<impl u32>::checked_shl",
      "num::<impl u32>::checked_shr",
      "num::<impl u32>::checked_signed_diff",
      "num::<impl u32>::checked_sub",
      "num::<impl u32>::checked_sub_signed",
      "num::<impl u32>::count_ones",
      "num::<impl u32>::count_zeros",
      "num::<impl u32>::div_ceil",
      "num::<impl u32>::div_euclid",
      "num::<impl u32>::div_floor",
      "num::<impl u32>::exact_div",
      "num::<impl u32>::from_be",
      "num::<impl u32>::from_be_bytes",
      "num::<impl u32>::from_le",
      "num::<impl u32>::from_le_bytes",
      "num::<impl u32>::from_ne_bytes",
      "num::<impl u32>::ilog",
      "num::<impl u32>::ilog10",
      "num::<impl u32>::ilog2",
      "num::<impl u32>::is_multiple_of",
      "num::<impl u32>::is_power_of_two",
      "num::<impl u32>::isolate_least_significant_one",
      "num::<impl u32>::isolate_most_significant_one",
      "num::<impl u32>::isqrt",
      "num::<impl u32>::leading_ones",
      "num::<impl u32>::leading_zeros",
      "num::<impl u32>::max_value",
      "num::<impl u32>::min_value",
      "num::<impl u32>::next_multiple_of",
      "num::<impl u32>::next_power_of_two",
      "num::<impl u32>::one_less_than_next_power_of_two",
      "num::<impl u32>::overflowing_add",
      "num::<impl u32>::overflowing_add_signed",
      "num::<impl u32>::overflowing_div",
      "num::<impl u32>::overflowing_div_euclid",
      "num::<impl u32>::overflowing_mul",
      "num::<impl u32>::overflowing_neg",
      "num::<impl u32>::overflowing_pow",
      "num::<impl u32>::overflowing_rem",
      "num::<impl u32>::overflowing_rem_euclid",
      "num::<impl u32>::overflowing_shl",
      "num::<impl u32>::overflowing_shr",
      "num::<impl u32>::overflowing_sub",
      "num::<impl u32>::overflowing_sub_signed",
      "num::<impl u32>::pow",
      "num::<impl u32>::rem_euclid",
      "num::<impl u32>::reverse_bits",
      "num::<impl u32>::rotate_left",
      "num::<impl u32>::rotate_right",
      "num::<impl u32>::saturating_add",
      "num::<impl u32>::saturating_add_signed",
      "num::<impl u32>::saturating_div",
      "num::<impl u32>::saturating_mul",
      "num::<impl u32>::saturating_pow",
      "num::<impl u32>::saturating_sub",
      "num::<impl u32>::saturating_sub_signed",
      "num::<impl u32>::strict_add",
      "num::<impl u32>::strict_add_signed",
      "num::<impl u32>::strict_div",
      "num::<impl u32>::strict_div_euclid",
      "num::<impl u32>::strict_mul",
      "num::<impl u32>::strict_neg",
      "num::<impl u32>::strict_pow",
      "num::<impl u32>::strict_rem",
      "num::<impl u32>::strict_rem_euclid",
      "num::<impl u32>::strict_shl",
      "num::<impl u32>::strict_shr",
      "num::<impl u32>::strict_sub",
      "num::<impl u32>::swap_bytes",
      "num::<impl u32>::to_be",
      "num::<impl u32>::to_be_bytes",
      "num::<impl u32>::to_le",
      "num::<impl u32>::to_le_bytes",
      "num::<impl u32>::to_ne_bytes",
      "num::<impl u32>::trailing_ones",
      "num::<impl u32>::trailing_zeros",
      "num::<impl u32>::unbounded_shl",
      "num::<impl u32>::unbounded_shr",
      "num::<impl u32>::unchecked_exact_div",
      "num::<impl u32>::widening_mul",
      "num::<impl u32>::wrapping_add",
      "num::<impl u32>::wrapping_add_signed",
      "num::<impl u32>::wrapping_div",
      "num::<impl u32>::wrapping_div_euclid",
      "num::<impl u32>::wrapping_mul",
      "num::<impl u32>::wrapping_neg",
      "num::<impl u32>::wrapping_next_power_of_two",
      "num::<impl u32>::wrapping_pow",
      "num::<impl u32>::wrapping_rem",
      "num::<impl u32>::wrapping_rem_euclid",
      "num::<impl u32>::wrapping_sub",
      "num::<impl u32>::wrapping_sub_signed",
      "num::<impl u64>::abs_diff",
      "num::<impl u64>::bit_width",
      "num::<impl u64>::borrowing_sub",
      "num::<impl u64>::carrying_add",
      "num::<impl u64>::carrying_mul",
      "num::<impl u64>::carrying_mul_add",
      "num::<impl u64>::cast_signed",
      "num::<impl u64>::checked_add",
      "num::<impl u64>::checked_add_signed",
      "num::<impl u64>::checked_div",
      "num::<impl u64>::checked_div_euclid",
      "num::<impl u64>::checked_exact_div",
      "num::<impl u64>::checked_ilog",
      "num::<impl u64>::checked_ilog10",
      "num::<impl u64>::checked_ilog2",
      "num::<impl u64>::checked_mul",
      "num::<impl u64>::checked_neg",
      "num::<impl u64>::checked_next_multiple_of",
      "num::<impl u64>::checked_next_power_of_two",
      "num::<impl u64>::checked_pow",
      "num::<impl u64>::checked_rem",
      "num::<impl u64>::checked_rem_euclid",
      "num::<impl u64>::checked_shl",
      "num::<impl u64>::checked_shr",
      "num::<impl u64>::checked_signed_diff",
      "num::<impl u64>::checked_sub",
      "num::<impl u64>::checked_sub_signed",
      "num::<impl u64>::count_ones",
      "num::<impl u64>::count_zeros",
      "num::<impl u64>::div_ceil",
      "num::<impl u64>::div_euclid",
      "num::<impl u64>::div_floor",
      "num::<impl u64>::exact_div",
      "num::<impl u64>::from_be",
      "num::<impl u64>::from_be_bytes",
      "num::<impl u64>::from_le",
      "num::<impl u64>::from_le_bytes",
      "num::<impl u64>::from_ne_bytes",
      "num::<impl u64>::ilog",
      "num::<impl u64>::ilog10",
      "num::<impl u64>::ilog2",
      "num::<impl u64>::is_multiple_of",
      "num::<impl u64>::is_power_of_two",
      "num::<impl u64>::isolate_least_significant_one",
      "num::<impl u64>::isolate_most_significant_one",
      "num::<impl u64>::isqrt",
      "num::<impl u64>::leading_ones",
      "num::<impl u64>::leading_zeros",
      "num::<impl u64>::max_value",
      "num::<impl u64>::min_value",
      "num::<impl u64>::next_multiple_of",
      "num::<impl u64>::next_power_of_two",
      "num::<impl u64>::one_less_than_next_power_of_two",
      "num::<impl u64>::overflowing_add",
      "num::<impl u64>::overflowing_add_signed",
      "num::<impl u64>::overflowing_div",
      "num::<impl u64>::overflowing_div_euclid",
      "num::<impl u64>::overflowing_mul",
      "num::<impl u64>::overflowing_neg",
      "num::<impl u64>::overflowing_pow",
      "num::<impl u64>::overflowing_rem",
      "num::<impl u64>::overflowing_rem_euclid",
      "num::<impl u64>::overflowing_shl",
      "num::<impl u64>::overflowing_shr",
      "num::<impl u64>::overflowing_sub",
      "num::<impl u64>::overflowing_sub_signed",
      "num::<impl u64>::pow",
      "num::<impl u64>::rem_euclid",
      "num::<impl u64>::reverse_bits",
      "num::<impl u64>::rotate_left",
      "num::<impl u64>::rotate_right",
      "num::<impl u64>::saturating_add",
      "num::<impl u64>::saturating_add_signed",
      "num::<impl u64>::saturating_div",
      "num::<impl u64>::saturating_mul",
      "num::<impl u64>::saturating_pow",
      "num::<impl u64>::saturating_sub",
      "num::<impl u64>::saturating_sub_signed",
      "num::<impl u64>::strict_add",
      "num::<impl u64>::strict_add_signed",
      "num::<impl u64>::strict_div",
      "num::<impl u64>::strict_div_euclid",
      "num::<impl u64>::strict_mul",
      "num::<impl u64>::strict_neg",
      "num::<impl u64>::strict_pow",
      "num::<impl u64>::strict_rem",
      "num::<impl u64>::strict_rem_euclid",
      "num::<impl u64>::strict_shl",
      "num::<impl u64>::strict_shr",
      "num::<impl u64>::strict_sub",
      "num::<impl u64>::swap_bytes",
      "num::<impl u64>::to_be",
      "num::<impl u64>::to_be_bytes",
      "num::<impl u64>::to_le",
      "num::<impl u64>::to_le_bytes",
      "num::<impl u64>::to_ne_bytes",
      "num::<impl u64>::trailing_ones",
      "num::<impl u64>::trailing_zeros",
      "num::<impl u64>::unbounded_shl",
      "num::<impl u64>::unbounded_shr",
      "num::<impl u64>::unchecked_exact_div",
      "num::<impl u64>::widening_mul",
      "num::<impl u64>::wrapping_add",
      "num::<impl u64>::wrapping_add_signed",
      "num::<impl u64>::wrapping_div",
      "num::<impl u64>::wrapping_div_euclid",
      "num::<impl u64>::wrapping_mul",
      "num::<impl u64>::wrapping_neg",
      "num::<impl u64>::wrapping_next_power_of_two",
      "num::<impl u64>::wrapping_pow",
      "num::<impl u64>::wrapping_rem",
      "num::<impl u64>::wrapping_rem_euclid",
      "num::<impl u64>::wrapping_sub",
      "num::<impl u64>::wrapping_sub_signed",
      "num::<impl u8>::abs_diff",
      "num::<impl u8>::bit_width",
      "num::<impl u8>::borrowing_sub",
      "num::<impl u8>::carrying_add",
      "num::<impl u8>::carrying_mul",
      "num::<impl u8>::carrying_mul_add",
      "num::<impl u8>::cast_signed",
      "num::<impl u8>::checked_add",
      "num::<impl u8>::checked_add_signed",
      "num::<impl u8>::checked_div",
      "num::<impl u8>::checked_div_euclid",
      "num::<impl u8>::checked_exact_div",
      "num::<impl u8>::checked_ilog",
      "num::<impl u8>::checked_ilog10",
      "num::<impl u8>::checked_ilog2",
      "num::<impl u8>::checked_mul",
      "num::<impl u8>::checked_neg",
      "num::<impl u8>::checked_next_multiple_of",
      "num::<impl u8>::checked_next_power_of_two",
      "num::<impl u8>::checked_pow",
      "num::<impl u8>::checked_rem",
      "num::<impl u8>::checked_rem_euclid",
      "num::<impl u8>::checked_shl",
      "num::<impl u8>::checked_shr",
      "num::<impl u8>::checked_signed_diff",
      "num::<impl u8>::checked_sub",
      "num::<impl u8>::checked_sub_signed",
      "num::<impl u8>::count_ones",
      "num::<impl u8>::count_zeros",
      "num::<impl u8>::div_ceil",
      "num::<impl u8>::div_euclid",
      "num::<impl u8>::div_floor",
      "num::<impl u8>::exact_div",
      "num::<impl u8>::from_be",
      "num::<impl u8>::from_be_bytes",
      "num::<impl u8>::from_le",
      "num::<impl u8>::from_le_bytes",
      "num::<impl u8>::from_ne_bytes",
      "num::<impl u8>::ilog",
      "num::<impl u8>::ilog10",
      "num::<impl u8>::ilog2",
      "num::<impl u8>::is_multiple_of",
      "num::<impl u8>::is_power_of_two",
      "num::<impl u8>::isolate_least_significant_one",
      "num::<impl u8>::isolate_most_significant_one",
      "num::<impl u8>::isqrt",
      "num::<impl u8>::leading_ones",
      "num::<impl u8>::leading_zeros",
      "num::<impl u8>::max_value",
      "num::<impl u8>::min_value",
      "num::<impl u8>::next_multiple_of",
      "num::<impl u8>::next_power_of_two",
      "num::<impl u8>::one_less_than_next_power_of_two",
      "num::<impl u8>::overflowing_add",
      "num::<impl u8>::overflowing_add_signed",
      "num::<impl u8>::overflowing_div",
      "num::<impl u8>::overflowing_div_euclid",
      "num::<impl u8>::overflowing_mul",
      "num::<impl u8>::overflowing_neg",
      "num::<impl u8>::overflowing_pow",
      "num::<impl u8>::overflowing_rem",
      "num::<impl u8>::overflowing_rem_euclid",
      "num::<impl u8>::overflowing_shl",
      "num::<impl u8>::overflowing_shr",
      "num::<impl u8>::overflowing_sub",
      "num::<impl u8>::overflowing_sub_signed",
      "num::<impl u8>::pow",
      "num::<impl u8>::rem_euclid",
      "num::<impl u8>::reverse_bits",
      "num::<impl u8>::rotate_left",
      "num::<impl u8>::rotate_right",
      "num::<impl u8>::saturating_add",
      "num::<impl u8>::saturating_add_signed",
      "num::<impl u8>::saturating_div",
      "num::<impl u8>::saturating_mul",
      "num::<impl u8>::saturating_pow",
      "num::<impl u8>::saturating_sub",
      "num::<impl u8>::saturating_sub_signed",
      "num::<impl u8>::strict_add",
      "num::<impl u8>::strict_add_signed",
      "num::<impl u8>::strict_div",
      "num::<impl u8>::strict_div_euclid",
      "num::<impl u8>::strict_mul",
      "num::<impl u8>::strict_neg",
      "num::<impl u8>::strict_pow",
      "num::<impl u8>::strict_rem",
      "num::<impl u8>::strict_rem_euclid",
      "num::<impl u8>::strict_shl",
      "num::<impl u8>::strict_shr",
      "num::<impl u8>::strict_sub",
      "num::<impl u8>::swap_bytes",
      "num::<impl u8>::to_be",
      "num::<impl u8>::to_be_bytes",
      "num::<impl u8>::to_le",
      "num::<impl u8>::to_le_bytes",
      "num::<impl u8>::to_ne_bytes",
      "num::<impl u8>::trailing_ones",
      "num::<impl u8>::trailing_zeros",
      "num::<impl u8>::unbounded_shl",
      "num::<impl u8>::unbounded_shr",
      "num::<impl u8>::unchecked_exact_div",
      "num::<impl u8>::widening_mul",
      "num::<impl u8>::wrapping_add",
      "num::<impl u8>::wrapping_add_signed",
      "num::<impl u8>::wrapping_div",
      "num::<impl u8>::wrapping_div_euclid",
      "num::<impl u8>::wrapping_mul",
      "num::<impl u8>::wrapping_neg",
      "num::<impl u8>::wrapping_next_power_of_two",
      "num::<impl u8>::wrapping_pow",
      "num::<impl u8>::wrapping_rem",
      "num::<impl u8>::wrapping_rem_euclid",
      "num::<impl u8>::wrapping_sub",
      "num::<impl u8>::wrapping_sub_signed",
      "num::<impl usize>::abs_diff",
      "num::<impl usize>::bit_width",
      "num::<impl usize>::borrowing_sub",
      "num::<impl usize>::carrying_add",
      "num::<impl usize>::carrying_mul",
      "num::<impl usize>::carrying_mul_add",
      "num::<impl usize>::cast_signed",
      "num::<impl usize>::checked_add",
      "num::<impl usize>::checked_add_signed",
      "num::<impl usize>::checked_div",
      "num::<impl usize>::checked_div_euclid",
      "num::<impl usize>::checked_exact_div",
      "num::<impl usize>::checked_ilog",
      "num::<impl usize>::checked_ilog10",
      "num::<impl usize>::checked_ilog2",
      "num::<impl usize>::checked_mul",
      "num::<impl usize>::checked_neg",
      "num::<impl usize>::checked_next_multiple_of",
      "num::<impl usize>::checked_next_power_of_two",
      "num::<impl usize>::checked_pow",
      "num::<impl usize>::checked_rem",
      "num::<impl usize>::checked_rem_euclid",
      "num::<impl usize>::checked_shl",
      "num::<impl usize>::checked_shr",
      "num::<impl usize>::checked_signed_diff",
      "num::<impl usize>::checked_sub",
      "num::<impl usize>::checked_sub_signed",
      "num::<impl usize>::count_ones",
      "num::<impl usize>::count_zeros",
      "num::<impl usize>::div_ceil",
      "num::<impl usize>::div_euclid",
      "num::<impl usize>::div_floor",
      "num::<impl usize>::exact_div",
      "num::<impl usize>::from_be",
      "num::<impl usize>::from_be_bytes",
      "num::<impl usize>::from_le",
      "num::<impl usize>::from_le_bytes",
      "num::<impl usize>::from_ne_bytes",
      "num::<impl usize>::ilog",
      "num::<impl usize>::ilog10",
      "num::<impl usize>::ilog2",
      "num::<impl usize>::is_multiple_of",
      "num::<impl usize>::is_power_of_two",
      "num::<impl usize>::isolate_least_significant_one",
      "num::<impl usize>::isolate_most_significant_one",
      "num::<impl usize>::isqrt",
      "num::<impl usize>::leading_ones",
      "num::<impl usize>::leading_zeros",
      "num::<impl usize>::max_value",
      "num::<impl usize>::min_value",
      "num::<impl usize>::next_multiple_of",
      "num::<impl usize>::next_power_of_two",
      "num::<impl usize>::one_less_than_next_power_of_two",
      "num::<impl usize>::overflowing_add",
      "num::<impl usize>::overflowing_add_signed",
      "num::<impl usize>::overflowing_div",
      "num::<impl usize>::overflowing_div_euclid",
      "num::<impl usize>::overflowing_mul",
      "num::<impl usize>::overflowing_neg",
      "num::<impl usize>::overflowing_pow",
      "num::<impl usize>::overflowing_rem",
      "num::<impl usize>::overflowing_rem_euclid",
      "num::<impl usize>::overflowing_shl",
      "num::<impl usize>::overflowing_shr",
      "num::<impl usize>::overflowing_sub",
      "num::<impl usize>::overflowing_sub_signed",
      "num::<impl usize>::pow",
      "num::<impl usize>::rem_euclid",
      "num::<impl usize>::reverse_bits",
      "num::<impl usize>::rotate_left",
      "num::<impl usize>::rotate_right",
      "num::<impl usize>::saturating_add",
      "num::<impl usize>::saturating_add_signed",
      "num::<impl usize>::saturating_div",
      "num::<impl usize>::saturating_mul",
      "num::<impl usize>::saturating_pow",
      "num::<impl usize>::saturating_sub",
      "num::<impl usize>::saturating_sub_signed",
      "num::<impl usize>::strict_add",
      "num::<impl usize>::strict_add_signed",
      "num::<impl usize>::strict_div",
      "num::<impl usize>::strict_div_euclid",
      "num::<impl usize>::strict_mul",
      "num::<impl usize>::strict_neg",
      "num::<impl usize>::strict_pow",
      "num::<impl usize>::strict_rem",
      "num::<impl usize>::strict_rem_euclid",
      "num::<impl usize>::strict_shl",
      "num::<impl usize>::strict_shr",
      "num::<impl usize>::strict_sub",
      "num::<impl usize>::swap_bytes",
      "num::<impl usize>::to_be",
      "num::<impl usize>::to_be_bytes",
      "num::<impl usize>::to_le",
      "num::<impl usize>::to_le_bytes",
      "num::<impl usize>::to_ne_bytes",
      "num::<impl usize>::trailing_ones",
      "num::<impl usize>::trailing_zeros",
      "num::<impl usize>::unbounded_shl",
      "num::<impl usize>::unbounded_shr",
      "num::<impl usize>::unchecked_exact_div",
      "num::<impl usize>::widening_mul",
      "num::<impl usize>::wrapping_add",
      "num::<impl usize>::wrapping_add_signed",
      "num::<impl usize>::wrapping_div",
      "num::<impl usize>::wrapping_div_euclid",
      "num::<impl usize>::wrapping_mul",
      "num::<impl usize>::wrapping_neg",
      "num::<impl usize>::wrapping_next_power_of_two",
      "num::<impl usize>::wrapping_pow",
      "num::<impl usize>::wrapping_rem",
      "num::<impl usize>::wrapping_rem_euclid",
      "num::<impl usize>::wrapping_sub",
      "num::<impl usize>::wrapping_sub_signed"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/wrapping.rs": [
      "<num::wrapping::Wrapping<i128> as ops::arith::Add>::add",
      "<num::wrapping::Wrapping<i128> as ops::arith::Div>::div",
      "<num::wrapping::Wrapping<i128> as ops::arith::Mul>::mul",
      "<num::wrapping::Wrapping<i128> as ops::arith::Neg>::neg",
      "<num::wrapping::Wrapping<i128> as ops::arith::Rem>::rem",
      "<num::wrapping::Wrapping<i128> as ops::arith::Sub>::sub",
      "<num::wrapping::Wrapping<i128> as ops::bit::BitAnd>::bitand",
      "<num::wrapping::Wrapping<i128> as ops::bit::BitOr>::bitor",
      "<num::wrapping::Wrapping<i128> as ops::bit::BitXor>::bitxor",
      "<num::wrapping::Wrapping<i128> as ops::bit::Not>::not",
      "<num::wrapping::Wrapping<i128> as ops::bit::Shl<usize>>::shl",
      "<num::wrapping::Wrapping<i128> as ops::bit::Shr<usize>>::shr",
      "<num::wrapping::Wrapping<i16> as ops::arith::Add>::add",
      "<num::wrapping::Wrapping<i16> as ops::arith::Div>::div",
      "<num::wrapping::Wrapping<i16> as ops::arith::Mul>::mul",
      "<num::wrapping::Wrapping<i16> as ops::arith::Neg>::neg",
      "<num::wrapping::Wrapping<i16> as ops::arith::Rem>::rem",
      "<num::wrapping::Wrapping<i16> as ops::arith::Sub>::sub",
      "<num::wrapping::Wrapping<i16> as ops::bit::BitAnd>::bitand",
      "<num::wrapping::Wrapping<i16> as ops::bit::BitOr>::bitor",
      "<num::wrapping::Wrapping<i16> as ops::bit::BitXor>::bitxor",
      "<num::wrapping::Wrapping<i16> as ops::bit::Not>::not",
      "<num::wrapping::Wrapping<i16> as ops::bit::Shl<usize>>::shl",
      "<num::wrapping::Wrapping<i16> as ops::bit::Shr<usize>>::shr",
      "<num::wrapping::Wrapping<i32> as ops::arith::Add>::add",
      "<num::wrapping::Wrapping<i32> as ops::arith::Div>::div",
      "<num::wrapping::Wrapping<i32> as ops::arith::Mul>::mul",
      "<num::wrapping::Wrapping<i32> as ops::arith::Neg>::neg",
      "<num::wrapping::Wrapping<i32> as ops::arith::Rem>::rem",
      "<num::wrapping::Wrapping<i32> as ops::arith::Sub>::sub",
      "<num::wrapping::Wrapping<i32> as ops::bit::BitAnd>::bitand",
      "<num::wrapping::Wrapping<i32> as ops::bit::BitOr>::bitor",
      "<num::wrapping::Wrapping<i32> as ops::bit::BitXor>::bitxor",
      "<num::wrapping::Wrapping<i32> as ops::bit::Not>::not",
      "<num::wrapping::Wrapping<i32> as ops::bit::Shl<usize>>::shl",
      "<num::wrapping::Wrapping<i32> as ops::bit::Shr<usize>>::shr",
      "<num::wrapping::Wrapping<i64> as ops::arith::Add>::add",
      "<num::wrapping::Wrapping<i64> as ops::arith::Div>::div",
      "<num::wrapping::Wrapping<i64> as ops::arith::Mul>::mul",
      "<num::wrapping::Wrapping<i64> as ops::arith::Neg>::neg",
      "<num::wrapping::Wrapping<i64> as ops::arith::Rem>::rem",
      "<num::wrapping::Wrapping<i64> as ops::arith::Sub>::sub",
      "<num::wrapping::Wrapping<i64> as ops::bit::BitAnd>::bitand",
      "<num::wrapping::Wrapping<i64> as ops::bit::BitOr>::bitor",
      "<num::wrapping::Wrapping<i64> as ops::bit::BitXor>::bitxor",
      "<num::wrapping::Wrapping<i64> as ops::bit::Not>::not",
      "<num::wrapping::Wrapping<i64> as ops::bit::Shl<usize>>::shl",
      "<num::wrapping::Wrapping<i64> as ops::bit::Shr<usize>>::shr",
      "<num::wrapping::Wrapping<i8> as ops::arith::Add>::add",
      "<num::wrapping::Wrapping<i8> as ops::arith::Div>::div",
      "<num::wrapping::Wrapping<i8> as ops::arith::Mul>::mul",
      "<num::wrapping::Wrapping<i8> as ops::arith::Neg>::neg",
      "<num::wrapping::Wrapping<i8> as ops::arith::Rem>::rem",
      "<num::wrapping::Wrapping<i8> as ops::arith::Sub>::sub",
      "<num::wrapping::Wrapping<i8> as ops::bit::BitAnd>::bitand",
      "<num::wrapping::Wrapping<i8> as ops::bit::BitOr>::bitor",
      "<num::wrapping::Wrapping<i8> as ops::bit::BitXor>::bitxor",
      "<num::wrapping::Wrapping<i8> as ops::bit::Not>::not",
      "<num::wrapping::Wrapping<i8> as ops::bit::Shl<usize>>::shl",
      "<num::wrapping::Wrapping<i8> as ops::bit::Shr<usize>>::shr",
      "<num::wrapping::Wrapping<isize> as ops::arith::Add>::add",
      "<num::wrapping::Wrapping<isize> as ops::arith::Div>::div",
      "<num::wrapping::Wrapping<isize> as ops::arith::Mul>::mul",
      "<num::wrapping::Wrapping<isize> as ops::arith::Neg>::neg",
      "<num::wrapping::Wrapping<isize> as ops::arith::Rem>::rem",
      "<num::wrapping::Wrapping<isize> as ops::arith::Sub>::sub",
      "<num::wrapping::Wrapping<isize> as ops::bit::BitAnd>::bitand",
      "<num::wrapping::Wrapping<isize> as ops::bit::BitOr>::bitor",
      "<num::wrapping::Wrapping<isize> as ops::bit::BitXor>::bitxor",
      "<num::wrapping::Wrapping<isize> as ops::bit::Not>::not",
      "<num::wrapping::Wrapping<isize> as ops::bit::Shl<usize>>::shl",
      "<num::wrapping::Wrapping<isize> as ops::bit::Shr<usize>>::shr",
      "<num::wrapping::Wrapping<u128> as ops::arith::Add>::add",
      "<num::wrapping::Wrapping<u128> as ops::arith::Div>::div",
      "<num::wrapping::Wrapping<u128> as ops::arith::Mul>::mul",
      "<num::wrapping::Wrapping<u128> as ops::arith::Neg>::neg",
      "<num::wrapping::Wrapping<u128> as ops::arith::Rem>::rem",
      "<num::wrapping::Wrapping<u128> as ops::arith::Sub>::sub",
      "<num::wrapping::Wrapping<u128> as ops::bit::BitAnd>::bitand",
      "<num::wrapping::Wrapping<u128> as ops::bit::BitOr>::bitor",
      "<num::wrapping::Wrapping<u128> as ops::bit::BitXor>::bitxor",
      "<num::wrapping::Wrapping<u128> as ops::bit::Not>::not",
      "<num::wrapping::Wrapping<u128> as ops::bit::Shl<usize>>::shl",
      "<num::wrapping::Wrapping<u128> as ops::bit::Shr<usize>>::shr",
      "<num::wrapping::Wrapping<u16> as ops::arith::Add>::add",
      "<num::wrapping::Wrapping<u16> as ops::arith::Div>::div",
      "<num::wrapping::Wrapping<u16> as ops::arith::Mul>::mul",
      "<num::wrapping::Wrapping<u16> as ops::arith::Neg>::neg",
      "<num::wrapping::Wrapping<u16> as ops::arith::Rem>::rem",
      "<num::wrapping::Wrapping<u16> as ops::arith::Sub>::sub",
      "<num::wrapping::Wrapping<u16> as ops::bit::BitAnd>::bitand",
      "<num::wrapping::Wrapping<u16> as ops::bit::BitOr>::bitor",
      "<num::wrapping::Wrapping<u16> as ops::bit::BitXor>::bitxor",
      "<num::wrapping::Wrapping<u16> as ops::bit::Not>::not",
      "<num::wrapping::Wrapping<u16> as ops::bit::Shl<usize>>::shl",
      "<num::wrapping::Wrapping<u16> as ops::bit::Shr<usize>>::shr",
      "<num::wrapping::Wrapping<u32> as ops::arith::Add>::add",
      "<num::wrapping::Wrapping<u32> as ops::arith::Div>::div",
      "<num::wrapping::Wrapping<u32> as ops::arith::Mul>::mul",
      "<num::wrapping::Wrapping<u32> as ops::arith::Neg>::neg",
      "<num::wrapping::Wrapping<u32> as ops::arith::Rem>::rem",
      "<num::wrapping::Wrapping<u32> as ops::arith::Sub>::sub",
      "<num::wrapping::Wrapping<u32> as ops::bit::BitAnd>::bitand",
      "<num::wrapping::Wrapping<u32> as ops::bit::BitOr>::bitor",
      "<num::wrapping::Wrapping<u32> as ops::bit::BitXor>::bitxor",
      "<num::wrapping::Wrapping<u32> as ops::bit::Not>::not",
      "<num::wrapping::Wrapping<u32> as ops::bit::Shl<usize>>::shl",
      "<num::wrapping::Wrapping<u32> as ops::bit::Shr<usize>>::shr",
      "<num::wrapping::Wrapping<u64> as ops::arith::Add>::add",
      "<num::wrapping::Wrapping<u64> as ops::arith::Div>::div",
      "<num::wrapping::Wrapping<u64> as ops::arith::Mul>::mul",
      "<num::wrapping::Wrapping<u64> as ops::arith::Neg>::neg",
      "<num::wrapping::Wrapping<u64> as ops::arith::Rem>::rem",
      "<num::wrapping::Wrapping<u64> as ops::arith::Sub>::sub",
      "<num::wrapping::Wrapping<u64> as ops::bit::BitAnd>::bitand",
      "<num::wrapping::Wrapping<u64> as ops::bit::BitOr>::bitor",
      "<num::wrapping::Wrapping<u64> as ops::bit::BitXor>::bitxor",
      "<num::wrapping::Wrapping<u64> as ops::bit::Not>::not",
      "<num::wrapping::Wrapping<u64> as ops::bit::Shl<usize>>::shl",
      "<num::wrapping::Wrapping<u64> as ops::bit::Shr<usize>>::shr",
      "<num::wrapping::Wrapping<u8> as ops::arith::Add>::add",
      "<num::wrapping::Wrapping<u8> as ops::arith::Div>::div",
      "<num::wrapping::Wrapping<u8> as ops::arith::Mul>::mul",
      "<num::wrapping::Wrapping<u8> as ops::arith::Neg>::neg",
      "<num::wrapping::Wrapping<u8> as ops::arith::Rem>::rem",
      "<num::wrapping::Wrapping<u8> as ops::arith::Sub>::sub",
      "<num::wrapping::Wrapping<u8> as ops::bit::BitAnd>::bitand",
      "<num::wrapping::Wrapping<u8> as ops::bit::BitOr>::bitor",
      "<num::wrapping::Wrapping<u8> as ops::bit::BitXor>::bitxor",
      "<num::wrapping::Wrapping<u8> as ops::bit::Not>::not",
      "<num::wrapping::Wrapping<u8> as ops::bit::Shl<usize>>::shl",
      "<num::wrapping::Wrapping<u8> as ops::bit::Shr<usize>>::shr",
      "<num::wrapping::Wrapping<usize> as ops::arith::Add>::add",
      "<num::wrapping::Wrapping<usize> as ops::arith::Div>::div",
      "<num::wrapping::Wrapping<usize> as ops::arith::Mul>::mul",
      "<num::wrapping::Wrapping<usize> as ops::arith::Neg>::neg",
      "<num::wrapping::Wrapping<usize> as ops::arith::Rem>::rem",
      "<num::wrapping::Wrapping<usize> as ops::arith::Sub>::sub",
      "<num::wrapping::Wrapping<usize> as ops::bit::BitAnd>::bitand",
      "<num::wrapping::Wrapping<usize> as ops::bit::BitOr>::bitor",
      "<num::wrapping::Wrapping<usize> as ops::bit::BitXor>::bitxor",
      "<num::wrapping::Wrapping<usize> as ops::bit::Not>::not",
      "<num::wrapping::Wrapping<usize> as ops::bit::Shl<usize>>::shl",
      "<num::wrapping::Wrapping<usize> as ops::bit::Shr<usize>>::shr",
      "num::wrapping::Wrapping::<i128>::abs",
      "num::wrapping::Wrapping::<i128>::count_ones",
      "num::wrapping::Wrapping::<i128>::count_zeros",
      "num::wrapping::Wrapping::<i128>::from_be",
      "num::wrapping::Wrapping::<i128>::from_le",
      "num::wrapping::Wrapping::<i128>::is_negative",
      "num::wrapping::Wrapping::<i128>::is_positive",
      "num::wrapping::Wrapping::<i128>::leading_zeros",
      "num::wrapping::Wrapping::<i128>::pow",
      "num::wrapping::Wrapping::<i128>::reverse_bits",
      "num::wrapping::Wrapping::<i128>::rotate_left",
      "num::wrapping::Wrapping::<i128>::rotate_right",
      "num::wrapping::Wrapping::<i128>::signum",
      "num::wrapping::Wrapping::<i128>::swap_bytes",
      "num::wrapping::Wrapping::<i128>::to_be",
      "num::wrapping::Wrapping::<i128>::to_le",
      "num::wrapping::Wrapping::<i128>::trailing_zeros",
      "num::wrapping::Wrapping::<i16>::abs",
      "num::wrapping::Wrapping::<i16>::count_ones",
      "num::wrapping::Wrapping::<i16>::count_zeros",
      "num::wrapping::Wrapping::<i16>::from_be",
      "num::wrapping::Wrapping::<i16>::from_le",
      "num::wrapping::Wrapping::<i16>::is_negative",
      "num::wrapping::Wrapping::<i16>::is_positive",
      "num::wrapping::Wrapping::<i16>::leading_zeros",
      "num::wrapping::Wrapping::<i16>::pow",
      "num::wrapping::Wrapping::<i16>::reverse_bits",
      "num::wrapping::Wrapping::<i16>::rotate_left",
      "num::wrapping::Wrapping::<i16>::rotate_right",
      "num::wrapping::Wrapping::<i16>::signum",
      "num::wrapping::Wrapping::<i16>::swap_bytes",
      "num::wrapping::Wrapping::<i16>::to_be",
      "num::wrapping::Wrapping::<i16>::to_le",
      "num::wrapping::Wrapping::<i16>::trailing_zeros",
      "num::wrapping::Wrapping::<i32>::abs",
      "num::wrapping::Wrapping::<i32>::count_ones",
      "num::wrapping::Wrapping::<i32>::count_zeros",
      "num::wrapping::Wrapping::<i32>::from_be",
      "num::wrapping::Wrapping::<i32>::from_le",
      "num::wrapping::Wrapping::<i32>::is_negative",
      "num::wrapping::Wrapping::<i32>::is_positive",
      "num::wrapping::Wrapping::<i32>::leading_zeros",
      "num::wrapping::Wrapping::<i32>::pow",
      "num::wrapping::Wrapping::<i32>::reverse_bits",
      "num::wrapping::Wrapping::<i32>::rotate_left",
      "num::wrapping::Wrapping::<i32>::rotate_right",
      "num::wrapping::Wrapping::<i32>::signum",
      "num::wrapping::Wrapping::<i32>::swap_bytes",
      "num::wrapping::Wrapping::<i32>::to_be",
      "num::wrapping::Wrapping::<i32>::to_le",
      "num::wrapping::Wrapping::<i32>::trailing_zeros",
      "num::wrapping::Wrapping::<i64>::abs",
      "num::wrapping::Wrapping::<i64>::count_ones",
      "num::wrapping::Wrapping::<i64>::count_zeros",
      "num::wrapping::Wrapping::<i64>::from_be",
      "num::wrapping::Wrapping::<i64>::from_le",
      "num::wrapping::Wrapping::<i64>::is_negative",
      "num::wrapping::Wrapping::<i64>::is_positive",
      "num::wrapping::Wrapping::<i64>::leading_zeros",
      "num::wrapping::Wrapping::<i64>::pow",
      "num::wrapping::Wrapping::<i64>::reverse_bits",
      "num::wrapping::Wrapping::<i64>::rotate_left",
      "num::wrapping::Wrapping::<i64>::rotate_right",
      "num::wrapping::Wrapping::<i64>::signum",
      "num::wrapping::Wrapping::<i64>::swap_bytes",
      "num::wrapping::Wrapping::<i64>::to_be",
      "num::wrapping::Wrapping::<i64>::to_le",
      "num::wrapping::Wrapping::<i64>::trailing_zeros",
      "num::wrapping::Wrapping::<i8>::abs",
      "num::wrapping::Wrapping::<i8>::count_ones",
      "num::wrapping::Wrapping::<i8>::count_zeros",
      "num::wrapping::Wrapping::<i8>::from_be",
      "num::wrapping::Wrapping::<i8>::from_le",
      "num::wrapping::Wrapping::<i8>::is_negative",
      "num::wrapping::Wrapping::<i8>::is_positive",
      "num::wrapping::Wrapping::<i8>::leading_zeros",
      "num::wrapping::Wrapping::<i8>::pow",
      "num::wrapping::Wrapping::<i8>::reverse_bits",
      "num::wrapping::Wrapping::<i8>::rotate_left",
      "num::wrapping::Wrapping::<i8>::rotate_right",
      "num::wrapping::Wrapping::<i8>::signum",
      "num::wrapping::Wrapping::<i8>::swap_bytes",
      "num::wrapping::Wrapping::<i8>::to_be",
      "num::wrapping::Wrapping::<i8>::to_le",
      "num::wrapping::Wrapping::<i8>::trailing_zeros",
      "num::wrapping::Wrapping::<isize>::abs",
      "num::wrapping::Wrapping::<isize>::count_ones",
      "num::wrapping::Wrapping::<isize>::count_zeros",
      "num::wrapping::Wrapping::<isize>::from_be",
      "num::wrapping::Wrapping::<isize>::from_le",
      "num::wrapping::Wrapping::<isize>::is_negative",
      "num::wrapping::Wrapping::<isize>::is_positive",
      "num::wrapping::Wrapping::<isize>::leading_zeros",
      "num::wrapping::Wrapping::<isize>::pow",
      "num::wrapping::Wrapping::<isize>::reverse_bits",
      "num::wrapping::Wrapping::<isize>::rotate_left",
      "num::wrapping::Wrapping::<isize>::rotate_right",
      "num::wrapping::Wrapping::<isize>::signum",
      "num::wrapping::Wrapping::<isize>::swap_bytes",
      "num::wrapping::Wrapping::<isize>::to_be",
      "num::wrapping::Wrapping::<isize>::to_le",
      "num::wrapping::Wrapping::<isize>::trailing_zeros",
      "num::wrapping::Wrapping::<u128>::count_ones",
      "num::wrapping::Wrapping::<u128>::count_zeros",
      "num::wrapping::Wrapping::<u128>::from_be",
      "num::wrapping::Wrapping::<u128>::from_le",
      "num::wrapping::Wrapping::<u128>::is_power_of_two",
      "num::wrapping::Wrapping::<u128>::leading_zeros",
      "num::wrapping::Wrapping::<u128>::next_power_of_two",
      "num::wrapping::Wrapping::<u128>::pow",
      "num::wrapping::Wrapping::<u128>::reverse_bits",
      "num::wrapping::Wrapping::<u128>::rotate_left",
      "num::wrapping::Wrapping::<u128>::rotate_right",
      "num::wrapping::Wrapping::<u128>::swap_bytes",
      "num::wrapping::Wrapping::<u128>::to_be",
      "num::wrapping::Wrapping::<u128>::to_le",
      "num::wrapping::Wrapping::<u128>::trailing_zeros",
      "num::wrapping::Wrapping::<u16>::count_ones",
      "num::wrapping::Wrapping::<u16>::count_zeros",
      "num::wrapping::Wrapping::<u16>::from_be",
      "num::wrapping::Wrapping::<u16>::from_le",
      "num::wrapping::Wrapping::<u16>::is_power_of_two",
      "num::wrapping::Wrapping::<u16>::leading_zeros",
      "num::wrapping::Wrapping::<u16>::next_power_of_two",
      "num::wrapping::Wrapping::<u16>::pow",
      "num::wrapping::Wrapping::<u16>::reverse_bits",
      "num::wrapping::Wrapping::<u16>::rotate_left",
      "num::wrapping::Wrapping::<u16>::rotate_right",
      "num::wrapping::Wrapping::<u16>::swap_bytes",
      "num::wrapping::Wrapping::<u16>::to_be",
      "num::wrapping::Wrapping::<u16>::to_le",
      "num::wrapping::Wrapping::<u16>::trailing_zeros",
      "num::wrapping::Wrapping::<u32>::count_ones",
      "num::wrapping::Wrapping::<u32>::count_zeros",
      "num::wrapping::Wrapping::<u32>::from_be",
      "num::wrapping::Wrapping::<u32>::from_le",
      "num::wrapping::Wrapping::<u32>::is_power_of_two",
      "num::wrapping::Wrapping::<u32>::leading_zeros",
      "num::wrapping::Wrapping::<u32>::next_power_of_two",
      "num::wrapping::Wrapping::<u32>::pow",
      "num::wrapping::Wrapping::<u32>::reverse_bits",
      "num::wrapping::Wrapping::<u32>::rotate_left",
      "num::wrapping::Wrapping::<u32>::rotate_right",
      "num::wrapping::Wrapping::<u32>::swap_bytes",
      "num::wrapping::Wrapping::<u32>::to_be",
      "num::wrapping::Wrapping::<u32>::to_le",
      "num::wrapping::Wrapping::<u32>::trailing_zeros",
      "num::wrapping::Wrapping::<u64>::count_ones",
      "num::wrapping::Wrapping::<u64>::count_zeros",
      "num::wrapping::Wrapping::<u64>::from_be",
      "num::wrapping::Wrapping::<u64>::from_le",
      "num::wrapping::Wrapping::<u64>::is_power_of_two",
      "num::wrapping::Wrapping::<u64>::leading_zeros",
      "num::wrapping::Wrapping::<u64>::next_power_of_two",
      "num::wrapping::Wrapping::<u64>::pow",
      "num::wrapping::Wrapping::<u64>::reverse_bits",
      "num::wrapping::Wrapping::<u64>::rotate_left",
      "num::wrapping::Wrapping::<u64>::rotate_right",
      "num::wrapping::Wrapping::<u64>::swap_bytes",
      "num::wrapping::Wrapping::<u64>::to_be",
      "num::wrapping::Wrapping::<u64>::to_le",
      "num::wrapping::Wrapping::<u64>::trailing_zeros",
      "num::wrapping::Wrapping::<u8>::count_ones",
      "num::wrapping::Wrapping::<u8>::count_zeros",
      "num::wrapping::Wrapping::<u8>::from_be",
      "num::wrapping::Wrapping::<u8>::from_le",
      "num::wrapping::Wrapping::<u8>::is_power_of_two",
      "num::wrapping::Wrapping::<u8>::leading_zeros",
      "num::wrapping::Wrapping::<u8>::next_power_of_two",
      "num::wrapping::Wrapping::<u8>::pow",
      "num::wrapping::Wrapping::<u8>::reverse_bits",
      "num::wrapping::Wrapping::<u8>::rotate_left",
      "num::wrapping::Wrapping::<u8>::rotate_right",
      "num::wrapping::Wrapping::<u8>::swap_bytes",
      "num::wrapping::Wrapping::<u8>::to_be",
      "num::wrapping::Wrapping::<u8>::to_le",
      "num::wrapping::Wrapping::<u8>::trailing_zeros",
      "num::wrapping::Wrapping::<usize>::count_ones",
      "num::wrapping::Wrapping::<usize>::count_zeros",
      "num::wrapping::Wrapping::<usize>::from_be",
      "num::wrapping::Wrapping::<usize>::from_le",
      "num::wrapping::Wrapping::<usize>::is_power_of_two",
      "num::wrapping::Wrapping::<usize>::leading_zeros",
      "num::wrapping::Wrapping::<usize>::next_power_of_two",
      "num::wrapping::Wrapping::<usize>::pow",
      "num::wrapping::Wrapping::<usize>::reverse_bits",
      "num::wrapping::Wrapping::<usize>::rotate_left",
      "num::wrapping::Wrapping::<usize>::rotate_right",
      "num::wrapping::Wrapping::<usize>::swap_bytes",
      "num::wrapping::Wrapping::<usize>::to_be",
      "num::wrapping::Wrapping::<usize>::to_le",
      "num::wrapping::Wrapping::<usize>::trailing_zeros"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ops/arith.rs": [
      "<f128 as ops::arith::Add>::add",
      "<f128 as ops::arith::Div>::div",
      "<f128 as ops::arith::Mul>::mul",
      "<f128 as ops::arith::Neg>::neg",
      "<f128 as ops::arith::Rem>::rem",
      "<f128 as ops::arith::Sub>::sub",
      "<f16 as ops::arith::Add>::add",
      "<f16 as ops::arith::Div>::div",
      "<f16 as ops::arith::Mul>::mul",
      "<f16 as ops::arith::Neg>::neg",
      "<f16 as ops::arith::Rem>::rem",
      "<f16 as ops::arith::Sub>::sub",
      "<f32 as ops::arith::Add>::add",
      "<f32 as ops::arith::Div>::div",
      "<f32 as ops::arith::Mul>::mul",
      "<f32 as ops::arith::Neg>::neg",
      "<f32 as ops::arith::Rem>::rem",
      "<f32 as ops::arith::Sub>::sub",
      "<f64 as ops::arith::Add>::add",
      "<f64 as ops::arith::Div>::div",
      "<f64 as ops::arith::Mul>::mul",
      "<f64 as ops::arith::Neg>::neg",
      "<f64 as ops::arith::Rem>::rem",
      "<f64 as ops::arith::Sub>::sub",
      "<i128 as ops::arith::Add>::add",
      "<i128 as ops::arith::Div>::div",
      "<i128 as ops::arith::Mul>::mul",
      "<i128 as ops::arith::Neg>::neg",
      "<i128 as ops::arith::Rem>::rem",
      "<i128 as ops::arith::Sub>::sub",
      "<i16 as ops::arith::Add>::add",
      "<i16 as ops::arith::Div>::div",
      "<i16 as ops::arith::Mul>::mul",
      "<i16 as ops::arith::Neg>::neg",
      "<i16 as ops::arith::Rem>::rem",
      "<i16 as ops::arith::Sub>::sub",
      "<i32 as ops::arith::Add>::add",
      "<i32 as ops::arith::Div>::div",
      "<i32 as ops::arith::Mul>::mul",
      "<i32 as ops::arith::Neg>::neg",
      "<i32 as ops::arith::Rem>::rem",
      "<i32 as ops::arith::Sub>::sub",
      "<i64 as ops::arith::Add>::add",
      "<i64 as ops::arith::Div>::div",
      "<i64 as ops::arith::Mul>::mul",
      "<i64 as ops::arith::Neg>::neg",
      "<i64 as ops::arith::Rem>::rem",
      "<i64 as ops::arith::Sub>::sub",
      "<i8 as ops::arith::Add>::add",
      "<i8 as ops::arith::Div>::div",
      "<i8 as ops::arith::Mul>::mul",
      "<i8 as ops::arith::Neg>::neg",
      "<i8 as ops::arith::Rem>::rem",
      "<i8 as ops::arith::Sub>::sub",
      "<isize as ops::arith::Add>::add",
      "<isize as ops::arith::Div>::div",
      "<isize as ops::arith::Mul>::mul",
      "<isize as ops::arith::Neg>::neg",
      "<isize as ops::arith::Rem>::rem",
      "<isize as ops::arith::Sub>::sub",
      "<u128 as ops::arith::Add>::add",
      "<u128 as ops::arith::Div>::div",
      "<u128 as ops::arith::Mul>::mul",
      "<u128 as ops::arith::Rem>::rem",
      "<u128 as ops::arith::Sub>::sub",
      "<u16 as ops::arith::Add>::add",
      "<u16 as ops::arith::Div>::div",
      "<u16 as ops::arith::Mul>::mul",
      "<u16 as ops::arith::Rem>::rem",
      "<u16 as ops::arith::Sub>::sub",
      "<u32 as ops::arith::Add>::add",
      "<u32 as ops::arith::Div>::div",
      "<u32 as ops::arith::Mul>::mul",
      "<u32 as ops::arith::Rem>::rem",
      "<u32 as ops::arith::Sub>::sub",
      "<u64 as ops::arith::Add>::add",
      "<u64 as ops::arith::Div>::div",
      "<u64 as ops::arith::Mul>::mul",
      "<u64 as ops::arith::Rem>::rem",
      "<u64 as ops::arith::Sub>::sub",
      "<u8 as ops::arith::Add>::add",
      "<u8 as ops::arith::Div>::div",
      "<u8 as ops::arith::Mul>::mul",
      "<u8 as ops::arith::Rem>::rem",
      "<u8 as ops::arith::Sub>::sub",
      "<usize as ops::arith::Add>::add",
      "<usize as ops::arith::Div>::div",
      "<usize as ops::arith::Mul>::mul",
      "<usize as ops::arith::Rem>::rem",
      "<usize as ops::arith::Sub>::sub"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ops/bit.rs": [
      "<bool as ops::bit::BitAnd>::bitand",
      "<bool as ops::bit::BitOr>::bitor",
      "<bool as ops::bit::BitXor>::bitxor",
      "<bool as ops::bit::Not>::not",
      "<i128 as ops::bit::BitAnd>::bitand",
      "<i128 as ops::bit::BitOr>::bitor",
      "<i128 as ops::bit::BitXor>::bitxor",
      "<i128 as ops::bit::Not>::not",
      "<i128 as ops::bit::Shl<i16>>::shl",
      "<i128 as ops::bit::Shl<i32>>::shl",
      "<i128 as ops::bit::Shl<i64>>::shl",
      "<i128 as ops::bit::Shl<i8>>::shl",
      "<i128 as ops::bit::Shl<isize>>::shl",
      "<i128 as ops::bit::Shl<u128>>::shl",
      "<i128 as ops::bit::Shl<u16>>::shl",
      "<i128 as ops::bit::Shl<u32>>::shl",
      "<i128 as ops::bit::Shl<u64>>::shl",
      "<i128 as ops::bit::Shl<u8>>::shl",
      "<i128 as ops::bit::Shl<usize>>::shl",
      "<i128 as ops::bit::Shl>::shl",
      "<i128 as ops::bit::Shr<i16>>::shr",
      "<i128 as ops::bit::Shr<i32>>::shr",
      "<i128 as ops::bit::Shr<i64>>::shr",
      "<i128 as ops::bit::Shr<i8>>::shr",
      "<i128 as ops::bit::Shr<isize>>::shr",
      "<i128 as ops::bit::Shr<u128>>::shr",
      "<i128 as ops::bit::Shr<u16>>::shr",
      "<i128 as ops::bit::Shr<u32>>::shr",
      "<i128 as ops::bit::Shr<u64>>::shr",
      "<i128 as ops::bit::Shr<u8>>::shr",
      "<i128 as ops::bit::Shr<usize>>::shr",
      "<i128 as ops::bit::Shr>::shr",
      "<i16 as ops::bit::BitAnd>::bitand",
      "<i16 as ops::bit::BitOr>::bitor",
      "<i16 as ops::bit::BitXor>::bitxor",
      "<i16 as ops::bit::Not>::not",
      "<i16 as ops::bit::Shl<i128>>::shl",
      "<i16 as ops::bit::Shl<i32>>::shl",
      "<i16 as ops::bit::Shl<i64>>::shl",
      "<i16 as ops::bit::Shl<i8>>::shl",
      "<i16 as ops::bit::Shl<isize>>::shl",
      "<i16 as ops::bit::Shl<u128>>::shl",
      "<i16 as ops::bit::Shl<u16>>::shl",
      "<i16 as ops::bit::Shl<u32>>::shl",
      "<i16 as ops::bit::Shl<u64>>::shl",
      "<i16 as ops::bit::Shl<u8>>::shl",
      "<i16 as ops::bit::Shl<usize>>::shl",
      "<i16 as ops::bit::Shl>::shl",
      "<i16 as ops::bit::Shr<i128>>::shr",
      "<i16 as ops::bit::Shr<i32>>::shr",
      "<i16 as ops::bit::Shr<i64>>::shr",
      "<i16 as ops::bit::Shr<i8>>::shr",
      "<i16 as ops::bit::Shr<isize>>::shr",
      "<i16 as ops::bit::Shr<u128>>::shr",
      "<i16 as ops::bit::Shr<u16>>::shr",
      "<i16 as ops::bit::Shr<u32>>::shr",
      "<i16 as ops::bit::Shr<u64>>::shr",
      "<i16 as ops::bit::Shr<u8>>::shr",
      "<i16 as ops::bit::Shr<usize>>::shr",
      "<i16 as ops::bit::Shr>::shr",
      "<i32 as ops::bit::BitAnd>::bitand",
      "<i32 as ops::bit::BitOr>::bitor",
      "<i32 as ops::bit::BitXor>::bitxor",
      "<i32 as ops::bit::Not>::not",
      "<i32 as ops::bit::Shl<i128>>::shl",
      "<i32 as ops::bit::Shl<i16>>::shl",
      "<i32 as ops::bit::Shl<i64>>::shl",
      "<i32 as ops::bit::Shl<i8>>::shl",
      "<i32 as ops::bit::Shl<isize>>::shl",
      "<i32 as ops::bit::Shl<u128>>::shl",
      "<i32 as ops::bit::Shl<u16>>::shl",
      "<i32 as ops::bit::Shl<u32>>::shl",
      "<i32 as ops::bit::Shl<u64>>::shl",
      "<i32 as ops::bit::Shl<u8>>::shl",
      "<i32 as ops::bit::Shl<usize>>::shl",
      "<i32 as ops::bit::Shl>::shl",
      "<i32 as ops::bit::Shr<i128>>::shr",
      "<i32 as ops::bit::Shr<i16>>::shr",
      "<i32 as ops::bit::Shr<i64>>::shr",
      "<i32 as ops::bit::Shr<i8>>::shr",
      "<i32 as ops::bit::Shr<isize>>::shr",
      "<i32 as ops::bit::Shr<u128>>::shr",
      "<i32 as ops::bit::Shr<u16>>::shr",
      "<i32 as ops::bit::Shr<u32>>::shr",
      "<i32 as ops::bit::Shr<u64>>::shr",
      "<i32 as ops::bit::Shr<u8>>::shr",
      "<i32 as ops::bit::Shr<usize>>::shr",
      "<i32 as ops::bit::Shr>::shr",
      "<i64 as ops::bit::BitAnd>::bitand",
      "<i64 as ops::bit::BitOr>::bitor",
      "<i64 as ops::bit::BitXor>::bitxor",
      "<i64 as ops::bit::Not>::not",
      "<i64 as ops::bit::Shl<i128>>::shl",
      "<i64 as ops::bit::Shl<i16>>::shl",
      "<i64 as ops::bit::Shl<i32>>::shl",
      "<i64 as ops::bit::Shl<i8>>::shl",
      "<i64 as ops::bit::Shl<isize>>::shl",
      "<i64 as ops::bit::Shl<u128>>::shl",
      "<i64 as ops::bit::Shl<u16>>::shl",
      "<i64 as ops::bit::Shl<u32>>::shl",
      "<i64 as ops::bit::Shl<u64>>::shl",
      "<i64 as ops::bit::Shl<u8>>::shl",
      "<i64 as ops::bit::Shl<usize>>::shl",
      "<i64 as ops::bit::Shl>::shl",
      "<i64 as ops::bit::Shr<i128>>::shr",
      "<i64 as ops::bit::Shr<i16>>::shr",
      "<i64 as ops::bit::Shr<i32>>::shr",
      "<i64 as ops::bit::Shr<i8>>::shr",
      "<i64 as ops::bit::Shr<isize>>::shr",
      "<i64 as ops::bit::Shr<u128>>::shr",
      "<i64 as ops::bit::Shr<u16>>::shr",
      "<i64 as ops::bit::Shr<u32>>::shr",
      "<i64 as ops::bit::Shr<u64>>::shr",
      "<i64 as ops::bit::Shr<u8>>::shr",
      "<i64 as ops::bit::Shr<usize>>::shr",
      "<i64 as ops::bit::Shr>::shr",
      "<i8 as ops::bit::BitAnd>::bitand",
      "<i8 as ops::bit::BitOr>::bitor",
      "<i8 as ops::bit::BitXor>::bitxor",
      "<i8 as ops::bit::Not>::not",
      "<i8 as ops::bit::Shl<i128>>::shl",
      "<i8 as ops::bit::Shl<i16>>::shl",
      "<i8 as ops::bit::Shl<i32>>::shl",
      "<i8 as ops::bit::Shl<i64>>::shl",
      "<i8 as ops::bit::Shl<isize>>::shl",
      "<i8 as ops::bit::Shl<u128>>::shl",
      "<i8 as ops::bit::Shl<u16>>::shl",
      "<i8 as ops::bit::Shl<u32>>::shl",
      "<i8 as ops::bit::Shl<u64>>::shl",
      "<i8 as ops::bit::Shl<u8>>::shl",
      "<i8 as ops::bit::Shl<usize>>::shl",
      "<i8 as ops::bit::Shl>::shl",
      "<i8 as ops::bit::Shr<i128>>::shr",
      "<i8 as ops::bit::Shr<i16>>::shr",
      "<i8 as ops::bit::Shr<i32>>::shr",
      "<i8 as ops::bit::Shr<i64>>::shr",
      "<i8 as ops::bit::Shr<isize>>::shr",
      "<i8 as ops::bit::Shr<u128>>::shr",
      "<i8 as ops::bit::Shr<u16>>::shr",
      "<i8 as ops::bit::Shr<u32>>::shr",
      "<i8 as ops::bit::Shr<u64>>::shr",
      "<i8 as ops::bit::Shr<u8>>::shr",
      "<i8 as ops::bit::Shr<usize>>::shr",
      "<i8 as ops::bit::Shr>::shr",
      "<isize as ops::bit::BitAnd>::bitand",
      "<isize as ops::bit::BitOr>::bitor",
      "<isize as ops::bit::BitXor>::bitxor",
      "<isize as ops::bit::Not>::not",
      "<isize as ops::bit::Shl<i128>>::shl",
      "<isize as ops::bit::Shl<i16>>::shl",
      "<isize as ops::bit::Shl<i32>>::shl",
      "<isize as ops::bit::Shl<i64>>::shl",
      "<isize as ops::bit::Shl<i8>>::shl",
      "<isize as ops::bit::Shl<u128>>::shl",
      "<isize as ops::bit::Shl<u16>>::shl",
      "<isize as ops::bit::Shl<u32>>::shl",
      "<isize as ops::bit::Shl<u64>>::shl",
      "<isize as ops::bit::Shl<u8>>::shl",
      "<isize as ops::bit::Shl<usize>>::shl",
      "<isize as ops::bit::Shl>::shl",
      "<isize as ops::bit::Shr<i128>>::shr",
      "<isize as ops::bit::Shr<i16>>::shr",
      "<isize as ops::bit::Shr<i32>>::shr",
      "<isize as ops::bit::Shr<i64>>::shr",
      "<isize as ops::bit::Shr<i8>>::shr",
      "<isize as ops::bit::Shr<u128>>::shr",
      "<isize as ops::bit::Shr<u16>>::shr",
      "<isize as ops::bit::Shr<u32>>::shr",
      "<isize as ops::bit::Shr<u64>>::shr",
      "<isize as ops::bit::Shr<u8>>::shr",
      "<isize as ops::bit::Shr<usize>>::shr",
      "<isize as ops::bit::Shr>::shr",
      "<u128 as ops::bit::BitAnd>::bitand",
      "<u128 as ops::bit::BitOr>::bitor",
      "<u128 as ops::bit::BitXor>::bitxor",
      "<u128 as ops::bit::Not>::not",
      "<u128 as ops::bit::Shl<i128>>::shl",
      "<u128 as ops::bit::Shl<i16>>::shl",
      "<u128 as ops::bit::Shl<i32>>::shl",
      "<u128 as ops::bit::Shl<i64>>::shl",
      "<u128 as ops::bit::Shl<i8>>::shl",
      "<u128 as ops::bit::Shl<isize>>::shl",
      "<u128 as ops::bit::Shl<u16>>::shl",
      "<u128 as ops::bit::Shl<u32>>::shl",
      "<u128 as ops::bit::Shl<u64>>::shl",
      "<u128 as ops::bit::Shl<u8>>::shl",
      "<u128 as ops::bit::Shl<usize>>::shl",
      "<u128 as ops::bit::Shl>::shl",
      "<u128 as ops::bit::Shr<i128>>::shr",
      "<u128 as ops::bit::Shr<i16>>::shr",
      "<u128 as ops::bit::Shr<i32>>::shr",
      "<u128 as ops::bit::Shr<i64>>::shr",
      "<u128 as ops::bit::Shr<i8>>::shr",
      "<u128 as ops::bit::Shr<isize>>::shr",
      "<u128 as ops::bit::Shr<u16>>::shr",
      "<u128 as ops::bit::Shr<u32>>::shr",
      "<u128 as ops::bit::Shr<u64>>::shr",
      "<u128 as ops::bit::Shr<u8>>::shr",
      "<u128 as ops::bit::Shr<usize>>::shr",
      "<u128 as ops::bit::Shr>::shr",
      "<u16 as ops::bit::BitAnd>::bitand",
      "<u16 as ops::bit::BitOr>::bitor",
      "<u16 as ops::bit::BitXor>::bitxor",
      "<u16 as ops::bit::Not>::not",
      "<u16 as ops::bit::Shl<i128>>::shl",
      "<u16 as ops::bit::Shl<i16>>::shl",
      "<u16 as ops::bit::Shl<i32>>::shl",
      "<u16 as ops::bit::Shl<i64>>::shl",
      "<u16 as ops::bit::Shl<i8>>::shl",
      "<u16 as ops::bit::Shl<isize>>::shl",
      "<u16 as ops::bit::Shl<u128>>::shl",
      "<u16 as ops::bit::Shl<u32>>::shl",
      "<u16 as ops::bit::Shl<u64>>::shl",
      "<u16 as ops::bit::Shl<u8>>::shl",
      "<u16 as ops::bit::Shl<usize>>::shl",
      "<u16 as ops::bit::Shl>::shl",
      "<u16 as ops::bit::Shr<i128>>::shr",
      "<u16 as ops::bit::Shr<i16>>::shr",
      "<u16 as ops::bit::Shr<i32>>::shr",
      "<u16 as ops::bit::Shr<i64>>::shr",
      "<u16 as ops::bit::Shr<i8>>::shr",
      "<u16 as ops::bit::Shr<isize>>::shr",
      "<u16 as ops::bit::Shr<u128>>::shr",
      "<u16 as ops::bit::Shr<u32>>::shr",
      "<u16 as ops::bit::Shr<u64>>::shr",
      "<u16 as ops::bit::Shr<u8>>::shr",
      "<u16 as ops::bit::Shr<usize>>::shr",
      "<u16 as ops::bit::Shr>::shr",
      "<u32 as ops::bit::BitAnd>::bitand",
      "<u32 as ops::bit::BitOr>::bitor",
      "<u32 as ops::bit::BitXor>::bitxor",
      "<u32 as ops::bit::Not>::not",
      "<u32 as ops::bit::Shl<i128>>::shl",
      "<u32 as ops::bit::Shl<i16>>::shl",
      "<u32 as ops::bit::Shl<i32>>::shl",
      "<u32 as ops::bit::Shl<i64>>::shl",
      "<u32 as ops::bit::Shl<i8>>::shl",
      "<u32 as ops::bit::Shl<isize>>::shl",
      "<u32 as ops::bit::Shl<u128>>::shl",
      "<u32 as ops::bit::Shl<u16>>::shl",
      "<u32 as ops::bit::Shl<u64>>::shl",
      "<u32 as ops::bit::Shl<u8>>::shl",
      "<u32 as ops::bit::Shl<usize>>::shl",
      "<u32 as ops::bit::Shl>::shl",
      "<u32 as ops::bit::Shr<i128>>::shr",
      "<u32 as ops::bit::Shr<i16>>::shr",
      "<u32 as ops::bit::Shr<i32>>::shr",
      "<u32 as ops::bit::Shr<i64>>::shr",
      "<u32 as ops::bit::Shr<i8>>::shr",
      "<u32 as ops::bit::Shr<isize>>::shr",
      "<u32 as ops::bit::Shr<u128>>::shr",
      "<u32 as ops::bit::Shr<u16>>::shr",
      "<u32 as ops::bit::Shr<u64>>::shr",
      "<u32 as ops::bit::Shr<u8>>::shr",
      "<u32 as ops::bit::Shr<usize>>::shr",
      "<u32 as ops::bit::Shr>::shr",
      "<u64 as ops::bit::BitAnd>::bitand",
      "<u64 as ops::bit::BitOr>::bitor",
      "<u64 as ops::bit::BitXor>::bitxor",
      "<u64 as ops::bit::Not>::not",
      "<u64 as ops::bit::Shl<i128>>::shl",
      "<u64 as ops::bit::Shl<i16>>::shl",
      "<u64 as ops::bit::Shl<i32>>::shl",
      "<u64 as ops::bit::Shl<i64>>::shl",
      "<u64 as ops::bit::Shl<i8>>::shl",
      "<u64 as ops::bit::Shl<isize>>::shl",
      "<u64 as ops::bit::Shl<u128>>::shl",
      "<u64 as ops::bit::Shl<u16>>::shl",
      "<u64 as ops::bit::Shl<u32>>::shl",
      "<u64 as ops::bit::Shl<u8>>::shl",
      "<u64 as ops::bit::Shl<usize>>::shl",
      "<u64 as ops::bit::Shl>::shl",
      "<u64 as ops::bit::Shr<i128>>::shr",
      "<u64 as ops::bit::Shr<i16>>::shr",
      "<u64 as ops::bit::Shr<i32>>::shr",
      "<u64 as ops::bit::Shr<i64>>::shr",
      "<u64 as ops::bit::Shr<i8>>::shr",
      "<u64 as ops::bit::Shr<isize>>::shr",
      "<u64 as ops::bit::Shr<u128>>::shr",
      "<u64 as ops::bit::Shr<u16>>::shr",
      "<u64 as ops::bit::Shr<u32>>::shr",
      "<u64 as ops::bit::Shr<u8>>::shr",
      "<u64 as ops::bit::Shr<usize>>::shr",
      "<u64 as ops::bit::Shr>::shr",
      "<u8 as ops::bit::BitAnd>::bitand",
      "<u8 as ops::bit::BitOr>::bitor",
      "<u8 as ops::bit::BitXor>::bitxor",
      "<u8 as ops::bit::Not>::not",
      "<u8 as ops::bit::Shl<i128>>::shl",
      "<u8 as ops::bit::Shl<i16>>::shl",
      "<u8 as ops::bit::Shl<i32>>::shl",
      "<u8 as ops::bit::Shl<i64>>::shl",
      "<u8 as ops::bit::Shl<i8>>::shl",
      "<u8 as ops::bit::Shl<isize>>::shl",
      "<u8 as ops::bit::Shl<u128>>::shl",
      "<u8 as ops::bit::Shl<u16>>::shl",
      "<u8 as ops::bit::Shl<u32>>::shl",
      "<u8 as ops::bit::Shl<u64>>::shl",
      "<u8 as ops::bit::Shl<usize>>::shl",
      "<u8 as ops::bit::Shl>::shl",
      "<u8 as ops::bit::Shr<i128>>::shr",
      "<u8 as ops::bit::Shr<i16>>::shr",
      "<u8 as ops::bit::Shr<i32>>::shr",
      "<u8 as ops::bit::Shr<i64>>::shr",
      "<u8 as ops::bit::Shr<i8>>::shr",
      "<u8 as ops::bit::Shr<isize>>::shr",
      "<u8 as ops::bit::Shr<u128>>::shr",
      "<u8 as ops::bit::Shr<u16>>::shr",
      "<u8 as ops::bit::Shr<u32>>::shr",
      "<u8 as ops::bit::Shr<u64>>::shr",
      "<u8 as ops::bit::Shr<usize>>::shr",
      "<u8 as ops::bit::Shr>::shr",
      "<usize as ops::bit::BitAnd>::bitand",
      "<usize as ops::bit::BitOr>::bitor",
      "<usize as ops::bit::BitXor>::bitxor",
      "<usize as ops::bit::Not>::not",
      "<usize as ops::bit::Shl<i128>>::shl",
      "<usize as ops::bit::Shl<i16>>::shl",
      "<usize as ops::bit::Shl<i32>>::shl",
      "<usize as ops::bit::Shl<i64>>::shl",
      "<usize as ops::bit::Shl<i8>>::shl",
      "<usize as ops::bit::Shl<isize>>::shl",
      "<usize as ops::bit::Shl<u128>>::shl",
      "<usize as ops::bit::Shl<u16>>::shl",
      "<usize as ops::bit::Shl<u32>>::shl",
      "<usize as ops::bit::Shl<u64>>::shl",
      "<usize as ops::bit::Shl<u8>>::shl",
      "<usize as ops::bit::Shl>::shl",
      "<usize as ops::bit::Shr<i128>>::shr",
      "<usize as ops::bit::Shr<i16>>::shr",
      "<usize as ops::bit::Shr<i32>>::shr",
      "<usize as ops::bit::Shr<i64>>::shr",
      "<usize as ops::bit::Shr<i8>>::shr",
      "<usize as ops::bit::Shr<isize>>::shr",
      "<usize as ops::bit::Shr<u128>>::shr",
      "<usize as ops::bit::Shr<u16>>::shr",
      "<usize as ops::bit::Shr<u32>>::shr",
      "<usize as ops::bit::Shr<u64>>::shr",
      "<usize as ops::bit::Shr<u8>>::shr",
      "<usize as ops::bit::Shr>::shr"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ops/index_range.rs": [
      "ops::index_range::IndexRange::new_unchecked",
      "ops::index_range::IndexRange::zero_to"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ops/range.rs": [
      "<ops::range::RangeFull as default::Default>::default",
      "ops::range::RangeInclusive::<usize>::into_slice_range"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/option.rs": [
      "option::unwrap_failed",
      "option::verify::verify_as_slice"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/panic.rs": [
      "char::methods::encode_utf16_raw::do_panic",
      "char::methods::encode_utf8_raw::do_panic",
      "f128::<impl f128>::clamp::do_panic",
      "f16::<impl f16>::clamp::do_panic",
      "f32::<impl f32>::clamp::do_panic",
      "f64::<impl f64>::clamp::do_panic",
      "intrinsics::mir::Assume::panic_cold_explicit",
      "intrinsics::mir::Call::panic_cold_explicit",
      "intrinsics::mir::CastPtrToPtr::panic_cold_explicit",
      "intrinsics::mir::CastTransmute::panic_cold_explicit",
      "intrinsics::mir::Checked::panic_cold_explicit",
      "intrinsics::mir::CopyForDeref::panic_cold_explicit",
      "intrinsics::mir::Deinit::panic_cold_explicit",
      "intrinsics::mir::Discriminant::panic_cold_explicit",
      "intrinsics::mir::Drop::panic_cold_explicit",
      "intrinsics::mir::Field::panic_cold_explicit",
      "intrinsics::mir::Goto::panic_cold_explicit",
      "intrinsics::mir::Len::panic_cold_explicit",
      "intrinsics::mir::Move::panic_cold_explicit",
      "intrinsics::mir::Offset::panic_cold_explicit",
      "intrinsics::mir::PtrMetadata::panic_cold_explicit",
      "intrinsics::mir::Retag::panic_cold_explicit",
      "intrinsics::mir::Return::panic_cold_explicit",
      "intrinsics::mir::ReturnTo::panic_cold_explicit",
      "intrinsics::mir::SetDiscriminant::panic_cold_explicit",
      "intrinsics::mir::Static::panic_cold_explicit",
      "intrinsics::mir::StaticMut::panic_cold_explicit",
      "intrinsics::mir::StorageDead::panic_cold_explicit",
      "intrinsics::mir::StorageLive::panic_cold_explicit",
      "intrinsics::mir::TailCall::panic_cold_explicit",
      "intrinsics::mir::Unreachable::panic_cold_explicit",
      "intrinsics::mir::UnwindCleanup::panic_cold_explicit",
      "intrinsics::mir::UnwindContinue::panic_cold_explicit",
      "intrinsics::mir::UnwindResume::panic_cold_explicit",
      "intrinsics::mir::UnwindTerminate::panic_cold_explicit",
      "intrinsics::mir::UnwindUnreachable::panic_cold_explicit",
      "intrinsics::mir::Variant::panic_cold_explicit",
      "intrinsics::mir::__debuginfo::panic_cold_explicit",
      "intrinsics::mir::__internal_make_place::panic_cold_explicit",
      "num::from_ascii_radix_panic::do_panic",
      "slice::<impl [T]>::copy_from_slice::len_mismatch_fail::do_panic",
      "slice::index::slice_end_index_len_fail::do_panic",
      "slice::index::slice_index_order_fail::do_panic",
      "slice::index::slice_start_index_len_fail::do_panic"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/panic/location.rs": [
      "panic::location::Location::<'_>::caller"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/panicking.rs": [
      "panicking::panic_bounds_check",
      "panicking::panic_cannot_unwind",
      "panicking::panic_const::panic_const_add_overflow",
      "panicking::panic_const::panic_const_async_fn_resumed",
      "panicking::panic_const::panic_const_async_fn_resumed_drop",
      "panicking::panic_const::panic_const_async_fn_resumed_panic",
      "panicking::panic_const::panic_const_async_gen_fn_resumed",
      "panicking::panic_const::panic_const_async_gen_fn_resumed_drop",
      "panicking::panic_const::panic_const_async_gen_fn_resumed_panic",
      "panicking::panic_const::panic_const_coroutine_resumed",
      "panicking::panic_const::panic_const_coroutine_resumed_drop",
      "panicking::panic_const::panic_const_coroutine_resumed_panic",
      "panicking::panic_const::panic_const_div_by_zero",
      "panicking::panic_const::panic_const_div_overflow",
      "panicking::panic_const::panic_const_gen_fn_none",
      "panicking::panic_const::panic_const_gen_fn_none_drop",
      "panicking::panic_const::panic_const_gen_fn_none_panic",
      "panicking::panic_const::panic_const_mul_overflow",
      "panicking::panic_const::panic_const_neg_overflow",
      "panicking::panic_const::panic_const_rem_by_zero",
      "panicking::panic_const::panic_const_rem_overflow",
      "panicking::panic_const::panic_const_shl_overflow",
      "panicking::panic_const::panic_const_shr_overflow",
      "panicking::panic_const::panic_const_sub_overflow",
      "panicking::panic_explicit",
      "panicking::panic_in_cleanup",
      "panicking::panic_misaligned_pointer_dereference",
      "panicking::panic_null_pointer_dereference"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/pat.rs": [
      "<char as pat::RangePattern>::sub_one",
      "<i128 as pat::RangePattern>::sub_one",
      "<i16 as pat::RangePattern>::sub_one",
      "<i32 as pat::RangePattern>::sub_one",
      "<i64 as pat::RangePattern>::sub_one",
      "<i8 as pat::RangePattern>::sub_one",
      "<isize as pat::RangePattern>::sub_one",
      "<u128 as pat::RangePattern>::sub_one",
      "<u16 as pat::RangePattern>::sub_one",
      "<u32 as pat::RangePattern>::sub_one",
      "<u64 as pat::RangePattern>::sub_one",
      "<u8 as pat::RangePattern>::sub_one",
      "<usize as pat::RangePattern>::sub_one"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/alignment.rs": [
      "<ptr::alignment::Alignment as convert::TryFrom<num::nonzero::NonZero<usize>>>::try_from",
      "<ptr::alignment::Alignment as convert::TryFrom<usize>>::try_from",
      "<ptr::alignment::Alignment as default::Default>::default",
      "ptr::alignment::<impl convert::From<ptr::alignment::Alignment> for num::nonzero::NonZero<usize>>::from",
      "ptr::alignment::<impl convert::From<ptr::alignment::Alignment> for usize>::from",
      "ptr::alignment::Alignment",
      "ptr::alignment::Alignment::max",
      "ptr::alignment::_alignment_can_be_structurally_matched"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/const_ptr.rs": [
      "ptr::const_ptr::verify::check_const_byte_offset_from_fixed_offset"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mut_ptr.rs": [
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_fixed_offset"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs": [
      "ptr::non_null::verify::non_null_check_is_aligned_to_no_power_two",
      "ptr::non_null::verify::non_null_check_is_empty",
      "ptr::non_null::verify::non_null_check_len"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/unique.rs": [
      "ptr::unique::verify::check_as_mut",
      "ptr::unique::verify::check_as_ref",
      "ptr::unique::verify::check_cast"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/ascii.rs": [
      "<slice::ascii::EscapeAscii<'a> as fmt::Display>::fmt::needs_escape"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/index.rs": [
      "slice::index::into_range",
      "slice::index::into_range_unchecked",
      "slice::index::into_slice_range",
      "slice::index::slice_end_index_len_fail",
      "slice::index::slice_end_index_overflow_fail",
      "slice::index::slice_index_order_fail",
      "slice::index::slice_start_index_len_fail",
      "slice::index::slice_start_index_overflow_fail"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/iter.rs": [
      "slice::iter::verify::verify_char::check_advance_back_by",
      "slice::iter::verify::verify_char::check_advance_by",
      "slice::iter::verify::verify_char::check_as_ref",
      "slice::iter::verify::verify_char::check_as_slice",
      "slice::iter::verify::verify_char::check_clone",
      "slice::iter::verify::verify_char::check_count",
      "slice::iter::verify::verify_char::check_default",
      "slice::iter::verify::verify_char::check_is_empty",
      "slice::iter::verify::verify_char::check_len",
      "slice::iter::verify::verify_char::check_new_iter",
      "slice::iter::verify::verify_char::check_next",
      "slice::iter::verify::verify_char::check_next_back",
      "slice::iter::verify::verify_char::check_nth",
      "slice::iter::verify::verify_char::check_nth_back",
      "slice::iter::verify::verify_char::check_size_hint",
      "slice::iter::verify::verify_tup::check_advance_back_by",
      "slice::iter::verify::verify_tup::check_advance_by",
      "slice::iter::verify::verify_tup::check_as_ref",
      "slice::iter::verify::verify_tup::check_as_slice",
      "slice::iter::verify::verify_tup::check_clone",
      "slice::iter::verify::verify_tup::check_count",
      "slice::iter::verify::verify_tup::check_default",
      "slice::iter::verify::verify_tup::check_is_empty",
      "slice::iter::verify::verify_tup::check_len",
      "slice::iter::verify::verify_tup::check_new_iter",
      "slice::iter::verify::verify_tup::check_next",
      "slice::iter::verify::verify_tup::check_next_back",
      "slice::iter::verify::verify_tup::check_nth",
      "slice::iter::verify::verify_tup::check_nth_back",
      "slice::iter::verify::verify_tup::check_size_hint",
      "slice::iter::verify::verify_u8::check_advance_back_by",
      "slice::iter::verify::verify_u8::check_advance_by",
      "slice::iter::verify::verify_u8::check_as_ref",
      "slice::iter::verify::verify_u8::check_as_slice",
      "slice::iter::verify::verify_u8::check_clone",
      "slice::iter::verify::verify_u8::check_count",
      "slice::iter::verify::verify_u8::check_default",
      "slice::iter::verify::verify_u8::check_is_empty",
      "slice::iter::verify::verify_u8::check_len",
      "slice::iter::verify::verify_u8::check_new_iter",
      "slice::iter::verify::verify_u8::check_next",
      "slice::iter::verify::verify_u8::check_next_back",
      "slice::iter::verify::verify_u8::check_nth",
      "slice::iter::verify::verify_u8::check_nth_back",
      "slice::iter::verify::verify_u8::check_size_hint",
      "slice::iter::verify::verify_unit::check_advance_back_by",
      "slice::iter::verify::verify_unit::check_advance_by",
      "slice::iter::verify::verify_unit::check_as_ref",
      "slice::iter::verify::verify_unit::check_as_slice",
      "slice::iter::verify::verify_unit::check_clone",
      "slice::iter::verify::verify_unit::check_count",
      "slice::iter::verify::verify_unit::check_default",
      "slice::iter::verify::verify_unit::check_is_empty",
      "slice::iter::verify::verify_unit::check_len",
      "slice::iter::verify::verify_unit::check_new_iter",
      "slice::iter::verify::verify_unit::check_next",
      "slice::iter::verify::verify_unit::check_next_back",
      "slice::iter::verify::verify_unit::check_nth",
      "slice::iter::verify::verify_unit::check_nth_back",
      "slice::iter::verify::verify_unit::check_size_hint"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/memchr.rs": [
      "slice::memchr::contains_zero_byte"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/mod.rs": [
      "slice::<impl [T]>::align_to_offsets::gcd",
      "slice::<impl [T]>::copy_from_slice::len_mismatch_fail"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/sort/shared/smallsort.rs": [
      "slice::sort::shared::smallsort::panic_on_ord_violation"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/sort/stable/drift.rs": [
      "slice::sort::stable::drift::DriftsortRun",
      "slice::sort::stable::drift::DriftsortRun::new_sorted",
      "slice::sort::stable::drift::DriftsortRun::new_unsorted",
      "slice::sort::stable::drift::merge_tree_depth",
      "slice::sort::stable::drift::merge_tree_scale_factor",
      "slice::sort::stable::drift::sqrt_approx"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/str/count.rs": [
      "str::count::contains_non_continuation_byte",
      "str::count::sum_bytes_in_usize"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/str/mod.rs": [
      "str::<impl default::Default for &mut str>::default",
      "str::<impl default::Default for &str>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/str/pattern.rs": [
      "<str::pattern::MatchOnly as str::pattern::TwoWayStrategy>::matching",
      "<str::pattern::MatchOnly as str::pattern::TwoWayStrategy>::rejecting",
      "<str::pattern::MatchOnly as str::pattern::TwoWayStrategy>::use_early_reject",
      "<str::pattern::RejectAndMatch as str::pattern::TwoWayStrategy>::matching",
      "<str::pattern::RejectAndMatch as str::pattern::TwoWayStrategy>::rejecting",
      "<str::pattern::RejectAndMatch as str::pattern::TwoWayStrategy>::use_early_reject",
      "str::pattern::SearchStep::Match",
      "str::pattern::SearchStep::Reject",
      "str::pattern::Utf8Pattern::<'_>::CharPattern",
      "str::pattern::verify::check_small_slice_eq",
      "str::pattern::verify::check_small_slice_eq_empty"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/str/traits.rs": [
      "str::traits::str_index_overflow_fail"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/str/validations.rs": [
      "str::validations::contains_nonascii",
      "str::validations::utf8_acc_cont_byte",
      "str::validations::utf8_char_width",
      "str::validations::utf8_first_byte",
      "str::validations::utf8_is_cont_byte",
      "str::validations::verify::check_run_utf8_validation"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/sync/atomic.rs": [
      "<sync::atomic::AtomicBool as convert::From<bool>>::from",
      "<sync::atomic::AtomicBool as default::Default>::default",
      "<sync::atomic::AtomicI16 as convert::From<i16>>::from",
      "<sync::atomic::AtomicI16 as default::Default>::default",
      "<sync::atomic::AtomicI32 as convert::From<i32>>::from",
      "<sync::atomic::AtomicI32 as default::Default>::default",
      "<sync::atomic::AtomicI64 as convert::From<i64>>::from",
      "<sync::atomic::AtomicI64 as default::Default>::default",
      "<sync::atomic::AtomicI8 as convert::From<i8>>::from",
      "<sync::atomic::AtomicI8 as default::Default>::default",
      "<sync::atomic::AtomicIsize as convert::From<isize>>::from",
      "<sync::atomic::AtomicIsize as default::Default>::default",
      "<sync::atomic::AtomicU16 as convert::From<u16>>::from",
      "<sync::atomic::AtomicU16 as default::Default>::default",
      "<sync::atomic::AtomicU32 as convert::From<u32>>::from",
      "<sync::atomic::AtomicU32 as default::Default>::default",
      "<sync::atomic::AtomicU64 as convert::From<u64>>::from",
      "<sync::atomic::AtomicU64 as default::Default>::default",
      "<sync::atomic::AtomicU8 as convert::From<u8>>::from",
      "<sync::atomic::AtomicU8 as default::Default>::default",
      "<sync::atomic::AtomicUsize as convert::From<usize>>::from",
      "<sync::atomic::AtomicUsize as default::Default>::default",
      "sync::atomic::AtomicBool::new",
      "sync::atomic::AtomicI16::new",
      "sync::atomic::AtomicI32::new",
      "sync::atomic::AtomicI64::new",
      "sync::atomic::AtomicI8::new",
      "sync::atomic::AtomicIsize::new",
      "sync::atomic::AtomicU16::new",
      "sync::atomic::AtomicU32::new",
      "sync::atomic::AtomicU64::new",
      "sync::atomic::AtomicU8::new",
      "sync::atomic::AtomicUsize::new",
      "sync::atomic::spin_loop_hint"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/task/wake.rs": [
      "task::wake::ExtData::<'_>::None",
      "task::wake::LocalWaker::noop",
      "task::wake::Waker::noop"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs": [
      "<time::Duration as default::Default>::default",
      "<time::Duration as ops::arith::Add>::add",
      "<time::Duration as ops::arith::Div<u32>>::div",
      "<time::Duration as ops::arith::Mul<u32>>::mul",
      "<time::Duration as ops::arith::Sub>::sub",
      "time::<impl ops::arith::Mul<time::Duration> for u32>::mul",
      "time::Duration::abs_diff",
      "time::Duration::div_duration_f32",
      "time::Duration::div_duration_f64",
      "time::Duration::div_f32",
      "time::Duration::div_f64",
      "time::Duration::from_days",
      "time::Duration::from_hours",
      "time::Duration::from_mins",
      "time::Duration::from_secs_f32",
      "time::Duration::from_secs_f64",
      "time::Duration::from_weeks",
      "time::Duration::mul_f32",
      "time::Duration::mul_f64",
      "time::Duration::saturating_add",
      "time::Duration::saturating_mul",
      "time::Duration::saturating_sub",
      "time::Duration::try_from_secs_f32",
      "time::Duration::try_from_secs_f64",
      "time::duration_verify::duration_as_nanos",
      "time::duration_verify::duration_as_nanos_panics",
      "time::duration_verify::safe_duration"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ub_checks.rs": [
      "<ops::index_range::IndexRange as slice::index::SliceIndex<[T]>>::get_unchecked::precondition_check",
      "<ops::index_range::IndexRange as slice::index::SliceIndex<[T]>>::get_unchecked_mut::precondition_check",
      "<ops::range::Range<usize> as slice::index::SliceIndex<[T]>>::get_unchecked::precondition_check",
      "<ops::range::Range<usize> as slice::index::SliceIndex<[T]>>::get_unchecked_mut::precondition_check",
      "<usize as slice::index::SliceIndex<[T]>>::get_unchecked::precondition_check",
      "<usize as slice::index::SliceIndex<[T]>>::get_unchecked_mut::precondition_check",
      "alloc::layout::Layout::from_size_align_unchecked::precondition_check",
      "alloc::layout::Layout::from_size_align_unchecked::{closure#0}::{closure#1}::{closure#3}::precondition_check",
      "alloc::layout::Layout::from_size_align_unchecked::{closure#2}::{closure#3}::precondition_check",
      "alloc::layout::Layout::from_size_align_unchecked::{closure#3}::{closure#0}::precondition_check",
      "ascii::ascii_char::AsciiChar::digit_unchecked::precondition_check",
      "char::convert::from_u32_unchecked::precondition_check",
      "char::convert::from_u32_unchecked::{closure#0}::{closure#1}::{closure#1}::precondition_check",
      "char::convert::from_u32_unchecked::{closure#2}::{closure#1}::precondition_check",
      "char::convert::from_u32_unchecked::{closure#3}::{closure#0}::precondition_check",
      "hint::assert_unchecked::precondition_check",
      "hint::unreachable_unchecked::precondition_check",
      "num::<impl i128>::unchecked_add::precondition_check",
      "num::<impl i128>::unchecked_add::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_add::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_add::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_exact_div::precondition_check",
      "num::<impl i128>::unchecked_mul::precondition_check",
      "num::<impl i128>::unchecked_mul::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_mul::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_mul::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_neg::precondition_check",
      "num::<impl i128>::unchecked_neg::{closure#0}::{closure#1}::{closure#1}::precondition_check",
      "num::<impl i128>::unchecked_neg::{closure#2}::{closure#1}::precondition_check",
      "num::<impl i128>::unchecked_neg::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_shl::precondition_check",
      "num::<impl i128>::unchecked_shl::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_shl::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_shl::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_shr::precondition_check",
      "num::<impl i128>::unchecked_shr::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_shr::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_shr::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_sub::precondition_check",
      "num::<impl i128>::unchecked_sub::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_sub::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i128>::unchecked_sub::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_add::precondition_check",
      "num::<impl i16>::unchecked_add::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_add::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_add::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_exact_div::precondition_check",
      "num::<impl i16>::unchecked_mul::precondition_check",
      "num::<impl i16>::unchecked_mul::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_mul::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_mul::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_neg::precondition_check",
      "num::<impl i16>::unchecked_neg::{closure#0}::{closure#1}::{closure#1}::precondition_check",
      "num::<impl i16>::unchecked_neg::{closure#2}::{closure#1}::precondition_check",
      "num::<impl i16>::unchecked_neg::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_shl::precondition_check",
      "num::<impl i16>::unchecked_shl::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_shl::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_shl::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_shr::precondition_check",
      "num::<impl i16>::unchecked_shr::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_shr::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_shr::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_sub::precondition_check",
      "num::<impl i16>::unchecked_sub::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_sub::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i16>::unchecked_sub::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_add::precondition_check",
      "num::<impl i32>::unchecked_add::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_add::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_add::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_exact_div::precondition_check",
      "num::<impl i32>::unchecked_mul::precondition_check",
      "num::<impl i32>::unchecked_mul::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_mul::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_mul::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_neg::precondition_check",
      "num::<impl i32>::unchecked_neg::{closure#0}::{closure#1}::{closure#1}::precondition_check",
      "num::<impl i32>::unchecked_neg::{closure#2}::{closure#1}::precondition_check",
      "num::<impl i32>::unchecked_neg::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_shl::precondition_check",
      "num::<impl i32>::unchecked_shl::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_shl::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_shl::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_shr::precondition_check",
      "num::<impl i32>::unchecked_shr::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_shr::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_shr::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_sub::precondition_check",
      "num::<impl i32>::unchecked_sub::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_sub::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i32>::unchecked_sub::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_add::precondition_check",
      "num::<impl i64>::unchecked_add::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_add::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_add::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_exact_div::precondition_check",
      "num::<impl i64>::unchecked_mul::precondition_check",
      "num::<impl i64>::unchecked_mul::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_mul::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_mul::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_neg::precondition_check",
      "num::<impl i64>::unchecked_neg::{closure#0}::{closure#1}::{closure#1}::precondition_check",
      "num::<impl i64>::unchecked_neg::{closure#2}::{closure#1}::precondition_check",
      "num::<impl i64>::unchecked_neg::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_shl::precondition_check",
      "num::<impl i64>::unchecked_shl::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_shl::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_shl::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_shr::precondition_check",
      "num::<impl i64>::unchecked_shr::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_shr::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_shr::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_sub::precondition_check",
      "num::<impl i64>::unchecked_sub::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_sub::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i64>::unchecked_sub::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_add::precondition_check",
      "num::<impl i8>::unchecked_add::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_add::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_add::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_exact_div::precondition_check",
      "num::<impl i8>::unchecked_mul::precondition_check",
      "num::<impl i8>::unchecked_mul::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_mul::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_mul::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_neg::precondition_check",
      "num::<impl i8>::unchecked_neg::{closure#0}::{closure#1}::{closure#1}::precondition_check",
      "num::<impl i8>::unchecked_neg::{closure#2}::{closure#1}::precondition_check",
      "num::<impl i8>::unchecked_neg::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_shl::precondition_check",
      "num::<impl i8>::unchecked_shl::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_shl::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_shl::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_shr::precondition_check",
      "num::<impl i8>::unchecked_shr::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_shr::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_shr::{closure#3}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_sub::precondition_check",
      "num::<impl i8>::unchecked_sub::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_sub::{closure#2}::{closure#0}::precondition_check",
      "num::<impl i8>::unchecked_sub::{closure#3}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_add::precondition_check",
      "num::<impl isize>::unchecked_add::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_add::{closure#2}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_add::{closure#3}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_exact_div::precondition_check",
      "num::<impl isize>::unchecked_mul::precondition_check",
      "num::<impl isize>::unchecked_mul::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_mul::{closure#2}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_mul::{closure#3}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_neg::precondition_check",
      "num::<impl isize>::unchecked_neg::{closure#0}::{closure#1}::{closure#1}::precondition_check",
      "num::<impl isize>::unchecked_neg::{closure#2}::{closure#1}::precondition_check",
      "num::<impl isize>::unchecked_neg::{closure#3}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_shl::precondition_check",
      "num::<impl isize>::unchecked_shl::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_shl::{closure#2}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_shl::{closure#3}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_shr::precondition_check",
      "num::<impl isize>::unchecked_shr::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_shr::{closure#2}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_shr::{closure#3}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_sub::precondition_check",
      "num::<impl isize>::unchecked_sub::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_sub::{closure#2}::{closure#0}::precondition_check",
      "num::<impl isize>::unchecked_sub::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_add::precondition_check",
      "num::<impl u128>::unchecked_add::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_add::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_add::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_disjoint_bitor::precondition_check",
      "num::<impl u128>::unchecked_disjoint_bitor::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_disjoint_bitor::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_disjoint_bitor::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_exact_div::precondition_check",
      "num::<impl u128>::unchecked_mul::precondition_check",
      "num::<impl u128>::unchecked_mul::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_mul::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_mul::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_shl::precondition_check",
      "num::<impl u128>::unchecked_shl::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_shl::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_shl::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_shr::precondition_check",
      "num::<impl u128>::unchecked_shr::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_shr::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_shr::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_sub::precondition_check",
      "num::<impl u128>::unchecked_sub::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_sub::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u128>::unchecked_sub::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_add::precondition_check",
      "num::<impl u16>::unchecked_add::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_add::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_add::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_disjoint_bitor::precondition_check",
      "num::<impl u16>::unchecked_disjoint_bitor::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_disjoint_bitor::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_disjoint_bitor::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_exact_div::precondition_check",
      "num::<impl u16>::unchecked_mul::precondition_check",
      "num::<impl u16>::unchecked_mul::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_mul::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_mul::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_shl::precondition_check",
      "num::<impl u16>::unchecked_shl::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_shl::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_shl::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_shr::precondition_check",
      "num::<impl u16>::unchecked_shr::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_shr::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_shr::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_sub::precondition_check",
      "num::<impl u16>::unchecked_sub::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_sub::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u16>::unchecked_sub::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_add::precondition_check",
      "num::<impl u32>::unchecked_add::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_add::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_add::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_disjoint_bitor::precondition_check",
      "num::<impl u32>::unchecked_disjoint_bitor::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_disjoint_bitor::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_disjoint_bitor::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_exact_div::precondition_check",
      "num::<impl u32>::unchecked_mul::precondition_check",
      "num::<impl u32>::unchecked_mul::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_mul::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_mul::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_shl::precondition_check",
      "num::<impl u32>::unchecked_shl::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_shl::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_shl::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_shr::precondition_check",
      "num::<impl u32>::unchecked_shr::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_shr::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_shr::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_sub::precondition_check",
      "num::<impl u32>::unchecked_sub::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_sub::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u32>::unchecked_sub::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_add::precondition_check",
      "num::<impl u64>::unchecked_add::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_add::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_add::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_disjoint_bitor::precondition_check",
      "num::<impl u64>::unchecked_disjoint_bitor::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_disjoint_bitor::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_disjoint_bitor::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_exact_div::precondition_check",
      "num::<impl u64>::unchecked_mul::precondition_check",
      "num::<impl u64>::unchecked_mul::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_mul::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_mul::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_shl::precondition_check",
      "num::<impl u64>::unchecked_shl::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_shl::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_shl::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_shr::precondition_check",
      "num::<impl u64>::unchecked_shr::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_shr::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_shr::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_sub::precondition_check",
      "num::<impl u64>::unchecked_sub::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_sub::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u64>::unchecked_sub::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_add::precondition_check",
      "num::<impl u8>::unchecked_add::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_add::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_add::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_disjoint_bitor::precondition_check",
      "num::<impl u8>::unchecked_disjoint_bitor::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_disjoint_bitor::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_disjoint_bitor::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_exact_div::precondition_check",
      "num::<impl u8>::unchecked_mul::precondition_check",
      "num::<impl u8>::unchecked_mul::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_mul::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_mul::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_shl::precondition_check",
      "num::<impl u8>::unchecked_shl::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_shl::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_shl::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_shr::precondition_check",
      "num::<impl u8>::unchecked_shr::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_shr::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_shr::{closure#3}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_sub::precondition_check",
      "num::<impl u8>::unchecked_sub::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_sub::{closure#2}::{closure#0}::precondition_check",
      "num::<impl u8>::unchecked_sub::{closure#3}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_add::precondition_check",
      "num::<impl usize>::unchecked_add::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_add::{closure#2}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_add::{closure#3}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_disjoint_bitor::precondition_check",
      "num::<impl usize>::unchecked_disjoint_bitor::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_disjoint_bitor::{closure#2}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_disjoint_bitor::{closure#3}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_exact_div::precondition_check",
      "num::<impl usize>::unchecked_mul::precondition_check",
      "num::<impl usize>::unchecked_mul::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_mul::{closure#2}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_mul::{closure#3}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_shl::precondition_check",
      "num::<impl usize>::unchecked_shl::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_shl::{closure#2}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_shl::{closure#3}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_shr::precondition_check",
      "num::<impl usize>::unchecked_shr::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_shr::{closure#2}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_shr::{closure#3}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_sub::precondition_check",
      "num::<impl usize>::unchecked_sub::{closure#0}::{closure#1}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_sub::{closure#2}::{closure#0}::precondition_check",
      "num::<impl usize>::unchecked_sub::{closure#3}::{closure#0}::precondition_check",
      "num::nonzero::NonZero::<T>::from_mut_unchecked::precondition_check",
      "num::nonzero::NonZero::<T>::new_unchecked::precondition_check",
      "num::nonzero::NonZero::<T>::new_unchecked::{closure#0}::{closure#1}::{closure#2}::precondition_check",
      "num::nonzero::NonZero::<T>::new_unchecked::{closure#2}::{closure#2}::precondition_check",
      "num::nonzero::NonZero::<T>::new_unchecked::{closure#3}::{closure#1}::precondition_check",
      "ops::index_range::IndexRange::new_unchecked::precondition_check",
      "ptr::alignment::Alignment::new_unchecked::precondition_check",
      "ptr::alignment::Alignment::new_unchecked::{closure#0}::{closure#1}::{closure#2}::precondition_check",
      "ptr::alignment::Alignment::new_unchecked::{closure#2}::{closure#2}::precondition_check",
      "ptr::alignment::Alignment::new_unchecked::{closure#3}::{closure#0}::precondition_check",
      "slice::<impl [T]>::as_chunks_unchecked::precondition_check",
      "slice::<impl [T]>::as_chunks_unchecked_mut::precondition_check",
      "slice::<impl [T]>::split_at_mut_unchecked::precondition_check",
      "slice::<impl [T]>::split_at_unchecked::precondition_check",
      "slice::<impl [T]>::swap_unchecked::precondition_check",
      "str::traits::<impl slice::index::SliceIndex<str> for ops::range::Range<usize>>::get_unchecked::precondition_check",
      "str::traits::<impl slice::index::SliceIndex<str> for ops::range::Range<usize>>::get_unchecked_mut::precondition_check",
      "str::traits::<impl slice::index::SliceIndex<str> for range::Range<usize>>::get_unchecked::precondition_check",
      "str::traits::<impl slice::index::SliceIndex<str> for range::Range<usize>>::get_unchecked_mut::precondition_check",
      "ub_checks::check_language_ub",
      "ub_checks::is_valid_allocation_size"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/unicode/printable.rs": [
      "unicode::printable::is_printable"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/unicode/unicode_data.rs": [
      "unicode::unicode_data::ShortOffsetRunHeader",
      "unicode::unicode_data::ShortOffsetRunHeader::new",
      "unicode::unicode_data::alphabetic::lookup",
      "unicode::unicode_data::case_ignorable::lookup",
      "unicode::unicode_data::cased::lookup",
      "unicode::unicode_data::cc::lookup",
      "unicode::unicode_data::conversions::to_lower",
      "unicode::unicode_data::conversions::to_upper",
      "unicode::unicode_data::grapheme_extend::lookup",
      "unicode::unicode_data::grapheme_extend::lookup_slow",
      "unicode::unicode_data::lowercase::lookup",
      "unicode::unicode_data::n::lookup",
      "unicode::unicode_data::uppercase::lookup",
      "unicode::unicode_data::white_space::lookup"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/unit.rs": [
      "<() as unit::IsUnit>::is_unit"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/proc_macro/src/bridge/arena.rs": [
      "bridge::arena::Arena::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/proc_macro/src/bridge/buffer.rs": [
      "<bridge::buffer::Buffer as std::default::Default>::default",
      "bridge::buffer::Buffer::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/proc_macro/src/bridge/client.rs": [
      "bridge::client::Span::call_site",
      "bridge::client::Span::def_site",
      "bridge::client::Span::mixed_site",
      "bridge::client::Span::recover_proc_macro_span",
      "bridge::client::is_available",
      "bridge::client::maybe_install_panic_hook"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/proc_macro/src/bridge/fxhash.rs": [
      "<bridge::fxhash::FxHasher as std::default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/proc_macro/src/bridge/mod.rs": [
      "<() as bridge::Mark>::mark",
      "<() as bridge::Unmark>::unmark",
      "<bool as bridge::Mark>::mark",
      "<bool as bridge::Unmark>::unmark",
      "<char as bridge::Mark>::mark",
      "<char as bridge::Unmark>::unmark",
      "<u8 as bridge::Mark>::mark",
      "<u8 as bridge::Unmark>::unmark",
      "<usize as bridge::Mark>::mark",
      "<usize as bridge::Unmark>::unmark",
      "bridge::LitKind::ByteStrRaw",
      "bridge::LitKind::CStrRaw",
      "bridge::LitKind::StrRaw"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/proc_macro/src/bridge/server.rs": [
      "bridge::server::RunningSameThreadGuard",
      "bridge::server::RunningSameThreadGuard::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/proc_macro/src/bridge/symbol.rs": [
      "bridge::symbol::Symbol",
      "bridge::symbol::Symbol::invalidate_all"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/proc_macro/src/lib.rs": [
      "<TokenStream as std::default::Default>::default",
      "ConcatStreamsHelper::new",
      "ConcatTreesHelper::new",
      "Literal::byte_character",
      "Literal::character",
      "Literal::f32_suffixed",
      "Literal::f32_unsuffixed",
      "Literal::f64_suffixed",
      "Literal::f64_unsuffixed",
      "Literal::i128_suffixed",
      "Literal::i128_unsuffixed",
      "Literal::i16_suffixed",
      "Literal::i16_unsuffixed",
      "Literal::i32_suffixed",
      "Literal::i32_unsuffixed",
      "Literal::i64_suffixed",
      "Literal::i64_unsuffixed",
      "Literal::i8_suffixed",
      "Literal::i8_unsuffixed",
      "Literal::isize_suffixed",
      "Literal::isize_unsuffixed",
      "Literal::u128_suffixed",
      "Literal::u128_unsuffixed",
      "Literal::u16_suffixed",
      "Literal::u16_unsuffixed",
      "Literal::u32_suffixed",
      "Literal::u32_unsuffixed",
      "Literal::u64_suffixed",
      "Literal::u64_unsuffixed",
      "Literal::u8_suffixed",
      "Literal::u8_unsuffixed",
      "Literal::usize_suffixed",
      "Literal::usize_unsuffixed",
      "Literal::with_stringify_parts::get_hashes_str",
      "Span::call_site",
      "Span::def_site",
      "Span::mixed_site",
      "Span::recover_proc_macro_span",
      "TokenStream::new",
      "is_available"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/../../backtrace/src/symbolize/gimli.rs": [
      "<backtrace_rs::symbolize::gimli::Cache as core::default::Default>::default",
      "backtrace_rs::symbolize::gimli::Cache::new",
      "backtrace_rs::symbolize::gimli::clear_symbol_cache"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/../../backtrace/src/symbolize/gimli/elf.rs": [
      "backtrace_rs::symbolize::gimli::elf::debug_path_exists"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/../../backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs": [
      "backtrace_rs::symbolize::gimli::libs_dl_iterate_phdr::native_libraries"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/../../backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs": [
      "backtrace_rs::symbolize::gimli::parse_running_mmaps::parse_maps"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/../../backtrace/src/symbolize/gimli/stash.rs": [
      "backtrace_rs::symbolize::gimli::stash::Stash::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/alloc.rs": [
      "<alloc::System as core::default::Default>::default",
      "alloc::_::__rg_oom",
      "alloc::default_alloc_error_hook",
      "alloc::rust_oom",
      "alloc::take_alloc_error_hook"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/backtrace.rs": [
      "backtrace::Backtrace::capture",
      "backtrace::Backtrace::create",
      "backtrace::Backtrace::disabled",
      "backtrace::Backtrace::enabled",
      "backtrace::Backtrace::force_capture",
      "backtrace::_assert_send_sync"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/collections/hash/map.rs": [
      "collections::hash::map::assert_covariance"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/collections/hash/set.rs": [
      "collections::hash::set::assert_covariance"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/env.rs": [
      "env::args",
      "env::args_os",
      "env::current_dir",
      "env::current_exe",
      "env::home_dir",
      "env::temp_dir",
      "env::vars",
      "env::vars_os"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/ffi/os_str.rs": [
      "<&ffi::os_str::OsStr as core::default::Default>::default",
      "<ffi::os_str::OsString as core::default::Default>::default",
      "ffi::os_str::<impl core::default::Default for alloc_crate::boxed::Box<ffi::os_str::OsStr>>::default",
      "ffi::os_str::OsString::new",
      "ffi::os_str::OsString::with_capacity"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/fs.rs": [
      "<fs::FileTimes as core::default::Default>::default",
      "fs::DirBuilder::new",
      "fs::File::options",
      "fs::FileTimes::new",
      "fs::OpenOptions::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/hash/random.rs": [
      "<hash::random::DefaultHasher as core::default::Default>::default",
      "<hash::random::RandomState as core::default::Default>::default",
      "hash::random::DefaultHasher::new",
      "hash::random::RandomState::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/io/buffered/bufreader/buffer.rs": [
      "io::buffered::bufreader::buffer::Buffer::try_with_capacity",
      "io::buffered::bufreader::buffer::Buffer::with_capacity"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/io/error.rs": [
      "io::error::Error::from_raw_os_error",
      "io::error::Error::last_os_error",
      "io::error::_assert_error_is_sync_send"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/io/error/repr_bitpacked.rs": [
      "io::error::repr_bitpacked::Repr",
      "io::error::repr_bitpacked::Repr::new_os",
      "io::error::repr_bitpacked::kind_from_prim"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/io/mod.rs": [
      "io::SeekFrom::Current",
      "io::SeekFrom::End",
      "io::SeekFrom::Start"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/io/pipe.rs": [
      "io::pipe::pipe"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/io/stdio.rs": [
      "io::stdio::cleanup",
      "io::stdio::stderr",
      "io::stdio::stderr_raw",
      "io::stdio::stdin",
      "io::stdio::stdin_raw",
      "io::stdio::stdout",
      "io::stdio::stdout_raw"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/io/util.rs": [
      "<io::util::Empty as core::default::Default>::default",
      "<io::util::Sink as core::default::Default>::default",
      "io::util::empty",
      "io::util::repeat",
      "io::util::sink"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/num/f128.rs": [
      "f128::<impl f128>::acos",
      "f128::<impl f128>::acosh",
      "f128::<impl f128>::asin",
      "f128::<impl f128>::asinh",
      "f128::<impl f128>::atan",
      "f128::<impl f128>::atan2",
      "f128::<impl f128>::atanh",
      "f128::<impl f128>::cbrt",
      "f128::<impl f128>::cos",
      "f128::<impl f128>::cosh",
      "f128::<impl f128>::erf",
      "f128::<impl f128>::erfc",
      "f128::<impl f128>::exp",
      "f128::<impl f128>::exp2",
      "f128::<impl f128>::exp_m1",
      "f128::<impl f128>::gamma",
      "f128::<impl f128>::hypot",
      "f128::<impl f128>::ln",
      "f128::<impl f128>::ln_1p",
      "f128::<impl f128>::ln_gamma",
      "f128::<impl f128>::log",
      "f128::<impl f128>::log10",
      "f128::<impl f128>::log2",
      "f128::<impl f128>::powf",
      "f128::<impl f128>::sin",
      "f128::<impl f128>::sin_cos",
      "f128::<impl f128>::sinh",
      "f128::<impl f128>::tan",
      "f128::<impl f128>::tanh"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/num/f16.rs": [
      "f16::<impl f16>::acos",
      "f16::<impl f16>::acosh",
      "f16::<impl f16>::asin",
      "f16::<impl f16>::asinh",
      "f16::<impl f16>::atan",
      "f16::<impl f16>::atan2",
      "f16::<impl f16>::atanh",
      "f16::<impl f16>::cos",
      "f16::<impl f16>::cosh",
      "f16::<impl f16>::erf",
      "f16::<impl f16>::erfc",
      "f16::<impl f16>::exp",
      "f16::<impl f16>::exp2",
      "f16::<impl f16>::exp_m1",
      "f16::<impl f16>::gamma",
      "f16::<impl f16>::hypot",
      "f16::<impl f16>::ln",
      "f16::<impl f16>::ln_1p",
      "f16::<impl f16>::ln_gamma",
      "f16::<impl f16>::log",
      "f16::<impl f16>::log10",
      "f16::<impl f16>::log2",
      "f16::<impl f16>::powf",
      "f16::<impl f16>::sin",
      "f16::<impl f16>::sin_cos",
      "f16::<impl f16>::sinh",
      "f16::<impl f16>::tan",
      "f16::<impl f16>::tanh"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/num/f32.rs": [
      "f32::<impl f32>::abs_sub",
      "f32::<impl f32>::acos",
      "f32::<impl f32>::acosh",
      "f32::<impl f32>::asin",
      "f32::<impl f32>::asinh",
      "f32::<impl f32>::atan",
      "f32::<impl f32>::atan2",
      "f32::<impl f32>::atanh",
      "f32::<impl f32>::cbrt",
      "f32::<impl f32>::ceil",
      "f32::<impl f32>::cos",
      "f32::<impl f32>::cosh",
      "f32::<impl f32>::div_euclid",
      "f32::<impl f32>::erf",
      "f32::<impl f32>::erfc",
      "f32::<impl f32>::exp",
      "f32::<impl f32>::exp2",
      "f32::<impl f32>::exp_m1",
      "f32::<impl f32>::floor",
      "f32::<impl f32>::fract",
      "f32::<impl f32>::gamma",
      "f32::<impl f32>::hypot",
      "f32::<impl f32>::ln",
      "f32::<impl f32>::ln_1p",
      "f32::<impl f32>::ln_gamma",
      "f32::<impl f32>::log",
      "f32::<impl f32>::log10",
      "f32::<impl f32>::log2",
      "f32::<impl f32>::mul_add",
      "f32::<impl f32>::powf",
      "f32::<impl f32>::powi",
      "f32::<impl f32>::rem_euclid",
      "f32::<impl f32>::round",
      "f32::<impl f32>::round_ties_even",
      "f32::<impl f32>::sin",
      "f32::<impl f32>::sin_cos",
      "f32::<impl f32>::sinh",
      "f32::<impl f32>::sqrt",
      "f32::<impl f32>::tan",
      "f32::<impl f32>::tanh",
      "f32::<impl f32>::trunc"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/num/f64.rs": [
      "f64::<impl f64>::abs_sub",
      "f64::<impl f64>::acos",
      "f64::<impl f64>::acosh",
      "f64::<impl f64>::asin",
      "f64::<impl f64>::asinh",
      "f64::<impl f64>::atan",
      "f64::<impl f64>::atan2",
      "f64::<impl f64>::atanh",
      "f64::<impl f64>::cbrt",
      "f64::<impl f64>::ceil",
      "f64::<impl f64>::cos",
      "f64::<impl f64>::cosh",
      "f64::<impl f64>::div_euclid",
      "f64::<impl f64>::erf",
      "f64::<impl f64>::erfc",
      "f64::<impl f64>::exp",
      "f64::<impl f64>::exp2",
      "f64::<impl f64>::exp_m1",
      "f64::<impl f64>::floor",
      "f64::<impl f64>::fract",
      "f64::<impl f64>::gamma",
      "f64::<impl f64>::hypot",
      "f64::<impl f64>::ln",
      "f64::<impl f64>::ln_1p",
      "f64::<impl f64>::ln_gamma",
      "f64::<impl f64>::log",
      "f64::<impl f64>::log10",
      "f64::<impl f64>::log2",
      "f64::<impl f64>::mul_add",
      "f64::<impl f64>::powf",
      "f64::<impl f64>::powi",
      "f64::<impl f64>::rem_euclid",
      "f64::<impl f64>::round",
      "f64::<impl f64>::round_ties_even",
      "f64::<impl f64>::sin",
      "f64::<impl f64>::sin_cos",
      "f64::<impl f64>::sinh",
      "f64::<impl f64>::sqrt",
      "f64::<impl f64>::tan",
      "f64::<impl f64>::tanh",
      "f64::<impl f64>::trunc"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/os/fd/net.rs": [
      "os::fd::net::<impl os::fd::raw::FromRawFd for net::tcp::TcpListener>::from_raw_fd",
      "os::fd::net::<impl os::fd::raw::FromRawFd for net::tcp::TcpStream>::from_raw_fd",
      "os::fd::net::<impl os::fd::raw::FromRawFd for net::udp::UdpSocket>::from_raw_fd"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/os/fd/owned.rs": [
      "<os::fd::owned::OwnedFd as os::fd::raw::FromRawFd>::from_raw_fd",
      "os::fd::owned::BorrowedFd::<'_>::borrow_raw"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/os/fd/raw.rs": [
      "<fs::File as os::fd::raw::FromRawFd>::from_raw_fd",
      "<i32 as os::fd::raw::FromRawFd>::from_raw_fd",
      "<i32 as os::fd::raw::IntoRawFd>::into_raw_fd",
      "<io::pipe::PipeReader as os::fd::raw::FromRawFd>::from_raw_fd",
      "<io::pipe::PipeWriter as os::fd::raw::FromRawFd>::from_raw_fd"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/os/linux/process.rs": [
      "<os::linux::process::PidFd as os::fd::raw::FromRawFd>::from_raw_fd"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/os/unix/fs.rs": [
      "<fs::Permissions as os::unix::fs::PermissionsExt>::from_mode"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/os/unix/net/ancillary.rs": [
      "os::unix::net::ancillary::SocketCred::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/os/unix/net/datagram.rs": [
      "<os::unix::net::datagram::UnixDatagram as os::fd::raw::FromRawFd>::from_raw_fd",
      "os::unix::net::datagram::UnixDatagram::pair",
      "os::unix::net::datagram::UnixDatagram::unbound"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/os/unix/net/listener.rs": [
      "<os::unix::net::listener::UnixListener as os::fd::raw::FromRawFd>::from_raw_fd"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/os/unix/net/stream.rs": [
      "<os::unix::net::stream::UnixStream as os::fd::raw::FromRawFd>::from_raw_fd",
      "os::unix::net::stream::UnixStream::pair"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/os/unix/process.rs": [
      "<process::ExitStatus as os::unix::process::ExitStatusExt>::from_raw",
      "<process::ExitStatusError as os::unix::process::ExitStatusExt>::from_raw",
      "os::unix::process::<impl os::fd::raw::FromRawFd for process::Stdio>::from_raw_fd",
      "os::unix::process::parent_id"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/panic.rs": [
      "panic::BacktraceStyle::from_u8",
      "panic::BacktraceStyle::full",
      "panic::always_abort",
      "panic::get_backtrace_style"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/panicking.rs": [
      "<panicking::Hook as core::default::Default>::default",
      "panicking::__rust_drop_panic",
      "panicking::__rust_foreign_exception",
      "panicking::panic_count::count_is_zero",
      "panicking::panic_count::decrease",
      "panicking::panic_count::finished_panic_hook",
      "panicking::panic_count::get_count",
      "panicking::panic_count::increase",
      "panicking::panic_count::is_zero_slow_path",
      "panicking::panic_count::set_always_abort",
      "panicking::panicking",
      "panicking::take_hook"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/path.rs": [
      "<path::PathBuf as core::default::Default>::default",
      "path::PathBuf::new",
      "path::PathBuf::with_capacity",
      "path::Prefix::<'_>::Disk",
      "path::Prefix::<'_>::VerbatimDisk",
      "path::StripPrefixError",
      "path::is_separator"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/process.rs": [
      "<() as process::Termination>::report",
      "<process::ExitCode as core::convert::From<u8>>::from",
      "<process::ExitCode as core::default::Default>::default",
      "<process::ExitStatus as core::default::Default>::default",
      "process::Stdio::inherit",
      "process::Stdio::null",
      "process::Stdio::piped",
      "process::abort",
      "process::exit",
      "process::id"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/random.rs": [
      "<random::DefaultRandomSource as core::default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/rt.rs": [
      "rt::__rust_abort",
      "rt::cleanup",
      "rt::thread_cleanup"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sync/barrier.rs": [
      "sync::barrier::Barrier::new",
      "sync::barrier::BarrierWaitResult"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sync/lazy_lock.rs": [
      "sync::lazy_lock::panic_poisoned"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sync/mpmc/array.rs": [
      "<sync::mpmc::array::ArrayToken as core::default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sync/mpmc/context.rs": [
      "sync::mpmc::context::Context::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sync/mpmc/list.rs": [
      "<sync::mpmc::list::ListToken as core::default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sync/mpmc/select.rs": [
      "<sync::mpmc::select::Selected as core::convert::From<usize>>::from",
      "<sync::mpmc::select::Token as core::default::Default>::default",
      "sync::mpmc::select::Operation"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sync/mpmc/utils.rs": [
      "sync::mpmc::utils::Backoff::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sync/mpmc/waker.rs": [
      "sync::mpmc::waker::SyncWaker::new",
      "sync::mpmc::waker::Waker::new",
      "sync::mpmc::waker::current_thread_id"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sync/mpmc/zero.rs": [
      "<sync::mpmc::zero::ZeroToken as core::default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sync/poison.rs": [
      "sync::poison::Flag::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sync/poison/condvar.rs": [
      "<sync::poison::condvar::Condvar as core::default::Default>::default",
      "sync::poison::condvar::Condvar::new",
      "sync::poison::condvar::WaitTimeoutResult"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sync/poison/once.rs": [
      "sync::poison::once::Once::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sync/reentrant_lock.rs": [
      "sync::reentrant_lock::Tid::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/anonymous_pipe/unix.rs": [
      "sys::anonymous_pipe::unix::pipe"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/args/unix.rs": [
      "sys::args::unix::args",
      "sys::args::unix::imp::argc_argv"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/backtrace.rs": [
      "sys::backtrace::lock::<'_>",
      "sys::backtrace::set_image_base"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/env/unix.rs": [
      "sys::env::unix::env",
      "sys::env::unix::env_read_lock",
      "sys::env::unix::environ"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/exit_guard.rs": [
      "sys::exit_guard::unique_thread_exit"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/fd/unix.rs": [
      "<sys::fd::unix::FileDesc as os::fd::raw::FromRawFd>::from_raw_fd",
      "sys::fd::unix::max_iov"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/fs/unix.rs": [
      "<sys::fs::unix::File as core::fmt::Debug>::fmt::get_mode",
      "<sys::fs::unix::File as core::fmt::Debug>::fmt::get_path",
      "<sys::fs::unix::File as os::fd::raw::FromRawFd>::from_raw_fd",
      "<sys::fs::unix::FilePermissions as sys_common::FromInner<u32>>::from_inner",
      "<sys::fs::unix::FileTimes as core::default::Default>::default",
      "sys::fs::unix::DirBuilder::new",
      "sys::fs::unix::File::datasync::os_datasync",
      "sys::fs::unix::File::fsync::os_fsync",
      "sys::fs::unix::Mode",
      "sys::fs::unix::OpenOptions::new",
      "sys::fs::unix::debug_assert_fd_is_open",
      "sys::fs::unix::fchown"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/net/connection/socket.rs": [
      "sys::net::connection::socket::to_ipv6mr_interface"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/net/connection/socket/unix.rs": [
      "<sys::net::connection::socket::unix::Socket as os::fd::raw::FromRawFd>::from_raw_fd",
      "sys::net::connection::socket::unix::Socket::new_pair",
      "sys::net::connection::socket::unix::Socket::new_raw",
      "sys::net::connection::socket::unix::cvt_gai",
      "sys::net::connection::socket::unix::init",
      "sys::net::connection::socket::unix::on_resolver_failure"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/os_str/bytes.rs": [
      "sys::os_str::bytes::Buf::with_capacity",
      "sys::os_str::bytes::Slice::empty_box"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/pal/unix/kernel_copy.rs": [
      "sys::pal::unix::kernel_copy::CopyResult::Ended",
      "sys::pal::unix::kernel_copy::CopyResult::Fallback",
      "sys::pal::unix::kernel_copy::copy_regular_files",
      "sys::pal::unix::kernel_copy::copy_regular_files::probe_copy_file_range_support"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/pal/unix/linux/pidfd.rs": [
      "<sys::pal::unix::linux::pidfd::PidFd as os::fd::raw::FromRawFd>::from_raw_fd"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/pal/unix/mod.rs": [
      "sys::pal::unix::abort_internal",
      "sys::pal::unix::cleanup",
      "sys::pal::unix::cvt_nz",
      "sys::pal::unix::decode_error_kind",
      "sys::pal::unix::init::reset_sigpipe",
      "sys::pal::unix::init::sanitize_standard_fds",
      "sys::pal::unix::is_interrupted",
      "sys::pal::unix::on_broken_pipe_flag_used"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/pal/unix/os.rs": [
      "sys::pal::unix::os::current_exe",
      "sys::pal::unix::os::errno",
      "sys::pal::unix::os::error_string",
      "sys::pal::unix::os::exit",
      "sys::pal::unix::os::getcwd",
      "sys::pal::unix::os::getpid",
      "sys::pal::unix::os::getppid",
      "sys::pal::unix::os::glibc_version",
      "sys::pal::unix::os::home_dir",
      "sys::pal::unix::os::home_dir::fallback",
      "sys::pal::unix::os::page_size",
      "sys::pal::unix::os::set_errno",
      "sys::pal::unix::os::temp_dir"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/pal/unix/pipe.rs": [
      "<sys::pal::unix::pipe::AnonPipe as os::fd::raw::FromRawFd>::from_raw_fd",
      "sys::pal::unix::pipe::anon_pipe"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/pal/unix/stack_overflow.rs": [
      "sys::pal::unix::stack_overflow::Handler::new",
      "sys::pal::unix::stack_overflow::Handler::null",
      "sys::pal::unix::stack_overflow::imp::cleanup",
      "sys::pal::unix::stack_overflow::imp::current_guard",
      "sys::pal::unix::stack_overflow::imp::get_stack",
      "sys::pal::unix::stack_overflow::imp::get_stack_start",
      "sys::pal::unix::stack_overflow::imp::init",
      "sys::pal::unix::stack_overflow::imp::install_main_guard",
      "sys::pal::unix::stack_overflow::imp::install_main_guard_bsds",
      "sys::pal::unix::stack_overflow::imp::install_main_guard_default",
      "sys::pal::unix::stack_overflow::imp::install_main_guard_freebsd",
      "sys::pal::unix::stack_overflow::imp::install_main_guard_linux",
      "sys::pal::unix::stack_overflow::imp::install_main_guard_linux_musl",
      "sys::pal::unix::stack_overflow::imp::make_handler",
      "sys::pal::unix::stack_overflow::imp::sigstack_size",
      "sys::pal::unix::stack_overflow::imp::stack_start_aligned"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/pal/unix/stack_overflow/thread_info.rs": [
      "sys::pal::unix::stack_overflow::thread_info::delete_current_info",
      "sys::pal::unix::stack_overflow::thread_info::spin_lock_in_setup"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/pal/unix/thread.rs": [
      "sys::pal::unix::thread::Thread::sleep",
      "sys::pal::unix::thread::Thread::yield_now",
      "sys::pal::unix::thread::available_parallelism",
      "sys::pal::unix::thread::cgroups::quota"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/pal/unix/time.rs": [
      "sys::pal::unix::time::Instant::now",
      "sys::pal::unix::time::SystemTime::new",
      "sys::pal::unix::time::SystemTime::now",
      "sys::pal::unix::time::Timespec::new",
      "sys::pal::unix::time::Timespec::new_unchecked",
      "sys::pal::unix::time::Timespec::now",
      "sys::pal::unix::time::Timespec::zero"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/path/unix.rs": [
      "sys::path::unix::is_sep_byte",
      "sys::path::unix::is_verbatim_sep"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/personality/dwarf/eh.rs": [
      "sys::personality::dwarf::eh::round_up"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/process/env.rs": [
      "<sys::process::env::CommandEnv as core::default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/process/unix/common.rs": [
      "<sys::process::unix::common::ExitCode as core::convert::From<u8>>::from",
      "sys::process::unix::common::ChildStdio::Explicit",
      "sys::process::unix::common::ExitCode"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/process/unix/common/cstring_array.rs": [
      "sys::process::unix::common::cstring_array::CStringArray::with_capacity"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/process/unix/unix.rs": [
      "<sys::process::unix::unix::ExitStatus as core::convert::From<i32>>::from",
      "<sys::process::unix::unix::ExitStatus as core::default::Default>::default",
      "sys::process::unix::unix::<impl sys::process::unix::common::Command>::posix_spawn::get_posix_spawn_addchdir",
      "sys::process::unix::unix::ExitStatus",
      "sys::process::unix::unix::ExitStatus::new",
      "sys::process::unix::unix::ExitStatusError",
      "sys::process::unix::unix::Process::new",
      "sys::process::unix::unix::signal_string"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/random/linux.rs": [
      "sys::random::linux::hashmap_random_keys"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/stdio/unix.rs": [
      "sys::stdio::unix::Stderr::new",
      "sys::stdio::unix::Stdin::new",
      "sys::stdio::unix::Stdout::new",
      "sys::stdio::unix::panic_output"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/sync/condvar/futex.rs": [
      "sys::sync::condvar::futex::Condvar::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/sync/mutex/futex.rs": [
      "sys::sync::mutex::futex::Mutex::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/sync/once/futex.rs": [
      "sys::sync::once::futex::Once::new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/sync/rwlock/futex.rs": [
      "sys::sync::rwlock::futex::RwLock::new",
      "sys::sync::rwlock::futex::has_reached_max_readers",
      "sys::sync::rwlock::futex::has_readers_waiting",
      "sys::sync::rwlock::futex::has_writers_waiting",
      "sys::sync::rwlock::futex::is_read_lockable",
      "sys::sync::rwlock::futex::is_read_lockable_after_wakeup",
      "sys::sync::rwlock::futex::is_unlocked",
      "sys::sync::rwlock::futex::is_write_locked"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/thread_local/destructors/linux_like.rs": [
      "sys::thread_local::destructors::linux_like::register::c_int"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/thread_local/destructors/list.rs": [
      "sys::thread_local::destructors::list::run"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/thread_local/guard/key.rs": [
      "sys::thread_local::guard::key::enable"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/thread_local/key/unix.rs": [
      "sys::thread_local::key::unix::destroy"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys/thread_local/native/mod.rs": [
      "hash::random::RandomState::new::KEYS::__init",
      "sync::mpmc::context::Context::with::CONTEXT::__init",
      "sys::thread_local::native::LocalPointer::__new"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys_common/mod.rs": [
      "sys_common::mul_div_u64"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/sys_common/wtf8.rs": [
      "sys_common::wtf8::CodePoint::from_char",
      "sys_common::wtf8::CodePoint::from_u32",
      "sys_common::wtf8::CodePoint::from_u32_unchecked",
      "sys_common::wtf8::Wtf8::empty_box",
      "sys_common::wtf8::Wtf8Buf::new",
      "sys_common::wtf8::Wtf8Buf::with_capacity",
      "sys_common::wtf8::decode_surrogate",
      "sys_common::wtf8::decode_surrogate_pair"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/thread/current.rs": [
      "thread::current::current",
      "thread::current::current_id",
      "thread::current::current_or_unnamed",
      "thread::current::drop_current",
      "thread::current::id::get",
      "thread::current::id::get_or_init"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/thread/mod.rs": [
      "thread::Builder::new",
      "thread::ThreadId",
      "thread::ThreadId::from_u64",
      "thread::ThreadId::new",
      "thread::ThreadId::new::exhausted",
      "thread::_assert_sync_and_send",
      "thread::available_parallelism",
      "thread::main_thread::get",
      "thread::panicking",
      "thread::park",
      "thread::park_timeout",
      "thread::park_timeout_ms",
      "thread::sleep",
      "thread::sleep_ms",
      "thread::yield_now"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/thread/spawnhook.rs": [
      "<thread::spawnhook::ChildSpawnHooks as core::default::Default>::default",
      "<thread::spawnhook::SpawnHooks as core::default::Default>::default"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/time.rs": [
      "time::Instant::now",
      "time::SystemTime::now",
      "time::SystemTimeError"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/stdarch/crates/std_detect/src/detect/bit.rs": [
      "detect::bit::test"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/stdarch/crates/std_detect/src/detect/cache.rs": [
      "<detect::cache::Initializer as rustc_std_workspace_core::default::Default>::default",
      "detect::cache::Cache::uninitialized",
      "detect::cache::Initializer",
      "detect::cache::detect_and_initialize",
      "detect::cache::set_bit",
      "detect::cache::test",
      "detect::cache::test_bit",
      "detect::cache::unset_bit"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/stdarch/crates/std_detect/src/detect/macros.rs": [
      "detect::arch::x86::__is_feature_detected::adx",
      "detect::arch::x86::__is_feature_detected::aes",
      "detect::arch::x86::__is_feature_detected::amx_avx512",
      "detect::arch::x86::__is_feature_detected::amx_bf16",
      "detect::arch::x86::__is_feature_detected::amx_complex",
      "detect::arch::x86::__is_feature_detected::amx_fp16",
      "detect::arch::x86::__is_feature_detected::amx_fp8",
      "detect::arch::x86::__is_feature_detected::amx_int8",
      "detect::arch::x86::__is_feature_detected::amx_movrs",
      "detect::arch::x86::__is_feature_detected::amx_tf32",
      "detect::arch::x86::__is_feature_detected::amx_tile",
      "detect::arch::x86::__is_feature_detected::amx_transpose",
      "detect::arch::x86::__is_feature_detected::avx",
      "detect::arch::x86::__is_feature_detected::avx2",
      "detect::arch::x86::__is_feature_detected::avx512bf16",
      "detect::arch::x86::__is_feature_detected::avx512bitalg",
      "detect::arch::x86::__is_feature_detected::avx512bw",
      "detect::arch::x86::__is_feature_detected::avx512cd",
      "detect::arch::x86::__is_feature_detected::avx512dq",
      "detect::arch::x86::__is_feature_detected::avx512er",
      "detect::arch::x86::__is_feature_detected::avx512f",
      "detect::arch::x86::__is_feature_detected::avx512fp16",
      "detect::arch::x86::__is_feature_detected::avx512ifma",
      "detect::arch::x86::__is_feature_detected::avx512pf",
      "detect::arch::x86::__is_feature_detected::avx512vbmi",
      "detect::arch::x86::__is_feature_detected::avx512vbmi2",
      "detect::arch::x86::__is_feature_detected::avx512vl",
      "detect::arch::x86::__is_feature_detected::avx512vnni",
      "detect::arch::x86::__is_feature_detected::avx512vp2intersect",
      "detect::arch::x86::__is_feature_detected::avx512vpopcntdq",
      "detect::arch::x86::__is_feature_detected::avxifma",
      "detect::arch::x86::__is_feature_detected::avxneconvert",
      "detect::arch::x86::__is_feature_detected::avxvnni",
      "detect::arch::x86::__is_feature_detected::avxvnniint16",
      "detect::arch::x86::__is_feature_detected::avxvnniint8",
      "detect::arch::x86::__is_feature_detected::bmi1",
      "detect::arch::x86::__is_feature_detected::bmi2",
      "detect::arch::x86::__is_feature_detected::cmpxchg16b",
      "detect::arch::x86::__is_feature_detected::ermsb",
      "detect::arch::x86::__is_feature_detected::f16c",
      "detect::arch::x86::__is_feature_detected::fma",
      "detect::arch::x86::__is_feature_detected::fxsr",
      "detect::arch::x86::__is_feature_detected::gfni",
      "detect::arch::x86::__is_feature_detected::kl",
      "detect::arch::x86::__is_feature_detected::lzcnt",
      "detect::arch::x86::__is_feature_detected::mmx",
      "detect::arch::x86::__is_feature_detected::movbe",
      "detect::arch::x86::__is_feature_detected::movrs",
      "detect::arch::x86::__is_feature_detected::pclmulqdq",
      "detect::arch::x86::__is_feature_detected::popcnt",
      "detect::arch::x86::__is_feature_detected::rdrand",
      "detect::arch::x86::__is_feature_detected::rdseed",
      "detect::arch::x86::__is_feature_detected::rtm",
      "detect::arch::x86::__is_feature_detected::sha",
      "detect::arch::x86::__is_feature_detected::sha512",
      "detect::arch::x86::__is_feature_detected::sm3",
      "detect::arch::x86::__is_feature_detected::sm4",
      "detect::arch::x86::__is_feature_detected::sse",
      "detect::arch::x86::__is_feature_detected::sse2",
      "detect::arch::x86::__is_feature_detected::sse3",
      "detect::arch::x86::__is_feature_detected::sse4_1",
      "detect::arch::x86::__is_feature_detected::sse4_2",
      "detect::arch::x86::__is_feature_detected::sse4a",
      "detect::arch::x86::__is_feature_detected::ssse3",
      "detect::arch::x86::__is_feature_detected::tbm",
      "detect::arch::x86::__is_feature_detected::tsc",
      "detect::arch::x86::__is_feature_detected::vaes",
      "detect::arch::x86::__is_feature_detected::vpclmulqdq",
      "detect::arch::x86::__is_feature_detected::widekl",
      "detect::arch::x86::__is_feature_detected::xop",
      "detect::arch::x86::__is_feature_detected::xsave",
      "detect::arch::x86::__is_feature_detected::xsavec",
      "detect::arch::x86::__is_feature_detected::xsaveopt",
      "detect::arch::x86::__is_feature_detected::xsaves"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/stdarch/crates/std_detect/src/detect/mod.rs": [
      "detect::features"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/stdarch/crates/std_detect/src/detect/os/x86.rs": [
      "detect::os::detect_features"
    ],
    "src/lib.rs": [
      "dummy"
    ]
  },
  "contract-harnesses": {
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs": [
      "alloc::layout::Layout::from_size_align",
      "alloc::layout::Layout::from_size_align_unchecked",
      "alloc::layout::verify::check_align_to",
      "alloc::layout::verify::check_array_i32",
      "alloc::layout::verify::check_dangling",
      "alloc::layout::verify::check_extend",
      "alloc::layout::verify::check_extend_packed",
      "alloc::layout::verify::check_for_value_i32",
      "alloc::layout::verify::check_for_value_raw_i32",
      "alloc::layout::verify::check_new_i32",
      "alloc::layout::verify::check_pad_to_align",
      "alloc::layout::verify::check_padding_needed_for",
      "alloc::layout::verify::check_repeat",
      "alloc::layout::verify::check_repeat_packed"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ascii/ascii_char.rs": [
      "ascii::ascii_char::AsciiChar::from_u8",
      "ascii::ascii_char::AsciiChar::from_u8_unchecked"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/char/convert.rs": [
      "char::convert::from_u32_unchecked"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/char/methods.rs": [
      "char::methods::verify::check_as_ascii_ascii_char",
      "char::methods::verify::check_as_ascii_non_ascii_char"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs": [
      "<f128 as convert::num::FloatToInt<i128>>::to_int_unchecked",
      "<f128 as convert::num::FloatToInt<i16>>::to_int_unchecked",
      "<f128 as convert::num::FloatToInt<i32>>::to_int_unchecked",
      "<f128 as convert::num::FloatToInt<i64>>::to_int_unchecked",
      "<f128 as convert::num::FloatToInt<i8>>::to_int_unchecked",
      "<f128 as convert::num::FloatToInt<isize>>::to_int_unchecked",
      "<f128 as convert::num::FloatToInt<u128>>::to_int_unchecked",
      "<f128 as convert::num::FloatToInt<u16>>::to_int_unchecked",
      "<f128 as convert::num::FloatToInt<u32>>::to_int_unchecked",
      "<f128 as convert::num::FloatToInt<u64>>::to_int_unchecked",
      "<f128 as convert::num::FloatToInt<u8>>::to_int_unchecked",
      "<f128 as convert::num::FloatToInt<usize>>::to_int_unchecked",
      "<f16 as convert::num::FloatToInt<i128>>::to_int_unchecked",
      "<f16 as convert::num::FloatToInt<i16>>::to_int_unchecked",
      "<f16 as convert::num::FloatToInt<i32>>::to_int_unchecked",
      "<f16 as convert::num::FloatToInt<i64>>::to_int_unchecked",
      "<f16 as convert::num::FloatToInt<i8>>::to_int_unchecked",
      "<f16 as convert::num::FloatToInt<isize>>::to_int_unchecked",
      "<f16 as convert::num::FloatToInt<u128>>::to_int_unchecked",
      "<f16 as convert::num::FloatToInt<u16>>::to_int_unchecked",
      "<f16 as convert::num::FloatToInt<u32>>::to_int_unchecked",
      "<f16 as convert::num::FloatToInt<u64>>::to_int_unchecked",
      "<f16 as convert::num::FloatToInt<u8>>::to_int_unchecked",
      "<f16 as convert::num::FloatToInt<usize>>::to_int_unchecked",
      "<f32 as convert::num::FloatToInt<i128>>::to_int_unchecked",
      "<f32 as convert::num::FloatToInt<i16>>::to_int_unchecked",
      "<f32 as convert::num::FloatToInt<i32>>::to_int_unchecked",
      "<f32 as convert::num::FloatToInt<i64>>::to_int_unchecked",
      "<f32 as convert::num::FloatToInt<i8>>::to_int_unchecked",
      "<f32 as convert::num::FloatToInt<isize>>::to_int_unchecked",
      "<f32 as convert::num::FloatToInt<u128>>::to_int_unchecked",
      "<f32 as convert::num::FloatToInt<u16>>::to_int_unchecked",
      "<f32 as convert::num::FloatToInt<u32>>::to_int_unchecked",
      "<f32 as convert::num::FloatToInt<u64>>::to_int_unchecked",
      "<f32 as convert::num::FloatToInt<u8>>::to_int_unchecked",
      "<f32 as convert::num::FloatToInt<usize>>::to_int_unchecked",
      "<f64 as convert::num::FloatToInt<i128>>::to_int_unchecked",
      "<f64 as convert::num::FloatToInt<i16>>::to_int_unchecked",
      "<f64 as convert::num::FloatToInt<i32>>::to_int_unchecked",
      "<f64 as convert::num::FloatToInt<i64>>::to_int_unchecked",
      "<f64 as convert::num::FloatToInt<i8>>::to_int_unchecked",
      "<f64 as convert::num::FloatToInt<isize>>::to_int_unchecked",
      "<f64 as convert::num::FloatToInt<u128>>::to_int_unchecked",
      "<f64 as convert::num::FloatToInt<u16>>::to_int_unchecked",
      "<f64 as convert::num::FloatToInt<u32>>::to_int_unchecked",
      "<f64 as convert::num::FloatToInt<u64>>::to_int_unchecked",
      "<f64 as convert::num::FloatToInt<u8>>::to_int_unchecked",
      "<f64 as convert::num::FloatToInt<usize>>::to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f128::i128::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f128::i16::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f128::i32::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f128::i64::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f128::i8::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f128::isize::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f128::u128::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f128::u16::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f128::u32::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f128::u64::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f128::u8::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f128::usize::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f16::i128::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f16::i16::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f16::i32::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f16::i64::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f16::i8::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f16::isize::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f16::u128::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f16::u16::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f16::u32::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f16::u64::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f16::u8::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f16::usize::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f32::i128::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f32::i16::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f32::i32::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f32::i64::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f32::i8::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f32::isize::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f32::u128::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f32::u16::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f32::u32::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f32::u64::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f32::u8::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f32::usize::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f64::i128::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f64::i16::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f64::i32::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f64::i64::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f64::i8::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f64::isize::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f64::u128::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f64::u16::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f64::u32::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f64::u64::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f64::u8::check_float_to_int_unchecked",
      "convert::num::verify::check_f16_to_int_unchecked::f64::usize::check_float_to_int_unchecked"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ffi/c_str.rs": [
      "ffi::c_str::verify::check_from_bytes_with_nul_unchecked",
      "ffi::c_str::verify::check_from_ptr_contract",
      "ffi::c_str::verify::check_strlen_contract"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs": [
      "<bool as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "<i128 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "<i16 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "<i32 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "<i64 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "<i8 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "<isize as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "<u128 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "<u16 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "<u32 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "<u64 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "<u8 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "<usize as intrinsics::fallback::DisjointBitOr>::disjoint_bitor"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/mod.rs": [
      "intrinsics::verify::check_typed_swap_char",
      "intrinsics::verify::check_typed_swap_non_zero",
      "intrinsics::verify::check_typed_swap_u8",
      "intrinsics::verify::transmute_unchecked_bool_to_i8",
      "intrinsics::verify::transmute_unchecked_bool_to_u8",
      "intrinsics::verify::transmute_unchecked_char_to_f32",
      "intrinsics::verify::transmute_unchecked_char_to_i32",
      "intrinsics::verify::transmute_unchecked_char_to_u32",
      "intrinsics::verify::transmute_unchecked_f32_to_char",
      "intrinsics::verify::transmute_unchecked_f32_to_i32",
      "intrinsics::verify::transmute_unchecked_f32_to_u32",
      "intrinsics::verify::transmute_unchecked_f64_to_i64",
      "intrinsics::verify::transmute_unchecked_f64_to_u64",
      "intrinsics::verify::transmute_unchecked_i128_to_u128",
      "intrinsics::verify::transmute_unchecked_i16_to_u16",
      "intrinsics::verify::transmute_unchecked_i32_to_char",
      "intrinsics::verify::transmute_unchecked_i32_to_f32",
      "intrinsics::verify::transmute_unchecked_i32_to_u32",
      "intrinsics::verify::transmute_unchecked_i64_to_f64",
      "intrinsics::verify::transmute_unchecked_i64_to_u64",
      "intrinsics::verify::transmute_unchecked_i8_to_bool",
      "intrinsics::verify::transmute_unchecked_i8_to_u8",
      "intrinsics::verify::transmute_unchecked_u128_to_i128",
      "intrinsics::verify::transmute_unchecked_u16_to_i16",
      "intrinsics::verify::transmute_unchecked_u32_to_char",
      "intrinsics::verify::transmute_unchecked_u32_to_f32",
      "intrinsics::verify::transmute_unchecked_u32_to_i32",
      "intrinsics::verify::transmute_unchecked_u64_to_f64",
      "intrinsics::verify::transmute_unchecked_u64_to_i64",
      "intrinsics::verify::transmute_unchecked_u8_to_bool",
      "intrinsics::verify::transmute_unchecked_u8_to_i8",
      "intrinsics::verify::transmute_zero_size"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/mem/mod.rs": [
      "mem::verify::check_swap_adt_no_drop",
      "mem::verify::check_swap_primitive"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs": [
      "num::<impl i128>::unchecked_add",
      "num::<impl i128>::unchecked_mul",
      "num::<impl i128>::unchecked_neg",
      "num::<impl i128>::unchecked_shl",
      "num::<impl i128>::unchecked_shr",
      "num::<impl i128>::unchecked_sub",
      "num::<impl i128>::wrapping_shl",
      "num::<impl i128>::wrapping_shr",
      "num::<impl i16>::unchecked_add",
      "num::<impl i16>::unchecked_mul",
      "num::<impl i16>::unchecked_neg",
      "num::<impl i16>::unchecked_shl",
      "num::<impl i16>::unchecked_shr",
      "num::<impl i16>::unchecked_sub",
      "num::<impl i16>::wrapping_shl",
      "num::<impl i16>::wrapping_shr",
      "num::<impl i32>::unchecked_add",
      "num::<impl i32>::unchecked_mul",
      "num::<impl i32>::unchecked_neg",
      "num::<impl i32>::unchecked_shl",
      "num::<impl i32>::unchecked_shr",
      "num::<impl i32>::unchecked_sub",
      "num::<impl i32>::wrapping_shl",
      "num::<impl i32>::wrapping_shr",
      "num::<impl i64>::unchecked_add",
      "num::<impl i64>::unchecked_mul",
      "num::<impl i64>::unchecked_neg",
      "num::<impl i64>::unchecked_shl",
      "num::<impl i64>::unchecked_shr",
      "num::<impl i64>::unchecked_sub",
      "num::<impl i64>::wrapping_shl",
      "num::<impl i64>::wrapping_shr",
      "num::<impl i8>::unchecked_add",
      "num::<impl i8>::unchecked_mul",
      "num::<impl i8>::unchecked_neg",
      "num::<impl i8>::unchecked_shl",
      "num::<impl i8>::unchecked_shr",
      "num::<impl i8>::unchecked_sub",
      "num::<impl i8>::wrapping_shl",
      "num::<impl i8>::wrapping_shr",
      "num::<impl isize>::unchecked_add",
      "num::<impl isize>::unchecked_mul",
      "num::<impl isize>::unchecked_neg",
      "num::<impl isize>::unchecked_shl",
      "num::<impl isize>::unchecked_shr",
      "num::<impl isize>::unchecked_sub",
      "num::<impl isize>::wrapping_shl",
      "num::<impl isize>::wrapping_shr"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/mod.rs": [
      "num::verify::checked_f128_to_int_unchecked_i128",
      "num::verify::checked_f128_to_int_unchecked_i16",
      "num::verify::checked_f128_to_int_unchecked_i32",
      "num::verify::checked_f128_to_int_unchecked_i64",
      "num::verify::checked_f128_to_int_unchecked_i8",
      "num::verify::checked_f128_to_int_unchecked_isize",
      "num::verify::checked_f128_to_int_unchecked_u128",
      "num::verify::checked_f128_to_int_unchecked_u16",
      "num::verify::checked_f128_to_int_unchecked_u32",
      "num::verify::checked_f128_to_int_unchecked_u64",
      "num::verify::checked_f128_to_int_unchecked_u8",
      "num::verify::checked_f128_to_int_unchecked_usize",
      "num::verify::checked_f16_to_int_unchecked_i128",
      "num::verify::checked_f16_to_int_unchecked_i16",
      "num::verify::checked_f16_to_int_unchecked_i32",
      "num::verify::checked_f16_to_int_unchecked_i64",
      "num::verify::checked_f16_to_int_unchecked_i8",
      "num::verify::checked_f16_to_int_unchecked_isize",
      "num::verify::checked_f16_to_int_unchecked_u128",
      "num::verify::checked_f16_to_int_unchecked_u16",
      "num::verify::checked_f16_to_int_unchecked_u32",
      "num::verify::checked_f16_to_int_unchecked_u64",
      "num::verify::checked_f16_to_int_unchecked_u8",
      "num::verify::checked_f16_to_int_unchecked_usize",
      "num::verify::checked_f32_to_int_unchecked_i128",
      "num::verify::checked_f32_to_int_unchecked_i16",
      "num::verify::checked_f32_to_int_unchecked_i32",
      "num::verify::checked_f32_to_int_unchecked_i64",
      "num::verify::checked_f32_to_int_unchecked_i8",
      "num::verify::checked_f32_to_int_unchecked_isize",
      "num::verify::checked_f32_to_int_unchecked_u128",
      "num::verify::checked_f32_to_int_unchecked_u16",
      "num::verify::checked_f32_to_int_unchecked_u32",
      "num::verify::checked_f32_to_int_unchecked_u64",
      "num::verify::checked_f32_to_int_unchecked_u8",
      "num::verify::checked_f32_to_int_unchecked_usize",
      "num::verify::checked_f64_to_int_unchecked_i128",
      "num::verify::checked_f64_to_int_unchecked_i16",
      "num::verify::checked_f64_to_int_unchecked_i32",
      "num::verify::checked_f64_to_int_unchecked_i64",
      "num::verify::checked_f64_to_int_unchecked_i8",
      "num::verify::checked_f64_to_int_unchecked_isize",
      "num::verify::checked_f64_to_int_unchecked_u128",
      "num::verify::checked_f64_to_int_unchecked_u16",
      "num::verify::checked_f64_to_int_unchecked_u32",
      "num::verify::checked_f64_to_int_unchecked_u64",
      "num::verify::checked_f64_to_int_unchecked_u8",
      "num::verify::checked_f64_to_int_unchecked_usize",
      "num::verify::checked_unchecked_add_i128",
      "num::verify::checked_unchecked_add_i16",
      "num::verify::checked_unchecked_add_i32",
      "num::verify::checked_unchecked_add_i64",
      "num::verify::checked_unchecked_add_i8",
      "num::verify::checked_unchecked_add_isize",
      "num::verify::checked_unchecked_add_u128",
      "num::verify::checked_unchecked_add_u16",
      "num::verify::checked_unchecked_add_u32",
      "num::verify::checked_unchecked_add_u64",
      "num::verify::checked_unchecked_add_u8",
      "num::verify::checked_unchecked_add_usize",
      "num::verify::checked_unchecked_mul_i16",
      "num::verify::checked_unchecked_mul_i8",
      "num::verify::checked_unchecked_mul_u16",
      "num::verify::checked_unchecked_mul_u8",
      "num::verify::checked_unchecked_neg_i128",
      "num::verify::checked_unchecked_neg_i16",
      "num::verify::checked_unchecked_neg_i32",
      "num::verify::checked_unchecked_neg_i64",
      "num::verify::checked_unchecked_neg_i8",
      "num::verify::checked_unchecked_neg_isize",
      "num::verify::checked_unchecked_shl_i128",
      "num::verify::checked_unchecked_shl_i16",
      "num::verify::checked_unchecked_shl_i32",
      "num::verify::checked_unchecked_shl_i64",
      "num::verify::checked_unchecked_shl_i8",
      "num::verify::checked_unchecked_shl_isize",
      "num::verify::checked_unchecked_shl_u128",
      "num::verify::checked_unchecked_shl_u16",
      "num::verify::checked_unchecked_shl_u32",
      "num::verify::checked_unchecked_shl_u64",
      "num::verify::checked_unchecked_shl_u8",
      "num::verify::checked_unchecked_shl_usize",
      "num::verify::checked_unchecked_shr_i128",
      "num::verify::checked_unchecked_shr_i16",
      "num::verify::checked_unchecked_shr_i32",
      "num::verify::checked_unchecked_shr_i64",
      "num::verify::checked_unchecked_shr_i8",
      "num::verify::checked_unchecked_shr_isize",
      "num::verify::checked_unchecked_shr_u128",
      "num::verify::checked_unchecked_shr_u16",
      "num::verify::checked_unchecked_shr_u32",
      "num::verify::checked_unchecked_shr_u64",
      "num::verify::checked_unchecked_shr_u8",
      "num::verify::checked_unchecked_shr_usize",
      "num::verify::checked_unchecked_sub_i128",
      "num::verify::checked_unchecked_sub_i16",
      "num::verify::checked_unchecked_sub_i32",
      "num::verify::checked_unchecked_sub_i64",
      "num::verify::checked_unchecked_sub_i8",
      "num::verify::checked_unchecked_sub_isize",
      "num::verify::checked_unchecked_sub_u128",
      "num::verify::checked_unchecked_sub_u16",
      "num::verify::checked_unchecked_sub_u32",
      "num::verify::checked_unchecked_sub_u64",
      "num::verify::checked_unchecked_sub_u8",
      "num::verify::checked_unchecked_sub_usize",
      "num::verify::checked_wrapping_shl_i128",
      "num::verify::checked_wrapping_shl_i16",
      "num::verify::checked_wrapping_shl_i32",
      "num::verify::checked_wrapping_shl_i64",
      "num::verify::checked_wrapping_shl_i8",
      "num::verify::checked_wrapping_shl_isize",
      "num::verify::checked_wrapping_shl_u128",
      "num::verify::checked_wrapping_shl_u16",
      "num::verify::checked_wrapping_shl_u32",
      "num::verify::checked_wrapping_shl_u64",
      "num::verify::checked_wrapping_shl_u8",
      "num::verify::checked_wrapping_shl_usize",
      "num::verify::checked_wrapping_shr_i128",
      "num::verify::checked_wrapping_shr_i16",
      "num::verify::checked_wrapping_shr_i32",
      "num::verify::checked_wrapping_shr_i64",
      "num::verify::checked_wrapping_shr_i8",
      "num::verify::checked_wrapping_shr_isize",
      "num::verify::checked_wrapping_shr_u128",
      "num::verify::checked_wrapping_shr_u16",
      "num::verify::checked_wrapping_shr_u32",
      "num::verify::checked_wrapping_shr_u64",
      "num::verify::checked_wrapping_shr_u8",
      "num::verify::checked_wrapping_shr_usize",
      "num::verify::unchecked_mul_i128_edge_neg",
      "num::verify::unchecked_mul_i128_edge_pos",
      "num::verify::unchecked_mul_i128_large_neg",
      "num::verify::unchecked_mul_i128_large_pos",
      "num::verify::unchecked_mul_i128_small",
      "num::verify::unchecked_mul_i32_edge_neg",
      "num::verify::unchecked_mul_i32_edge_pos",
      "num::verify::unchecked_mul_i32_large_neg",
      "num::verify::unchecked_mul_i32_large_pos",
      "num::verify::unchecked_mul_i32_small",
      "num::verify::unchecked_mul_i64_edge_neg",
      "num::verify::unchecked_mul_i64_edge_pos",
      "num::verify::unchecked_mul_i64_large_neg",
      "num::verify::unchecked_mul_i64_large_pos",
      "num::verify::unchecked_mul_i64_small",
      "num::verify::unchecked_mul_isize_edge_neg",
      "num::verify::unchecked_mul_isize_edge_pos",
      "num::verify::unchecked_mul_isize_large_neg",
      "num::verify::unchecked_mul_isize_large_pos",
      "num::verify::unchecked_mul_isize_small",
      "num::verify::unchecked_mul_u128_edge",
      "num::verify::unchecked_mul_u128_large",
      "num::verify::unchecked_mul_u128_small",
      "num::verify::unchecked_mul_u32_edge",
      "num::verify::unchecked_mul_u32_large",
      "num::verify::unchecked_mul_u32_small",
      "num::verify::unchecked_mul_u64_edge",
      "num::verify::unchecked_mul_u64_large",
      "num::verify::unchecked_mul_u64_small",
      "num::verify::unchecked_mul_usize_edge",
      "num::verify::unchecked_mul_usize_large",
      "num::verify::unchecked_mul_usize_small"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs": [
      "num::nonzero::NonZero::<i128>::count_ones",
      "num::nonzero::NonZero::<i128>::rotate_left",
      "num::nonzero::NonZero::<i128>::rotate_right",
      "num::nonzero::NonZero::<i128>::unchecked_mul",
      "num::nonzero::NonZero::<i16>::count_ones",
      "num::nonzero::NonZero::<i16>::rotate_left",
      "num::nonzero::NonZero::<i16>::rotate_right",
      "num::nonzero::NonZero::<i16>::unchecked_mul",
      "num::nonzero::NonZero::<i32>::count_ones",
      "num::nonzero::NonZero::<i32>::rotate_left",
      "num::nonzero::NonZero::<i32>::rotate_right",
      "num::nonzero::NonZero::<i32>::unchecked_mul",
      "num::nonzero::NonZero::<i64>::count_ones",
      "num::nonzero::NonZero::<i64>::rotate_left",
      "num::nonzero::NonZero::<i64>::rotate_right",
      "num::nonzero::NonZero::<i64>::unchecked_mul",
      "num::nonzero::NonZero::<i8>::count_ones",
      "num::nonzero::NonZero::<i8>::rotate_left",
      "num::nonzero::NonZero::<i8>::rotate_right",
      "num::nonzero::NonZero::<i8>::unchecked_mul",
      "num::nonzero::NonZero::<isize>::count_ones",
      "num::nonzero::NonZero::<isize>::rotate_left",
      "num::nonzero::NonZero::<isize>::rotate_right",
      "num::nonzero::NonZero::<isize>::unchecked_mul",
      "num::nonzero::NonZero::<u128>::count_ones",
      "num::nonzero::NonZero::<u128>::rotate_left",
      "num::nonzero::NonZero::<u128>::rotate_right",
      "num::nonzero::NonZero::<u128>::unchecked_add",
      "num::nonzero::NonZero::<u128>::unchecked_mul",
      "num::nonzero::NonZero::<u16>::count_ones",
      "num::nonzero::NonZero::<u16>::rotate_left",
      "num::nonzero::NonZero::<u16>::rotate_right",
      "num::nonzero::NonZero::<u16>::unchecked_add",
      "num::nonzero::NonZero::<u16>::unchecked_mul",
      "num::nonzero::NonZero::<u32>::count_ones",
      "num::nonzero::NonZero::<u32>::rotate_left",
      "num::nonzero::NonZero::<u32>::rotate_right",
      "num::nonzero::NonZero::<u32>::unchecked_add",
      "num::nonzero::NonZero::<u32>::unchecked_mul",
      "num::nonzero::NonZero::<u64>::count_ones",
      "num::nonzero::NonZero::<u64>::rotate_left",
      "num::nonzero::NonZero::<u64>::rotate_right",
      "num::nonzero::NonZero::<u64>::unchecked_add",
      "num::nonzero::NonZero::<u64>::unchecked_mul",
      "num::nonzero::NonZero::<u8>::count_ones",
      "num::nonzero::NonZero::<u8>::rotate_left",
      "num::nonzero::NonZero::<u8>::rotate_right",
      "num::nonzero::NonZero::<u8>::unchecked_add",
      "num::nonzero::NonZero::<u8>::unchecked_mul",
      "num::nonzero::NonZero::<usize>::count_ones",
      "num::nonzero::NonZero::<usize>::rotate_left",
      "num::nonzero::NonZero::<usize>::rotate_right",
      "num::nonzero::NonZero::<usize>::unchecked_add",
      "num::nonzero::NonZero::<usize>::unchecked_mul",
      "num::nonzero::verify::check_mul_i128_edge_neg",
      "num::nonzero::verify::check_mul_i128_edge_pos",
      "num::nonzero::verify::check_mul_i128_large_neg",
      "num::nonzero::verify::check_mul_i128_large_pos",
      "num::nonzero::verify::check_mul_i128_small",
      "num::nonzero::verify::check_mul_i32_edge_neg",
      "num::nonzero::verify::check_mul_i32_edge_pos",
      "num::nonzero::verify::check_mul_i32_large_neg",
      "num::nonzero::verify::check_mul_i32_large_pos",
      "num::nonzero::verify::check_mul_i32_small",
      "num::nonzero::verify::check_mul_i64_edge_neg",
      "num::nonzero::verify::check_mul_i64_edge_pos",
      "num::nonzero::verify::check_mul_i64_large_neg",
      "num::nonzero::verify::check_mul_i64_large_pos",
      "num::nonzero::verify::check_mul_i64_small",
      "num::nonzero::verify::check_mul_isize_edge_neg",
      "num::nonzero::verify::check_mul_isize_edge_pos",
      "num::nonzero::verify::check_mul_isize_large_neg",
      "num::nonzero::verify::check_mul_isize_large_pos",
      "num::nonzero::verify::check_mul_isize_small",
      "num::nonzero::verify::check_mul_u128_edge",
      "num::nonzero::verify::check_mul_u128_large",
      "num::nonzero::verify::check_mul_u128_small",
      "num::nonzero::verify::check_mul_u32_edge",
      "num::nonzero::verify::check_mul_u32_large",
      "num::nonzero::verify::check_mul_u32_small",
      "num::nonzero::verify::check_mul_u64_edge",
      "num::nonzero::verify::check_mul_u64_large",
      "num::nonzero::verify::check_mul_u64_small",
      "num::nonzero::verify::check_mul_usize_edge",
      "num::nonzero::verify::check_mul_usize_large",
      "num::nonzero::verify::check_mul_usize_small",
      "num::nonzero::verify::nonzero_check_mul_for_i16",
      "num::nonzero::verify::nonzero_check_mul_for_i8",
      "num::nonzero::verify::nonzero_check_mul_for_u16",
      "num::nonzero::verify::nonzero_check_mul_for_u8",
      "num::nonzero::verify::nonzero_check_new_unchecked_for_128",
      "num::nonzero::verify::nonzero_check_new_unchecked_for_16",
      "num::nonzero::verify::nonzero_check_new_unchecked_for_32",
      "num::nonzero::verify::nonzero_check_new_unchecked_for_64",
      "num::nonzero::verify::nonzero_check_new_unchecked_for_i8",
      "num::nonzero::verify::nonzero_check_new_unchecked_for_isize",
      "num::nonzero::verify::nonzero_check_new_unchecked_for_u128",
      "num::nonzero::verify::nonzero_check_new_unchecked_for_u16",
      "num::nonzero::verify::nonzero_check_new_unchecked_for_u32",
      "num::nonzero::verify::nonzero_check_new_unchecked_for_u64",
      "num::nonzero::verify::nonzero_check_new_unchecked_for_u8",
      "num::nonzero::verify::nonzero_check_new_unchecked_for_usize",
      "num::nonzero::verify::nonzero_check_unchecked_add_for_u128",
      "num::nonzero::verify::nonzero_check_unchecked_add_for_u16",
      "num::nonzero::verify::nonzero_check_unchecked_add_for_u32",
      "num::nonzero::verify::nonzero_check_unchecked_add_for_u64",
      "num::nonzero::verify::nonzero_check_unchecked_add_for_u8",
      "num::nonzero::verify::nonzero_check_unchecked_add_for_usize"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs": [
      "num::<impl u128>::unchecked_add",
      "num::<impl u128>::unchecked_disjoint_bitor",
      "num::<impl u128>::unchecked_mul",
      "num::<impl u128>::unchecked_shl",
      "num::<impl u128>::unchecked_shr",
      "num::<impl u128>::unchecked_sub",
      "num::<impl u128>::wrapping_shl",
      "num::<impl u128>::wrapping_shr",
      "num::<impl u16>::unchecked_add",
      "num::<impl u16>::unchecked_disjoint_bitor",
      "num::<impl u16>::unchecked_mul",
      "num::<impl u16>::unchecked_shl",
      "num::<impl u16>::unchecked_shr",
      "num::<impl u16>::unchecked_sub",
      "num::<impl u16>::wrapping_shl",
      "num::<impl u16>::wrapping_shr",
      "num::<impl u32>::unchecked_add",
      "num::<impl u32>::unchecked_disjoint_bitor",
      "num::<impl u32>::unchecked_mul",
      "num::<impl u32>::unchecked_shl",
      "num::<impl u32>::unchecked_shr",
      "num::<impl u32>::unchecked_sub",
      "num::<impl u32>::wrapping_shl",
      "num::<impl u32>::wrapping_shr",
      "num::<impl u64>::unchecked_add",
      "num::<impl u64>::unchecked_disjoint_bitor",
      "num::<impl u64>::unchecked_mul",
      "num::<impl u64>::unchecked_shl",
      "num::<impl u64>::unchecked_shr",
      "num::<impl u64>::unchecked_sub",
      "num::<impl u64>::wrapping_shl",
      "num::<impl u64>::wrapping_shr",
      "num::<impl u8>::unchecked_add",
      "num::<impl u8>::unchecked_disjoint_bitor",
      "num::<impl u8>::unchecked_mul",
      "num::<impl u8>::unchecked_shl",
      "num::<impl u8>::unchecked_shr",
      "num::<impl u8>::unchecked_sub",
      "num::<impl u8>::wrapping_shl",
      "num::<impl u8>::wrapping_shr",
      "num::<impl usize>::unchecked_add",
      "num::<impl usize>::unchecked_disjoint_bitor",
      "num::<impl usize>::unchecked_mul",
      "num::<impl usize>::unchecked_shl",
      "num::<impl usize>::unchecked_shr",
      "num::<impl usize>::unchecked_sub",
      "num::<impl usize>::wrapping_shl",
      "num::<impl usize>::wrapping_shr"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/alignment.rs": [
      "ptr::alignment::Alignment::as_nonzero",
      "ptr::alignment::Alignment::as_usize",
      "ptr::alignment::Alignment::log2",
      "ptr::alignment::Alignment::mask",
      "ptr::alignment::Alignment::new",
      "ptr::alignment::Alignment::new_unchecked"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/const_ptr.rs": [
      "ptr::const_ptr::verify::check_const_add_i128",
      "ptr::const_ptr::verify::check_const_add_i16",
      "ptr::const_ptr::verify::check_const_add_i32",
      "ptr::const_ptr::verify::check_const_add_i64",
      "ptr::const_ptr::verify::check_const_add_i8",
      "ptr::const_ptr::verify::check_const_add_isize",
      "ptr::const_ptr::verify::check_const_add_slice_i128",
      "ptr::const_ptr::verify::check_const_add_slice_i16",
      "ptr::const_ptr::verify::check_const_add_slice_i32",
      "ptr::const_ptr::verify::check_const_add_slice_i64",
      "ptr::const_ptr::verify::check_const_add_slice_i8",
      "ptr::const_ptr::verify::check_const_add_slice_isize",
      "ptr::const_ptr::verify::check_const_add_slice_tuple_1",
      "ptr::const_ptr::verify::check_const_add_slice_tuple_2",
      "ptr::const_ptr::verify::check_const_add_slice_tuple_3",
      "ptr::const_ptr::verify::check_const_add_slice_tuple_4",
      "ptr::const_ptr::verify::check_const_add_slice_u128",
      "ptr::const_ptr::verify::check_const_add_slice_u16",
      "ptr::const_ptr::verify::check_const_add_slice_u32",
      "ptr::const_ptr::verify::check_const_add_slice_u64",
      "ptr::const_ptr::verify::check_const_add_slice_u8",
      "ptr::const_ptr::verify::check_const_add_slice_usize",
      "ptr::const_ptr::verify::check_const_add_tuple_1",
      "ptr::const_ptr::verify::check_const_add_tuple_2",
      "ptr::const_ptr::verify::check_const_add_tuple_3",
      "ptr::const_ptr::verify::check_const_add_tuple_4",
      "ptr::const_ptr::verify::check_const_add_u128",
      "ptr::const_ptr::verify::check_const_add_u16",
      "ptr::const_ptr::verify::check_const_add_u32",
      "ptr::const_ptr::verify::check_const_add_u64",
      "ptr::const_ptr::verify::check_const_add_u8",
      "ptr::const_ptr::verify::check_const_add_unit",
      "ptr::const_ptr::verify::check_const_add_usize",
      "ptr::const_ptr::verify::check_const_byte_add_dyn",
      "ptr::const_ptr::verify::check_const_byte_add_i128",
      "ptr::const_ptr::verify::check_const_byte_add_i128_slice",
      "ptr::const_ptr::verify::check_const_byte_add_i16",
      "ptr::const_ptr::verify::check_const_byte_add_i16_slice",
      "ptr::const_ptr::verify::check_const_byte_add_i32",
      "ptr::const_ptr::verify::check_const_byte_add_i32_slice",
      "ptr::const_ptr::verify::check_const_byte_add_i64",
      "ptr::const_ptr::verify::check_const_byte_add_i64_slice",
      "ptr::const_ptr::verify::check_const_byte_add_i8",
      "ptr::const_ptr::verify::check_const_byte_add_i8_slice",
      "ptr::const_ptr::verify::check_const_byte_add_isize",
      "ptr::const_ptr::verify::check_const_byte_add_isize_slice",
      "ptr::const_ptr::verify::check_const_byte_add_tuple_1",
      "ptr::const_ptr::verify::check_const_byte_add_tuple_2",
      "ptr::const_ptr::verify::check_const_byte_add_tuple_3",
      "ptr::const_ptr::verify::check_const_byte_add_tuple_4",
      "ptr::const_ptr::verify::check_const_byte_add_u128",
      "ptr::const_ptr::verify::check_const_byte_add_u128_slice",
      "ptr::const_ptr::verify::check_const_byte_add_u16",
      "ptr::const_ptr::verify::check_const_byte_add_u16_slice",
      "ptr::const_ptr::verify::check_const_byte_add_u32",
      "ptr::const_ptr::verify::check_const_byte_add_u32_slice",
      "ptr::const_ptr::verify::check_const_byte_add_u64",
      "ptr::const_ptr::verify::check_const_byte_add_u64_slice",
      "ptr::const_ptr::verify::check_const_byte_add_u8",
      "ptr::const_ptr::verify::check_const_byte_add_u8_slice",
      "ptr::const_ptr::verify::check_const_byte_add_unit",
      "ptr::const_ptr::verify::check_const_byte_add_usize",
      "ptr::const_ptr::verify::check_const_byte_add_usize_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_cast_unit",
      "ptr::const_ptr::verify::check_const_byte_offset_dyn",
      "ptr::const_ptr::verify::check_const_byte_offset_from_dyn",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i128",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i128_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i128_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i16",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i16_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i16_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i32",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i32_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i32_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i64",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i64_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i64_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i8",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i8_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_i8_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_from_isize",
      "ptr::const_ptr::verify::check_const_byte_offset_from_isize_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_isize_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_1",
      "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_1_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_2",
      "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_2_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_3",
      "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_3_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_4",
      "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_4_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u128",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u128_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u128_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u16",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u16_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u16_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u32",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u32_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u32_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u64",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u64_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u64_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u8",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u8_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_u8_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_from_unit",
      "ptr::const_ptr::verify::check_const_byte_offset_from_usize",
      "ptr::const_ptr::verify::check_const_byte_offset_from_usize_arr",
      "ptr::const_ptr::verify::check_const_byte_offset_from_usize_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_i128",
      "ptr::const_ptr::verify::check_const_byte_offset_i128_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_i16",
      "ptr::const_ptr::verify::check_const_byte_offset_i16_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_i32",
      "ptr::const_ptr::verify::check_const_byte_offset_i32_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_i64",
      "ptr::const_ptr::verify::check_const_byte_offset_i64_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_i8",
      "ptr::const_ptr::verify::check_const_byte_offset_i8_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_isize",
      "ptr::const_ptr::verify::check_const_byte_offset_isize_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_tuple_1",
      "ptr::const_ptr::verify::check_const_byte_offset_tuple_2",
      "ptr::const_ptr::verify::check_const_byte_offset_tuple_3",
      "ptr::const_ptr::verify::check_const_byte_offset_tuple_4",
      "ptr::const_ptr::verify::check_const_byte_offset_u128",
      "ptr::const_ptr::verify::check_const_byte_offset_u128_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_u16",
      "ptr::const_ptr::verify::check_const_byte_offset_u16_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_u32",
      "ptr::const_ptr::verify::check_const_byte_offset_u32_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_u64",
      "ptr::const_ptr::verify::check_const_byte_offset_u64_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_u8",
      "ptr::const_ptr::verify::check_const_byte_offset_u8_slice",
      "ptr::const_ptr::verify::check_const_byte_offset_unit",
      "ptr::const_ptr::verify::check_const_byte_offset_unit_invalid_count",
      "ptr::const_ptr::verify::check_const_byte_offset_usize",
      "ptr::const_ptr::verify::check_const_byte_offset_usize_slice",
      "ptr::const_ptr::verify::check_const_byte_sub_dyn",
      "ptr::const_ptr::verify::check_const_byte_sub_i128",
      "ptr::const_ptr::verify::check_const_byte_sub_i128_slice",
      "ptr::const_ptr::verify::check_const_byte_sub_i16",
      "ptr::const_ptr::verify::check_const_byte_sub_i16_slice",
      "ptr::const_ptr::verify::check_const_byte_sub_i32",
      "ptr::const_ptr::verify::check_const_byte_sub_i32_slice",
      "ptr::const_ptr::verify::check_const_byte_sub_i64",
      "ptr::const_ptr::verify::check_const_byte_sub_i64_slice",
      "ptr::const_ptr::verify::check_const_byte_sub_i8",
      "ptr::const_ptr::verify::check_const_byte_sub_i8_slice",
      "ptr::const_ptr::verify::check_const_byte_sub_isize",
      "ptr::const_ptr::verify::check_const_byte_sub_isize_slice",
      "ptr::const_ptr::verify::check_const_byte_sub_tuple_1",
      "ptr::const_ptr::verify::check_const_byte_sub_tuple_2",
      "ptr::const_ptr::verify::check_const_byte_sub_tuple_3",
      "ptr::const_ptr::verify::check_const_byte_sub_tuple_4",
      "ptr::const_ptr::verify::check_const_byte_sub_u128",
      "ptr::const_ptr::verify::check_const_byte_sub_u128_slice",
      "ptr::const_ptr::verify::check_const_byte_sub_u16",
      "ptr::const_ptr::verify::check_const_byte_sub_u16_slice",
      "ptr::const_ptr::verify::check_const_byte_sub_u32",
      "ptr::const_ptr::verify::check_const_byte_sub_u32_slice",
      "ptr::const_ptr::verify::check_const_byte_sub_u64",
      "ptr::const_ptr::verify::check_const_byte_sub_u64_slice",
      "ptr::const_ptr::verify::check_const_byte_sub_u8",
      "ptr::const_ptr::verify::check_const_byte_sub_u8_slice",
      "ptr::const_ptr::verify::check_const_byte_sub_unit",
      "ptr::const_ptr::verify::check_const_byte_sub_usize",
      "ptr::const_ptr::verify::check_const_byte_sub_usize_slice",
      "ptr::const_ptr::verify::check_const_offset_from_i128",
      "ptr::const_ptr::verify::check_const_offset_from_i128_arr",
      "ptr::const_ptr::verify::check_const_offset_from_i16",
      "ptr::const_ptr::verify::check_const_offset_from_i16_arr",
      "ptr::const_ptr::verify::check_const_offset_from_i32",
      "ptr::const_ptr::verify::check_const_offset_from_i32_arr",
      "ptr::const_ptr::verify::check_const_offset_from_i64",
      "ptr::const_ptr::verify::check_const_offset_from_i64_arr",
      "ptr::const_ptr::verify::check_const_offset_from_i8",
      "ptr::const_ptr::verify::check_const_offset_from_i8_arr",
      "ptr::const_ptr::verify::check_const_offset_from_isize",
      "ptr::const_ptr::verify::check_const_offset_from_isize_arr",
      "ptr::const_ptr::verify::check_const_offset_from_tuple_1",
      "ptr::const_ptr::verify::check_const_offset_from_tuple_1_arr",
      "ptr::const_ptr::verify::check_const_offset_from_tuple_2",
      "ptr::const_ptr::verify::check_const_offset_from_tuple_2_arr",
      "ptr::const_ptr::verify::check_const_offset_from_tuple_3",
      "ptr::const_ptr::verify::check_const_offset_from_tuple_3_arr",
      "ptr::const_ptr::verify::check_const_offset_from_tuple_4",
      "ptr::const_ptr::verify::check_const_offset_from_tuple_4_arr",
      "ptr::const_ptr::verify::check_const_offset_from_u128",
      "ptr::const_ptr::verify::check_const_offset_from_u128_arr",
      "ptr::const_ptr::verify::check_const_offset_from_u16",
      "ptr::const_ptr::verify::check_const_offset_from_u16_arr",
      "ptr::const_ptr::verify::check_const_offset_from_u32",
      "ptr::const_ptr::verify::check_const_offset_from_u32_arr",
      "ptr::const_ptr::verify::check_const_offset_from_u64",
      "ptr::const_ptr::verify::check_const_offset_from_u64_arr",
      "ptr::const_ptr::verify::check_const_offset_from_u8",
      "ptr::const_ptr::verify::check_const_offset_from_u8_arr",
      "ptr::const_ptr::verify::check_const_offset_from_unit",
      "ptr::const_ptr::verify::check_const_offset_from_usize",
      "ptr::const_ptr::verify::check_const_offset_from_usize_arr",
      "ptr::const_ptr::verify::check_const_offset_i128",
      "ptr::const_ptr::verify::check_const_offset_i16",
      "ptr::const_ptr::verify::check_const_offset_i32",
      "ptr::const_ptr::verify::check_const_offset_i64",
      "ptr::const_ptr::verify::check_const_offset_i8",
      "ptr::const_ptr::verify::check_const_offset_isize",
      "ptr::const_ptr::verify::check_const_offset_slice_i128",
      "ptr::const_ptr::verify::check_const_offset_slice_i16",
      "ptr::const_ptr::verify::check_const_offset_slice_i32",
      "ptr::const_ptr::verify::check_const_offset_slice_i64",
      "ptr::const_ptr::verify::check_const_offset_slice_i8",
      "ptr::const_ptr::verify::check_const_offset_slice_isize",
      "ptr::const_ptr::verify::check_const_offset_slice_tuple_1",
      "ptr::const_ptr::verify::check_const_offset_slice_tuple_2",
      "ptr::const_ptr::verify::check_const_offset_slice_tuple_3",
      "ptr::const_ptr::verify::check_const_offset_slice_tuple_4",
      "ptr::const_ptr::verify::check_const_offset_slice_u128",
      "ptr::const_ptr::verify::check_const_offset_slice_u16",
      "ptr::const_ptr::verify::check_const_offset_slice_u32",
      "ptr::const_ptr::verify::check_const_offset_slice_u64",
      "ptr::const_ptr::verify::check_const_offset_slice_u8",
      "ptr::const_ptr::verify::check_const_offset_slice_usize",
      "ptr::const_ptr::verify::check_const_offset_tuple_1",
      "ptr::const_ptr::verify::check_const_offset_tuple_2",
      "ptr::const_ptr::verify::check_const_offset_tuple_3",
      "ptr::const_ptr::verify::check_const_offset_tuple_4",
      "ptr::const_ptr::verify::check_const_offset_u128",
      "ptr::const_ptr::verify::check_const_offset_u16",
      "ptr::const_ptr::verify::check_const_offset_u32",
      "ptr::const_ptr::verify::check_const_offset_u64",
      "ptr::const_ptr::verify::check_const_offset_u8",
      "ptr::const_ptr::verify::check_const_offset_unit",
      "ptr::const_ptr::verify::check_const_offset_usize",
      "ptr::const_ptr::verify::check_const_sub_i128",
      "ptr::const_ptr::verify::check_const_sub_i16",
      "ptr::const_ptr::verify::check_const_sub_i32",
      "ptr::const_ptr::verify::check_const_sub_i64",
      "ptr::const_ptr::verify::check_const_sub_i8",
      "ptr::const_ptr::verify::check_const_sub_isize",
      "ptr::const_ptr::verify::check_const_sub_slice_i128",
      "ptr::const_ptr::verify::check_const_sub_slice_i16",
      "ptr::const_ptr::verify::check_const_sub_slice_i32",
      "ptr::const_ptr::verify::check_const_sub_slice_i64",
      "ptr::const_ptr::verify::check_const_sub_slice_i8",
      "ptr::const_ptr::verify::check_const_sub_slice_isize",
      "ptr::const_ptr::verify::check_const_sub_slice_tuple_1",
      "ptr::const_ptr::verify::check_const_sub_slice_tuple_2",
      "ptr::const_ptr::verify::check_const_sub_slice_tuple_3",
      "ptr::const_ptr::verify::check_const_sub_slice_tuple_4",
      "ptr::const_ptr::verify::check_const_sub_slice_u128",
      "ptr::const_ptr::verify::check_const_sub_slice_u16",
      "ptr::const_ptr::verify::check_const_sub_slice_u32",
      "ptr::const_ptr::verify::check_const_sub_slice_u64",
      "ptr::const_ptr::verify::check_const_sub_slice_u8",
      "ptr::const_ptr::verify::check_const_sub_slice_usize",
      "ptr::const_ptr::verify::check_const_sub_tuple_1",
      "ptr::const_ptr::verify::check_const_sub_tuple_2",
      "ptr::const_ptr::verify::check_const_sub_tuple_3",
      "ptr::const_ptr::verify::check_const_sub_tuple_4",
      "ptr::const_ptr::verify::check_const_sub_u128",
      "ptr::const_ptr::verify::check_const_sub_u16",
      "ptr::const_ptr::verify::check_const_sub_u32",
      "ptr::const_ptr::verify::check_const_sub_u64",
      "ptr::const_ptr::verify::check_const_sub_u8",
      "ptr::const_ptr::verify::check_const_sub_unit",
      "ptr::const_ptr::verify::check_const_sub_usize"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mod.rs": [
      "ptr::align_offset::mod_inv",
      "ptr::align_offset::{closure#0}::{closure#1}::{closure#1}::mod_inv",
      "ptr::align_offset::{closure#2}::{closure#1}::mod_inv",
      "ptr::align_offset::{closure#3}::{closure#0}::mod_inv",
      "ptr::verify::check_align_offset_4096",
      "ptr::verify::check_align_offset_5",
      "ptr::verify::check_align_offset_u128",
      "ptr::verify::check_align_offset_u16",
      "ptr::verify::check_align_offset_u32",
      "ptr::verify::check_align_offset_u64",
      "ptr::verify::check_align_offset_u8",
      "ptr::verify::check_align_offset_zst",
      "ptr::verify::check_read_u128"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mut_ptr.rs": [
      "ptr::mut_ptr::verify::check_mut_add_i128",
      "ptr::mut_ptr::verify::check_mut_add_i16",
      "ptr::mut_ptr::verify::check_mut_add_i32",
      "ptr::mut_ptr::verify::check_mut_add_i64",
      "ptr::mut_ptr::verify::check_mut_add_i8",
      "ptr::mut_ptr::verify::check_mut_add_isize",
      "ptr::mut_ptr::verify::check_mut_add_slice_i128",
      "ptr::mut_ptr::verify::check_mut_add_slice_i16",
      "ptr::mut_ptr::verify::check_mut_add_slice_i32",
      "ptr::mut_ptr::verify::check_mut_add_slice_i64",
      "ptr::mut_ptr::verify::check_mut_add_slice_i8",
      "ptr::mut_ptr::verify::check_mut_add_slice_isize",
      "ptr::mut_ptr::verify::check_mut_add_slice_tuple_1",
      "ptr::mut_ptr::verify::check_mut_add_slice_tuple_2",
      "ptr::mut_ptr::verify::check_mut_add_slice_tuple_3",
      "ptr::mut_ptr::verify::check_mut_add_slice_tuple_4",
      "ptr::mut_ptr::verify::check_mut_add_slice_u128",
      "ptr::mut_ptr::verify::check_mut_add_slice_u16",
      "ptr::mut_ptr::verify::check_mut_add_slice_u32",
      "ptr::mut_ptr::verify::check_mut_add_slice_u64",
      "ptr::mut_ptr::verify::check_mut_add_slice_u8",
      "ptr::mut_ptr::verify::check_mut_add_slice_usize",
      "ptr::mut_ptr::verify::check_mut_add_tuple_1",
      "ptr::mut_ptr::verify::check_mut_add_tuple_2",
      "ptr::mut_ptr::verify::check_mut_add_tuple_3",
      "ptr::mut_ptr::verify::check_mut_add_tuple_4",
      "ptr::mut_ptr::verify::check_mut_add_u128",
      "ptr::mut_ptr::verify::check_mut_add_u16",
      "ptr::mut_ptr::verify::check_mut_add_u32",
      "ptr::mut_ptr::verify::check_mut_add_u64",
      "ptr::mut_ptr::verify::check_mut_add_unit",
      "ptr::mut_ptr::verify::check_mut_add_usize",
      "ptr::mut_ptr::verify::check_mut_byte_add_dyn",
      "ptr::mut_ptr::verify::check_mut_byte_add_i128",
      "ptr::mut_ptr::verify::check_mut_byte_add_i128_slice",
      "ptr::mut_ptr::verify::check_mut_byte_add_i16",
      "ptr::mut_ptr::verify::check_mut_byte_add_i16_slice",
      "ptr::mut_ptr::verify::check_mut_byte_add_i32",
      "ptr::mut_ptr::verify::check_mut_byte_add_i32_slice",
      "ptr::mut_ptr::verify::check_mut_byte_add_i64",
      "ptr::mut_ptr::verify::check_mut_byte_add_i64_slice",
      "ptr::mut_ptr::verify::check_mut_byte_add_i8",
      "ptr::mut_ptr::verify::check_mut_byte_add_i8_slice",
      "ptr::mut_ptr::verify::check_mut_byte_add_isize",
      "ptr::mut_ptr::verify::check_mut_byte_add_isize_slice",
      "ptr::mut_ptr::verify::check_mut_byte_add_tuple_1",
      "ptr::mut_ptr::verify::check_mut_byte_add_tuple_2",
      "ptr::mut_ptr::verify::check_mut_byte_add_tuple_3",
      "ptr::mut_ptr::verify::check_mut_byte_add_tuple_4",
      "ptr::mut_ptr::verify::check_mut_byte_add_u128",
      "ptr::mut_ptr::verify::check_mut_byte_add_u128_slice",
      "ptr::mut_ptr::verify::check_mut_byte_add_u16",
      "ptr::mut_ptr::verify::check_mut_byte_add_u16_slice",
      "ptr::mut_ptr::verify::check_mut_byte_add_u32",
      "ptr::mut_ptr::verify::check_mut_byte_add_u32_slice",
      "ptr::mut_ptr::verify::check_mut_byte_add_u64",
      "ptr::mut_ptr::verify::check_mut_byte_add_u64_slice",
      "ptr::mut_ptr::verify::check_mut_byte_add_u8",
      "ptr::mut_ptr::verify::check_mut_byte_add_u8_slice",
      "ptr::mut_ptr::verify::check_mut_byte_add_unit",
      "ptr::mut_ptr::verify::check_mut_byte_add_usize",
      "ptr::mut_ptr::verify::check_mut_byte_add_usize_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_cast_unit",
      "ptr::mut_ptr::verify::check_mut_byte_offset_dyn",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_dyn",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i128",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i128_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i128_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i16",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i16_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i16_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i32",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i32_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i32_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i64",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i64_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i64_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i8",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i8_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_i8_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_isize",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_isize_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_isize_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_1",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_1_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_2",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_2_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_3",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_3_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_4",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_4_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u128",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u128_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u128_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u16",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u16_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u16_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u32",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u32_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u32_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u64",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u64_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u64_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u8",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u8_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_u8_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_unit",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_usize",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_usize_arr",
      "ptr::mut_ptr::verify::check_mut_byte_offset_from_usize_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_i128",
      "ptr::mut_ptr::verify::check_mut_byte_offset_i128_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_i16",
      "ptr::mut_ptr::verify::check_mut_byte_offset_i16_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_i32",
      "ptr::mut_ptr::verify::check_mut_byte_offset_i32_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_i64",
      "ptr::mut_ptr::verify::check_mut_byte_offset_i64_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_i8",
      "ptr::mut_ptr::verify::check_mut_byte_offset_i8_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_isize",
      "ptr::mut_ptr::verify::check_mut_byte_offset_isize_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_tuple_1",
      "ptr::mut_ptr::verify::check_mut_byte_offset_tuple_2",
      "ptr::mut_ptr::verify::check_mut_byte_offset_tuple_3",
      "ptr::mut_ptr::verify::check_mut_byte_offset_tuple_4",
      "ptr::mut_ptr::verify::check_mut_byte_offset_u128",
      "ptr::mut_ptr::verify::check_mut_byte_offset_u128_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_u16",
      "ptr::mut_ptr::verify::check_mut_byte_offset_u16_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_u32",
      "ptr::mut_ptr::verify::check_mut_byte_offset_u32_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_u64",
      "ptr::mut_ptr::verify::check_mut_byte_offset_u64_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_u8",
      "ptr::mut_ptr::verify::check_mut_byte_offset_u8_slice",
      "ptr::mut_ptr::verify::check_mut_byte_offset_unit",
      "ptr::mut_ptr::verify::check_mut_byte_offset_unit_invalid_count",
      "ptr::mut_ptr::verify::check_mut_byte_offset_usize",
      "ptr::mut_ptr::verify::check_mut_byte_offset_usize_slice",
      "ptr::mut_ptr::verify::check_mut_byte_sub_dyn",
      "ptr::mut_ptr::verify::check_mut_byte_sub_i128",
      "ptr::mut_ptr::verify::check_mut_byte_sub_i128_slice",
      "ptr::mut_ptr::verify::check_mut_byte_sub_i16",
      "ptr::mut_ptr::verify::check_mut_byte_sub_i16_slice",
      "ptr::mut_ptr::verify::check_mut_byte_sub_i32",
      "ptr::mut_ptr::verify::check_mut_byte_sub_i32_slice",
      "ptr::mut_ptr::verify::check_mut_byte_sub_i64",
      "ptr::mut_ptr::verify::check_mut_byte_sub_i64_slice",
      "ptr::mut_ptr::verify::check_mut_byte_sub_i8",
      "ptr::mut_ptr::verify::check_mut_byte_sub_i8_slice",
      "ptr::mut_ptr::verify::check_mut_byte_sub_isize",
      "ptr::mut_ptr::verify::check_mut_byte_sub_isize_slice",
      "ptr::mut_ptr::verify::check_mut_byte_sub_tuple_1",
      "ptr::mut_ptr::verify::check_mut_byte_sub_tuple_2",
      "ptr::mut_ptr::verify::check_mut_byte_sub_tuple_3",
      "ptr::mut_ptr::verify::check_mut_byte_sub_tuple_4",
      "ptr::mut_ptr::verify::check_mut_byte_sub_u128",
      "ptr::mut_ptr::verify::check_mut_byte_sub_u128_slice",
      "ptr::mut_ptr::verify::check_mut_byte_sub_u16",
      "ptr::mut_ptr::verify::check_mut_byte_sub_u16_slice",
      "ptr::mut_ptr::verify::check_mut_byte_sub_u32",
      "ptr::mut_ptr::verify::check_mut_byte_sub_u32_slice",
      "ptr::mut_ptr::verify::check_mut_byte_sub_u64",
      "ptr::mut_ptr::verify::check_mut_byte_sub_u64_slice",
      "ptr::mut_ptr::verify::check_mut_byte_sub_u8",
      "ptr::mut_ptr::verify::check_mut_byte_sub_u8_slice",
      "ptr::mut_ptr::verify::check_mut_byte_sub_unit",
      "ptr::mut_ptr::verify::check_mut_byte_sub_usize",
      "ptr::mut_ptr::verify::check_mut_byte_sub_usize_slice",
      "ptr::mut_ptr::verify::check_mut_offset_from_i128",
      "ptr::mut_ptr::verify::check_mut_offset_from_i128_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_i16",
      "ptr::mut_ptr::verify::check_mut_offset_from_i16_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_i32",
      "ptr::mut_ptr::verify::check_mut_offset_from_i32_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_i64",
      "ptr::mut_ptr::verify::check_mut_offset_from_i64_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_i8",
      "ptr::mut_ptr::verify::check_mut_offset_from_i8_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_isize",
      "ptr::mut_ptr::verify::check_mut_offset_from_isize_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_tuple_1",
      "ptr::mut_ptr::verify::check_mut_offset_from_tuple_1_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_tuple_2",
      "ptr::mut_ptr::verify::check_mut_offset_from_tuple_2_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_tuple_3",
      "ptr::mut_ptr::verify::check_mut_offset_from_tuple_3_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_tuple_4",
      "ptr::mut_ptr::verify::check_mut_offset_from_tuple_4_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_u128",
      "ptr::mut_ptr::verify::check_mut_offset_from_u128_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_u16",
      "ptr::mut_ptr::verify::check_mut_offset_from_u16_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_u32",
      "ptr::mut_ptr::verify::check_mut_offset_from_u32_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_u64",
      "ptr::mut_ptr::verify::check_mut_offset_from_u64_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_u8",
      "ptr::mut_ptr::verify::check_mut_offset_from_u8_array",
      "ptr::mut_ptr::verify::check_mut_offset_from_unit",
      "ptr::mut_ptr::verify::check_mut_offset_from_usize",
      "ptr::mut_ptr::verify::check_mut_offset_from_usize_array",
      "ptr::mut_ptr::verify::check_mut_offset_i128",
      "ptr::mut_ptr::verify::check_mut_offset_i16",
      "ptr::mut_ptr::verify::check_mut_offset_i32",
      "ptr::mut_ptr::verify::check_mut_offset_i64",
      "ptr::mut_ptr::verify::check_mut_offset_i8",
      "ptr::mut_ptr::verify::check_mut_offset_isize",
      "ptr::mut_ptr::verify::check_mut_offset_slice_i128",
      "ptr::mut_ptr::verify::check_mut_offset_slice_i16",
      "ptr::mut_ptr::verify::check_mut_offset_slice_i32",
      "ptr::mut_ptr::verify::check_mut_offset_slice_i64",
      "ptr::mut_ptr::verify::check_mut_offset_slice_i8",
      "ptr::mut_ptr::verify::check_mut_offset_slice_isize",
      "ptr::mut_ptr::verify::check_mut_offset_slice_tuple_1",
      "ptr::mut_ptr::verify::check_mut_offset_slice_tuple_2",
      "ptr::mut_ptr::verify::check_mut_offset_slice_tuple_3",
      "ptr::mut_ptr::verify::check_mut_offset_slice_tuple_4",
      "ptr::mut_ptr::verify::check_mut_offset_slice_u128",
      "ptr::mut_ptr::verify::check_mut_offset_slice_u16",
      "ptr::mut_ptr::verify::check_mut_offset_slice_u32",
      "ptr::mut_ptr::verify::check_mut_offset_slice_u64",
      "ptr::mut_ptr::verify::check_mut_offset_slice_u8",
      "ptr::mut_ptr::verify::check_mut_offset_slice_usize",
      "ptr::mut_ptr::verify::check_mut_offset_tuple_1",
      "ptr::mut_ptr::verify::check_mut_offset_tuple_2",
      "ptr::mut_ptr::verify::check_mut_offset_tuple_3",
      "ptr::mut_ptr::verify::check_mut_offset_tuple_4",
      "ptr::mut_ptr::verify::check_mut_offset_u128",
      "ptr::mut_ptr::verify::check_mut_offset_u16",
      "ptr::mut_ptr::verify::check_mut_offset_u32",
      "ptr::mut_ptr::verify::check_mut_offset_u64",
      "ptr::mut_ptr::verify::check_mut_offset_unit",
      "ptr::mut_ptr::verify::check_mut_offset_usize",
      "ptr::mut_ptr::verify::check_mut_sub_i128",
      "ptr::mut_ptr::verify::check_mut_sub_i16",
      "ptr::mut_ptr::verify::check_mut_sub_i32",
      "ptr::mut_ptr::verify::check_mut_sub_i64",
      "ptr::mut_ptr::verify::check_mut_sub_i8",
      "ptr::mut_ptr::verify::check_mut_sub_isize",
      "ptr::mut_ptr::verify::check_mut_sub_slice_i128",
      "ptr::mut_ptr::verify::check_mut_sub_slice_i16",
      "ptr::mut_ptr::verify::check_mut_sub_slice_i32",
      "ptr::mut_ptr::verify::check_mut_sub_slice_i64",
      "ptr::mut_ptr::verify::check_mut_sub_slice_i8",
      "ptr::mut_ptr::verify::check_mut_sub_slice_isize",
      "ptr::mut_ptr::verify::check_mut_sub_slice_tuple_1",
      "ptr::mut_ptr::verify::check_mut_sub_slice_tuple_2",
      "ptr::mut_ptr::verify::check_mut_sub_slice_tuple_3",
      "ptr::mut_ptr::verify::check_mut_sub_slice_tuple_4",
      "ptr::mut_ptr::verify::check_mut_sub_slice_u128",
      "ptr::mut_ptr::verify::check_mut_sub_slice_u16",
      "ptr::mut_ptr::verify::check_mut_sub_slice_u32",
      "ptr::mut_ptr::verify::check_mut_sub_slice_u64",
      "ptr::mut_ptr::verify::check_mut_sub_slice_u8",
      "ptr::mut_ptr::verify::check_mut_sub_slice_usize",
      "ptr::mut_ptr::verify::check_mut_sub_tuple_1",
      "ptr::mut_ptr::verify::check_mut_sub_tuple_2",
      "ptr::mut_ptr::verify::check_mut_sub_tuple_3",
      "ptr::mut_ptr::verify::check_mut_sub_tuple_4",
      "ptr::mut_ptr::verify::check_mut_sub_u128",
      "ptr::mut_ptr::verify::check_mut_sub_u16",
      "ptr::mut_ptr::verify::check_mut_sub_u32",
      "ptr::mut_ptr::verify::check_mut_sub_u64",
      "ptr::mut_ptr::verify::check_mut_sub_unit",
      "ptr::mut_ptr::verify::check_mut_sub_usize"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs": [
      "ptr::non_null::verify::non_null_byte_add_dangling_proof",
      "ptr::non_null::verify::non_null_byte_add_proof",
      "ptr::non_null::verify::non_null_byte_offset_from_dangling_proof",
      "ptr::non_null::verify::non_null_byte_offset_from_proof",
      "ptr::non_null::verify::non_null_byte_offset_proof",
      "ptr::non_null::verify::non_null_check_add",
      "ptr::non_null::verify::non_null_check_addr",
      "ptr::non_null::verify::non_null_check_align_offset",
      "ptr::non_null::verify::non_null_check_align_offset_negative",
      "ptr::non_null::verify::non_null_check_as_mut",
      "ptr::non_null::verify::non_null_check_as_mut_ptr",
      "ptr::non_null::verify::non_null_check_as_non_null_ptr",
      "ptr::non_null::verify::non_null_check_as_ptr",
      "ptr::non_null::verify::non_null_check_as_ref",
      "ptr::non_null::verify::non_null_check_as_uninit_mut",
      "ptr::non_null::verify::non_null_check_as_uninit_ref",
      "ptr::non_null::verify::non_null_check_as_uninit_slice",
      "ptr::non_null::verify::non_null_check_as_uninit_slice_mut",
      "ptr::non_null::verify::non_null_check_byte_sub",
      "ptr::non_null::verify::non_null_check_cast",
      "ptr::non_null::verify::non_null_check_copy_from",
      "ptr::non_null::verify::non_null_check_copy_from_nonoverlapping",
      "ptr::non_null::verify::non_null_check_copy_to",
      "ptr::non_null::verify::non_null_check_copy_to_nonoverlapping",
      "ptr::non_null::verify::non_null_check_drop_in_place",
      "ptr::non_null::verify::non_null_check_from_raw_part_trait",
      "ptr::non_null::verify::non_null_check_get_unchecked_mut",
      "ptr::non_null::verify::non_null_check_is_aligned_to",
      "ptr::non_null::verify::non_null_check_map_addr",
      "ptr::non_null::verify::non_null_check_new",
      "ptr::non_null::verify::non_null_check_new_unchecked",
      "ptr::non_null::verify::non_null_check_offset",
      "ptr::non_null::verify::non_null_check_offset_from",
      "ptr::non_null::verify::non_null_check_read",
      "ptr::non_null::verify::non_null_check_read_unaligned",
      "ptr::non_null::verify::non_null_check_read_volatile",
      "ptr::non_null::verify::non_null_check_replace",
      "ptr::non_null::verify::non_null_check_slice_from_raw_parts",
      "ptr::non_null::verify::non_null_check_sub",
      "ptr::non_null::verify::non_null_check_sub_ptr",
      "ptr::non_null::verify::non_null_check_swap",
      "ptr::non_null::verify::non_null_check_to_raw_parts",
      "ptr::non_null::verify::non_null_check_with_addr",
      "ptr::non_null::verify::non_null_check_write_bytes_i128",
      "ptr::non_null::verify::non_null_check_write_bytes_i16",
      "ptr::non_null::verify::non_null_check_write_bytes_i32",
      "ptr::non_null::verify::non_null_check_write_bytes_i64",
      "ptr::non_null::verify::non_null_check_write_bytes_i8",
      "ptr::non_null::verify::non_null_check_write_bytes_isize",
      "ptr::non_null::verify::non_null_check_write_bytes_u128",
      "ptr::non_null::verify::non_null_check_write_bytes_u16",
      "ptr::non_null::verify::non_null_check_write_bytes_u32",
      "ptr::non_null::verify::non_null_check_write_bytes_u64",
      "ptr::non_null::verify::non_null_check_write_bytes_u8",
      "ptr::non_null::verify::non_null_check_write_bytes_unit",
      "ptr::non_null::verify::non_null_check_write_bytes_usize",
      "ptr::non_null::verify::non_null_check_write_i128",
      "ptr::non_null::verify::non_null_check_write_i16",
      "ptr::non_null::verify::non_null_check_write_i32",
      "ptr::non_null::verify::non_null_check_write_i64",
      "ptr::non_null::verify::non_null_check_write_i8",
      "ptr::non_null::verify::non_null_check_write_isize",
      "ptr::non_null::verify::non_null_check_write_u128",
      "ptr::non_null::verify::non_null_check_write_u16",
      "ptr::non_null::verify::non_null_check_write_u32",
      "ptr::non_null::verify::non_null_check_write_u64",
      "ptr::non_null::verify::non_null_check_write_u8",
      "ptr::non_null::verify::non_null_check_write_unaligned_i128",
      "ptr::non_null::verify::non_null_check_write_unaligned_i16",
      "ptr::non_null::verify::non_null_check_write_unaligned_i32",
      "ptr::non_null::verify::non_null_check_write_unaligned_i64",
      "ptr::non_null::verify::non_null_check_write_unaligned_i8",
      "ptr::non_null::verify::non_null_check_write_unaligned_isize",
      "ptr::non_null::verify::non_null_check_write_unaligned_u128",
      "ptr::non_null::verify::non_null_check_write_unaligned_u16",
      "ptr::non_null::verify::non_null_check_write_unaligned_u32",
      "ptr::non_null::verify::non_null_check_write_unaligned_u64",
      "ptr::non_null::verify::non_null_check_write_unaligned_u8",
      "ptr::non_null::verify::non_null_check_write_unaligned_unit",
      "ptr::non_null::verify::non_null_check_write_unaligned_usize",
      "ptr::non_null::verify::non_null_check_write_unit",
      "ptr::non_null::verify::non_null_check_write_usize",
      "ptr::non_null::verify::non_null_check_write_volatile_i128",
      "ptr::non_null::verify::non_null_check_write_volatile_i16",
      "ptr::non_null::verify::non_null_check_write_volatile_i32",
      "ptr::non_null::verify::non_null_check_write_volatile_i64",
      "ptr::non_null::verify::non_null_check_write_volatile_i8",
      "ptr::non_null::verify::non_null_check_write_volatile_isize",
      "ptr::non_null::verify::non_null_check_write_volatile_u128",
      "ptr::non_null::verify::non_null_check_write_volatile_u16",
      "ptr::non_null::verify::non_null_check_write_volatile_u32",
      "ptr::non_null::verify::non_null_check_write_volatile_u64",
      "ptr::non_null::verify::non_null_check_write_volatile_u8",
      "ptr::non_null::verify::non_null_check_write_volatile_unit",
      "ptr::non_null::verify::non_null_check_write_volatile_usize",
      "ptr::non_null::verify::non_null_slice_is_aligned_check"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/unique.rs": [
      "ptr::unique::verify::check_as_non_null_ptr",
      "ptr::unique::verify::check_as_ptr",
      "ptr::unique::verify::check_new",
      "ptr::unique::verify::check_new_unchecked"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/iter.rs": [
      "slice::iter::verify::verify_char::check_next_back_unchecked",
      "slice::iter::verify::verify_char::check_post_inc_start",
      "slice::iter::verify::verify_char::check_pre_dec_end",
      "slice::iter::verify::verify_tup::check_next_back_unchecked",
      "slice::iter::verify::verify_tup::check_post_inc_start",
      "slice::iter::verify::verify_tup::check_pre_dec_end",
      "slice::iter::verify::verify_u8::check_next_back_unchecked",
      "slice::iter::verify::verify_u8::check_post_inc_start",
      "slice::iter::verify::verify_u8::check_pre_dec_end",
      "slice::iter::verify::verify_unit::check_next_back_unchecked",
      "slice::iter::verify::verify_unit::check_post_inc_start",
      "slice::iter::verify::verify_unit::check_pre_dec_end"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs": [
      "time::Duration::checked_add",
      "time::Duration::checked_div",
      "time::Duration::checked_mul",
      "time::Duration::checked_sub",
      "time::Duration::from_micros",
      "time::Duration::from_millis",
      "time::Duration::from_nanos",
      "time::Duration::from_secs",
      "time::Duration::new",
      "time::duration_verify::duration_as_micros",
      "time::duration_verify::duration_as_micros_panics",
      "time::duration_verify::duration_as_millis",
      "time::duration_verify::duration_as_millis_panics",
      "time::duration_verify::duration_as_secs",
      "time::duration_verify::duration_as_secs_panics",
      "time::duration_verify::duration_checked_add",
      "time::duration_verify::duration_checked_add_panics",
      "time::duration_verify::duration_checked_div",
      "time::duration_verify::duration_checked_div_panics",
      "time::duration_verify::duration_checked_mul",
      "time::duration_verify::duration_checked_mul_panics",
      "time::duration_verify::duration_checked_sub",
      "time::duration_verify::duration_checked_sub_panics",
      "time::duration_verify::duration_new",
      "time::duration_verify::duration_new_panics",
      "time::duration_verify::duration_subsec_micros",
      "time::duration_verify::duration_subsec_micros_panics",
      "time::duration_verify::duration_subsec_millis",
      "time::duration_verify::duration_subsec_millis_panics",
      "time::duration_verify::duration_subsec_nanos",
      "time::duration_verify::duration_subsec_nanos_panics"
    ],
    "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/alloc.rs": [
      "alloc::__default_lib_allocator::__rdl_alloc",
      "alloc::__default_lib_allocator::__rdl_alloc_zeroed"
    ]
  },
  "contracts": [
    {
      "function": "<alloc::System as core::alloc::Allocator>::deallocate",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/alloc.rs",
      "harnesses": []
    },
    {
      "function": "<alloc::System as core::alloc::Allocator>::grow",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/alloc.rs",
      "harnesses": []
    },
    {
      "function": "<alloc::System as core::alloc::Allocator>::grow_zeroed",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/alloc.rs",
      "harnesses": []
    },
    {
      "function": "<alloc::System as core::alloc::Allocator>::shrink",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/alloc.rs",
      "harnesses": []
    },
    {
      "function": "<bool as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f128 as convert::num::FloatToInt<i128>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f128 as convert::num::FloatToInt<i16>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f128 as convert::num::FloatToInt<i32>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f128 as convert::num::FloatToInt<i64>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f128 as convert::num::FloatToInt<i8>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f128 as convert::num::FloatToInt<isize>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f128 as convert::num::FloatToInt<u128>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f128 as convert::num::FloatToInt<u16>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f128 as convert::num::FloatToInt<u32>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f128 as convert::num::FloatToInt<u64>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f128 as convert::num::FloatToInt<u8>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f128 as convert::num::FloatToInt<usize>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f16 as convert::num::FloatToInt<i128>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f16 as convert::num::FloatToInt<i16>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f16 as convert::num::FloatToInt<i32>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f16 as convert::num::FloatToInt<i64>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f16 as convert::num::FloatToInt<i8>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f16 as convert::num::FloatToInt<isize>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f16 as convert::num::FloatToInt<u128>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f16 as convert::num::FloatToInt<u16>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f16 as convert::num::FloatToInt<u32>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f16 as convert::num::FloatToInt<u64>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f16 as convert::num::FloatToInt<u8>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f16 as convert::num::FloatToInt<usize>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f32 as convert::num::FloatToInt<i128>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f32 as convert::num::FloatToInt<i16>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f32 as convert::num::FloatToInt<i32>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f32 as convert::num::FloatToInt<i64>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f32 as convert::num::FloatToInt<i8>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f32 as convert::num::FloatToInt<isize>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f32 as convert::num::FloatToInt<u128>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f32 as convert::num::FloatToInt<u16>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f32 as convert::num::FloatToInt<u32>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f32 as convert::num::FloatToInt<u64>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f32 as convert::num::FloatToInt<u8>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f32 as convert::num::FloatToInt<usize>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f64 as convert::num::FloatToInt<i128>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f64 as convert::num::FloatToInt<i16>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f64 as convert::num::FloatToInt<i32>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f64 as convert::num::FloatToInt<i64>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f64 as convert::num::FloatToInt<i8>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f64 as convert::num::FloatToInt<isize>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f64 as convert::num::FloatToInt<u128>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f64 as convert::num::FloatToInt<u16>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f64 as convert::num::FloatToInt<u32>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f64 as convert::num::FloatToInt<u64>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f64 as convert::num::FloatToInt<u8>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<f64 as convert::num::FloatToInt<usize>>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/convert/num.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<i128 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<i16 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<i32 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<i64 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<i8 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<isize as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<slice::iter::Iter<'a, T> as iter::traits::iterator::Iterator>::__iterator_get_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/iter/macros.rs",
      "harnesses": []
    },
    {
      "function": "<slice::iter::Iter<'a, T> as iter::traits::unchecked_iterator::UncheckedIterator>::next_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/iter/macros.rs",
      "harnesses": []
    },
    {
      "function": "<slice::iter::IterMut<'a, T> as iter::traits::iterator::Iterator>::__iterator_get_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/iter/macros.rs",
      "harnesses": []
    },
    {
      "function": "<slice::iter::IterMut<'a, T> as iter::traits::unchecked_iterator::UncheckedIterator>::next_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/iter/macros.rs",
      "harnesses": []
    },
    {
      "function": "<u128 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<u16 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<u32 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<u64 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<u8 as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "<usize as intrinsics::fallback::DisjointBitOr>::disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/fallback.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "alloc::System::grow_impl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/alloc.rs",
      "harnesses": []
    },
    {
      "function": "alloc::__default_lib_allocator::__rdl_alloc",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/alloc.rs",
      "harnesses": [
        "core::kani::internal::automatic_harness"
      ]
    },
    {
      "function": "alloc::__default_lib_allocator::__rdl_alloc_zeroed",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/alloc.rs",
      "harnesses": [
        "core::kani::internal::automatic_harness"
      ]
    },
    {
      "function": "alloc::__default_lib_allocator::__rdl_dealloc",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/alloc.rs",
      "harnesses": []
    },
    {
      "function": "alloc::__default_lib_allocator::__rdl_realloc",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/std/src/alloc.rs",
      "harnesses": []
    },
    {
      "function": "alloc::layout::Layout::align_to",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "alloc::layout::verify::check_align_to"
      ]
    },
    {
      "function": "alloc::layout::Layout::array",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "alloc::layout::verify::check_array_i32"
      ]
    },
    {
      "function": "alloc::layout::Layout::dangling",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "alloc::layout::verify::check_dangling"
      ]
    },
    {
      "function": "alloc::layout::Layout::extend",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "alloc::layout::verify::check_extend"
      ]
    },
    {
      "function": "alloc::layout::Layout::extend_packed",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "alloc::layout::verify::check_extend_packed"
      ]
    },
    {
      "function": "alloc::layout::Layout::for_value",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "alloc::layout::verify::check_for_value_i32"
      ]
    },
    {
      "function": "alloc::layout::Layout::for_value_raw",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "alloc::layout::verify::check_for_value_raw_i32"
      ]
    },
    {
      "function": "alloc::layout::Layout::from_size_align",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "alloc::layout::Layout::from_size_align_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "alloc::layout::Layout::new",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "alloc::layout::verify::check_new_i32"
      ]
    },
    {
      "function": "alloc::layout::Layout::pad_to_align",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "alloc::layout::verify::check_pad_to_align"
      ]
    },
    {
      "function": "alloc::layout::Layout::padding_needed_for",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "alloc::layout::verify::check_padding_needed_for"
      ]
    },
    {
      "function": "alloc::layout::Layout::repeat",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "alloc::layout::verify::check_repeat"
      ]
    },
    {
      "function": "alloc::layout::Layout::repeat_packed",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/alloc/layout.rs",
      "harnesses": [
        "alloc::layout::verify::check_repeat_packed"
      ]
    },
    {
      "function": "ascii::ascii_char::AsciiChar::from_u8",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ascii/ascii_char.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "ascii::ascii_char::AsciiChar::from_u8_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ascii/ascii_char.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "char::convert::from_u32_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/char/convert.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "char::methods::verify::as_ascii_clone",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/char/methods.rs",
      "harnesses": [
        "char::methods::verify::check_as_ascii_ascii_char",
        "char::methods::verify::check_as_ascii_non_ascii_char"
      ]
    },
    {
      "function": "f128::<impl f128>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/f128.rs",
      "harnesses": [
        "num::verify::checked_f128_to_int_unchecked_i8",
        "num::verify::checked_f128_to_int_unchecked_i16",
        "num::verify::checked_f128_to_int_unchecked_i32",
        "num::verify::checked_f128_to_int_unchecked_i64",
        "num::verify::checked_f128_to_int_unchecked_i128",
        "num::verify::checked_f128_to_int_unchecked_isize",
        "num::verify::checked_f128_to_int_unchecked_u8",
        "num::verify::checked_f128_to_int_unchecked_u16",
        "num::verify::checked_f128_to_int_unchecked_u32",
        "num::verify::checked_f128_to_int_unchecked_u64",
        "num::verify::checked_f128_to_int_unchecked_u128",
        "num::verify::checked_f128_to_int_unchecked_usize",
        "convert::num::verify::check_f16_to_int_unchecked::f128::u8::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f128::u16::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f128::u32::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f128::u64::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f128::u128::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f128::usize::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f128::i8::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f128::i16::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f128::i32::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f128::i64::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f128::i128::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f128::isize::check_float_to_int_unchecked"
      ]
    },
    {
      "function": "f16::<impl f16>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/f16.rs",
      "harnesses": [
        "num::verify::checked_f16_to_int_unchecked_i8",
        "num::verify::checked_f16_to_int_unchecked_i16",
        "num::verify::checked_f16_to_int_unchecked_i32",
        "num::verify::checked_f16_to_int_unchecked_i64",
        "num::verify::checked_f16_to_int_unchecked_i128",
        "num::verify::checked_f16_to_int_unchecked_isize",
        "num::verify::checked_f16_to_int_unchecked_u8",
        "num::verify::checked_f16_to_int_unchecked_u16",
        "num::verify::checked_f16_to_int_unchecked_u32",
        "num::verify::checked_f16_to_int_unchecked_u64",
        "num::verify::checked_f16_to_int_unchecked_u128",
        "num::verify::checked_f16_to_int_unchecked_usize",
        "convert::num::verify::check_f16_to_int_unchecked::f16::u8::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f16::u16::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f16::u32::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f16::u64::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f16::u128::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f16::usize::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f16::i8::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f16::i16::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f16::i32::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f16::i64::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f16::i128::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f16::isize::check_float_to_int_unchecked"
      ]
    },
    {
      "function": "f32::<impl f32>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/f32.rs",
      "harnesses": [
        "num::verify::checked_f32_to_int_unchecked_i8",
        "num::verify::checked_f32_to_int_unchecked_i16",
        "num::verify::checked_f32_to_int_unchecked_i32",
        "num::verify::checked_f32_to_int_unchecked_i64",
        "num::verify::checked_f32_to_int_unchecked_i128",
        "num::verify::checked_f32_to_int_unchecked_isize",
        "num::verify::checked_f32_to_int_unchecked_u8",
        "num::verify::checked_f32_to_int_unchecked_u16",
        "num::verify::checked_f32_to_int_unchecked_u32",
        "num::verify::checked_f32_to_int_unchecked_u64",
        "num::verify::checked_f32_to_int_unchecked_u128",
        "num::verify::checked_f32_to_int_unchecked_usize",
        "convert::num::verify::check_f16_to_int_unchecked::f32::u8::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f32::u16::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f32::u32::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f32::u64::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f32::u128::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f32::usize::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f32::i8::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f32::i16::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f32::i32::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f32::i64::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f32::i128::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f32::isize::check_float_to_int_unchecked"
      ]
    },
    {
      "function": "f64::<impl f64>::to_int_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/f64.rs",
      "harnesses": [
        "num::verify::checked_f64_to_int_unchecked_i8",
        "num::verify::checked_f64_to_int_unchecked_i16",
        "num::verify::checked_f64_to_int_unchecked_i32",
        "num::verify::checked_f64_to_int_unchecked_i64",
        "num::verify::checked_f64_to_int_unchecked_i128",
        "num::verify::checked_f64_to_int_unchecked_isize",
        "num::verify::checked_f64_to_int_unchecked_u8",
        "num::verify::checked_f64_to_int_unchecked_u16",
        "num::verify::checked_f64_to_int_unchecked_u32",
        "num::verify::checked_f64_to_int_unchecked_u64",
        "num::verify::checked_f64_to_int_unchecked_u128",
        "num::verify::checked_f64_to_int_unchecked_usize",
        "convert::num::verify::check_f16_to_int_unchecked::f64::u8::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f64::u16::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f64::u32::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f64::u64::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f64::u128::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f64::usize::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f64::i8::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f64::i16::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f64::i32::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f64::i64::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f64::i128::check_float_to_int_unchecked",
        "convert::num::verify::check_f16_to_int_unchecked::f64::isize::check_float_to_int_unchecked"
      ]
    },
    {
      "function": "ffi::c_str::CStr::from_bytes_with_nul_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ffi/c_str.rs",
      "harnesses": [
        "ffi::c_str::verify::check_from_bytes_with_nul_unchecked"
      ]
    },
    {
      "function": "ffi::c_str::CStr::from_ptr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ffi/c_str.rs",
      "harnesses": [
        "ffi::c_str::verify::check_from_ptr_contract"
      ]
    },
    {
      "function": "ffi::c_str::is_null_terminated",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ffi/c_str.rs",
      "harnesses": []
    },
    {
      "function": "ffi::c_str::strlen",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ffi/c_str.rs",
      "harnesses": [
        "ffi::c_str::verify::check_strlen_contract"
      ]
    },
    {
      "function": "intrinsics::typed_swap_nonoverlapping",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/mod.rs",
      "harnesses": [
        "intrinsics::verify::check_typed_swap_u8",
        "intrinsics::verify::check_typed_swap_char",
        "intrinsics::verify::check_typed_swap_non_zero"
      ]
    },
    {
      "function": "intrinsics::verify::transmute_unchecked_wrapper",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/intrinsics/mod.rs",
      "harnesses": [
        "intrinsics::verify::transmute_unchecked_i8_to_u8",
        "intrinsics::verify::transmute_unchecked_u8_to_i8",
        "intrinsics::verify::transmute_unchecked_bool_to_i8",
        "intrinsics::verify::transmute_unchecked_bool_to_u8",
        "intrinsics::verify::transmute_unchecked_i16_to_u16",
        "intrinsics::verify::transmute_unchecked_u16_to_i16",
        "intrinsics::verify::transmute_unchecked_i32_to_u32",
        "intrinsics::verify::transmute_unchecked_i32_to_f32",
        "intrinsics::verify::transmute_unchecked_u32_to_i32",
        "intrinsics::verify::transmute_unchecked_u32_to_f32",
        "intrinsics::verify::transmute_unchecked_char_to_i32",
        "intrinsics::verify::transmute_unchecked_char_to_u32",
        "intrinsics::verify::transmute_unchecked_char_to_f32",
        "intrinsics::verify::transmute_unchecked_f32_to_i32",
        "intrinsics::verify::transmute_unchecked_f32_to_u32",
        "intrinsics::verify::transmute_unchecked_i64_to_u64",
        "intrinsics::verify::transmute_unchecked_i64_to_f64",
        "intrinsics::verify::transmute_unchecked_u64_to_i64",
        "intrinsics::verify::transmute_unchecked_u64_to_f64",
        "intrinsics::verify::transmute_unchecked_f64_to_i64",
        "intrinsics::verify::transmute_unchecked_f64_to_u64",
        "intrinsics::verify::transmute_unchecked_i128_to_u128",
        "intrinsics::verify::transmute_unchecked_u128_to_i128",
        "intrinsics::verify::transmute_unchecked_i8_to_bool",
        "intrinsics::verify::transmute_unchecked_u8_to_bool",
        "intrinsics::verify::transmute_unchecked_i32_to_char",
        "intrinsics::verify::transmute_unchecked_u32_to_char",
        "intrinsics::verify::transmute_unchecked_f32_to_char",
        "intrinsics::verify::transmute_zero_size"
      ]
    },
    {
      "function": "mem::swap",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/mem/mod.rs",
      "harnesses": [
        "mem::verify::check_swap_primitive",
        "mem::verify::check_swap_adt_no_drop"
      ]
    },
    {
      "function": "num::<impl i128>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_add_i128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i128>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::unchecked_mul_i128_small",
        "num::verify::unchecked_mul_i128_large_pos",
        "num::verify::unchecked_mul_i128_large_neg",
        "num::verify::unchecked_mul_i128_edge_pos",
        "num::verify::unchecked_mul_i128_edge_neg",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i128>::unchecked_neg",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_neg_i128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i128>::unchecked_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shl_i128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i128>::unchecked_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shr_i128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i128>::unchecked_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_sub_i128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i128>::wrapping_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shl_i128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i128>::wrapping_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shr_i128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i16>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_add_i16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i16>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_mul_i16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i16>::unchecked_neg",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_neg_i16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i16>::unchecked_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shl_i16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i16>::unchecked_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shr_i16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i16>::unchecked_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_sub_i16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i16>::wrapping_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shl_i16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i16>::wrapping_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shr_i16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i32>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_add_i32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i32>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::unchecked_mul_i32_small",
        "num::verify::unchecked_mul_i32_large_pos",
        "num::verify::unchecked_mul_i32_large_neg",
        "num::verify::unchecked_mul_i32_edge_pos",
        "num::verify::unchecked_mul_i32_edge_neg",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i32>::unchecked_neg",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_neg_i32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i32>::unchecked_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shl_i32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i32>::unchecked_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shr_i32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i32>::unchecked_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_sub_i32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i32>::wrapping_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shl_i32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i32>::wrapping_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shr_i32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i64>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_add_i64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i64>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::unchecked_mul_i64_small",
        "num::verify::unchecked_mul_i64_large_pos",
        "num::verify::unchecked_mul_i64_large_neg",
        "num::verify::unchecked_mul_i64_edge_pos",
        "num::verify::unchecked_mul_i64_edge_neg",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i64>::unchecked_neg",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_neg_i64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i64>::unchecked_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shl_i64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i64>::unchecked_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shr_i64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i64>::unchecked_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_sub_i64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i64>::wrapping_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shl_i64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i64>::wrapping_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shr_i64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i8>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_add_i8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i8>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_mul_i8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i8>::unchecked_neg",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_neg_i8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i8>::unchecked_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shl_i8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i8>::unchecked_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shr_i8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i8>::unchecked_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_sub_i8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i8>::wrapping_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shl_i8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl i8>::wrapping_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shr_i8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl isize>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_add_isize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl isize>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::unchecked_mul_isize_small",
        "num::verify::unchecked_mul_isize_large_pos",
        "num::verify::unchecked_mul_isize_large_neg",
        "num::verify::unchecked_mul_isize_edge_pos",
        "num::verify::unchecked_mul_isize_edge_neg",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl isize>::unchecked_neg",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_neg_isize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl isize>::unchecked_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shl_isize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl isize>::unchecked_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shr_isize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl isize>::unchecked_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_sub_isize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl isize>::wrapping_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shl_isize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl isize>::wrapping_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/int_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shr_isize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u128>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_add_u128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u128>::unchecked_disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u128>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::unchecked_mul_u128_small",
        "num::verify::unchecked_mul_u128_large",
        "num::verify::unchecked_mul_u128_edge",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u128>::unchecked_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shl_u128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u128>::unchecked_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shr_u128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u128>::unchecked_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_sub_u128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u128>::wrapping_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shl_u128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u128>::wrapping_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shr_u128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u16>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_add_u16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u16>::unchecked_disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u16>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_mul_u16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u16>::unchecked_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shl_u16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u16>::unchecked_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shr_u16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u16>::unchecked_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_sub_u16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u16>::wrapping_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shl_u16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u16>::wrapping_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shr_u16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u32>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_add_u32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u32>::unchecked_disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u32>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::unchecked_mul_u32_small",
        "num::verify::unchecked_mul_u32_large",
        "num::verify::unchecked_mul_u32_edge",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u32>::unchecked_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shl_u32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u32>::unchecked_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shr_u32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u32>::unchecked_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_sub_u32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u32>::wrapping_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shl_u32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u32>::wrapping_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shr_u32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u64>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_add_u64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u64>::unchecked_disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u64>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::unchecked_mul_u64_small",
        "num::verify::unchecked_mul_u64_large",
        "num::verify::unchecked_mul_u64_edge",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u64>::unchecked_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shl_u64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u64>::unchecked_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shr_u64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u64>::unchecked_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_sub_u64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u64>::wrapping_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shl_u64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u64>::wrapping_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shr_u64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u8>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_add_u8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u8>::unchecked_disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u8>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_mul_u8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u8>::unchecked_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shl_u8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u8>::unchecked_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shr_u8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u8>::unchecked_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_sub_u8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u8>::wrapping_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shl_u8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl u8>::wrapping_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shr_u8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl usize>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_add_usize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl usize>::unchecked_disjoint_bitor",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl usize>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::unchecked_mul_usize_small",
        "num::verify::unchecked_mul_usize_large",
        "num::verify::unchecked_mul_usize_edge",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl usize>::unchecked_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shl_usize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl usize>::unchecked_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_shr_usize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl usize>::unchecked_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_unchecked_sub_usize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl usize>::wrapping_shl",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shl_usize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::<impl usize>::wrapping_shr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/uint_macros.rs",
      "harnesses": [
        "num::verify::checked_wrapping_shr_usize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<T>::new_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::nonzero_check_new_unchecked_for_i8",
        "num::nonzero::verify::nonzero_check_new_unchecked_for_16",
        "num::nonzero::verify::nonzero_check_new_unchecked_for_32",
        "num::nonzero::verify::nonzero_check_new_unchecked_for_64",
        "num::nonzero::verify::nonzero_check_new_unchecked_for_128",
        "num::nonzero::verify::nonzero_check_new_unchecked_for_isize",
        "num::nonzero::verify::nonzero_check_new_unchecked_for_u8",
        "num::nonzero::verify::nonzero_check_new_unchecked_for_u16",
        "num::nonzero::verify::nonzero_check_new_unchecked_for_u32",
        "num::nonzero::verify::nonzero_check_new_unchecked_for_u64",
        "num::nonzero::verify::nonzero_check_new_unchecked_for_u128",
        "num::nonzero::verify::nonzero_check_new_unchecked_for_usize"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i128>::count_ones",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i128>::rotate_left",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i128>::rotate_right",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i128>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::check_mul_i128_small",
        "num::nonzero::verify::check_mul_i128_large_pos",
        "num::nonzero::verify::check_mul_i128_large_neg",
        "num::nonzero::verify::check_mul_i128_edge_pos",
        "num::nonzero::verify::check_mul_i128_edge_neg",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i16>::count_ones",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i16>::rotate_left",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i16>::rotate_right",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i16>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::nonzero_check_mul_for_i16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i32>::count_ones",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i32>::rotate_left",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i32>::rotate_right",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i32>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::check_mul_i32_small",
        "num::nonzero::verify::check_mul_i32_large_pos",
        "num::nonzero::verify::check_mul_i32_large_neg",
        "num::nonzero::verify::check_mul_i32_edge_pos",
        "num::nonzero::verify::check_mul_i32_edge_neg",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i64>::count_ones",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i64>::rotate_left",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i64>::rotate_right",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i64>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::check_mul_i64_small",
        "num::nonzero::verify::check_mul_i64_large_pos",
        "num::nonzero::verify::check_mul_i64_large_neg",
        "num::nonzero::verify::check_mul_i64_edge_pos",
        "num::nonzero::verify::check_mul_i64_edge_neg",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i8>::count_ones",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i8>::rotate_left",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i8>::rotate_right",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<i8>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::nonzero_check_mul_for_i8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<isize>::count_ones",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<isize>::rotate_left",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<isize>::rotate_right",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<isize>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::check_mul_isize_small",
        "num::nonzero::verify::check_mul_isize_large_pos",
        "num::nonzero::verify::check_mul_isize_large_neg",
        "num::nonzero::verify::check_mul_isize_edge_pos",
        "num::nonzero::verify::check_mul_isize_edge_neg",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u128>::count_ones",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u128>::rotate_left",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u128>::rotate_right",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u128>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::nonzero_check_unchecked_add_for_u128",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u128>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::check_mul_u128_small",
        "num::nonzero::verify::check_mul_u128_large",
        "num::nonzero::verify::check_mul_u128_edge",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u16>::count_ones",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u16>::rotate_left",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u16>::rotate_right",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u16>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::nonzero_check_unchecked_add_for_u16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u16>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::nonzero_check_mul_for_u16",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u32>::count_ones",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u32>::rotate_left",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u32>::rotate_right",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u32>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::nonzero_check_unchecked_add_for_u32",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u32>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::check_mul_u32_small",
        "num::nonzero::verify::check_mul_u32_large",
        "num::nonzero::verify::check_mul_u32_edge",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u64>::count_ones",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u64>::rotate_left",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u64>::rotate_right",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u64>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::nonzero_check_unchecked_add_for_u64",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u64>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::check_mul_u64_small",
        "num::nonzero::verify::check_mul_u64_large",
        "num::nonzero::verify::check_mul_u64_edge",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u8>::count_ones",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u8>::rotate_left",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u8>::rotate_right",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u8>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::nonzero_check_unchecked_add_for_u8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<u8>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::nonzero_check_mul_for_u8",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<usize>::count_ones",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<usize>::rotate_left",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<usize>::rotate_right",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<usize>::unchecked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::nonzero_check_unchecked_add_for_usize",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "num::nonzero::NonZero::<usize>::unchecked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/num/nonzero.rs",
      "harnesses": [
        "num::nonzero::verify::check_mul_usize_small",
        "num::nonzero::verify::check_mul_usize_large",
        "num::nonzero::verify::check_mul_usize_edge",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "ptr::align_offset",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mod.rs",
      "harnesses": [
        "ptr::verify::check_align_offset_zst",
        "ptr::verify::check_align_offset_u8",
        "ptr::verify::check_align_offset_u16",
        "ptr::verify::check_align_offset_u32",
        "ptr::verify::check_align_offset_u64",
        "ptr::verify::check_align_offset_u128",
        "ptr::verify::check_align_offset_4096",
        "ptr::verify::check_align_offset_5"
      ]
    },
    {
      "function": "ptr::align_offset::mod_inv",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mod.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "ptr::align_offset::{closure#0}::{closure#1}::{closure#1}::mod_inv",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mod.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "ptr::align_offset::{closure#2}::{closure#1}::mod_inv",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mod.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "ptr::align_offset::{closure#3}::{closure#0}::mod_inv",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mod.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "ptr::alignment::Alignment::as_nonzero",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/alignment.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "ptr::alignment::Alignment::as_usize",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/alignment.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "ptr::alignment::Alignment::log2",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/alignment.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "ptr::alignment::Alignment::mask",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/alignment.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "ptr::alignment::Alignment::new",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/alignment.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "ptr::alignment::Alignment::new_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/alignment.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "ptr::alignment::Alignment::of",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/alignment.rs",
      "harnesses": []
    },
    {
      "function": "ptr::const_ptr::<impl *const T>::add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/const_ptr.rs",
      "harnesses": [
        "ptr::const_ptr::verify::check_const_add_unit",
        "ptr::const_ptr::verify::check_const_add_i8",
        "ptr::const_ptr::verify::check_const_add_i16",
        "ptr::const_ptr::verify::check_const_add_i32",
        "ptr::const_ptr::verify::check_const_add_i64",
        "ptr::const_ptr::verify::check_const_add_i128",
        "ptr::const_ptr::verify::check_const_add_isize",
        "ptr::const_ptr::verify::check_const_add_u8",
        "ptr::const_ptr::verify::check_const_add_u16",
        "ptr::const_ptr::verify::check_const_add_u32",
        "ptr::const_ptr::verify::check_const_add_u64",
        "ptr::const_ptr::verify::check_const_add_u128",
        "ptr::const_ptr::verify::check_const_add_usize",
        "ptr::const_ptr::verify::check_const_add_tuple_1",
        "ptr::const_ptr::verify::check_const_add_tuple_2",
        "ptr::const_ptr::verify::check_const_add_tuple_3",
        "ptr::const_ptr::verify::check_const_add_tuple_4",
        "ptr::const_ptr::verify::check_const_add_slice_i8",
        "ptr::const_ptr::verify::check_const_add_slice_i16",
        "ptr::const_ptr::verify::check_const_add_slice_i32",
        "ptr::const_ptr::verify::check_const_add_slice_i64",
        "ptr::const_ptr::verify::check_const_add_slice_i128",
        "ptr::const_ptr::verify::check_const_add_slice_isize",
        "ptr::const_ptr::verify::check_const_add_slice_u8",
        "ptr::const_ptr::verify::check_const_add_slice_u16",
        "ptr::const_ptr::verify::check_const_add_slice_u32",
        "ptr::const_ptr::verify::check_const_add_slice_u64",
        "ptr::const_ptr::verify::check_const_add_slice_u128",
        "ptr::const_ptr::verify::check_const_add_slice_usize",
        "ptr::const_ptr::verify::check_const_add_slice_tuple_1",
        "ptr::const_ptr::verify::check_const_add_slice_tuple_2",
        "ptr::const_ptr::verify::check_const_add_slice_tuple_3",
        "ptr::const_ptr::verify::check_const_add_slice_tuple_4"
      ]
    },
    {
      "function": "ptr::const_ptr::<impl *const T>::byte_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/const_ptr.rs",
      "harnesses": [
        "ptr::const_ptr::verify::check_const_byte_add_unit",
        "ptr::const_ptr::verify::check_const_byte_add_i8",
        "ptr::const_ptr::verify::check_const_byte_add_i16",
        "ptr::const_ptr::verify::check_const_byte_add_i32",
        "ptr::const_ptr::verify::check_const_byte_add_i64",
        "ptr::const_ptr::verify::check_const_byte_add_i128",
        "ptr::const_ptr::verify::check_const_byte_add_isize",
        "ptr::const_ptr::verify::check_const_byte_add_u8",
        "ptr::const_ptr::verify::check_const_byte_add_u16",
        "ptr::const_ptr::verify::check_const_byte_add_u32",
        "ptr::const_ptr::verify::check_const_byte_add_u64",
        "ptr::const_ptr::verify::check_const_byte_add_u128",
        "ptr::const_ptr::verify::check_const_byte_add_usize",
        "ptr::const_ptr::verify::check_const_byte_add_tuple_1",
        "ptr::const_ptr::verify::check_const_byte_add_tuple_2",
        "ptr::const_ptr::verify::check_const_byte_add_tuple_3",
        "ptr::const_ptr::verify::check_const_byte_add_tuple_4",
        "ptr::const_ptr::verify::check_const_byte_add_i8_slice",
        "ptr::const_ptr::verify::check_const_byte_add_i16_slice",
        "ptr::const_ptr::verify::check_const_byte_add_i32_slice",
        "ptr::const_ptr::verify::check_const_byte_add_i64_slice",
        "ptr::const_ptr::verify::check_const_byte_add_i128_slice",
        "ptr::const_ptr::verify::check_const_byte_add_isize_slice",
        "ptr::const_ptr::verify::check_const_byte_add_u8_slice",
        "ptr::const_ptr::verify::check_const_byte_add_u16_slice",
        "ptr::const_ptr::verify::check_const_byte_add_u32_slice",
        "ptr::const_ptr::verify::check_const_byte_add_u64_slice",
        "ptr::const_ptr::verify::check_const_byte_add_u128_slice",
        "ptr::const_ptr::verify::check_const_byte_add_usize_slice",
        "ptr::const_ptr::verify::check_const_byte_add_dyn"
      ]
    },
    {
      "function": "ptr::const_ptr::<impl *const T>::byte_offset",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/const_ptr.rs",
      "harnesses": [
        "ptr::const_ptr::verify::check_const_byte_offset_unit_invalid_count",
        "ptr::const_ptr::verify::check_const_byte_offset_cast_unit",
        "ptr::const_ptr::verify::check_const_byte_offset_unit",
        "ptr::const_ptr::verify::check_const_byte_offset_i8",
        "ptr::const_ptr::verify::check_const_byte_offset_i16",
        "ptr::const_ptr::verify::check_const_byte_offset_i32",
        "ptr::const_ptr::verify::check_const_byte_offset_i64",
        "ptr::const_ptr::verify::check_const_byte_offset_i128",
        "ptr::const_ptr::verify::check_const_byte_offset_isize",
        "ptr::const_ptr::verify::check_const_byte_offset_u8",
        "ptr::const_ptr::verify::check_const_byte_offset_u16",
        "ptr::const_ptr::verify::check_const_byte_offset_u32",
        "ptr::const_ptr::verify::check_const_byte_offset_u64",
        "ptr::const_ptr::verify::check_const_byte_offset_u128",
        "ptr::const_ptr::verify::check_const_byte_offset_usize",
        "ptr::const_ptr::verify::check_const_byte_offset_tuple_1",
        "ptr::const_ptr::verify::check_const_byte_offset_tuple_2",
        "ptr::const_ptr::verify::check_const_byte_offset_tuple_3",
        "ptr::const_ptr::verify::check_const_byte_offset_tuple_4",
        "ptr::const_ptr::verify::check_const_byte_offset_i8_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_i16_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_i32_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_i64_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_i128_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_isize_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_u8_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_u16_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_u32_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_u64_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_u128_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_usize_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_dyn"
      ]
    },
    {
      "function": "ptr::const_ptr::<impl *const T>::byte_offset_from",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/const_ptr.rs",
      "harnesses": [
        "ptr::const_ptr::verify::check_const_byte_offset_from_unit",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u8",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u8_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u16",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u16_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u32",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u32_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u64",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u64_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u128",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u128_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_usize",
        "ptr::const_ptr::verify::check_const_byte_offset_from_usize_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i8",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i8_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i16",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i16_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i32",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i32_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i64",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i64_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i128",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i128_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_isize",
        "ptr::const_ptr::verify::check_const_byte_offset_from_isize_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_1",
        "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_1_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_2",
        "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_2_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_3",
        "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_3_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_4",
        "ptr::const_ptr::verify::check_const_byte_offset_from_tuple_4_arr",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u8_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u16_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u32_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u64_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_from_u128_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_from_usize_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i8_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i16_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i32_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i64_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_from_i128_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_from_isize_slice",
        "ptr::const_ptr::verify::check_const_byte_offset_from_dyn"
      ]
    },
    {
      "function": "ptr::const_ptr::<impl *const T>::byte_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/const_ptr.rs",
      "harnesses": [
        "ptr::const_ptr::verify::check_const_byte_sub_unit",
        "ptr::const_ptr::verify::check_const_byte_sub_i8",
        "ptr::const_ptr::verify::check_const_byte_sub_i16",
        "ptr::const_ptr::verify::check_const_byte_sub_i32",
        "ptr::const_ptr::verify::check_const_byte_sub_i64",
        "ptr::const_ptr::verify::check_const_byte_sub_i128",
        "ptr::const_ptr::verify::check_const_byte_sub_isize",
        "ptr::const_ptr::verify::check_const_byte_sub_u8",
        "ptr::const_ptr::verify::check_const_byte_sub_u16",
        "ptr::const_ptr::verify::check_const_byte_sub_u32",
        "ptr::const_ptr::verify::check_const_byte_sub_u64",
        "ptr::const_ptr::verify::check_const_byte_sub_u128",
        "ptr::const_ptr::verify::check_const_byte_sub_usize",
        "ptr::const_ptr::verify::check_const_byte_sub_tuple_1",
        "ptr::const_ptr::verify::check_const_byte_sub_tuple_2",
        "ptr::const_ptr::verify::check_const_byte_sub_tuple_3",
        "ptr::const_ptr::verify::check_const_byte_sub_tuple_4",
        "ptr::const_ptr::verify::check_const_byte_sub_i8_slice",
        "ptr::const_ptr::verify::check_const_byte_sub_i16_slice",
        "ptr::const_ptr::verify::check_const_byte_sub_i32_slice",
        "ptr::const_ptr::verify::check_const_byte_sub_i64_slice",
        "ptr::const_ptr::verify::check_const_byte_sub_i128_slice",
        "ptr::const_ptr::verify::check_const_byte_sub_isize_slice",
        "ptr::const_ptr::verify::check_const_byte_sub_u8_slice",
        "ptr::const_ptr::verify::check_const_byte_sub_u16_slice",
        "ptr::const_ptr::verify::check_const_byte_sub_u32_slice",
        "ptr::const_ptr::verify::check_const_byte_sub_u64_slice",
        "ptr::const_ptr::verify::check_const_byte_sub_u128_slice",
        "ptr::const_ptr::verify::check_const_byte_sub_usize_slice",
        "ptr::const_ptr::verify::check_const_byte_sub_dyn"
      ]
    },
    {
      "function": "ptr::const_ptr::<impl *const T>::offset",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/const_ptr.rs",
      "harnesses": [
        "ptr::const_ptr::verify::check_const_offset_unit",
        "ptr::const_ptr::verify::check_const_offset_i8",
        "ptr::const_ptr::verify::check_const_offset_i16",
        "ptr::const_ptr::verify::check_const_offset_i32",
        "ptr::const_ptr::verify::check_const_offset_i64",
        "ptr::const_ptr::verify::check_const_offset_i128",
        "ptr::const_ptr::verify::check_const_offset_isize",
        "ptr::const_ptr::verify::check_const_offset_u8",
        "ptr::const_ptr::verify::check_const_offset_u16",
        "ptr::const_ptr::verify::check_const_offset_u32",
        "ptr::const_ptr::verify::check_const_offset_u64",
        "ptr::const_ptr::verify::check_const_offset_u128",
        "ptr::const_ptr::verify::check_const_offset_usize",
        "ptr::const_ptr::verify::check_const_offset_tuple_1",
        "ptr::const_ptr::verify::check_const_offset_tuple_2",
        "ptr::const_ptr::verify::check_const_offset_tuple_3",
        "ptr::const_ptr::verify::check_const_offset_tuple_4",
        "ptr::const_ptr::verify::check_const_offset_slice_i8",
        "ptr::const_ptr::verify::check_const_offset_slice_i16",
        "ptr::const_ptr::verify::check_const_offset_slice_i32",
        "ptr::const_ptr::verify::check_const_offset_slice_i64",
        "ptr::const_ptr::verify::check_const_offset_slice_i128",
        "ptr::const_ptr::verify::check_const_offset_slice_isize",
        "ptr::const_ptr::verify::check_const_offset_slice_u8",
        "ptr::const_ptr::verify::check_const_offset_slice_u16",
        "ptr::const_ptr::verify::check_const_offset_slice_u32",
        "ptr::const_ptr::verify::check_const_offset_slice_u64",
        "ptr::const_ptr::verify::check_const_offset_slice_u128",
        "ptr::const_ptr::verify::check_const_offset_slice_usize",
        "ptr::const_ptr::verify::check_const_offset_slice_tuple_1",
        "ptr::const_ptr::verify::check_const_offset_slice_tuple_2",
        "ptr::const_ptr::verify::check_const_offset_slice_tuple_3",
        "ptr::const_ptr::verify::check_const_offset_slice_tuple_4"
      ]
    },
    {
      "function": "ptr::const_ptr::<impl *const T>::offset_from",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/const_ptr.rs",
      "harnesses": [
        "ptr::const_ptr::verify::check_const_offset_from_unit",
        "ptr::const_ptr::verify::check_const_offset_from_u8",
        "ptr::const_ptr::verify::check_const_offset_from_u8_arr",
        "ptr::const_ptr::verify::check_const_offset_from_u16",
        "ptr::const_ptr::verify::check_const_offset_from_u16_arr",
        "ptr::const_ptr::verify::check_const_offset_from_u32",
        "ptr::const_ptr::verify::check_const_offset_from_u32_arr",
        "ptr::const_ptr::verify::check_const_offset_from_u64",
        "ptr::const_ptr::verify::check_const_offset_from_u64_arr",
        "ptr::const_ptr::verify::check_const_offset_from_u128",
        "ptr::const_ptr::verify::check_const_offset_from_u128_arr",
        "ptr::const_ptr::verify::check_const_offset_from_usize",
        "ptr::const_ptr::verify::check_const_offset_from_usize_arr",
        "ptr::const_ptr::verify::check_const_offset_from_i8",
        "ptr::const_ptr::verify::check_const_offset_from_i8_arr",
        "ptr::const_ptr::verify::check_const_offset_from_i16",
        "ptr::const_ptr::verify::check_const_offset_from_i16_arr",
        "ptr::const_ptr::verify::check_const_offset_from_i32",
        "ptr::const_ptr::verify::check_const_offset_from_i32_arr",
        "ptr::const_ptr::verify::check_const_offset_from_i64",
        "ptr::const_ptr::verify::check_const_offset_from_i64_arr",
        "ptr::const_ptr::verify::check_const_offset_from_i128",
        "ptr::const_ptr::verify::check_const_offset_from_i128_arr",
        "ptr::const_ptr::verify::check_const_offset_from_isize",
        "ptr::const_ptr::verify::check_const_offset_from_isize_arr",
        "ptr::const_ptr::verify::check_const_offset_from_tuple_1",
        "ptr::const_ptr::verify::check_const_offset_from_tuple_1_arr",
        "ptr::const_ptr::verify::check_const_offset_from_tuple_2",
        "ptr::const_ptr::verify::check_const_offset_from_tuple_2_arr",
        "ptr::const_ptr::verify::check_const_offset_from_tuple_3",
        "ptr::const_ptr::verify::check_const_offset_from_tuple_3_arr",
        "ptr::const_ptr::verify::check_const_offset_from_tuple_4",
        "ptr::const_ptr::verify::check_const_offset_from_tuple_4_arr"
      ]
    },
    {
      "function": "ptr::const_ptr::<impl *const T>::sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/const_ptr.rs",
      "harnesses": [
        "ptr::const_ptr::verify::check_const_sub_unit",
        "ptr::const_ptr::verify::check_const_sub_i8",
        "ptr::const_ptr::verify::check_const_sub_i16",
        "ptr::const_ptr::verify::check_const_sub_i32",
        "ptr::const_ptr::verify::check_const_sub_i64",
        "ptr::const_ptr::verify::check_const_sub_i128",
        "ptr::const_ptr::verify::check_const_sub_isize",
        "ptr::const_ptr::verify::check_const_sub_u8",
        "ptr::const_ptr::verify::check_const_sub_u16",
        "ptr::const_ptr::verify::check_const_sub_u32",
        "ptr::const_ptr::verify::check_const_sub_u64",
        "ptr::const_ptr::verify::check_const_sub_u128",
        "ptr::const_ptr::verify::check_const_sub_usize",
        "ptr::const_ptr::verify::check_const_sub_tuple_1",
        "ptr::const_ptr::verify::check_const_sub_tuple_2",
        "ptr::const_ptr::verify::check_const_sub_tuple_3",
        "ptr::const_ptr::verify::check_const_sub_tuple_4",
        "ptr::const_ptr::verify::check_const_sub_slice_i8",
        "ptr::const_ptr::verify::check_const_sub_slice_i16",
        "ptr::const_ptr::verify::check_const_sub_slice_i32",
        "ptr::const_ptr::verify::check_const_sub_slice_i64",
        "ptr::const_ptr::verify::check_const_sub_slice_i128",
        "ptr::const_ptr::verify::check_const_sub_slice_isize",
        "ptr::const_ptr::verify::check_const_sub_slice_u8",
        "ptr::const_ptr::verify::check_const_sub_slice_u16",
        "ptr::const_ptr::verify::check_const_sub_slice_u32",
        "ptr::const_ptr::verify::check_const_sub_slice_u64",
        "ptr::const_ptr::verify::check_const_sub_slice_u128",
        "ptr::const_ptr::verify::check_const_sub_slice_usize",
        "ptr::const_ptr::verify::check_const_sub_slice_tuple_1",
        "ptr::const_ptr::verify::check_const_sub_slice_tuple_2",
        "ptr::const_ptr::verify::check_const_sub_slice_tuple_3",
        "ptr::const_ptr::verify::check_const_sub_slice_tuple_4"
      ]
    },
    {
      "function": "ptr::mut_ptr::<impl *mut T>::add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mut_ptr.rs",
      "harnesses": [
        "ptr::mut_ptr::verify::check_mut_add_slice_i8",
        "ptr::mut_ptr::verify::check_mut_add_slice_i16",
        "ptr::mut_ptr::verify::check_mut_add_slice_i32",
        "ptr::mut_ptr::verify::check_mut_add_slice_i64",
        "ptr::mut_ptr::verify::check_mut_add_slice_i128",
        "ptr::mut_ptr::verify::check_mut_add_slice_isize",
        "ptr::mut_ptr::verify::check_mut_add_slice_u8",
        "ptr::mut_ptr::verify::check_mut_add_slice_u16",
        "ptr::mut_ptr::verify::check_mut_add_slice_u32",
        "ptr::mut_ptr::verify::check_mut_add_slice_u64",
        "ptr::mut_ptr::verify::check_mut_add_slice_u128",
        "ptr::mut_ptr::verify::check_mut_add_slice_usize",
        "ptr::mut_ptr::verify::check_mut_add_slice_tuple_1",
        "ptr::mut_ptr::verify::check_mut_add_slice_tuple_2",
        "ptr::mut_ptr::verify::check_mut_add_slice_tuple_3",
        "ptr::mut_ptr::verify::check_mut_add_slice_tuple_4",
        "ptr::mut_ptr::verify::check_mut_add_unit",
        "ptr::mut_ptr::verify::check_mut_add_i8",
        "ptr::mut_ptr::verify::check_mut_add_i16",
        "ptr::mut_ptr::verify::check_mut_add_i32",
        "ptr::mut_ptr::verify::check_mut_add_i64",
        "ptr::mut_ptr::verify::check_mut_add_i128",
        "ptr::mut_ptr::verify::check_mut_add_isize",
        "ptr::mut_ptr::verify::check_mut_add_u16",
        "ptr::mut_ptr::verify::check_mut_add_u32",
        "ptr::mut_ptr::verify::check_mut_add_u64",
        "ptr::mut_ptr::verify::check_mut_add_u128",
        "ptr::mut_ptr::verify::check_mut_add_usize",
        "ptr::mut_ptr::verify::check_mut_add_tuple_1",
        "ptr::mut_ptr::verify::check_mut_add_tuple_2",
        "ptr::mut_ptr::verify::check_mut_add_tuple_3",
        "ptr::mut_ptr::verify::check_mut_add_tuple_4"
      ]
    },
    {
      "function": "ptr::mut_ptr::<impl *mut T>::byte_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mut_ptr.rs",
      "harnesses": [
        "ptr::mut_ptr::verify::check_mut_byte_add_unit",
        "ptr::mut_ptr::verify::check_mut_byte_add_i8",
        "ptr::mut_ptr::verify::check_mut_byte_add_i16",
        "ptr::mut_ptr::verify::check_mut_byte_add_i32",
        "ptr::mut_ptr::verify::check_mut_byte_add_i64",
        "ptr::mut_ptr::verify::check_mut_byte_add_i128",
        "ptr::mut_ptr::verify::check_mut_byte_add_isize",
        "ptr::mut_ptr::verify::check_mut_byte_add_u8",
        "ptr::mut_ptr::verify::check_mut_byte_add_u16",
        "ptr::mut_ptr::verify::check_mut_byte_add_u32",
        "ptr::mut_ptr::verify::check_mut_byte_add_u64",
        "ptr::mut_ptr::verify::check_mut_byte_add_u128",
        "ptr::mut_ptr::verify::check_mut_byte_add_usize",
        "ptr::mut_ptr::verify::check_mut_byte_add_tuple_1",
        "ptr::mut_ptr::verify::check_mut_byte_add_tuple_2",
        "ptr::mut_ptr::verify::check_mut_byte_add_tuple_3",
        "ptr::mut_ptr::verify::check_mut_byte_add_tuple_4",
        "ptr::mut_ptr::verify::check_mut_byte_add_i8_slice",
        "ptr::mut_ptr::verify::check_mut_byte_add_i16_slice",
        "ptr::mut_ptr::verify::check_mut_byte_add_i32_slice",
        "ptr::mut_ptr::verify::check_mut_byte_add_i64_slice",
        "ptr::mut_ptr::verify::check_mut_byte_add_i128_slice",
        "ptr::mut_ptr::verify::check_mut_byte_add_isize_slice",
        "ptr::mut_ptr::verify::check_mut_byte_add_u8_slice",
        "ptr::mut_ptr::verify::check_mut_byte_add_u16_slice",
        "ptr::mut_ptr::verify::check_mut_byte_add_u32_slice",
        "ptr::mut_ptr::verify::check_mut_byte_add_u64_slice",
        "ptr::mut_ptr::verify::check_mut_byte_add_u128_slice",
        "ptr::mut_ptr::verify::check_mut_byte_add_usize_slice",
        "ptr::mut_ptr::verify::check_mut_byte_add_dyn"
      ]
    },
    {
      "function": "ptr::mut_ptr::<impl *mut T>::byte_offset",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mut_ptr.rs",
      "harnesses": [
        "ptr::mut_ptr::verify::check_mut_byte_offset_unit_invalid_count",
        "ptr::mut_ptr::verify::check_mut_byte_offset_cast_unit",
        "ptr::mut_ptr::verify::check_mut_byte_offset_unit",
        "ptr::mut_ptr::verify::check_mut_byte_offset_i8",
        "ptr::mut_ptr::verify::check_mut_byte_offset_i16",
        "ptr::mut_ptr::verify::check_mut_byte_offset_i32",
        "ptr::mut_ptr::verify::check_mut_byte_offset_i64",
        "ptr::mut_ptr::verify::check_mut_byte_offset_i128",
        "ptr::mut_ptr::verify::check_mut_byte_offset_isize",
        "ptr::mut_ptr::verify::check_mut_byte_offset_u8",
        "ptr::mut_ptr::verify::check_mut_byte_offset_u16",
        "ptr::mut_ptr::verify::check_mut_byte_offset_u32",
        "ptr::mut_ptr::verify::check_mut_byte_offset_u64",
        "ptr::mut_ptr::verify::check_mut_byte_offset_u128",
        "ptr::mut_ptr::verify::check_mut_byte_offset_usize",
        "ptr::mut_ptr::verify::check_mut_byte_offset_tuple_1",
        "ptr::mut_ptr::verify::check_mut_byte_offset_tuple_2",
        "ptr::mut_ptr::verify::check_mut_byte_offset_tuple_3",
        "ptr::mut_ptr::verify::check_mut_byte_offset_tuple_4",
        "ptr::mut_ptr::verify::check_mut_byte_offset_i8_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_i16_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_i32_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_i64_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_i128_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_isize_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_u8_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_u16_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_u32_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_u64_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_u128_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_usize_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_dyn"
      ]
    },
    {
      "function": "ptr::mut_ptr::<impl *mut T>::byte_offset_from",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mut_ptr.rs",
      "harnesses": [
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_unit",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u8",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u8_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u16",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u16_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u32",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u32_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u64",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u64_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u128",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u128_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_usize",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_usize_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i8",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i8_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i16",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i16_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i32",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i32_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i64",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i64_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i128",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i128_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_isize",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_isize_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_1",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_1_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_2",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_2_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_3",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_3_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_4",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_tuple_4_arr",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u8_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u16_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u32_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u64_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_u128_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_usize_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i8_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i16_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i32_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i64_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_i128_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_isize_slice",
        "ptr::mut_ptr::verify::check_mut_byte_offset_from_dyn"
      ]
    },
    {
      "function": "ptr::mut_ptr::<impl *mut T>::byte_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mut_ptr.rs",
      "harnesses": [
        "ptr::mut_ptr::verify::check_mut_byte_sub_unit",
        "ptr::mut_ptr::verify::check_mut_byte_sub_i8",
        "ptr::mut_ptr::verify::check_mut_byte_sub_i16",
        "ptr::mut_ptr::verify::check_mut_byte_sub_i32",
        "ptr::mut_ptr::verify::check_mut_byte_sub_i64",
        "ptr::mut_ptr::verify::check_mut_byte_sub_i128",
        "ptr::mut_ptr::verify::check_mut_byte_sub_isize",
        "ptr::mut_ptr::verify::check_mut_byte_sub_u8",
        "ptr::mut_ptr::verify::check_mut_byte_sub_u16",
        "ptr::mut_ptr::verify::check_mut_byte_sub_u32",
        "ptr::mut_ptr::verify::check_mut_byte_sub_u64",
        "ptr::mut_ptr::verify::check_mut_byte_sub_u128",
        "ptr::mut_ptr::verify::check_mut_byte_sub_usize",
        "ptr::mut_ptr::verify::check_mut_byte_sub_tuple_1",
        "ptr::mut_ptr::verify::check_mut_byte_sub_tuple_2",
        "ptr::mut_ptr::verify::check_mut_byte_sub_tuple_3",
        "ptr::mut_ptr::verify::check_mut_byte_sub_tuple_4",
        "ptr::mut_ptr::verify::check_mut_byte_sub_i8_slice",
        "ptr::mut_ptr::verify::check_mut_byte_sub_i16_slice",
        "ptr::mut_ptr::verify::check_mut_byte_sub_i32_slice",
        "ptr::mut_ptr::verify::check_mut_byte_sub_i64_slice",
        "ptr::mut_ptr::verify::check_mut_byte_sub_i128_slice",
        "ptr::mut_ptr::verify::check_mut_byte_sub_isize_slice",
        "ptr::mut_ptr::verify::check_mut_byte_sub_u8_slice",
        "ptr::mut_ptr::verify::check_mut_byte_sub_u16_slice",
        "ptr::mut_ptr::verify::check_mut_byte_sub_u32_slice",
        "ptr::mut_ptr::verify::check_mut_byte_sub_u64_slice",
        "ptr::mut_ptr::verify::check_mut_byte_sub_u128_slice",
        "ptr::mut_ptr::verify::check_mut_byte_sub_usize_slice",
        "ptr::mut_ptr::verify::check_mut_byte_sub_dyn"
      ]
    },
    {
      "function": "ptr::mut_ptr::<impl *mut T>::offset",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mut_ptr.rs",
      "harnesses": [
        "ptr::mut_ptr::verify::check_mut_offset_slice_i8",
        "ptr::mut_ptr::verify::check_mut_offset_slice_i16",
        "ptr::mut_ptr::verify::check_mut_offset_slice_i32",
        "ptr::mut_ptr::verify::check_mut_offset_slice_i64",
        "ptr::mut_ptr::verify::check_mut_offset_slice_i128",
        "ptr::mut_ptr::verify::check_mut_offset_slice_isize",
        "ptr::mut_ptr::verify::check_mut_offset_slice_u8",
        "ptr::mut_ptr::verify::check_mut_offset_slice_u16",
        "ptr::mut_ptr::verify::check_mut_offset_slice_u32",
        "ptr::mut_ptr::verify::check_mut_offset_slice_u64",
        "ptr::mut_ptr::verify::check_mut_offset_slice_u128",
        "ptr::mut_ptr::verify::check_mut_offset_slice_usize",
        "ptr::mut_ptr::verify::check_mut_offset_slice_tuple_1",
        "ptr::mut_ptr::verify::check_mut_offset_slice_tuple_2",
        "ptr::mut_ptr::verify::check_mut_offset_slice_tuple_3",
        "ptr::mut_ptr::verify::check_mut_offset_slice_tuple_4",
        "ptr::mut_ptr::verify::check_mut_offset_unit",
        "ptr::mut_ptr::verify::check_mut_offset_i8",
        "ptr::mut_ptr::verify::check_mut_offset_i16",
        "ptr::mut_ptr::verify::check_mut_offset_i32",
        "ptr::mut_ptr::verify::check_mut_offset_i64",
        "ptr::mut_ptr::verify::check_mut_offset_i128",
        "ptr::mut_ptr::verify::check_mut_offset_isize",
        "ptr::mut_ptr::verify::check_mut_offset_u16",
        "ptr::mut_ptr::verify::check_mut_offset_u32",
        "ptr::mut_ptr::verify::check_mut_offset_u64",
        "ptr::mut_ptr::verify::check_mut_offset_u128",
        "ptr::mut_ptr::verify::check_mut_offset_usize",
        "ptr::mut_ptr::verify::check_mut_offset_tuple_1",
        "ptr::mut_ptr::verify::check_mut_offset_tuple_2",
        "ptr::mut_ptr::verify::check_mut_offset_tuple_3",
        "ptr::mut_ptr::verify::check_mut_offset_tuple_4"
      ]
    },
    {
      "function": "ptr::mut_ptr::<impl *mut T>::offset_from",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mut_ptr.rs",
      "harnesses": [
        "ptr::mut_ptr::verify::check_mut_offset_from_unit",
        "ptr::mut_ptr::verify::check_mut_offset_from_u8",
        "ptr::mut_ptr::verify::check_mut_offset_from_u8_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_u16",
        "ptr::mut_ptr::verify::check_mut_offset_from_u16_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_u32",
        "ptr::mut_ptr::verify::check_mut_offset_from_u32_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_u64",
        "ptr::mut_ptr::verify::check_mut_offset_from_u64_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_u128",
        "ptr::mut_ptr::verify::check_mut_offset_from_u128_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_usize",
        "ptr::mut_ptr::verify::check_mut_offset_from_usize_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_i8",
        "ptr::mut_ptr::verify::check_mut_offset_from_i8_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_i16",
        "ptr::mut_ptr::verify::check_mut_offset_from_i16_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_i32",
        "ptr::mut_ptr::verify::check_mut_offset_from_i32_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_i64",
        "ptr::mut_ptr::verify::check_mut_offset_from_i64_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_i128",
        "ptr::mut_ptr::verify::check_mut_offset_from_i128_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_isize",
        "ptr::mut_ptr::verify::check_mut_offset_from_isize_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_tuple_1",
        "ptr::mut_ptr::verify::check_mut_offset_from_tuple_1_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_tuple_2",
        "ptr::mut_ptr::verify::check_mut_offset_from_tuple_2_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_tuple_3",
        "ptr::mut_ptr::verify::check_mut_offset_from_tuple_3_array",
        "ptr::mut_ptr::verify::check_mut_offset_from_tuple_4",
        "ptr::mut_ptr::verify::check_mut_offset_from_tuple_4_array"
      ]
    },
    {
      "function": "ptr::mut_ptr::<impl *mut T>::sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mut_ptr.rs",
      "harnesses": [
        "ptr::mut_ptr::verify::check_mut_sub_slice_i8",
        "ptr::mut_ptr::verify::check_mut_sub_slice_i16",
        "ptr::mut_ptr::verify::check_mut_sub_slice_i32",
        "ptr::mut_ptr::verify::check_mut_sub_slice_i64",
        "ptr::mut_ptr::verify::check_mut_sub_slice_i128",
        "ptr::mut_ptr::verify::check_mut_sub_slice_isize",
        "ptr::mut_ptr::verify::check_mut_sub_slice_u8",
        "ptr::mut_ptr::verify::check_mut_sub_slice_u16",
        "ptr::mut_ptr::verify::check_mut_sub_slice_u32",
        "ptr::mut_ptr::verify::check_mut_sub_slice_u64",
        "ptr::mut_ptr::verify::check_mut_sub_slice_u128",
        "ptr::mut_ptr::verify::check_mut_sub_slice_usize",
        "ptr::mut_ptr::verify::check_mut_sub_slice_tuple_1",
        "ptr::mut_ptr::verify::check_mut_sub_slice_tuple_2",
        "ptr::mut_ptr::verify::check_mut_sub_slice_tuple_3",
        "ptr::mut_ptr::verify::check_mut_sub_slice_tuple_4",
        "ptr::mut_ptr::verify::check_mut_sub_unit",
        "ptr::mut_ptr::verify::check_mut_sub_i8",
        "ptr::mut_ptr::verify::check_mut_sub_i16",
        "ptr::mut_ptr::verify::check_mut_sub_i32",
        "ptr::mut_ptr::verify::check_mut_sub_i64",
        "ptr::mut_ptr::verify::check_mut_sub_i128",
        "ptr::mut_ptr::verify::check_mut_sub_isize",
        "ptr::mut_ptr::verify::check_mut_sub_u16",
        "ptr::mut_ptr::verify::check_mut_sub_u32",
        "ptr::mut_ptr::verify::check_mut_sub_u64",
        "ptr::mut_ptr::verify::check_mut_sub_u128",
        "ptr::mut_ptr::verify::check_mut_sub_usize",
        "ptr::mut_ptr::verify::check_mut_sub_tuple_1",
        "ptr::mut_ptr::verify::check_mut_sub_tuple_2",
        "ptr::mut_ptr::verify::check_mut_sub_tuple_3",
        "ptr::mut_ptr::verify::check_mut_sub_tuple_4"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_add"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::addr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_addr"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::align_offset",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_align_offset",
        "ptr::non_null::verify::non_null_check_align_offset_negative"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::as_mut",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_as_mut"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::as_ptr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_as_ptr"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::as_ref",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_as_ref"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::as_uninit_mut",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_as_uninit_mut"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::as_uninit_ref",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_as_uninit_ref"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::byte_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_byte_add_proof",
        "ptr::non_null::verify::non_null_byte_add_dangling_proof"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::byte_offset",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_byte_offset_proof"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::byte_offset_from",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_byte_offset_from_proof",
        "ptr::non_null::verify::non_null_byte_offset_from_dangling_proof"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::byte_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_byte_sub"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::cast",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_cast"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::copy_from",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_copy_from"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::copy_from_nonoverlapping",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_copy_from_nonoverlapping"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::copy_to",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_copy_to"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::copy_to_nonoverlapping",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_copy_to_nonoverlapping"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::dangling",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": []
    },
    {
      "function": "ptr::non_null::NonNull::<T>::drop_in_place",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_drop_in_place"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::from_raw_parts",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_from_raw_part_trait"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::is_aligned",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_slice_is_aligned_check"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::is_aligned_to",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_is_aligned_to"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::map_addr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_map_addr"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::new",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_new"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::new_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_new_unchecked"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::offset",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_offset"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::offset_from",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_offset_from"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::offset_from_unsigned",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_sub_ptr"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::read",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_read"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::read_unaligned",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_read_unaligned"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::read_volatile",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_read_volatile"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::replace",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_replace"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_sub"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::swap",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_swap"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::to_raw_parts",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_to_raw_parts"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::with_addr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_with_addr"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::write",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_write_unit",
        "ptr::non_null::verify::non_null_check_write_i8",
        "ptr::non_null::verify::non_null_check_write_i16",
        "ptr::non_null::verify::non_null_check_write_i32",
        "ptr::non_null::verify::non_null_check_write_i64",
        "ptr::non_null::verify::non_null_check_write_i128",
        "ptr::non_null::verify::non_null_check_write_isize",
        "ptr::non_null::verify::non_null_check_write_u8",
        "ptr::non_null::verify::non_null_check_write_u16",
        "ptr::non_null::verify::non_null_check_write_u32",
        "ptr::non_null::verify::non_null_check_write_u64",
        "ptr::non_null::verify::non_null_check_write_u128",
        "ptr::non_null::verify::non_null_check_write_usize"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::write_bytes",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_write_bytes_unit",
        "ptr::non_null::verify::non_null_check_write_bytes_i8",
        "ptr::non_null::verify::non_null_check_write_bytes_i16",
        "ptr::non_null::verify::non_null_check_write_bytes_i32",
        "ptr::non_null::verify::non_null_check_write_bytes_i64",
        "ptr::non_null::verify::non_null_check_write_bytes_i128",
        "ptr::non_null::verify::non_null_check_write_bytes_isize",
        "ptr::non_null::verify::non_null_check_write_bytes_u8",
        "ptr::non_null::verify::non_null_check_write_bytes_u16",
        "ptr::non_null::verify::non_null_check_write_bytes_u32",
        "ptr::non_null::verify::non_null_check_write_bytes_u64",
        "ptr::non_null::verify::non_null_check_write_bytes_u128",
        "ptr::non_null::verify::non_null_check_write_bytes_usize"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::write_unaligned",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_write_unaligned_unit",
        "ptr::non_null::verify::non_null_check_write_unaligned_i8",
        "ptr::non_null::verify::non_null_check_write_unaligned_i16",
        "ptr::non_null::verify::non_null_check_write_unaligned_i32",
        "ptr::non_null::verify::non_null_check_write_unaligned_i64",
        "ptr::non_null::verify::non_null_check_write_unaligned_i128",
        "ptr::non_null::verify::non_null_check_write_unaligned_isize",
        "ptr::non_null::verify::non_null_check_write_unaligned_u8",
        "ptr::non_null::verify::non_null_check_write_unaligned_u16",
        "ptr::non_null::verify::non_null_check_write_unaligned_u32",
        "ptr::non_null::verify::non_null_check_write_unaligned_u64",
        "ptr::non_null::verify::non_null_check_write_unaligned_u128",
        "ptr::non_null::verify::non_null_check_write_unaligned_usize"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<T>::write_volatile",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_write_volatile_unit",
        "ptr::non_null::verify::non_null_check_write_volatile_i8",
        "ptr::non_null::verify::non_null_check_write_volatile_i16",
        "ptr::non_null::verify::non_null_check_write_volatile_i32",
        "ptr::non_null::verify::non_null_check_write_volatile_i64",
        "ptr::non_null::verify::non_null_check_write_volatile_i128",
        "ptr::non_null::verify::non_null_check_write_volatile_isize",
        "ptr::non_null::verify::non_null_check_write_volatile_u8",
        "ptr::non_null::verify::non_null_check_write_volatile_u16",
        "ptr::non_null::verify::non_null_check_write_volatile_u32",
        "ptr::non_null::verify::non_null_check_write_volatile_u64",
        "ptr::non_null::verify::non_null_check_write_volatile_u128",
        "ptr::non_null::verify::non_null_check_write_volatile_usize"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<[T]>::as_mut_ptr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_as_mut_ptr"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<[T]>::as_non_null_ptr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_as_non_null_ptr"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<[T]>::as_uninit_slice",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_as_uninit_slice"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<[T]>::as_uninit_slice_mut",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_as_uninit_slice_mut"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<[T]>::get_unchecked_mut",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_get_unchecked_mut"
      ]
    },
    {
      "function": "ptr::non_null::NonNull::<[T]>::slice_from_raw_parts",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/non_null.rs",
      "harnesses": [
        "ptr::non_null::verify::non_null_check_slice_from_raw_parts"
      ]
    },
    {
      "function": "ptr::read_volatile",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mod.rs",
      "harnesses": [
        "ptr::verify::check_read_u128"
      ]
    },
    {
      "function": "ptr::unique::Unique::<T>::as_non_null_ptr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/unique.rs",
      "harnesses": [
        "ptr::unique::verify::check_as_non_null_ptr"
      ]
    },
    {
      "function": "ptr::unique::Unique::<T>::as_ptr",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/unique.rs",
      "harnesses": [
        "ptr::unique::verify::check_as_ptr"
      ]
    },
    {
      "function": "ptr::unique::Unique::<T>::new",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/unique.rs",
      "harnesses": [
        "ptr::unique::verify::check_new"
      ]
    },
    {
      "function": "ptr::unique::Unique::<T>::new_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/unique.rs",
      "harnesses": [
        "ptr::unique::verify::check_new_unchecked"
      ]
    },
    {
      "function": "ptr::write_volatile",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/ptr/mod.rs",
      "harnesses": []
    },
    {
      "function": "slice::iter::Iter::<'a, T>::next_back_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/iter/macros.rs",
      "harnesses": [
        "slice::iter::verify::verify_unit::check_next_back_unchecked",
        "slice::iter::verify::verify_u8::check_next_back_unchecked",
        "slice::iter::verify::verify_char::check_next_back_unchecked",
        "slice::iter::verify::verify_tup::check_next_back_unchecked"
      ]
    },
    {
      "function": "slice::iter::Iter::<'a, T>::post_inc_start",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/iter/macros.rs",
      "harnesses": [
        "slice::iter::verify::verify_unit::check_post_inc_start",
        "slice::iter::verify::verify_u8::check_post_inc_start",
        "slice::iter::verify::verify_char::check_post_inc_start",
        "slice::iter::verify::verify_tup::check_post_inc_start"
      ]
    },
    {
      "function": "slice::iter::Iter::<'a, T>::pre_dec_end",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/iter/macros.rs",
      "harnesses": [
        "slice::iter::verify::verify_unit::check_pre_dec_end",
        "slice::iter::verify::verify_u8::check_pre_dec_end",
        "slice::iter::verify::verify_char::check_pre_dec_end",
        "slice::iter::verify::verify_tup::check_pre_dec_end"
      ]
    },
    {
      "function": "slice::iter::IterMut::<'a, T>::next_back_unchecked",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/iter/macros.rs",
      "harnesses": []
    },
    {
      "function": "slice::iter::IterMut::<'a, T>::post_inc_start",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/iter/macros.rs",
      "harnesses": []
    },
    {
      "function": "slice::iter::IterMut::<'a, T>::pre_dec_end",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/slice/iter/macros.rs",
      "harnesses": []
    },
    {
      "function": "str::pattern::small_slice_eq",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/str/pattern.rs",
      "harnesses": []
    },
    {
      "function": "time::Duration::as_micros",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "time::duration_verify::duration_as_micros",
        "time::duration_verify::duration_as_micros_panics"
      ]
    },
    {
      "function": "time::Duration::as_millis",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "time::duration_verify::duration_as_millis",
        "time::duration_verify::duration_as_millis_panics"
      ]
    },
    {
      "function": "time::Duration::as_secs",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "time::duration_verify::duration_as_secs",
        "time::duration_verify::duration_as_secs_panics"
      ]
    },
    {
      "function": "time::Duration::checked_add",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "time::duration_verify::duration_checked_add",
        "time::duration_verify::duration_checked_add_panics",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "time::Duration::checked_div",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "time::duration_verify::duration_checked_div",
        "time::duration_verify::duration_checked_div_panics",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "time::Duration::checked_mul",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "time::duration_verify::duration_checked_mul",
        "time::duration_verify::duration_checked_mul_panics",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "time::Duration::checked_sub",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "time::duration_verify::duration_checked_sub",
        "time::duration_verify::duration_checked_sub_panics",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "time::Duration::from_micros",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "time::Duration::from_millis",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "time::Duration::from_nanos",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "time::Duration::from_secs",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "time::Duration::new",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "time::duration_verify::duration_new",
        "time::duration_verify::duration_new_panics",
        "kani::internal::automatic_harness"
      ]
    },
    {
      "function": "time::Duration::subsec_micros",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "time::duration_verify::duration_subsec_micros",
        "time::duration_verify::duration_subsec_micros_panics"
      ]
    },
    {
      "function": "time::Duration::subsec_millis",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "time::duration_verify::duration_subsec_millis",
        "time::duration_verify::duration_subsec_millis_panics"
      ]
    },
    {
      "function": "time::Duration::subsec_nanos",
      "file": "/home/runner/work/verify-rust-std/verify-rust-std/library/core/src/time.rs",
      "harnesses": [
        "time::duration_verify::duration_subsec_nanos",
        "time::duration_verify::duration_subsec_nanos_panics"
      ]
    }
  ],
  "totals": {
    "standard-harnesses": 8385,
    "contract-harnesses": 1232,
    "functions-under-contract": 356
  }
}