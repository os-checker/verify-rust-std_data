{
  "file": "alloc/src/string.rs",
  "name": "string::<impl core::cmp::PartialEq<string::String> for str>::ne",
  "hash": "184038315832792562408551997350214981305",
  "hash_direct": "55179720140529790229264899187878773310",
  "src": "fn ne(&self, other: &$lhs) -> bool {\n                PartialEq::ne(&self[..], &other[..])\n            }",
  "macro_backtrace": [
    {
      "callsite": "impl_eq! { String, str }",
      "defsite": "macro_rules! impl_eq {\n    ($lhs:ty, $rhs: ty) => {\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[allow(unused_lifetimes)]\n        impl<'a, 'b> PartialEq<$rhs> for $lhs {\n            #[inline]\n            fn eq(&self, other: &$rhs) -> bool {\n                PartialEq::eq(&self[..], &other[..])\n            }\n            #[inline]\n            fn ne(&self, other: &$rhs) -> bool {\n                PartialEq::ne(&self[..], &other[..])\n            }\n        }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[allow(unused_lifetimes)]\n        impl<'a, 'b> PartialEq<$lhs> for $rhs {\n            #[inline]\n            fn eq(&self, other: &$lhs) -> bool {\n                PartialEq::eq(&self[..], &other[..])\n            }\n            #[inline]\n            fn ne(&self, other: &$lhs) -> bool {\n                PartialEq::ne(&self[..], &other[..])\n            }\n        }\n    };\n}"
    }
  ],
  "callees": [
    "90550506073072508079683710598133024545",
    "74918953193090028864687354296516779254",
    "98314984002883387434164956346329117805",
    "83732968002230007866027969588250734166",
    "17698969087469682875451835858611922825",
    "4983489024534589811592846137968891955",
    "341482190811136577115511996713205275371",
    "1092546296446395968917180083847992040638",
    "231830806247140689414755699476824332549",
    "12281449246394340237926324936375242532",
    "181267529910573756716102767087485333561",
    "79817071675776388295206212610749591701",
    "1824545319189397521315695847785602896178",
    "141051090481435808783715316343782561731",
    "97566299569839892074656028861613377837",
    "1055043272310861592713228670863657256034",
    "183318808304541056264763457267830246088",
    "51372523453683089364244340980133861262",
    "169382045895387326079929663684999712557",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "146612017564224181584303574960223420416",
    "63085389524472853348886374617170044294",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "139907086782363519768211215911218405340",
    "181953690662554297912505335505865467275",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "121866230926415018332270093276707107239",
    "1427536526616347568511859223439081842037",
    "181717373102152254895109628399379607332",
    "1451197840112163405012358816355909731614",
    "1482905829916877089011245213746887628087",
    "25317084132739389914014022964198366772",
    "116099542212950489213656603239721182016",
    "507904100746306992810682211356468014136",
    "47672539441842164771342608976601968881",
    "907377439821672286413857727237844849140",
    "683320997578289266616454728852356232270",
    "280133775636475637812335811211808216208",
    "8032951471598742018556934939338046899",
    "131549958022719682648073225120926112828",
    "502317594467260197912026909171319940573",
    "45381972001922168241039115176097203457",
    "112989397975222255532054380452996322405",
    "734748700356449319315300238482033757944",
    "56586361413793673417653620039252553370",
    "192903257417349624310389255189038584608"
  ]
}
