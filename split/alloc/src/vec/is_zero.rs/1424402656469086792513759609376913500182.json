{
  "file": "alloc/src/vec/is_zero.rs",
  "name": "<core::option::Option<u8> as vec::is_zero::IsZero>::is_zero",
  "hash": "1424402656469086792513759609376913500182",
  "hash_direct": "163612994878581541022420329609272889002",
  "src": "fn is_zero(&self) -> bool {\n                const {\n                    let none: Self = unsafe { core::mem::MaybeUninit::zeroed().assume_init() };\n                    assert!(none.is_none());\n                }\n                self.is_none()\n            }",
  "macro_backtrace": [
    {
      "callsite": "impl_is_zero_option_of_int!(u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize)",
      "defsite": "macro_rules! impl_is_zero_option_of_int {\n    ($($t:ty),+ $(,)?) => {$(\n        unsafe impl IsZero for Option<$t> {\n            #[inline]\n            fn is_zero(&self) -> bool {\n                const {\n                    let none: Self = unsafe { core::mem::MaybeUninit::zeroed().assume_init() };\n                    assert!(none.is_none());\n                }\n                self.is_none()\n            }\n        }\n    )+};\n}"
    }
  ],
  "callees": [
    "80678743932934188462391062618383121363",
    "20335785732398480201189725569508714552"
  ]
}
