{
  "file": "alloc/src/vec/drain.rs",
  "name": "<vec::drain::Drain<'_, u8> as core::ops::Drop>::drop",
  "hash": "34389430259418115659667898447436086761",
  "hash_direct": "173323975976884428155994627636279915832",
  "src": "fn drop(&mut self) {\n        /// Moves back the un-`Drain`ed elements to restore the original `Vec`.\n        struct DropGuard<'r, 'a, T, A: Allocator>(&'r mut Drain<'a, T, A>);\n\n        impl<'r, 'a, T, A: Allocator> Drop for DropGuard<'r, 'a, T, A> {\n            fn drop(&mut self) {\n                if self.0.tail_len > 0 {\n                    unsafe {\n                        let source_vec = self.0.vec.as_mut();\n                        // memmove back untouched tail, update to new length\n                        let start = source_vec.len();\n                        let tail = self.0.tail_start;\n                        if tail != start {\n                            let src = source_vec.as_ptr().add(tail);\n                            let dst = source_vec.as_mut_ptr().add(start);\n                            ptr::copy(src, dst, self.0.tail_len);\n                        }\n                        source_vec.set_len(start + self.0.tail_len);\n                    }\n                }\n            }\n        }\n\n        let iter = mem::take(&mut self.iter);\n        let drop_len = iter.len();\n\n        let mut vec = self.vec;\n\n        if T::IS_ZST {\n            // ZSTs have no identity, so we don't need to move them around, we only need to drop the correct amount.\n            // this can be achieved by manipulating the Vec length instead of moving values out from `iter`.\n            unsafe {\n                let vec = vec.as_mut();\n                let old_len = vec.len();\n                vec.set_len(old_len + drop_len + self.tail_len);\n                vec.truncate(old_len + self.tail_len);\n            }\n\n            return;\n        }\n\n        // ensure elements are moved back into their appropriate places, even when drop_in_place panics\n        let _guard = DropGuard(self);\n\n        if drop_len == 0 {\n            return;\n        }\n\n        // as_slice() must only be called when iter.len() is > 0 because\n        // it also gets touched by vec::Splice which may turn it into a dangling pointer\n        // which would make it and the vec pointer point to different allocations which would\n        // lead to invalid pointer arithmetic below.\n        let drop_ptr = iter.as_slice().as_ptr();\n\n        unsafe {\n            // drop_ptr comes from a slice::Iter which only gives us a &[T] but for drop_in_place\n            // a pointer with mutable provenance is necessary. Therefore we must reconstruct\n            // it from the original vec but also avoid creating a &mut to the front since that could\n            // invalidate raw pointers to it which some unsafe code might rely on.\n            let vec_ptr = vec.as_mut().as_mut_ptr();\n            let drop_offset = drop_ptr.offset_from_unsigned(vec_ptr);\n            let to_drop = ptr::slice_from_raw_parts_mut(vec_ptr.add(drop_offset), drop_len);\n            ptr::drop_in_place(to_drop);\n        }\n    }",
  "callees": [
    "1533423186445997398816631445536082849272",
    "90550506073072508079683710598133024545",
    "172845444129193162842518920193739325054",
    "74918953193090028864687354296516779254",
    "98314984002883387434164956346329117805",
    "160363053418264785729091498919398991810",
    "84241016865684247829461060909253808174",
    "4983489024534589811592846137968891955",
    "750900085021914109817323610382885430452",
    "40419404375744685231598930210685677524",
    "75201227201363597022710071927374645337",
    "50624895404935393268578357841554174259",
    "98672282964141875357947081004723757755",
    "12281449246394340237926324936375242532",
    "99835071136844477394667148890151411684",
    "73694171442177138896992135977130617471",
    "181267529910573756716102767087485333561",
    "1362727304153836450215186853291845605124",
    "79817071675776388295206212610749591701",
    "310476737258981539215905981644988688429",
    "28798021335959613552226646194290957655",
    "1824545319189397521315695847785602896178",
    "1022803319099694746713266409355997953681",
    "97566299569839892074656028861613377837",
    "4978069388981905028537722990717467509",
    "1055043272310861592713228670863657256034",
    "863216707320030369510831439866410126277",
    "433890548510973964412005170244666884332",
    "17976542625295060605041426324269334020",
    "897265533945643607115272871669854221703",
    "89502211078669479795623704974378882516",
    "170846580729842163074659927269266210653",
    "8010637041282557608011263416999007001",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "170281423934441608902372914597711355436",
    "146612017564224181584303574960223420416",
    "63085389524472853348886374617170044294",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "20743252454400330067347997888777335224",
    "181953690662554297912505335505865467275",
    "927601772743169303216908637897944691801",
    "262831349882779883815480941076479924039",
    "1574198065840570931715496922327374750806",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "124048927270173258543682139801948377007",
    "121866230926415018332270093276707107239",
    "1564307727506637093914401847968137384026",
    "131427416467544065589995980567879930994",
    "144857019892404489298787929431092083119",
    "62397834040325720748013844045765185",
    "1427536526616347568511859223439081842037",
    "71918472924532911689935626826717918785",
    "1627504595542798394711855078209690330045",
    "717317897984632901316617723476110950437",
    "735018919234909984611473533948904259624",
    "5544996909776080217602144286126393952",
    "298884710962780778440604835530166814",
    "86050674789736003825945519059478190170",
    "21899365262288413956629574192061165528",
    "147283009579998274218441518976402707224",
    "181717373102152254895109628399379607332",
    "1451197840112163405012358816355909731614",
    "131565587963228383647279312131403441535",
    "481560579651531402612315738808783055192",
    "28365086640543528706340429670893583977",
    "1482905829916877089011245213746887628087",
    "25317084132739389914014022964198366772",
    "27193472853446989017110736098888349207",
    "647130595695700043915055387288502667706",
    "612855899266170343110113550083696294497",
    "21891345916512513124557685890206627",
    "88375336053887131132608342863803713993",
    "47672539441842164771342608976601968881",
    "1225142813192791121511447899649680850715",
    "471059197914006352117967940518452112349",
    "356896403557560017460350669106551612",
    "747156457449598790816736684951635660145",
    "18333082938164057630130824807004532935",
    "150019527417952190621648957790276729733",
    "916552609649539653110630350571106092626",
    "112989397975222255532054380452996322405",
    "734748700356449319315300238482033757944",
    "597683522621928614711119364722938279780",
    "17341452779707394601695269753709495351",
    "171096833768613821705454793662301421888"
  ]
}
