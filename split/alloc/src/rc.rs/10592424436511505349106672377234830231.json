{
  "file": "alloc/src/rc.rs",
  "name": "rc::Rc::<str>::as_ptr",
  "hash": "10592424436511505349106672377234830231",
  "hash_direct": "1042540758556993406011990684816808013684",
  "src": "pub fn as_ptr(this: &Self) -> *const T {\n        let ptr: *mut RcInner<T> = NonNull::as_ptr(this.ptr);\n\n        // SAFETY: This cannot go through Deref::deref or Rc::inner because\n        // this is required to retain raw/mut provenance such that e.g. `get_mut` can\n        // write through the pointer after the Rc is recovered through `from_raw`.\n        unsafe { &raw mut (*ptr).value }\n    }",
  "callees": [
    "101370486403788134278203698674048947574"
  ]
}
