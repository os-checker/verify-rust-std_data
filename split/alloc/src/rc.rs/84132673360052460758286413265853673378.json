{
  "file": "alloc/src/rc.rs",
  "name": "rc::Rc::<[u8]>::as_ptr",
  "hash": "84132673360052460758286413265853673378",
  "hash_direct": "21430882119333160205477500904946203050",
  "src": "pub fn as_ptr(this: &Self) -> *const T {\n        let ptr: *mut RcInner<T> = NonNull::as_ptr(this.ptr);\n\n        // SAFETY: This cannot go through Deref::deref or Rc::inner because\n        // this is required to retain raw/mut provenance such that e.g. `get_mut` can\n        // write through the pointer after the Rc is recovered through `from_raw`.\n        unsafe { &raw mut (*ptr).value }\n    }",
  "callees": [
    "147205829586859677504139957085352292093"
  ]
}
