{
  "file": "alloc/src/sync.rs",
  "name": "sync::Arc::<str>::as_ptr",
  "hash": "940340444630521475511723370575895175760",
  "hash_direct": "769030589313264777910970928587575508398",
  "src": "pub fn as_ptr(this: &Self) -> *const T {\n        let ptr: *mut ArcInner<T> = NonNull::as_ptr(this.ptr);\n\n        // SAFETY: This cannot go through Deref::deref or RcInnerPtr::inner because\n        // this is required to retain raw/mut provenance such that e.g. `get_mut` can\n        // write through the pointer after the Rc is recovered through `from_raw`.\n        unsafe { &raw mut (*ptr).data }\n    }",
  "callees": [
    "116139356362897735004716173074213829708"
  ]
}
