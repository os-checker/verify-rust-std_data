{
  "file": "alloc/src/sync.rs",
  "name": "sync::Arc::<core::bstr::ByteStr>::as_ptr",
  "hash": "102935915837468261647906928911562368394",
  "hash_direct": "1039415508690460361716142621798453645188",
  "src": "pub fn as_ptr(this: &Self) -> *const T {\n        let ptr: *mut ArcInner<T> = NonNull::as_ptr(this.ptr);\n\n        // SAFETY: This cannot go through Deref::deref or RcInnerPtr::inner because\n        // this is required to retain raw/mut provenance such that e.g. `get_mut` can\n        // write through the pointer after the Rc is recovered through `from_raw`.\n        unsafe { &raw mut (*ptr).data }\n    }",
  "callees": [
    "20236185230345869484853586971452666953"
  ]
}
