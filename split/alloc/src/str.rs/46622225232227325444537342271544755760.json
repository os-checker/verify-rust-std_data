{
  "file": "alloc/src/str.rs",
  "name": "str::convert_while_ascii",
  "hash": "46622225232227325444537342271544755760",
  "hash_direct": "85395842056320447712538032913147903215",
  "src": "pub fn convert_while_ascii(s: &str, convert: fn(&u8) -> u8) -> (String, &str) {\n    // Process the input in chunks of 16 bytes to enable auto-vectorization.\n    // Previously the chunk size depended on the size of `usize`,\n    // but on 32-bit platforms with sse or neon is also the better choice.\n    // The only downside on other platforms would be a bit more loop-unrolling.\n    const N: usize = 16;\n\n    let mut slice = s.as_bytes();\n    let mut out = Vec::with_capacity(slice.len());\n    let mut out_slice = out.spare_capacity_mut();\n\n    let mut ascii_prefix_len = 0_usize;\n    let mut is_ascii = [false; N];\n\n    while slice.len() >= N {\n        // SAFETY: checked in loop condition\n        let chunk = unsafe { slice.get_unchecked(..N) };\n        // SAFETY: out_slice has at least same length as input slice and gets sliced with the same offsets\n        let out_chunk = unsafe { out_slice.get_unchecked_mut(..N) };\n\n        for j in 0..N {\n            is_ascii[j] = chunk[j] <= 127;\n        }\n\n        // Auto-vectorization for this check is a bit fragile, sum and comparing against the chunk\n        // size gives the best result, specifically a pmovmsk instruction on x86.\n        // See https://github.com/llvm/llvm-project/issues/96395 for why llvm currently does not\n        // currently recognize other similar idioms.\n        if is_ascii.iter().map(|x| *x as u8).sum::<u8>() as usize != N {\n            break;\n        }\n\n        for j in 0..N {\n            out_chunk[j] = MaybeUninit::new(convert(&chunk[j]));\n        }\n\n        ascii_prefix_len += N;\n        slice = unsafe { slice.get_unchecked(N..) };\n        out_slice = unsafe { out_slice.get_unchecked_mut(N..) };\n    }\n\n    // handle the remainder as individual bytes\n    while slice.len() > 0 {\n        let byte = slice[0];\n        if byte > 127 {\n            break;\n        }\n        // SAFETY: out_slice has at least same length as input slice\n        unsafe {\n            *out_slice.get_unchecked_mut(0) = MaybeUninit::new(convert(&byte));\n        }\n        ascii_prefix_len += 1;\n        slice = unsafe { slice.get_unchecked(1..) };\n        out_slice = unsafe { out_slice.get_unchecked_mut(1..) };\n    }\n\n    unsafe {\n        // SAFETY: ascii_prefix_len bytes have been initialized above\n        out.set_len(ascii_prefix_len);\n\n        // SAFETY: We have written only valid ascii to the output vec\n        let ascii_string = String::from_utf8_unchecked(out);\n\n        // SAFETY: we know this is a valid char boundary\n        // since we only skipped over leading ascii bytes\n        let rest = core::str::from_utf8_unchecked(slice);\n\n        (ascii_string, rest)\n    }\n}",
  "callees": [
    "1141955903753897517014625167327847791907",
    "96540308768482821532855729325539541075",
    "1170796756882490861817329164502952420199",
    "1376541346679052968213576567834425860228",
    "1549398485481521168517137548698896520595",
    "593523720810475000712660203952371323969",
    "140493508095315886339161612115402293715",
    "1806196275982253069117281718696114376262",
    "1029563312923393900611914925131263606627",
    "418064438806156603612250954936421482396",
    "1533423186445997398816631445536082849272",
    "90550506073072508079683710598133024545",
    "843607728960577533210099764725471441911",
    "172845444129193162842518920193739325054",
    "178888480150673672710547303845204568782",
    "1720153703676596594616387816288850115928",
    "74918953193090028864687354296516779254",
    "98314984002883387434164956346329117805",
    "139796900412345013714013779316863967056",
    "789779750667318009815921829549697549589",
    "345677802933696428310596231819274392380",
    "1608126128991884205014632356534797510306",
    "47317165689800636576984679401220719271",
    "816272336489707843515791886556519578691",
    "53926950490582236258169579281820050953",
    "249864387903701137418259231431282250924",
    "873312671370857069413939018555892310796",
    "61581997893649122391507156109630301052",
    "84241016865684247829461060909253808174",
    "750900085021914109817323610382885430452",
    "75201227201363597022710071927374645337",
    "8418264435656867517489227881359102816",
    "128631324620696442828674183505205912132",
    "121424719828472097984215509595024445223",
    "1034976420972693995867219351672413528",
    "12355321507198182179923507819259328874",
    "1325325235254434578815216480762443308344",
    "149924985361368800211578819930051094114",
    "1803329896288060234818324505062680243524",
    "84664390975742426535529991415601216610",
    "74582435882304541756907371447791300562",
    "116988710396478150633330979827831642523",
    "1821279184073356639116062890479777334947",
    "68921932406054428732821110003949139697",
    "645068483546494096517064562744024457985",
    "1099899350342654162615874749245636043676",
    "1492460362374206871012573143365903954040",
    "1760151968317278624513482005825546212798",
    "39115033056683215087715666415425120884",
    "83960345459681432894037021100786495452",
    "12281449246394340237926324936375242532",
    "1511275866077199755612412536318849312657",
    "99835071136844477394667148890151411684",
    "73694171442177138896992135977130617471",
    "181267529910573756716102767087485333561",
    "79817071675776388295206212610749591701",
    "310476737258981539215905981644988688429",
    "28798021335959613552226646194290957655",
    "1824545319189397521315695847785602896178",
    "1022803319099694746713266409355997953681",
    "982000556743941713910505972272608303437",
    "750501201691319011517488612063475887",
    "275205922420073557516874799280562005562",
    "2118490992695327477250583450062131710",
    "806608401546285073416583488309030248740",
    "1390917187629079949812427169424512137623",
    "4833310887722852675564040932252536797",
    "92459923630827286623534073990559799495",
    "112156207669510321949672417435283497498",
    "4985460341548456644715340132601722906",
    "694026802439519219852329061655363856",
    "3240747536940606986685373646208128639",
    "1783063548588688153116995795572290282049",
    "128930257668633610949042071217647527954",
    "1105778356128977603510355842417776591760",
    "60811716918796826293989134400777188024",
    "472691103351681134017152170507512961443",
    "1055043272310861592713228670863657256034",
    "433890548510973964412005170244666884332",
    "116120406547640733017584320872607374165",
    "1077627557077316994111291229578800109768",
    "17976542625295060605041426324269334020",
    "897265533945643607115272871669854221703",
    "89502211078669479795623704974378882516",
    "170846580729842163074659927269266210653",
    "8010637041282557608011263416999007001",
    "89553991991390806369608823483879896538",
    "1402743757155005823915607433842538879575",
    "143016102221237309763749035913502681094",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "170281423934441608902372914597711355436",
    "146612017564224181584303574960223420416",
    "63085389524472853348886374617170044294",
    "50159216329881376683426042292994966409",
    "41567241620038406215851091758143153711",
    "219219865313711050111759755233398488515",
    "117471816198702018754540855755299259662",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "20743252454400330067347997888777335224",
    "181953690662554297912505335505865467275",
    "262831349882779883815480941076479924039",
    "1227509350711597297112970073629001043324",
    "83580257162610437435257696957256196164",
    "164035468327072728989207427908207017221",
    "884862247434119977215906910610914345185",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "1734748669926013698213414247480604306179",
    "704832342025587612818197244398724183197",
    "1564307727506637093914401847968137384026",
    "30660665300176827444815792715306828317",
    "752644167293716817117721550981127924220",
    "115119029872798382712143415600888018962",
    "129371265843786376212757571625914700204",
    "64740490714245877229400284935506222923",
    "109482049463238485059146946585924240553",
    "26729775020789864748593154596149109678",
    "36619566886480397891051911842006423010",
    "71918472924532911689935626826717918785",
    "98867042536983485601376606836502790180",
    "1627504595542798394711855078209690330045",
    "17642609040768170357306619592248401756",
    "717317897984632901316617723476110950437",
    "62253773538177642182582821607134525533",
    "1028188214438922348315249270568765406459",
    "735018919234909984611473533948904259624",
    "106074666638552195754659597836863061870",
    "1112366464614099103610301551387185543483",
    "405748076094904229310652610986727672519",
    "5544996909776080217602144286126393952",
    "1121825575012330479117046270460961910099",
    "30062619518060773941763411544439529155",
    "15207617904206133579678127952722873067",
    "76450282358926438282821830352761448991",
    "1692121302326126842513975538328525568692",
    "55672189867997618954444101500045752413",
    "86050674789736003825945519059478190170",
    "21899365262288413956629574192061165528",
    "164358211437008359648169198339430620131",
    "1241651061519120787510403293355400117847",
    "191385276880374235118125813799253089970",
    "1667682298606969734812723438031418873420",
    "147539031288581863106262858644999442699",
    "181717373102152254895109628399379607332",
    "1451197840112163405012358816355909731614",
    "89197714413278843014244545130375433487",
    "159823931581541125634780307111242749117",
    "90197692979025443755993088945174038379",
    "29456426015549113827640020827732703416",
    "1482905829916877089011245213746887628087",
    "25317084132739389914014022964198366772",
    "735147566348915391518387477037509563238",
    "13928616682825053824421290483912856624",
    "1095130864521188332616929965088324433613",
    "577413129949927409015324227581640375396",
    "40378393836906426016252078635908782567",
    "16014988108024488849731774355881465899",
    "16683272846005037771548773034954616022",
    "1722098407866980298415926726100976777683",
    "165012454201492331709768373179172583880",
    "406436582949009601015245040978259334967",
    "894037887051950506515600066252548051297",
    "630868151155871574813321822147833365466",
    "30275820378103632192968208177745875071",
    "1065676213061427031516083200481517890575",
    "104516453164366674478384513556996795590",
    "95204015927267565235595274820431115965",
    "119298110768442335758713042083629751125",
    "109197800898408184449907079007924007746",
    "16774814232880783452963679159686675263",
    "1598127039758104213216495399965996585644",
    "1386724315027253339517865394660292064890",
    "90259923750203292613789879029341311192",
    "69818675780722933098084537493482268488",
    "683320997578289266616454728852356232270",
    "280133775636475637812335811211808216208",
    "834078073126798639810226440806880283117",
    "71802804150214475725465162712763548345",
    "1233028477207251576616341521939619932739",
    "102689691599348045787776542664671783227",
    "8787952082428538504365079471726452107",
    "116953387026626631555337908913709999943",
    "166733430212842246099444193348241345083",
    "110578059630913604067207515488861005594",
    "747156457449598790816736684951635660145",
    "150019527417952190621648957790276729733",
    "188170369461253326914020619840952639459",
    "112989397975222255532054380452996322405",
    "734748700356449319315300238482033757944",
    "597683522621928614711119364722938279780",
    "17341452779707394601695269753709495351",
    "171096833768613821705454793662301421888"
  ]
}
