{
  "file": "alloc/src/alloc.rs",
  "name": "<alloc::Global as core::alloc::Allocator>::deallocate",
  "hash": "394899740451847047017644777761427403196",
  "hash_direct": "9227114861166224037988206707815828316",
  "src": "unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {\n        if layout.size() != 0 {\n            // SAFETY:\n            // * We have checked that `layout` is non-zero in size.\n            // * The caller is obligated to provide a layout that \"fits\", and in this case,\n            //   \"fit\" always means a layout that is equal to the original, because our\n            //   `allocate()`, `grow()`, and `shrink()` implementations never returns a larger\n            //   allocation than requested.\n            // * Other conditions must be upheld by the caller, as per `Allocator::deallocate()`'s\n            //   safety documentation.\n            unsafe { dealloc(ptr.as_ptr(), layout) }\n        }\n    }",
  "callees": [
    "1818446027419519358414583805786772455766",
    "12355321507198182179923507819259328874",
    "1099899350342654162615874749245636043676",
    "41567241620038406215851091758143153711",
    "181717373102152254895109628399379607332"
  ]
}
