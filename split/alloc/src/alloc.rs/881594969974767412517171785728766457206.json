{
  "file": "alloc/src/alloc.rs",
  "name": "alloc::Global::grow_impl",
  "hash": "881594969974767412517171785728766457206",
  "hash_direct": "107785947318542834916803412221612869542",
  "src": "unsafe fn grow_impl(\n        &self,\n        ptr: NonNull<u8>,\n        old_layout: Layout,\n        new_layout: Layout,\n        zeroed: bool,\n    ) -> Result<NonNull<[u8]>, AllocError> {\n        debug_assert!(\n            new_layout.size() >= old_layout.size(),\n            \"`new_layout.size()` must be greater than or equal to `old_layout.size()`\"\n        );\n\n        match old_layout.size() {\n            0 => self.alloc_impl(new_layout, zeroed),\n\n            // SAFETY: `new_size` is non-zero as `old_size` is greater than or equal to `new_size`\n            // as required by safety conditions. Other conditions must be upheld by the caller\n            old_size if old_layout.align() == new_layout.align() => unsafe {\n                let new_size = new_layout.size();\n\n                // `realloc` probably checks for `new_size >= old_layout.size()` or something similar.\n                hint::assert_unchecked(new_size >= old_layout.size());\n\n                let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);\n                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;\n                if zeroed {\n                    raw_ptr.add(old_size).write_bytes(0, new_size - old_size);\n                }\n                Ok(NonNull::slice_from_raw_parts(ptr, new_size))\n            },\n\n            // SAFETY: because `new_layout.size()` must be greater than or equal to `old_size`,\n            // both the old and new memory allocation are valid for reads and writes for `old_size`\n            // bytes. Also, because the old allocation wasn't yet deallocated, it cannot overlap\n            // `new_ptr`. Thus, the call to `copy_nonoverlapping` is safe. The safety contract\n            // for `dealloc` must be upheld by the caller.\n            old_size => unsafe {\n                let new_ptr = self.alloc_impl(new_layout, zeroed)?;\n                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);\n                self.deallocate(ptr, old_layout);\n                Ok(new_ptr)\n            },\n        }\n    }",
  "callees": [
    "394899740451847047017644777761427403196",
    "1170796756882490861817329164502952420199",
    "1376541346679052968213576567834425860228",
    "1549398485481521168517137548698896520595",
    "1818446027419519358414583805786772455766",
    "92070042683033039606508164864049320478",
    "12355321507198182179923507819259328874",
    "149924985361368800211578819930051094114",
    "1099899350342654162615874749245636043676",
    "83960345459681432894037021100786495452",
    "12281449246394340237926324936375242532",
    "1511275866077199755612412536318849312657",
    "99835071136844477394667148890151411684",
    "73694171442177138896992135977130617471",
    "181267529910573756716102767087485333561",
    "79817071675776388295206212610749591701",
    "28798021335959613552226646194290957655",
    "1824545319189397521315695847785602896178",
    "1022803319099694746713266409355997953681",
    "489523557192025460313854164093687544855",
    "97566299569839892074656028861613377837",
    "1055043272310861592713228670863657256034",
    "149201007125728463455320865149411692001",
    "50732326018270804158617132727999669219",
    "280432584315771372815037115035770855991",
    "112886468787774265616636362149708028018",
    "62127822181510782405608732116999447182",
    "1578257332020894271617658554056373986878",
    "1077627557077316994111291229578800109768",
    "896899668436043458214649410678042895693",
    "17976542625295060605041426324269334020",
    "897265533945643607115272871669854221703",
    "89502211078669479795623704974378882516",
    "170846580729842163074659927269266210653",
    "8010637041282557608011263416999007001",
    "143016102221237309763749035913502681094",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "146612017564224181584303574960223420416",
    "1357412281760869556115161719233556173642",
    "63085389524472853348886374617170044294",
    "50159216329881376683426042292994966409",
    "41567241620038406215851091758143153711",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "20743252454400330067347997888777335224",
    "181953690662554297912505335505865467275",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "1734748669926013698213414247480604306179",
    "1564307727506637093914401847968137384026",
    "123747546626295634619560249467006487400",
    "129371265843786376212757571625914700204",
    "71918472924532911689935626826717918785",
    "1627504595542798394711855078209690330045",
    "717317897984632901316617723476110950437",
    "145294491422365698876584135661932792761",
    "62253773538177642182582821607134525533",
    "1028188214438922348315249270568765406459",
    "735018919234909984611473533948904259624",
    "5544996909776080217602144286126393952",
    "1121825575012330479117046270460961910099",
    "30062619518060773941763411544439529155",
    "967873380751524452311425788046492104978",
    "13061302005942044081891074551049073819",
    "1801683052089066689110861387567857136490",
    "86050674789736003825945519059478190170",
    "21899365262288413956629574192061165528",
    "164358211437008359648169198339430620131",
    "1241651061519120787510403293355400117847",
    "181717373102152254895109628399379607332",
    "89197714413278843014244545130375433487",
    "159823931581541125634780307111242749117",
    "90197692979025443755993088945174038379",
    "13928616682825053824421290483912856624",
    "163459557412273113395685658816707512259",
    "1095130864521188332616929965088324433613",
    "8787952082428538504365079471726452107",
    "110578059630913604067207515488861005594",
    "1541244257719416772015809458540672325775",
    "150019527417952190621648957790276729733",
    "1156699552441615015915121114228638981936",
    "112989397975222255532054380452996322405",
    "597683522621928614711119364722938279780",
    "17341452779707394601695269753709495351",
    "3350507075784427095714977029030110780"
  ]
}
