{
  "file": "/home/runner/work/distributed-verification/distributed-verification/kani/library/kani_core/src/arbitrary/pointer.rs",
  "name": "kani::arbitrary_ptr::PointerGenerator::<48>::any_alloc_status::<((), bool, u8, u16, i32, f64, i128, usize)>",
  "hash": "1344837712748206098410448203916055910139",
  "hash_direct": "283006118424213193911037066516669280368",
  "attrs": [
    "#[kanitool::unstable(feature = \"mem-predicates\", issue = 2690, reason =\n\"experimental memory predicates and manipulation feature\")]\n"
  ],
  "src": "pub fn any_alloc_status<'a, T>(&'a mut self) -> ArbitraryPointer<'a, T>\n             where T: kani::Arbitrary\n            {\n                assert!(core::mem::size_of::<T>() <= Self::BUF_LEN,\n                    \"Cannot generate in-bounds object of the requested type. Buffer is not big enough.\"\n                );\n\n                let status = kani::any();\n                let ptr = match status {\n                    AllocationStatus::Dangling => {\n                        // Generate potentially unaligned pointer.\n                        let offset = kani::any_where(|b: &usize| *b < core::mem::size_of::<T>());\n                        crate::ptr::NonNull::<T>::dangling().as_ptr().wrapping_add(offset)\n                    }\n                    AllocationStatus::DeadObject => {\n                        let mut obj: T = kani::any();\n                        &mut obj as *mut _\n                    }\n                    AllocationStatus::Null => crate::ptr::null_mut::<T>(),\n                    AllocationStatus::InBounds => {\n                        return self.create_in_bounds_ptr();\n                    }\n                    AllocationStatus::OutOfBounds => {\n                        // Generate potentially unaligned pointer.\n                        let buf_ptr = addr_of_mut!(self.buf) as *mut u8;\n                        let offset = kani::any_where(|b: &usize| *b < core::mem::size_of::<T>());\n                        unsafe { buf_ptr.add(Self::BUF_LEN - offset) as *mut T }\n                    }\n                };\n\n                ArbitraryPointer {\n                    ptr,\n                    is_initialized: false,\n                    status,\n                    phantom: PhantomData,\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "kani_core::ptr_generator!()",
      "defsite": "macro_rules! ptr_generator"
    },
    {
      "callsite": "kani_core::generate_arbitrary!()",
      "defsite": "macro_rules! generate_arbitrary"
    },
    {
      "callsite": "kani_core::kani_lib!(core)",
      "defsite": "macro_rules! kani_lib"
    }
  ],
  "callees": [
    "33257927701088759145492576650028949993",
    "29820920290026793028371250088392598833",
    "39029338530780942852875415034457908204",
    "142233682385197192496337576406475186573",
    "121436409644345670985560530364476132244",
    "110286732951253459166416707375649721039",
    "85558331498578965385294782197452218966",
    "162491259761257566482601707483467907610",
    "306459423763459115515352307666540674473",
    "1072407133286824212215056299035613318842",
    "147045229131837798582436411889184480379",
    "806845981125781977117379474673589931560",
    "7302765691877850174574774288224228806",
    "79445705160493193813499476260991577391",
    "958189995042962280610788339738517992418",
    "75937850618701697242485341276225658423",
    "136621478802095730972375589055034460573",
    "36344987291982929481346995155640206072",
    "26886143464234633910637095875831486656",
    "1050757777987272307317753801956772021235",
    "549764276642186339010013043347128614685",
    "1749518355869090207810375997065416916128",
    "765632163473343149313388288187706299654",
    "1221265949630586294716386477749978237909",
    "163207181483885119042602543895894282581",
    "65904666801875535373394167483502432720",
    "146932710099350851495411580356925047368",
    "28733051149244335398155852330546270084",
    "160733284196106906017611696995803004551",
    "1662070016694227139911860440277225290916",
    "12523065385450334584774763099255662860",
    "1033028275910777309012978573800313733650",
    "1782744404798988383712271617854921565266",
    "1672600323313042077816905580920938331182",
    "42990063052958904976718600653175958912",
    "13020070729243610314357241403528724392",
    "868708452713984376310801203349667993765",
    "940250525962090252914117803890597989072",
    "904011602253290311013108635645094727744",
    "87440073073433873217556963965661883491",
    "1705126367344328804416503967755719661325",
    "162562988142812920362309614379838072419",
    "194549954392298174017290392613951205598",
    "141211877032470274232761446534317219479",
    "129134249345460051228985591432565859699",
    "769871191376860825616640549555308478966",
    "130604729698685538817431701159687560784",
    "147326571724930681683605250526187624864",
    "22860541058604836916644685381819606237",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "161225022469363908823200354701136905531",
    "168545836479171427075036933182194130275",
    "48781150908214245816139026537698810302",
    "1712898201300478840215074793236064467963",
    "1067675883129992420314174327751912045205",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "161003650625398914518944455314788757627",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "380262551218047276514654482281297551654",
    "105125143701458073564296455695110349394",
    "117289807451759479686051841781914570332",
    "541299230588039170913790123167251783892",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "154176165859075263525114316080556726884",
    "94774452442185535288317545443977520870",
    "29274429802034329333938419629143229899",
    "141053324212949065295528163437049843316",
    "1470456111399952882912770843815487575705",
    "161841101350812909507264228562549216663",
    "965561441075058674214372158914955250568",
    "1023873736105898508116732256732798058293",
    "33814002205951829818057943162589856567",
    "439185816467657219411406166276226201769",
    "161622220510776856823492434695380748281",
    "169017152061146820209827866672499117723",
    "1365351597739011160412231277592213691479",
    "132181255668534995767241425077336723282",
    "102291644619027471182533897971804305554",
    "229386479033289665711379943133904578581",
    "153999075255816246604435272140943255557",
    "393974833682574441515290398983271504453",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "15859584444614920947579563356650829639"
  ]
}
