{
  "file": "/home/runner/work/distributed-verification/distributed-verification/kani/library/kani_core/src/arbitrary.rs",
  "name": "<u8 as kani::Arbitrary>::any_array::<1000>",
  "hash": "170251201803297013342965266919045159870",
  "hash_direct": "59067872184761282062735635354615553390",
  "src": "fn any_array<const MAX_ARRAY_LENGTH: usize>() -> [Self; MAX_ARRAY_LENGTH] {\n                        unsafe { crate::kani::any_raw_array::<Self, MAX_ARRAY_LENGTH>() }\n                    }",
  "macro_backtrace": [
    {
      "callsite": "trivial_arbitrary!(u8)",
      "defsite": "macro_rules! trivial_arbitrary {\n            ( $type: ty ) => {\n                impl Arbitrary for $type {\n                    #[inline(always)]\n                    fn any() -> Self {\n                        // This size_of call does not use generic_const_exprs feature. It's inside a macro, and Self isn't generic.\n                        unsafe { crate::kani::any_raw_internal::<Self>() }\n                    }\n                    fn any_array<const MAX_ARRAY_LENGTH: usize>() -> [Self; MAX_ARRAY_LENGTH] {\n                        unsafe { crate::kani::any_raw_array::<Self, MAX_ARRAY_LENGTH>() }\n                    }\n                }\n            };\n        }"
    },
    {
      "callsite": "kani_core::generate_arbitrary!()",
      "defsite": "macro_rules! generate_arbitrary"
    },
    {
      "callsite": "kani_core::kani_lib!(core)",
      "defsite": "macro_rules! kani_lib"
    }
  ],
  "callees": [
    "986489842671134669115343448938276802164",
    "704899739944169131515188692716573164332",
    "39357944020649459283513918717052584242"
  ]
}
