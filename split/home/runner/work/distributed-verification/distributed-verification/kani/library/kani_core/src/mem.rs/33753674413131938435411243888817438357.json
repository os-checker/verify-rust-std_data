{
  "file": "/home/runner/work/distributed-verification/distributed-verification/kani/library/kani_core/src/mem.rs",
  "name": "kani::mem::is_inbounds::<(i64, i64)>",
  "hash": "33753674413131938435411243888817438357",
  "hash_direct": "13916870289726267397416462847607580663",
  "attrs": [
    "#[kanitool::unstable(feature = \"mem-predicates\", issue = 3946, reason =\n\"experimental memory predicate API\")]\n"
  ],
  "src": "pub fn is_inbounds<T: MetaSized>(ptr: *const T) -> bool {\n            // If size overflows, then pointer cannot be inbounds.\n            let Some(sz) = checked_size_of_raw(ptr) else { return false };\n            if sz == 0 {\n                true // ZST pointers are always valid including nullptr.\n            } else if ptr.is_null() {\n                false\n            } else {\n                // Note that this branch can't be tested in concrete execution as `is_read_ok` needs to be\n                // stubbed.\n                // We first assert that the data_ptr points to a valid allocation.\n                let data_ptr = ptr as *const ();\n                if !unsafe { is_allocated(data_ptr, 0) } {\n                    crate::kani::unsupported(\n                        \"Kani does not support reasoning about pointer to unallocated memory\",\n                    );\n                }\n                unsafe { is_allocated(data_ptr, sz) }\n            }\n        }",
  "macro_backtrace": [
    {
      "callsite": "kani_core::kani_mem!(core)",
      "defsite": "macro_rules! kani_mem"
    },
    {
      "callsite": "kani_core::kani_lib!(core)",
      "defsite": "macro_rules! kani_lib"
    }
  ],
  "callees": [
    "55198556141731503835375909318612911906",
    "22359847832734915742325702083995179865",
    "24611647080965273959983533232723557439",
    "48354165617588990549448172553336931019",
    "49415868833026837411022229901799837696",
    "131448732132345852092743020617208534612",
    "109763229663154342343123224747831634619",
    "855215155513011615215092815231412387298",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518"
  ]
}
