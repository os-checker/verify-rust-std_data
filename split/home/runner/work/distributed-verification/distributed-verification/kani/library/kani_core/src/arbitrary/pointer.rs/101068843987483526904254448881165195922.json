{
  "file": "/home/runner/work/distributed-verification/distributed-verification/kani/library/kani_core/src/arbitrary/pointer.rs",
  "name": "kani::arbitrary_ptr::PointerGenerator::<12>::any_alloc_status::<(u32, i16, f32)>",
  "hash": "101068843987483526904254448881165195922",
  "hash_direct": "1469383360425496449217704097258317441161",
  "attrs": [
    "#[kanitool::unstable(feature = \"mem-predicates\", issue = 2690, reason =\n\"experimental memory predicates and manipulation feature\")]\n"
  ],
  "src": "pub fn any_alloc_status<'a, T>(&'a mut self) -> ArbitraryPointer<'a, T>\n             where T: kani::Arbitrary\n            {\n                assert!(core::mem::size_of::<T>() <= Self::BUF_LEN,\n                    \"Cannot generate in-bounds object of the requested type. Buffer is not big enough.\"\n                );\n\n                let status = kani::any();\n                let ptr = match status {\n                    AllocationStatus::Dangling => {\n                        // Generate potentially unaligned pointer.\n                        let offset = kani::any_where(|b: &usize| *b < core::mem::size_of::<T>());\n                        crate::ptr::NonNull::<T>::dangling().as_ptr().wrapping_add(offset)\n                    }\n                    AllocationStatus::DeadObject => {\n                        let mut obj: T = kani::any();\n                        &mut obj as *mut _\n                    }\n                    AllocationStatus::Null => crate::ptr::null_mut::<T>(),\n                    AllocationStatus::InBounds => {\n                        return self.create_in_bounds_ptr();\n                    }\n                    AllocationStatus::OutOfBounds => {\n                        // Generate potentially unaligned pointer.\n                        let buf_ptr = addr_of_mut!(self.buf) as *mut u8;\n                        let offset = kani::any_where(|b: &usize| *b < core::mem::size_of::<T>());\n                        unsafe { buf_ptr.add(Self::BUF_LEN - offset) as *mut T }\n                    }\n                };\n\n                ArbitraryPointer {\n                    ptr,\n                    is_initialized: false,\n                    status,\n                    phantom: PhantomData,\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "kani_core::ptr_generator!()",
      "defsite": "macro_rules! ptr_generator"
    },
    {
      "callsite": "kani_core::generate_arbitrary!()",
      "defsite": "macro_rules! generate_arbitrary"
    },
    {
      "callsite": "kani_core::kani_lib!(core)",
      "defsite": "macro_rules! kani_lib"
    }
  ],
  "callees": [
    "118627546002841538119269356639976232711",
    "136794527676578436722081681479013612912",
    "670113478247484310210240607638878845290",
    "1174108037031273868511352222846801856920",
    "28791198012686662548792962938594084249",
    "155147252462344397972186713557771794079",
    "175920677112080751315464247289376690681",
    "76761090215908344506703874042953626591",
    "79814521157062014985693017672222855954",
    "1003711360985837930312302380480621326588",
    "65420030489946242179714316980118457812",
    "5474118232783643428453460766140002017",
    "51257289777763011497663947637339780674",
    "25746368048794845883835942225852138883",
    "1484961265477034772011017782876778998231",
    "9331289314120761348765241576052441043",
    "123782648205275262099084086381657810307",
    "135929855001212425903524067534552737362",
    "88064788030471862653474358113542072094",
    "67856573892425641751006143352028813823",
    "74825136526453919664219528636088885642",
    "1628912776924159617112582784448173192751",
    "1640570854584499983913922181933773581422",
    "10057127580410476606272092343920277620",
    "223423045988591996014060300689406774665",
    "113491588365793266817891648718126780380",
    "329435249764941756315607754667978236634",
    "78412107181969352786913268612518026243",
    "179669095727392675457001382090810284652",
    "178053629462286824685283611690204389326",
    "129384448114184712212615089461891361189",
    "826776783017468101310579743103719137160",
    "1253873830582910674917432542968748405492",
    "1750024714630195660915987641707289538036",
    "98351092230522367739002934485510517390",
    "139704976908753389291209564980972955015",
    "130812896255483315711214574947641504756",
    "216823265290610455816017612927656741434",
    "12842158263471368155984318495457181408",
    "1245364030286753365515911599133870323814",
    "134563002825040056909315119755976987940",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "38217196742947992835679479997123307043",
    "627645583140275250012633360066379231959",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "34410515695185066949979771014252260096",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "201181288689639124415825169679319142024",
    "173012038807402113257619740249774268346",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "652653652781134665515684277872301561467",
    "31656414362767519921773019768940498677",
    "156052788792076448927895917143821649538",
    "3993299139120619864480002721231457396",
    "795610351861222391516358063950746435330",
    "5149988702892797298383433462430069015",
    "110725042661495447906407527209757293242",
    "16641875644846975584225697481105921368",
    "87115042487919993407337542962837057096",
    "79226035559392855564775491969132848488",
    "5384218450150013429148005661785802",
    "293645540748671545017999185713660079650",
    "68961250522390204303039500197253848819",
    "3477679680314290516450292592412213353",
    "14495431617551082847444260316213068736",
    "42484976486242598507038538029525346796",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
