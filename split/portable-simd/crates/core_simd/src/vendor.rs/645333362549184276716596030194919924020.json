{
  "file": "core/src/../../portable-simd/crates/core_simd/src/vendor.rs",
  "name": "core_simd::vendor::arm::neon::<impl convert::From<core_simd::vector::Simd<f32, 2>> for core_arch::arm_shared::neon::float32x2_t>::from",
  "hash": "645333362549184276716596030194919924020",
  "hash_direct": "446974880491587065012134551640118228737",
  "src": "fn from(value: $from) -> $to {\n                // Safety: transmuting between vectors is safe, but the caller of this macro\n                // checks the invariants\n                unsafe { core::mem::transmute(value) }\n            }",
  "macro_backtrace": [
    {
      "callsite": "from_transmute!{ @impl $a => $b }",
      "defsite": "macro_rules! from_transmute {\n    { unsafe $a:ty => $b:ty } => {\n        from_transmute!{ @impl $a => $b }\n        from_transmute!{ @impl $b => $a }\n    };\n    { @impl $from:ty => $to:ty } => {\n        impl core::convert::From<$from> for $to {\n            #[inline]\n            fn from(value: $from) -> $to {\n                // Safety: transmuting between vectors is safe, but the caller of this macro\n                // checks the invariants\n                unsafe { core::mem::transmute(value) }\n            }\n        }\n    };\n}"
    },
    {
      "callsite": "from_transmute! { unsafe f32x2 => float32x2_t }",
      "defsite": "macro_rules! from_transmute {\n    { unsafe $a:ty => $b:ty } => {\n        from_transmute!{ @impl $a => $b }\n        from_transmute!{ @impl $b => $a }\n    };\n    { @impl $from:ty => $to:ty } => {\n        impl core::convert::From<$from> for $to {\n            #[inline]\n            fn from(value: $from) -> $to {\n                // Safety: transmuting between vectors is safe, but the caller of this macro\n                // checks the invariants\n                unsafe { core::mem::transmute(value) }\n            }\n        }\n    };\n}"
    }
  ]
}
