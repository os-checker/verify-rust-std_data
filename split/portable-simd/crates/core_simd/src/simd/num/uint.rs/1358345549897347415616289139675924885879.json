{
  "file": "core/src/../../portable-simd/crates/core_simd/src/simd/num/uint.rs",
  "name": "<core_simd::vector::Simd<u16, 1> as core_simd::simd::num::uint::SimdUint>::swap_bytes",
  "hash": "1358345549897347415616289139675924885879",
  "hash_direct": "64516250820955018024903914368713972265",
  "src": "fn swap_bytes(self) -> Self {\n                // Safety: `self` is an integer vector\n                unsafe { core::intrinsics::simd::simd_bswap(self) }\n            }",
  "macro_backtrace": [
    {
      "callsite": "impl_trait! { u8 (i8), u16 (i16), u32 (i32), u64 (i64), usize (isize) }",
      "defsite": "macro_rules! impl_trait {\n    { $($ty:ident ($signed:ident)),* } => {\n        $(\n        impl<const N: usize> Sealed for Simd<$ty, N>\n        where\n            LaneCount<N>: SupportedLaneCount,\n        {\n        }\n\n        impl<const N: usize> SimdUint for Simd<$ty, N>\n        where\n            LaneCount<N>: SupportedLaneCount,\n        {\n            type Scalar = $ty;\n            type Cast<T: SimdElement> = Simd<T, N>;\n\n            #[inline]\n            fn cast<T: SimdCast>(self) -> Self::Cast<T> {\n                // Safety: supported types are guaranteed by SimdCast\n                unsafe { core::intrinsics::simd::simd_as(self) }\n            }\n\n            #[inline]\n            fn wrapping_neg(self) -> Self {\n                use crate::simd::num::SimdInt;\n                (-self.cast::<$signed>()).cast()\n            }\n\n            #[inline]\n            fn saturating_add(self, second: Self) -> Self {\n                // Safety: `self` is a vector\n                unsafe { core::intrinsics::simd::simd_saturating_add(self, second) }\n            }\n\n            #[inline]\n            fn saturating_sub(self, second: Self) -> Self {\n                // Safety: `self` is a vector\n                unsafe { core::intrinsics::simd::simd_saturating_sub(self, second) }\n            }\n\n            #[inline]\n            fn abs_diff(self, second: Self) -> Self {\n                let max = self.simd_max(second);\n                let min = self.simd_min(second);\n                max - min\n            }\n\n            #[inline]\n            fn reduce_sum(self) -> Self::Scalar {\n                // Safety: `self` is an integer vector\n                unsafe { core::intrinsics::simd::simd_reduce_add_ordered(self, 0) }\n            }\n\n            #[inline]\n            fn reduce_product(self) -> Self::Scalar {\n                // Safety: `self` is an integer vector\n                unsafe { core::intrinsics::simd::simd_reduce_mul_ordered(self, 1) }\n            }\n\n            #[inline]\n            fn reduce_max(self) -> Self::Scalar {\n                // Safety: `self` is an integer vector\n                unsafe { core::intrinsics::simd::simd_reduce_max(self) }\n            }\n\n            #[inline]\n            fn reduce_min(self) -> Self::Scalar {\n                // Safety: `self` is an integer vector\n                unsafe { core::intrinsics::simd::simd_reduce_min(self) }\n            }\n\n            #[inline]\n            fn reduce_and(self) -> Self::Scalar {\n                // Safety: `self` is an integer vector\n                unsafe { core::intrinsics::simd::simd_reduce_and(self) }\n            }\n\n            #[inline]\n            fn reduce_or(self) -> Self::Scalar {\n                // Safety: `self` is an integer vector\n                unsafe { core::intrinsics::simd::simd_reduce_or(self) }\n            }\n\n            #[inline]\n            fn reduce_xor(self) -> Self::Scalar {\n                // Safety: `self` is an integer vector\n                unsafe { core::intrinsics::simd::simd_reduce_xor(self) }\n            }\n\n            #[inline]\n            fn swap_bytes(self) -> Self {\n                // Safety: `self` is an integer vector\n                unsafe { core::intrinsics::simd::simd_bswap(self) }\n            }\n\n            #[inline]\n            fn reverse_bits(self) -> Self {\n                // Safety: `self` is an integer vector\n                unsafe { core::intrinsics::simd::simd_bitreverse(self) }\n            }\n\n            #[inline]\n            fn count_ones(self) -> Self {\n                // Safety: `self` is an integer vector\n                unsafe { core::intrinsics::simd::simd_ctpop(self) }\n            }\n\n            #[inline]\n            fn count_zeros(self) -> Self {\n                (!self).count_ones()\n            }\n\n            #[inline]\n            fn leading_zeros(self) -> Self {\n                // Safety: `self` is an integer vector\n                unsafe { core::intrinsics::simd::simd_ctlz(self) }\n            }\n\n            #[inline]\n            fn trailing_zeros(self) -> Self {\n                // Safety: `self` is an integer vector\n                unsafe { core::intrinsics::simd::simd_cttz(self) }\n            }\n\n            #[inline]\n            fn leading_ones(self) -> Self {\n                (!self).leading_zeros()\n            }\n\n            #[inline]\n            fn trailing_ones(self) -> Self {\n                (!self).trailing_zeros()\n            }\n        }\n        )*\n    }\n}"
    }
  ]
}
