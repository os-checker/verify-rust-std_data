{
  "file": "core/src/../../stdarch/crates/core_arch/src/simd.rs",
  "name": "core_arch::simd::i32x16::ZERO",
  "hash": "567409018387822198415328859622517139952",
  "hash_direct": "17920246195862119015217121328558101561",
  "src": "pub(crate) const ZERO: Self = unsafe { crate::mem::zeroed() };",
  "macro_backtrace": [
    {
      "callsite": "simd_ty!(\n    i32x16[i32;16]:\n    x0,\n    x1,\n    x2,\n    x3,\n    x4,\n    x5,\n    x6,\n    x7,\n    x8,\n    x9,\n    x10,\n    x11,\n    x12,\n    x13,\n    x14,\n    x15\n)",
      "defsite": "macro_rules! simd_ty {\n    ($id:ident [$elem_type:ty ; $len:literal]: $($param_name:ident),*) => {\n        #[repr(simd)]\n        #[derive(Copy, Clone)]\n        pub(crate) struct $id([$elem_type; $len]);\n\n        #[allow(clippy::use_self)]\n        impl $id {\n            /// A value of this type where all elements are zeroed out.\n            pub(crate) const ZERO: Self = unsafe { crate::mem::zeroed() };\n\n            #[inline(always)]\n            pub(crate) const fn new($($param_name: $elem_type),*) -> Self {\n                $id([$($param_name),*])\n            }\n            #[inline(always)]\n            pub(crate) const fn from_array(elements: [$elem_type; $len]) -> Self {\n                $id(elements)\n            }\n            // FIXME: Workaround rust@60637\n            #[inline(always)]\n            pub(crate) fn splat(value: $elem_type) -> Self {\n                #[derive(Copy, Clone)]\n                #[repr(simd)]\n                struct JustOne([$elem_type; 1]);\n                let one = JustOne([value]);\n                // SAFETY: 0 is always in-bounds because we're shuffling\n                // a simd type with exactly one element.\n                unsafe { simd_shuffle!(one, one, [0; $len]) }\n            }\n\n            /// Extract the element at position `index`.\n            /// `index` is not a constant so this is not efficient!\n            /// Use for testing only.\n            // FIXME: Workaround rust@60637\n            #[inline(always)]\n            pub(crate) fn extract(&self, index: usize) -> $elem_type {\n                self.as_array()[index]\n            }\n\n            #[inline]\n            pub(crate) fn as_array(&self) -> &[$elem_type; $len] {\n                let simd_ptr: *const Self = self;\n                let array_ptr: *const [$elem_type; $len] = simd_ptr.cast();\n                // SAFETY: We can always read the prefix of a simd type as an array.\n                // There might be more padding afterwards for some widths, but\n                // that's not a problem for reading less than that.\n                unsafe { &*array_ptr }\n            }\n        }\n\n        impl core::cmp::PartialEq for $id {\n            #[inline]\n            fn eq(&self, other: &Self) -> bool {\n                self.as_array() == other.as_array()\n            }\n        }\n\n        impl core::fmt::Debug for $id {\n            #[inline]\n            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n                debug_simd_finish(f, stringify!($id), self.as_array())\n            }\n        }\n    }\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "4905356971702477225665640922559756296",
    "63795568782693862933889580394935953446",
    "540977398403662637410355426836718475918",
    "5135752685622417265500513750454662713",
    "24493151995962549074391437258053627867",
    "183917134738953942632870655067212845996",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "4141894315876625031029724852344621542",
    "1324550805304238762817993561994885996557",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "102772341267064572586711762948577366117",
    "916832414075933762315465286879123225683",
    "16309929900379906359193464835495618578",
    "74111286315405054421392461884745781298",
    "45349019683235474339692671738062328832",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
