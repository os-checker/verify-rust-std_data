{
  "file": "core/src/../../stdarch/crates/core_arch/src/simd.rs",
  "name": "<core_arch::simd::f16x8 as cmp::PartialEq>::eq",
  "hash": "81426440442293764123313355942508264522",
  "hash_direct": "155635081931307422932719147191094272111",
  "src": "fn eq(&self, other: &Self) -> bool {\n                self.as_array() == other.as_array()\n            }",
  "macro_backtrace": [
    {
      "callsite": "simd_ty!(\n    f16x8[f16;8]:\n    x0,\n    x1,\n    x2,\n    x3,\n    x4,\n    x5,\n    x6,\n    x7\n)",
      "defsite": "macro_rules! simd_ty {\n    ($id:ident [$elem_type:ty ; $len:literal]: $($param_name:ident),*) => {\n        #[repr(simd)]\n        #[derive(Copy, Clone)]\n        pub(crate) struct $id([$elem_type; $len]);\n\n        #[allow(clippy::use_self)]\n        impl $id {\n            /// A value of this type where all elements are zeroed out.\n            pub(crate) const ZERO: Self = unsafe { crate::mem::zeroed() };\n\n            #[inline(always)]\n            pub(crate) const fn new($($param_name: $elem_type),*) -> Self {\n                $id([$($param_name),*])\n            }\n            #[inline(always)]\n            pub(crate) const fn from_array(elements: [$elem_type; $len]) -> Self {\n                $id(elements)\n            }\n            // FIXME: Workaround rust@60637\n            #[inline(always)]\n            pub(crate) fn splat(value: $elem_type) -> Self {\n                #[derive(Copy, Clone)]\n                #[repr(simd)]\n                struct JustOne([$elem_type; 1]);\n                let one = JustOne([value]);\n                // SAFETY: 0 is always in-bounds because we're shuffling\n                // a simd type with exactly one element.\n                unsafe { simd_shuffle!(one, one, [0; $len]) }\n            }\n\n            /// Extract the element at position `index`.\n            /// `index` is not a constant so this is not efficient!\n            /// Use for testing only.\n            // FIXME: Workaround rust@60637\n            #[inline(always)]\n            pub(crate) fn extract(&self, index: usize) -> $elem_type {\n                self.as_array()[index]\n            }\n\n            #[inline]\n            pub(crate) fn as_array(&self) -> &[$elem_type; $len] {\n                let simd_ptr: *const Self = self;\n                let array_ptr: *const [$elem_type; $len] = simd_ptr.cast();\n                // SAFETY: We can always read the prefix of a simd type as an array.\n                // There might be more padding afterwards for some widths, but\n                // that's not a problem for reading less than that.\n                unsafe { &*array_ptr }\n            }\n        }\n\n        impl core::cmp::PartialEq for $id {\n            #[inline]\n            fn eq(&self, other: &Self) -> bool {\n                self.as_array() == other.as_array()\n            }\n        }\n\n        impl core::fmt::Debug for $id {\n            #[inline]\n            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n                debug_simd_finish(f, stringify!($id), self.as_array())\n            }\n        }\n    }\n}"
    }
  ],
  "callees": [
    "180791524479629730485342925877478729189",
    "70254028677675726121290183656817695749",
    "5411818070067576084121158652813107307",
    "168534674857764374814850019651405144118",
    "152627932741044534594542019931664107528",
    "35902004169784870955892667614762650595",
    "25625355662091445778302234606705788889",
    "1789871348144907909612170432627434192404",
    "178344284535716663348808085380073846689",
    "140382447752999912010023133395263162941",
    "3346102367336194121825139894811922186"
  ]
}
