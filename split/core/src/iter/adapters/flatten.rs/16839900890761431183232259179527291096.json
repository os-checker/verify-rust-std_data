{
  "file": "core/src/iter/adapters/flatten.rs",
  "name": "iter::adapters::flatten::FlattenCompat::<option::IntoIter<char::EscapeDebug>, char::EscapeDebug>::iter_try_fold::<(), {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/iter/adapters/flatten.rs:563:13: 563:29}, result::Result<(), fmt::Error>>",
  "hash": "16839900890761431183232259179527291096",
  "hash_direct": "79739018839489497712727157055857266224",
  "src": "fn iter_try_fold<Acc, Fold, R>(&mut self, mut acc: Acc, mut fold: Fold) -> R\n    where\n        Fold: FnMut(Acc, &mut U) -> R,\n        R: Try<Output = Acc>,\n    {\n        #[inline]\n        fn flatten<'a, T: IntoIterator, Acc, R: Try<Output = Acc>>(\n            frontiter: &'a mut Option<T::IntoIter>,\n            fold: &'a mut impl FnMut(Acc, &mut T::IntoIter) -> R,\n        ) -> impl FnMut(Acc, T) -> R + 'a {\n            move |acc, iter| fold(acc, frontiter.insert(iter.into_iter()))\n        }\n\n        if let Some(iter) = &mut self.frontiter {\n            acc = fold(acc, iter)?;\n        }\n        self.frontiter = None;\n\n        acc = self.iter.try_fold(acc, flatten(&mut self.frontiter, &mut fold))?;\n        self.frontiter = None;\n\n        if let Some(iter) = &mut self.backiter {\n            acc = fold(acc, iter)?;\n        }\n        self.backiter = None;\n\n        try { acc }\n    }",
  "callees": [
    "211389067699639933614636457746408448112",
    "511962504776047044912646038885098500692",
    "133320656022791496279364999970619877176",
    "26005865984918626858637243729294095122",
    "1449318134079626371011274072562212788848",
    "9122690305665940051388962439719640221",
    "131067143533494529874402025109953273140",
    "1758912313049800270217802676586818662126",
    "180885054484727158889233344781249141486",
    "258820287469578611817448591488600041899",
    "1415106497522421883676194742336801697",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "1432489915062155477210457135678363150892",
    "47439690886430440392017955873566306739",
    "1576161064697931839012038421643221672192",
    "150601383367888662032659684662148394998",
    "76166143093279937303908856565451715192",
    "97427450881639148063972597105991735454",
    "66558832420252384767352894655095642857",
    "115364234840821242271430801959642615165",
    "1546928869429147993813849152044821737403",
    "814154860093097908917042148748177460849",
    "1307824230392662554115401333341546040506",
    "134194435109068273167810069453983566810",
    "300652783215287787118122424895675090929",
    "26195867178919098137740125012797303465",
    "18305200539080999937692536706112892813",
    "68302868158826803394514111658852980059",
    "1807504791919470013616234087163610504901",
    "15453723374769780352859320631569235268",
    "159961173032588260372106360215013055795",
    "4105489478158635609088823744055955963",
    "33605783209889310876275651287772169825",
    "1233103059403689525111354468025712379074",
    "73551026705103387962308800416941721857",
    "91815080945703294522598821311786079446",
    "833829771046316811218026346220384534200",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "171703085011510184787883206899877368211",
    "101628934354328292516881712249699787306",
    "1390383865848976439915787352297803591204",
    "59846993065603841084585486369667331362",
    "126682616887199395959427055990233716748",
    "56246828216786583771840688980341174212",
    "813368619794702869414005756234477751011",
    "1359933470730887149416155830775469624234",
    "954928083127498526214259157089139216224",
    "1803188962461980699617879434368201065587",
    "111002727729737487855910752441805729044",
    "325630020552471361814377154221519157974",
    "154911443990380340341563367924870465980",
    "819756211280848030917202637728825520633",
    "1655209669618753209114659502170458211993",
    "739520556846959085018120036998133255835"
  ]
}
