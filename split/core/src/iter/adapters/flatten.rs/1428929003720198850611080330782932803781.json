{
  "file": "core/src/iter/adapters/flatten.rs",
  "name": "<iter::adapters::flatten::FlattenCompat<iter::adapters::map::Map<slice::iter::Iter<'_, u8>, slice::ascii::EscapeByte>, ascii::EscapeDefault> as iter::traits::iterator::Iterator>::size_hint",
  "hash": "1428929003720198850611080330782932803781",
  "hash_direct": "74863261111583712176131987709152002828",
  "src": "default fn size_hint(&self) -> (usize, Option<usize>) {\n        let (flo, fhi) = self.frontiter.as_ref().map_or((0, Some(0)), U::size_hint);\n        let (blo, bhi) = self.backiter.as_ref().map_or((0, Some(0)), U::size_hint);\n        let lo = flo.saturating_add(blo);\n\n        if let Some(fixed_size) = <<I as Iterator>::Item as ConstSizeIntoIterator>::size() {\n            let (lower, upper) = self.iter.size_hint();\n\n            let lower = lower.saturating_mul(fixed_size).saturating_add(lo);\n            let upper =\n                try { fhi?.checked_add(bhi?)?.checked_add(fixed_size.checked_mul(upper?)?)? };\n\n            return (lower, upper);\n        }\n\n        match (self.iter.size_hint(), fhi, bhi) {\n            ((0, Some(0)), Some(a), Some(b)) => (lo, a.checked_add(b)),\n            _ => (lo, None),\n        }\n    }",
  "callees": [
    "6672578801221819315105508154965308900",
    "9122690305665940051388962439719640221",
    "122576781510791772413446095572293380174",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "1529875730411415803517587657844377161231",
    "23815256893174302637797703719499456373",
    "1603522871511788585716611578568053680460",
    "459926211162981126110345335580654849845",
    "96322450024208380225768829099445858107",
    "121097281700569241807917519510076722724",
    "79628754160654265195868607472716161204",
    "143572956432032064744447501745832117320",
    "761861023504359043615820998596748928032",
    "163344409514712153181005119158175808957",
    "1563086521540655781917580885661803727599",
    "934061822311794836710089312882920656630",
    "8912198003459420415317352584525771235",
    "935327613547407926313303453668085555306",
    "1415508711647638229511912595862604596327",
    "17766748663579272104193015939404813297",
    "755974725762758168512546413400275269094",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "1214574077763705187516383491048990527345",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "144119928408074986676617008060073758280",
    "66631883600104442883671173806470690647",
    "1821417094175913611857455485828062904",
    "1762126293480126793916319187708925702531",
    "53569486981529370344752868158650318763",
    "3297309995462571210361513208440932689",
    "1585504230673088927810298334361989429672",
    "92658835324565758495130762072978604201",
    "739520556846959085018120036998133255835"
  ]
}
