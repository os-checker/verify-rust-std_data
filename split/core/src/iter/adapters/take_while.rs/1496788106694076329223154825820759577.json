{
  "file": "core/src/iter/adapters/take_while.rs",
  "name": "<core::iter::TakeWhile<core::slice::Iter<'_, u8>, {closure@<core::slice::EscapeAscii<'_> as core::fmt::Display>::fmt::{closure#0}}> as core::iter::Iterator>::try_fold::<usize, {closure@core::ops::try_trait::NeverShortCircuit<usize>::wrap_mut_2<usize, &u8, {closure@<core::iter::TakeWhile<core::slice::Iter<'_, u8>, {closure@<core::slice::EscapeAscii<'_> as core::fmt::Display>::fmt::{closure#0}}> as core::iter::Iterator>::count::{closure#0}}>::{closure#0}}, core::ops::try_trait::NeverShortCircuit<usize>>",
  "hash": "1496788106694076329223154825820759577",
  "hash_direct": "32479017992797948212810884797707953407",
  "src": "fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n    where\n        Self: Sized,\n        Fold: FnMut(Acc, Self::Item) -> R,\n        R: Try<Output = Acc>,\n    {\n        fn check<'a, T, Acc, R: Try<Output = Acc>>(\n            flag: &'a mut bool,\n            p: &'a mut impl FnMut(&T) -> bool,\n            mut fold: impl FnMut(Acc, T) -> R + 'a,\n        ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> + 'a {\n            move |acc, x| {\n                if p(&x) {\n                    ControlFlow::from_try(fold(acc, x))\n                } else {\n                    *flag = true;\n                    ControlFlow::Break(try { acc })\n                }\n            }\n        }\n\n        if self.flag {\n            try { init }\n        } else {\n            let flag = &mut self.flag;\n            let p = &mut self.predicate;\n            self.iter.try_fold(init, check(flag, p, fold)).into_try()\n        }\n    }",
  "callees": [
    "12281449246394340237926324936375242532",
    "181267529910573756716102767087485333561",
    "1824545319189397521315695847785602896178",
    "1359628911910144043410406784740445168294",
    "1171289715691102377113308016881308182991",
    "4624680146933447685315508208087380447",
    "69890410883307055901701064627293520522",
    "8358020412969843293369480817801214853",
    "1483436051876589682917815592106303415640",
    "88945952143891836315425657465298237113",
    "25805546833736690467883133207551662051",
    "131010554978766019553362618149851462420",
    "206416940098713373710406809815723706101",
    "1508178611376596781417933125481864142981",
    "170708008206974315912237474060989130492",
    "124573727687754354303639178688703946894",
    "50473529602911884987749622524980088147",
    "67310489312575051035576184652342398890",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "63085389524472853348886374617170044294",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "1161957769894127133012856511664916235439",
    "18416949209895000159200296936904864710",
    "115794360865445520568092988586318963521",
    "717317897984632901316617723476110950437",
    "1121825575012330479117046270460961910099",
    "1213241336815109722310271468032047462595",
    "92005998086269722606437028357039395831",
    "181717373102152254895109628399379607332",
    "129298276867850405466757356839549852569",
    "124905427857320923366951103549833814228",
    "1763966138543089079710634620354786190618",
    "43014631508606307693660626116761567117",
    "180635224128130815714204029673366671286",
    "112989397975222255532054380452996322405"
  ]
}
