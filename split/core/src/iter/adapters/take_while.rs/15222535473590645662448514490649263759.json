{
  "file": "core/src/iter/adapters/take_while.rs",
  "name": "<iter::adapters::take_while::TakeWhile<slice::iter::Iter<'_, u8>, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/ascii.rs:301:50: 301:55}> as iter::traits::iterator::Iterator>::try_fold::<usize, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/ops/try_trait.rs:401:9: 401:20}, ops::try_trait::NeverShortCircuit<usize>>",
  "hash": "15222535473590645662448514490649263759",
  "hash_direct": "178527183090104888767501947152076218781",
  "src": "fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n    where\n        Self: Sized,\n        Fold: FnMut(Acc, Self::Item) -> R,\n        R: Try<Output = Acc>,\n    {\n        fn check<'a, T, Acc, R: Try<Output = Acc>>(\n            flag: &'a mut bool,\n            p: &'a mut impl FnMut(&T) -> bool,\n            mut fold: impl FnMut(Acc, T) -> R + 'a,\n        ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> + 'a {\n            move |acc, x| {\n                if p(&x) {\n                    ControlFlow::from_try(fold(acc, x))\n                } else {\n                    *flag = true;\n                    ControlFlow::Break(try { acc })\n                }\n            }\n        }\n\n        if self.flag {\n            try { init }\n        } else {\n            let flag = &mut self.flag;\n            let p = &mut self.predicate;\n            self.iter.try_fold(init, check(flag, p, fold)).into_try()\n        }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "192320122097020926110741641336237035440",
    "73476341263304739865524723381159454666",
    "850916170799784766014361160141828895680",
    "131793031764131930538422663224584349137",
    "1204668293620499224013336883119093261459",
    "171593739300022194915526452191835401234",
    "158061591733274542515760726194648803215",
    "69902376175688397258602623035066808646",
    "388173521231105032313797604962162152567",
    "660450856857639540115496564124318787738",
    "158561908028273082212686185234069496826",
    "24523638698127423644960449980189530983",
    "14323650203200877113914221917540958029",
    "162303132337390038831428326785257079002",
    "21180418933624670705539187561093798016",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "156761099224162496521554063647246510953",
    "196438333520623630417488568982803531961",
    "437042703267792806014298364096370039621",
    "139997011880036619526085207717010799176",
    "671334365265236941113753063318744059957",
    "115305965424151250157684815253829770404",
    "103695068283875105018623992302427237269",
    "53569486981529370344752868158650318763",
    "33020214437710035965402411197660679021",
    "137658875440085407875625922148255450571",
    "1227194532305185117716552313218085751352",
    "756154173690443859818404881616867249436",
    "621698472431332816417792581602959129152",
    "739520556846959085018120036998133255835"
  ]
}
