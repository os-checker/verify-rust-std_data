{
  "file": "core/src/iter/adapters/step_by.rs",
  "name": "iter::adapters::step_by::_",
  "hash": "1272227288790998695513758448838120276298",
  "hash_direct": "714809832272887430613284854380332182232",
  "src": "const _: () = assert!(usize::BITS >= <$t>::BITS);",
  "macro_backtrace": [
    {
      "callsite": "spec_int_ranges_r!(u8 u16 u32 usize)",
      "defsite": "macro_rules! spec_int_ranges_r {\n    ($($t:ty)*) => ($(\n        const _: () = assert!(usize::BITS >= <$t>::BITS);\n\n        unsafe impl StepByBackImpl<Range<$t>> for StepBy<Range<$t>> {\n\n            #[inline]\n            fn spec_next_back(&mut self) -> Option<Self::Item> {\n                let step = self.original_step().get() as $t;\n                let remaining = self.iter.end;\n                if remaining > 0 {\n                    let start = self.iter.start;\n                    self.iter.end = remaining - 1;\n                    Some(start + step * (remaining - 1))\n                } else {\n                    None\n                }\n            }\n\n            // The methods below are all copied from the Iterator trait default impls.\n            // We have to repeat them here so that the specialization overrides the StepByImplBack defaults\n\n            #[inline]\n            fn spec_nth_back(&mut self, n: usize) -> Option<Self::Item> {\n                if self.advance_back_by(n).is_err() {\n                    return None;\n                }\n                self.next_back()\n            }\n\n            #[inline]\n            fn spec_try_rfold<Acc, F, R>(&mut self, init: Acc, mut f: F) -> R\n            where\n                F: FnMut(Acc, Self::Item) -> R,\n                R: Try<Output = Acc>\n            {\n                let mut accum = init;\n                while let Some(x) = self.next_back() {\n                    accum = f(accum, x)?;\n                }\n                try { accum }\n            }\n\n            #[inline]\n            fn spec_rfold<Acc, F>(mut self, init: Acc, mut f: F) -> Acc\n            where\n                F: FnMut(Acc, Self::Item) -> Acc\n            {\n                let mut accum = init;\n                while let Some(x) = self.next_back() {\n                    accum = f(accum, x);\n                }\n                accum\n            }\n        }\n    )*)\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960"
  ]
}
