{
  "file": "core/src/iter/mod.rs",
  "name": "<iter::adapters::take_while::TakeWhile<slice::iter::Iter<'_, u8>, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/ascii.rs:301:50: 301:55}> as iter::traits::iterator::Iterator>::fold::<usize, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/iter/traits/iterator.rs:232:13: 232:23}>",
  "hash": "15547809787397796528783950238993735102",
  "hash_direct": "1053721184193663438110194408042380422390",
  "src": "fn $fold<AAA, FFF>(mut self, init: AAA, fold: FFF) -> AAA\n        where\n            FFF: FnMut(AAA, Self::Item) -> AAA,\n        {\n            use crate::ops::NeverShortCircuit;\n\n            self.$try_fold(init, NeverShortCircuit::wrap_mut_2(fold)).0\n        }",
  "macro_backtrace": [
    {
      "callsite": "impl_fold_via_try_fold! { @internal fold -> try_fold }",
      "defsite": "macro_rules! impl_fold_via_try_fold {\n    (fold -> try_fold) => {\n        impl_fold_via_try_fold! { @internal fold -> try_fold }\n    };\n    (rfold -> try_rfold) => {\n        impl_fold_via_try_fold! { @internal rfold -> try_rfold }\n    };\n    (spec_fold -> spec_try_fold) => {\n        impl_fold_via_try_fold! { @internal spec_fold -> spec_try_fold }\n    };\n    (spec_rfold -> spec_try_rfold) => {\n        impl_fold_via_try_fold! { @internal spec_rfold -> spec_try_rfold }\n    };\n    (@internal $fold:ident -> $try_fold:ident) => {\n        #[inline]\n        fn $fold<AAA, FFF>(mut self, init: AAA, fold: FFF) -> AAA\n        where\n            FFF: FnMut(AAA, Self::Item) -> AAA,\n        {\n            use crate::ops::NeverShortCircuit;\n\n            self.$try_fold(init, NeverShortCircuit::wrap_mut_2(fold)).0\n        }\n    };\n}"
    },
    {
      "callsite": "impl_fold_via_try_fold! { fold -> try_fold }",
      "defsite": "macro_rules! impl_fold_via_try_fold {\n    (fold -> try_fold) => {\n        impl_fold_via_try_fold! { @internal fold -> try_fold }\n    };\n    (rfold -> try_rfold) => {\n        impl_fold_via_try_fold! { @internal rfold -> try_rfold }\n    };\n    (spec_fold -> spec_try_fold) => {\n        impl_fold_via_try_fold! { @internal spec_fold -> spec_try_fold }\n    };\n    (spec_rfold -> spec_try_rfold) => {\n        impl_fold_via_try_fold! { @internal spec_rfold -> spec_try_rfold }\n    };\n    (@internal $fold:ident -> $try_fold:ident) => {\n        #[inline]\n        fn $fold<AAA, FFF>(mut self, init: AAA, fold: FFF) -> AAA\n        where\n            FFF: FnMut(AAA, Self::Item) -> AAA,\n        {\n            use crate::ops::NeverShortCircuit;\n\n            self.$try_fold(init, NeverShortCircuit::wrap_mut_2(fold)).0\n        }\n    };\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "1636667936180382132718142902117748051884",
    "1087665342209747721614675303430142423739",
    "543497820628694290616812459434642920167",
    "77328248096946497558356094065401065985",
    "740915896842310754111688817567065348961",
    "1801932849287312231112662193894546046488",
    "844957821118050201712037424530049556280",
    "821993631509619471410571506997521562975",
    "169909122874008657699337292141222903044",
    "1719096383669304938710069584351948869862",
    "800461141180215150110778697374482725354",
    "1679539116483857752111369066321202737350",
    "29274216705325536916791083339783320982",
    "1027663536545765328012302954920702288825",
    "1608730632329354629914376868362728171429",
    "771207290815953039916276869354791245284",
    "492451115657393220315137032423148887927",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "134444069993780397564703136863158148716",
    "454123938773204579616101479082857875387",
    "39675046012443124561219307046883462541",
    "118995888524731215646542717044361364948",
    "843102896095261732816452208300794916411",
    "62964906474134410292844024784991518817",
    "934375696446284627516563118665690549226",
    "1302514623760732210917631482165556335973",
    "1028023859496283824714006082102994000183",
    "1375602339865304183616456573312626826122",
    "7941123905712617668978440811361024413",
    "178950956150498367086304854107167795201",
    "182534260348495718753381397354609581701",
    "478505109661826463711850093418602871650",
    "399232661239117480517401994520839366833"
  ]
}
