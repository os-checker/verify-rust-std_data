{
  "file": "core/src/iter/traits/iterator.rs",
  "name": "<str::iter::CharIndices<'_> as iter::traits::iterator::Iterator>::advance_by",
  "hash": "69064157634746261873063654620308320827",
  "hash_direct": "54516206153177298677714348043503356775",
  "src": "fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n        /// Helper trait to specialize `advance_by` via `try_fold` for `Sized` iterators.\n        trait SpecAdvanceBy {\n            fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>;\n        }\n\n        impl<I: Iterator + ?Sized> SpecAdvanceBy for I {\n            default fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                for i in 0..n {\n                    if self.next().is_none() {\n                        // SAFETY: `i` is always less than `n`.\n                        return Err(unsafe { NonZero::new_unchecked(n - i) });\n                    }\n                }\n                Ok(())\n            }\n        }\n\n        impl<I: Iterator> SpecAdvanceBy for I {\n            fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                let Some(n) = NonZero::new(n) else {\n                    return Ok(());\n                };\n\n                let res = self.try_fold(n, |n, _| NonZero::new(n.get() - 1));\n\n                match res {\n                    None => Ok(()),\n                    Some(n) => Err(n),\n                }\n            }\n        }\n\n        self.spec_advance_by(n)\n    }",
  "callees": [
    "125895754419976834712369234308535121418",
    "97974469250681533633362941246048906040",
    "56316359647357795184792913202425867352",
    "258820287469578611817448591488600041899",
    "1415106497522421883676194742336801697",
    "17421822894816687532325615181214565887",
    "1529875730411415803517587657844377161231",
    "23815256893174302637797703719499456373",
    "121917327455978701744454773261590352887",
    "102272585106179812897836035233672297670",
    "135928888564588691565994405694153794425",
    "121097281700569241807917519510076722724",
    "34410515695185066949979771014252260096",
    "1676806814539779643518083197252466559589",
    "303127917241666984113380325134893912788",
    "157526224548632931644224402393760490185",
    "366503061556370158810229951695642705038",
    "180942759258101506955182199119065053589",
    "821053300062536159115601448644934990736",
    "68648213460155011086108492708709849999",
    "2922976863402117239063671147549004081",
    "1424839172046310268011085042199237354602",
    "79338743477724285898920606540258882171",
    "171487306867941110771102297001636865950",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "1214574077763705187516383491048990527345",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "144119928408074986676617008060073758280",
    "93629764868847211533386885481792043",
    "14202615834488052409859027248238516218",
    "1584226519763055173017297680793969390949",
    "139997011880036619526085207717010799176",
    "671334365265236941113753063318744059957",
    "1762126293480126793916319187708925702531",
    "115305965424151250157684815253829770404",
    "103695068283875105018623992302427237269",
    "53569486981529370344752868158650318763",
    "33020214437710035965402411197660679021",
    "3297309995462571210361513208440932689",
    "1676603290518039711418379565247484306913",
    "90550453206581869791970009265946291996",
    "1681045938191596506412316969696714615302",
    "596564398432010081814808260562835248359",
    "90933695478604663001573090783200358337",
    "20689955926650303163515534893265746746",
    "79957517381934331374505463763239679871",
    "109849097723912452994088294171860151303",
    "486164287917427656918200146926298480057",
    "611027897215340775410757839603478111815",
    "819756211280848030917202637728825520633",
    "60020754642282354823285669083003912494",
    "92658835324565758495130762072978604201",
    "739520556846959085018120036998133255835"
  ]
}
