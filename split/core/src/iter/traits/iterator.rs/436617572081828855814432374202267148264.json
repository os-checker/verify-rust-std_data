{
  "file": "core/src/iter/traits/iterator.rs",
  "name": "<iter::adapters::step_by::StepBy<ops::range::Range<u32>> as iter::traits::iterator::Iterator>::advance_by",
  "hash": "436617572081828855814432374202267148264",
  "hash_direct": "139884660578905627692933829624285874972",
  "src": "fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n        /// Helper trait to specialize `advance_by` via `try_fold` for `Sized` iterators.\n        trait SpecAdvanceBy {\n            fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>;\n        }\n\n        impl<I: Iterator + ?Sized> SpecAdvanceBy for I {\n            default fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                for i in 0..n {\n                    if self.next().is_none() {\n                        // SAFETY: `i` is always less than `n`.\n                        return Err(unsafe { NonZero::new_unchecked(n - i) });\n                    }\n                }\n                Ok(())\n            }\n        }\n\n        impl<I: Iterator> SpecAdvanceBy for I {\n            fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                let Some(n) = NonZero::new(n) else {\n                    return Ok(());\n                };\n\n                let res = self.try_fold(n, |n, _| NonZero::new(n.get() - 1));\n\n                match res {\n                    None => Ok(()),\n                    Some(n) => Err(n),\n                }\n            }\n        }\n\n        self.spec_advance_by(n)\n    }",
  "callees": [
    "740279432569025443711574644820610176575",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "1341380100751663483713673402061083971105",
    "29272695305557412791251994549078058730",
    "348429380086394933110305361134056650577",
    "554397387387847496715114804290992599110",
    "1157575099177598361814044055512526465166",
    "1565365367594885723315960381484691944628",
    "1112064329677692685812262099924363355374",
    "161003650625398914518944455314788757627",
    "375485108047544468212954122974188100514",
    "133406493184733961254247820125865521283",
    "811014240907765449310255915500040932880",
    "39733537437022171613682062970386769295",
    "116482898840396402477616122367703643717",
    "126012008154782159615214827713093461635",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "151554565565455461655790498251939908013",
    "178908583266819311171056730682051642189",
    "1575180643816959680013764123585909653935",
    "29961454789570629418807946327322770135",
    "1218790289670026660418434748374709001141",
    "399232661239117480517401994520839366833"
  ]
}
