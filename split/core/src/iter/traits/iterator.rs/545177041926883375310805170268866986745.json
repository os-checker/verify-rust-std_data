{
  "file": "core/src/iter/traits/iterator.rs",
  "name": "<iter::adapters::step_by::StepBy<ops::range::Range<u16>> as iter::traits::iterator::Iterator>::advance_by",
  "hash": "545177041926883375310805170268866986745",
  "hash_direct": "440729024807476985512822011225851618132",
  "src": "fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n        /// Helper trait to specialize `advance_by` via `try_fold` for `Sized` iterators.\n        trait SpecAdvanceBy {\n            fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>;\n        }\n\n        impl<I: Iterator + ?Sized> SpecAdvanceBy for I {\n            default fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                for i in 0..n {\n                    if self.next().is_none() {\n                        // SAFETY: `i` is always less than `n`.\n                        return Err(unsafe { NonZero::new_unchecked(n - i) });\n                    }\n                }\n                Ok(())\n            }\n        }\n\n        impl<I: Iterator> SpecAdvanceBy for I {\n            fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                let Some(n) = NonZero::new(n) else {\n                    return Ok(());\n                };\n\n                let res = self.try_fold(n, |n, _| NonZero::new(n.get() - 1));\n\n                match res {\n                    None => Ok(()),\n                    Some(n) => Err(n),\n                }\n            }\n        }\n\n        self.spec_advance_by(n)\n    }",
  "callees": [
    "25766193535890195209501582472198083943",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "114657002092212286604221679931131576740",
    "1816493700064811475017540584246600124388",
    "26734975170401604948799645225074094306",
    "151213426983750075807135268009509599030",
    "5070696268334350906642209747507954750",
    "151879161989850685141414603990181220094",
    "335628272459552191812912151504047081770",
    "34410515695185066949979771014252260096",
    "1676806814539779643518083197252466559589",
    "137727233253125029217674386074482569004",
    "1175847126974603369815060496403232677423",
    "821053300062536159115601448644934990736",
    "68648213460155011086108492708709849999",
    "2922976863402117239063671147549004081",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "135710756291504804587550868687823101358",
    "150567892505730402506580299695654398474",
    "14202615834488052409859027248238516218",
    "1021979606722141271813093258744932299759",
    "887235042902537721816254572592014930578",
    "739520556846959085018120036998133255835"
  ]
}
