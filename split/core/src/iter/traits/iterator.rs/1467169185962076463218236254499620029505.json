{
  "file": "core/src/iter/traits/iterator.rs",
  "name": "<iter::adapters::step_by::StepBy<ops::range::Range<u16>> as iter::traits::iterator::Iterator>::advance_by",
  "hash": "1467169185962076463218236254499620029505",
  "hash_direct": "440729024807476985512822011225851618132",
  "src": "fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n        /// Helper trait to specialize `advance_by` via `try_fold` for `Sized` iterators.\n        trait SpecAdvanceBy {\n            fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>;\n        }\n\n        impl<I: Iterator + ?Sized> SpecAdvanceBy for I {\n            default fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                for i in 0..n {\n                    if self.next().is_none() {\n                        // SAFETY: `i` is always less than `n`.\n                        return Err(unsafe { NonZero::new_unchecked(n - i) });\n                    }\n                }\n                Ok(())\n            }\n        }\n\n        impl<I: Iterator> SpecAdvanceBy for I {\n            fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                let Some(n) = NonZero::new(n) else {\n                    return Ok(());\n                };\n\n                let res = self.try_fold(n, |n, _| NonZero::new(n.get() - 1));\n\n                match res {\n                    None => Ok(()),\n                    Some(n) => Err(n),\n                }\n            }\n        }\n\n        self.spec_advance_by(n)\n    }",
  "callees": [
    "113636303611599948422952134073415732634",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "934682719986262532016220054436665100842",
    "11635955010235264053565079561322990868",
    "115536017268475266899331936881017544756",
    "1336917468189291107912592528238755406840",
    "21712047920200032502607935620776021597",
    "3299904984328195556331946477869768742",
    "99739972750415295659795146386408442446",
    "161003650625398914518944455314788757627",
    "375485108047544468212954122974188100514",
    "133406493184733961254247820125865521283",
    "159732691571659558493314453316786085190",
    "39733537437022171613682062970386769295",
    "116482898840396402477616122367703643717",
    "126012008154782159615214827713093461635",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "160181710596894879409206814565814475412",
    "338794201840290685319712039863758526",
    "1575180643816959680013764123585909653935",
    "4024953197871010934303503690579936139",
    "1218790289670026660418434748374709001141",
    "399232661239117480517401994520839366833"
  ]
}
