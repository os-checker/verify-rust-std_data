{
  "file": "core/src/iter/traits/iterator.rs",
  "name": "iter::traits::iterator::iter_compare::<ffi::c_str::Bytes<'_>, iter::adapters::copied::Copied<slice::iter::Iter<'_, u8>>, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/iter/traits/iterator.rs:3819:13: 3819:24}, ()>",
  "hash": "1612713405386232769387033948521625270",
  "hash_direct": "1210891477815840831615719456102720977364",
  "src": "fn iter_compare<A, B, F, T>(mut a: A, mut b: B, f: F) -> ControlFlow<T, Ordering>\nwhere\n    A: Iterator,\n    B: Iterator,\n    F: FnMut(A::Item, B::Item) -> ControlFlow<T>,\n{\n    #[inline]\n    fn compare<'a, B, X, T>(\n        b: &'a mut B,\n        mut f: impl FnMut(X, B::Item) -> ControlFlow<T> + 'a,\n    ) -> impl FnMut(X) -> ControlFlow<ControlFlow<T, Ordering>> + 'a\n    where\n        B: Iterator,\n    {\n        move |x| match b.next() {\n            None => ControlFlow::Break(ControlFlow::Continue(Ordering::Greater)),\n            Some(y) => f(x, y).map_break(ControlFlow::Break),\n        }\n    }\n\n    match a.try_for_each(compare(&mut b, f)) {\n        ControlFlow::Continue(()) => ControlFlow::Continue(match b.next() {\n            None => Ordering::Equal,\n            Some(_) => Ordering::Less,\n        }),\n        ControlFlow::Break(x) => x,\n    }\n}",
  "callees": [
    "50268492807635183487245076908425358872",
    "54783178917046742617783787509295689714",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "1136212058009817945112172540589624937755",
    "180859970664111970001984829052991777619",
    "98686707999257923812779710087237328385",
    "111195323519579090822611085140426455316",
    "1304204061013870981213613336913137884345",
    "157520392824898851113396360066135363158",
    "92652900228115630529747497113152696391",
    "36822115876390802691219807370300840291",
    "22371500530795247012303259556968668177",
    "38217196742947992835679479997123307043",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "157526224548632931644224402393760490185",
    "366503061556370158810229951695642705038",
    "135792703776760180215031317207276925214",
    "774674397518621262913059827592991666396",
    "67595924993652764875515375864397877771",
    "1422517144103739044117611863969159333899",
    "23608452210003310842399163857366332489",
    "144366614822018216193700260200303691343",
    "414785690772436816617547422823857074238",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "1596428313304691620210437862303076587079",
    "693347877502763010911820482685830842727",
    "23275310369464290210547768258010195365",
    "59024304505974781454965304121530894781",
    "88732405038833504516786169729211538271",
    "428676554353337538716461047828652761171",
    "396747239631903348211881024074075233326",
    "139997011880036619526085207717010799176",
    "671334365265236941113753063318744059957",
    "115305965424151250157684815253829770404",
    "103695068283875105018623992302427237269",
    "53569486981529370344752868158650318763",
    "33020214437710035965402411197660679021",
    "915647507433899437718186542010923758828",
    "1681045938191596506412316969696714615302",
    "60020754642282354823285669083003912494",
    "74111286315405054421392461884745781298",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
