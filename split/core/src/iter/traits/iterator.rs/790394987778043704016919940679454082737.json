{
  "file": "core/src/iter/traits/iterator.rs",
  "name": "iter::traits::iterator::iter_compare::<ffi::c_str::Bytes<'_>, iter::adapters::copied::Copied<slice::iter::Iter<'_, u8>>, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/iter/traits/iterator.rs:3819:13: 3819:24}, ()>",
  "hash": "790394987778043704016919940679454082737",
  "hash_direct": "1210891477815840831615719456102720977364",
  "src": "fn iter_compare<A, B, F, T>(mut a: A, mut b: B, f: F) -> ControlFlow<T, Ordering>\nwhere\n    A: Iterator,\n    B: Iterator,\n    F: FnMut(A::Item, B::Item) -> ControlFlow<T>,\n{\n    #[inline]\n    fn compare<'a, B, X, T>(\n        b: &'a mut B,\n        mut f: impl FnMut(X, B::Item) -> ControlFlow<T> + 'a,\n    ) -> impl FnMut(X) -> ControlFlow<ControlFlow<T, Ordering>> + 'a\n    where\n        B: Iterator,\n    {\n        move |x| match b.next() {\n            None => ControlFlow::Break(ControlFlow::Continue(Ordering::Greater)),\n            Some(y) => f(x, y).map_break(ControlFlow::Break),\n        }\n    }\n\n    match a.try_for_each(compare(&mut b, f)) {\n        ControlFlow::Continue(()) => ControlFlow::Continue(match b.next() {\n            None => Ordering::Equal,\n            Some(_) => Ordering::Less,\n        }),\n        ControlFlow::Break(x) => x,\n    }\n}",
  "callees": [
    "1450824968137209211015779136914157765236",
    "95011198310337421208432480582167927295",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "162086128144452991822598681485917297633",
    "93298097551584795016994225891304124799",
    "85640307721575721944296731460326928891",
    "181633199255838151094227921450895711914",
    "129736906982510214617301636484531596537",
    "49076697520496064273925326737305596287",
    "32156801152785391381549444645409277148",
    "1118170166353623023813305015051762225144",
    "679103161047233608712251910248084395621",
    "168545836479171427075036933182194130275",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1801932849287312231112662193894546046488",
    "844957821118050201712037424530049556280",
    "698419006513079938011293664556740309345",
    "258124705761299302813082550141990354600",
    "625625310408896914414708114676422313274",
    "234490346321036101910374132095066740571",
    "1573675930344176927913388175898267657481",
    "498970189814489029511492273133083815306",
    "177196453936645384295988815837664010762",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "14770404694079158604451463194526391450",
    "110359069869098543096641949969955177041",
    "112000954208041067257008591131581669155",
    "70424684004486167314988979450138665576",
    "176215937714928582254709899264658457842",
    "1607210932297669315513351257711871706998",
    "136958357274389130334291848505288919310",
    "843102896095261732816452208300794916411",
    "62964906474134410292844024784991518817",
    "934375696446284627516563118665690549226",
    "1302514623760732210917631482165556335973",
    "1028023859496283824714006082102994000183",
    "1375602339865304183616456573312626826122",
    "320412240629296180416773541634992315554",
    "182534260348495718753381397354609581701",
    "478505109661826463711850093418602871650",
    "48548664629730829953422984265893277498",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
