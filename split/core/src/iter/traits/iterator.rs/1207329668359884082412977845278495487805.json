{
  "file": "core/src/iter/traits/iterator.rs",
  "name": "<iter::adapters::step_by::StepBy<ops::range::Range<u32>> as iter::traits::iterator::Iterator>::advance_by",
  "hash": "1207329668359884082412977845278495487805",
  "hash_direct": "139884660578905627692933829624285874972",
  "src": "fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n        /// Helper trait to specialize `advance_by` via `try_fold` for `Sized` iterators.\n        trait SpecAdvanceBy {\n            fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>;\n        }\n\n        impl<I: Iterator + ?Sized> SpecAdvanceBy for I {\n            default fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                for i in 0..n {\n                    if self.next().is_none() {\n                        // SAFETY: `i` is always less than `n`.\n                        return Err(unsafe { NonZero::new_unchecked(n - i) });\n                    }\n                }\n                Ok(())\n            }\n        }\n\n        impl<I: Iterator> SpecAdvanceBy for I {\n            fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                let Some(n) = NonZero::new(n) else {\n                    return Ok(());\n                };\n\n                let res = self.try_fold(n, |n, _| NonZero::new(n.get() - 1));\n\n                match res {\n                    None => Ok(()),\n                    Some(n) => Err(n),\n                }\n            }\n        }\n\n        self.spec_advance_by(n)\n    }",
  "callees": [
    "1829296751424163616111065659097144121709",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "167264054377721765762382707996591587360",
    "821720810031044845211831340224245933186",
    "1225563606103859488914094675774939740487",
    "147703925609743642574818815554174035819",
    "1094547809659256933816981267295897204376",
    "980038968841144485575428105426404499",
    "25022952783230614255491452397222850714",
    "34410515695185066949979771014252260096",
    "1676806814539779643518083197252466559589",
    "137727233253125029217674386074482569004",
    "46095478919112651485037565198280203652",
    "821053300062536159115601448644934990736",
    "68648213460155011086108492708709849999",
    "2922976863402117239063671147549004081",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "5260399976902825921937688862592907629",
    "12583040371049054649997982659979050806",
    "14202615834488052409859027248238516218",
    "162591643440005268710985836057110400607",
    "887235042902537721816254572592014930578",
    "739520556846959085018120036998133255835"
  ]
}
