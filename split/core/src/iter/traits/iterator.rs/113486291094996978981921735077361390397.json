{
  "file": "core/src/iter/traits/iterator.rs",
  "name": "<core::str::Chars<'_> as core::iter::Iterator>::find::<{closure@<core::iter::SkipWhile<I, P> as core::iter::Iterator>::next::check<char, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/alloc/src/str.rs:422:35: 422:39}>::{closure#0}}>",
  "hash": "113486291094996978981921735077361390397",
  "hash_direct": "50750370464170705296343686709572783189",
  "src": "fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n    where\n        Self: Sized,\n        P: FnMut(&Self::Item) -> bool,\n    {\n        #[inline]\n        fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {\n            move |(), x| {\n                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n            }\n        }\n\n        self.try_fold((), check(predicate)).break_value()\n    }",
  "callees": [
    "180516682803251822336474984638159735844",
    "47554830076777127569397369677922726250",
    "144504416526253216358440739787798222274",
    "133295110176722646779200296597420703846",
    "141364671331973869778270942055776551817",
    "38033425202961758733378719026903933598",
    "1760151968317278624513482005825546212798",
    "12281449246394340237926324936375242532",
    "1511275866077199755612412536318849312657",
    "109777261735956977828864330544561630572",
    "1552988011012146591114896816323571303973",
    "213976084203050181513038939684188374657",
    "1263945855766849354510334944065532128780",
    "181267529910573756716102767087485333561",
    "79817071675776388295206212610749591701",
    "1824545319189397521315695847785602896178",
    "1022803319099694746713266409355997953681",
    "900114221345677182512445238102013571787",
    "806608401546285073416583488309030248740",
    "1390917187629079949812427169424512137623",
    "4833310887722852675564040932252536797",
    "4985460341548456644715340132601722906",
    "12611032224211065896818190262528747759",
    "726813516829406413914358301771732303135",
    "25545768009523241245643640143972740285",
    "700121798421844638112954362982616513440",
    "3426408591059629602792909874372843773",
    "132656586283717246419120116467473299819",
    "135467273534976011077632682255406986070",
    "139483837448589163674758035261080447269",
    "439022777647632696517945103495108037392",
    "350274559051221032312724320837697244608",
    "34519564174861224012422426839487145969",
    "897265533945643607115272871669854221703",
    "89502211078669479795623704974378882516",
    "170846580729842163074659927269266210653",
    "8358020412969843293369480817801214853",
    "89553991991390806369608823483879896538",
    "1483436051876589682917815592106303415640",
    "135858760917247110501181309487470892600",
    "531516543728767028412376460505569912090",
    "11305144536390631794751804090725346943",
    "12557740518655779344059916987734456774",
    "16907477943652998274434215545923907743",
    "1070701508596510069314634318856054217121",
    "182056224738756981514078113564136896850",
    "83269041049646048121847555801066693775",
    "45320022097344468766723726317823118416",
    "22560638825399651583052560290002591528",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "146612017564224181584303574960223420416",
    "63085389524472853348886374617170044294",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "20743252454400330067347997888777335224",
    "181953690662554297912505335505865467275",
    "154716117204139621346903708735117238315",
    "10435104334233940885347855730897394048",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "68484638068549756813527774561016858731",
    "1328599216671135015714776194882339466358",
    "76687630660750854831132439645386232409",
    "659305918962398412386167034971940386",
    "1102707990469809545812015399289882219301",
    "46512117452826264263678779057101065629",
    "8161099640543304955344124854131248786",
    "19058764743854314419670517218317949449",
    "121229084792859591615820885121582269199",
    "1077593930434706120016125606885467273011",
    "559760545702983105117253089067799164676",
    "1348042039745062014015951941297754895913",
    "263357706812436091214144260807374604368",
    "1176805568875757844412601215105379417272",
    "717317897984632901316617723476110950437",
    "1121825575012330479117046270460961910099",
    "1213241336815109722310271468032047462595",
    "92005998086269722606437028357039395831",
    "181717373102152254895109628399379607332",
    "129298276867850405466757356839549852569",
    "841344188694266590295617675180068548",
    "112179773871628927303876335612651688990",
    "70542180169395563810324335690772955151",
    "43014631508606307693660626116761567117",
    "558667141726945299514936523234334465282",
    "184037955874578898824598900951006729231",
    "85839112874226958765684869690353996738",
    "83849535035327804979354663630505665277",
    "1753166894143510804112784709663712737672",
    "160437243740113458829048401145695790645",
    "42283536702166252101957777371456036590",
    "1010320278110026877215798050238858703054",
    "115481664012670090729456290692676191535",
    "414067426002036798312624266174828264739",
    "42640861811413251621458178080920148489",
    "32127953328920885943220843295221183156",
    "8787952082428538504365079471726452107",
    "1349879990858633985615465432111373267034",
    "116953387026626631555337908913709999943",
    "180635224128130815714204029673366671286",
    "3209455355414418345596547327370884836",
    "112989397975222255532054380452996322405",
    "597683522621928614711119364722938279780",
    "17341452779707394601695269753709495351",
    "893915108455891555016620038438472785966",
    "26987256806444037714655035545793307687",
    "27026375606464682699539692727856734723",
    "364946515915837522213803216036181469885",
    "76473105542440629998935855571615310589",
    "137892143508211511511631870990493490784"
  ]
}
