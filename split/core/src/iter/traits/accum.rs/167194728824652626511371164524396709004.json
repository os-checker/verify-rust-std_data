{
  "file": "core/src/iter/traits/accum.rs",
  "name": "<u8 as iter::traits::accum::Sum>::sum::<iter::adapters::map::Map<array::iter::IntoIter<bool, 32>, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/str/iter.rs:73:58: 73:61}>>",
  "hash": "167194728824652626511371164524396709004",
  "hash_direct": "465006942648226064312090223173552220198",
  "src": "fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {\n                iter.fold(\n                    $zero,\n                    #[rustc_inherit_overflow_checks]\n                    |a, b| a + b,\n                )\n            }",
  "macro_backtrace": [
    {
      "callsite": "integer_sum_product!(@impls 0, 1,\n                #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")],\n                $($a)*)",
      "defsite": "macro_rules! integer_sum_product {\n    (@impls $zero:expr, $one:expr, #[$attr:meta], $($a:ty)*) => ($(\n        #[$attr]\n        impl Sum for $a {\n            fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {\n                iter.fold(\n                    $zero,\n                    #[rustc_inherit_overflow_checks]\n                    |a, b| a + b,\n                )\n            }\n        }\n\n        #[$attr]\n        impl Product for $a {\n            fn product<I: Iterator<Item=Self>>(iter: I) -> Self {\n                iter.fold(\n                    $one,\n                    #[rustc_inherit_overflow_checks]\n                    |a, b| a * b,\n                )\n            }\n        }\n\n        #[$attr]\n        impl<'a> Sum<&'a $a> for $a {\n            fn sum<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n                iter.fold(\n                    $zero,\n                    #[rustc_inherit_overflow_checks]\n                    |a, b| a + b,\n                )\n            }\n        }\n\n        #[$attr]\n        impl<'a> Product<&'a $a> for $a {\n            fn product<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n                iter.fold(\n                    $one,\n                    #[rustc_inherit_overflow_checks]\n                    |a, b| a * b,\n                )\n            }\n        }\n    )*);\n    ($($a:ty)*) => (\n        integer_sum_product!(@impls 0, 1,\n                #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")],\n                $($a)*);\n        integer_sum_product!(@impls Wrapping(0), Wrapping(1),\n                #[stable(feature = \"wrapping_iter_arith\", since = \"1.14.0\")],\n                $(Wrapping<$a>)*);\n    );\n}"
    },
    {
      "callsite": "integer_sum_product! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }",
      "defsite": "macro_rules! integer_sum_product {\n    (@impls $zero:expr, $one:expr, #[$attr:meta], $($a:ty)*) => ($(\n        #[$attr]\n        impl Sum for $a {\n            fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {\n                iter.fold(\n                    $zero,\n                    #[rustc_inherit_overflow_checks]\n                    |a, b| a + b,\n                )\n            }\n        }\n\n        #[$attr]\n        impl Product for $a {\n            fn product<I: Iterator<Item=Self>>(iter: I) -> Self {\n                iter.fold(\n                    $one,\n                    #[rustc_inherit_overflow_checks]\n                    |a, b| a * b,\n                )\n            }\n        }\n\n        #[$attr]\n        impl<'a> Sum<&'a $a> for $a {\n            fn sum<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n                iter.fold(\n                    $zero,\n                    #[rustc_inherit_overflow_checks]\n                    |a, b| a + b,\n                )\n            }\n        }\n\n        #[$attr]\n        impl<'a> Product<&'a $a> for $a {\n            fn product<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n                iter.fold(\n                    $one,\n                    #[rustc_inherit_overflow_checks]\n                    |a, b| a * b,\n                )\n            }\n        }\n    )*);\n    ($($a:ty)*) => (\n        integer_sum_product!(@impls 0, 1,\n                #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")],\n                $($a)*);\n        integer_sum_product!(@impls Wrapping(0), Wrapping(1),\n                #[stable(feature = \"wrapping_iter_arith\", since = \"1.14.0\")],\n                $(Wrapping<$a>)*);\n    );\n}"
    }
  ],
  "callees": [
    "41966125627776955855789273656829817812",
    "12524732936557226037319201020841971846",
    "1231102876156931711814358486243623474908",
    "103819973079805417389990870889546194859",
    "150560098238853551326995667760619506790",
    "1445637797255765534317857359453372950973",
    "1253237062903825534813668253234507456976",
    "34064211194150573802512277633485531226",
    "121930174238491760166491470540554497891",
    "258820287469578611817448591488600041899",
    "6962362284417680556415378392413733050",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "121123536181797178493340167706836095762",
    "11970797721865951164579715513310336876",
    "123282905749082481871021511695537222033",
    "95615634588530129754325239223227478335",
    "175786588236546328856549616355440213402",
    "54724029972380287997312107304386063911",
    "348284449366837360014422050266803763917",
    "31905993340822523516642016646258431532",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "5667765796385169624800112337147502292",
    "366974912920839386515801963218903644372",
    "58091080677819579967152220040182388954",
    "212928144464252219117278275833446446061",
    "884246074448727927914595282961940941192",
    "975615807404907599012293873143289411403",
    "76512364011266228718507200393334295670",
    "465974363902275324511601404467167577535",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "27547235193633795771352944920978011050",
    "54104130289664392713771502668382599922",
    "83041036538342381393304603444628700948",
    "182029328991862475774353496657393119545",
    "24265704420234799141933179830421765315",
    "98548455107584176526138467604576685276",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "179957548386362372047399332626891628586",
    "526258967998825072612351468190457449767",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "482242367082080498048410775885053189",
    "223646787657343988812796841100201311556",
    "12423280518611341321766387899155093376",
    "1452147724126290531315968929844758522718",
    "825444994840224825916566360789797426862",
    "176583191989635225759688632826309381941",
    "157318626556499180243108566185354538656",
    "152473771341534209478854735758168867202",
    "110436030872880631446977172233166094945",
    "1335452516096491074715590878347087859337",
    "6562418950143853582399054255015499128",
    "31614589496197126068503606819520281048",
    "84381541122411983019393689892021417318",
    "789169877560704355517210231802019779543",
    "98672616218528724113768882390038008401",
    "154911443990380340341563367924870465980",
    "36990817497430174858508344623774643994",
    "1737046666080539081914974966237099365643",
    "76610361547970390014041401956375253519",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
