{
  "file": "core/src/iter/range.rs",
  "name": "<char as iter::range::Step>::backward_unchecked",
  "hash": "1265179122472707272610246310318670839119",
  "hash_direct": "325109330635485489313409575080111343951",
  "src": "unsafe fn backward_unchecked(start: char, count: usize) -> char {\n        let start = start as u32;\n        // SAFETY: the caller must guarantee that this doesn't overflow\n        // the range of values for a char.\n        let mut res = unsafe { Step::backward_unchecked(start, count) };\n        if start >= 0xE000 && 0xE000 > res {\n            // SAFETY: the caller must guarantee that this doesn't overflow\n            // the range of values for a char.\n            res = unsafe { Step::backward_unchecked(res, 0x800) };\n        }\n        // SAFETY: because of the previous contract, this is guaranteed\n        // by the caller to be a valid char.\n        unsafe { char::from_u32_unchecked(res) }\n    }",
  "callees": [
    "125895754419976834712369234308535121418",
    "97974469250681533633362941246048906040",
    "56316359647357795184792913202425867352",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "187707461451049832517498205394896812182",
    "5450955403464874012556190186318098803",
    "623932314898806384710942612752481980908",
    "303127917241666984113380325134893912788",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "1676603290518039711418379565247484306913",
    "611027897215340775410757839603478111815",
    "17507883686148831056122605745425702461",
    "739520556846959085018120036998133255835"
  ]
}
