{
  "file": "core/src/iter/range.rs",
  "name": "<char as iter::range::Step>::backward_unchecked",
  "hash": "85110977581463147468246228674807511410",
  "hash_direct": "325109330635485489313409575080111343951",
  "src": "unsafe fn backward_unchecked(start: char, count: usize) -> char {\n        let start = start as u32;\n        // SAFETY: the caller must guarantee that this doesn't overflow\n        // the range of values for a char.\n        let mut res = unsafe { Step::backward_unchecked(start, count) };\n        if start >= 0xE000 && 0xE000 > res {\n            // SAFETY: the caller must guarantee that this doesn't overflow\n            // the range of values for a char.\n            res = unsafe { Step::backward_unchecked(res, 0x800) };\n        }\n        // SAFETY: because of the previous contract, this is guaranteed\n        // by the caller to be a valid char.\n        unsafe { char::from_u32_unchecked(res) }\n    }",
  "callees": [
    "1096154568935207292118411765173724766739",
    "1615780015787215128316594883786605832883",
    "40063093336585792095766602796070126518",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "1570510636641655704211361599679023296652",
    "106375490049314336818335775986269435759",
    "1751816092772781545811379294995919623371",
    "164769300933020566656262923669273525158",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "182972684513709302288440602073677891408",
    "158338167874674576194838212405987326951",
    "199739883961798654815273264980462540667",
    "399232661239117480517401994520839366833"
  ]
}
