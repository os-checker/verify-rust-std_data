{
  "file": "core/src/iter/range.rs",
  "name": "<char as iter::range::Step>::backward_unchecked",
  "hash": "20234539743133970112037233805606787967",
  "hash_direct": "325109330635485489313409575080111343951",
  "src": "unsafe fn backward_unchecked(start: char, count: usize) -> char {\n        let start = start as u32;\n        // SAFETY: the caller must guarantee that this doesn't overflow\n        // the range of values for a char.\n        let mut res = unsafe { Step::backward_unchecked(start, count) };\n        if start >= 0xE000 && 0xE000 > res {\n            // SAFETY: the caller must guarantee that this doesn't overflow\n            // the range of values for a char.\n            res = unsafe { Step::backward_unchecked(res, 0x800) };\n        }\n        // SAFETY: because of the previous contract, this is guaranteed\n        // by the caller to be a valid char.\n        unsafe { char::from_u32_unchecked(res) }\n    }",
  "callees": [
    "1137504858812645032216016959492348926209",
    "1730104888752463612515843025505589269421",
    "30477841482411972089439721196610634090",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "23323516819309733577180140782847076985",
    "305026260801787476215973517134374191389",
    "28237407564734207274353668131226800261",
    "20170180267557332822120616943783807769",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "1676603290518039711418379565247484306913",
    "69521336164211208533737404575105193630",
    "1286996852961180711511171993345139674249",
    "739520556846959085018120036998133255835"
  ]
}
