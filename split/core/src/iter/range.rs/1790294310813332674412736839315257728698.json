{
  "file": "core/src/iter/range.rs",
  "name": "<ops::range::Range<u8> as iter::range::RangeIteratorImpl>::spec_advance_by",
  "hash": "1790294310813332674412736839315257728698",
  "hash_direct": "388613748637185530217431805301549068287",
  "src": "fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n        let steps = Step::steps_between(&self.start, &self.end);\n        let available = steps.1.unwrap_or(steps.0);\n\n        let taken = available.min(n);\n\n        // SAFETY: the conditions above ensure that the count is in bounds. If start <= end\n        // then steps_between either returns a bound to which we clamp or returns None which\n        // together with the initial inequality implies more than usize::MAX steps.\n        // Otherwise 0 is returned which always safe to use.\n        self.start = unsafe { Step::forward_unchecked(self.start, taken) };\n\n        NonZero::new(n - taken).map_or(Ok(()), Err)\n    }",
  "callees": [
    "162904158373319495369070442937212273978",
    "589599466487462365011430963401962118509",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "1559527691468457438712029334091199709783",
    "142912422590755740649191640722513377296",
    "375485108047544468212954122974188100514",
    "7418434326773042031826248058658687296",
    "82238255375868304519870604057524476826",
    "61243377896084322717777372197237784668",
    "164068019671410046984473820423655882669",
    "60746280367815763754650341937712504214",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "1345903579787689058715689038732564730769",
    "379994518897277131216528315043767400790",
    "136032794974893814259994759472454752644",
    "151921782545986132711095630321482724997",
    "926431751072447714115290524535080564415",
    "399232661239117480517401994520839366833"
  ]
}
