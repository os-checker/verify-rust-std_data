{
  "file": "core/src/bstr/traits.rs",
  "name": "bstr::traits::<impl cmp::PartialEq<[u8]> for bstr::ByteStr>::eq",
  "hash": "178089818702017377597748638074739706114",
  "hash_direct": "109700454338023996607145573128322338741",
  "src": "fn eq(&self, other: &$rhs) -> bool {\n                let other: &[u8] = other.as_ref();\n                PartialEq::eq(self.as_bytes(), other)\n            }",
  "macro_backtrace": [
    {
      "callsite": "impl_partial_eq!(ByteStr, [u8])",
      "defsite": "macro_rules! impl_partial_eq {\n    ($lhs:ty, $rhs:ty) => {\n        #[allow(unused_lifetimes)]\n        impl<'a> PartialEq<$rhs> for $lhs {\n            #[inline]\n            fn eq(&self, other: &$rhs) -> bool {\n                let other: &[u8] = other.as_ref();\n                PartialEq::eq(self.as_bytes(), other)\n            }\n        }\n\n        #[allow(unused_lifetimes)]\n        impl<'a> PartialEq<$lhs> for $rhs {\n            #[inline]\n            fn eq(&self, other: &$lhs) -> bool {\n                let this: &[u8] = self.as_ref();\n                PartialEq::eq(this, other.as_bytes())\n            }\n        }\n    };\n}"
    }
  ],
  "callees": [
    "63517001485807668946963868364618806680",
    "171898678184785121028779780750700975371",
    "618708256121172115917225444658205159680",
    "180418702711060811601049271977599275130",
    "169890989984787760587841791387523712921",
    "47822370175813177448723454097252028703"
  ]
}
