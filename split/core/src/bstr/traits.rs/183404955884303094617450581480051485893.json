{
  "file": "core/src/bstr/traits.rs",
  "name": "bstr::traits::<impl cmp::PartialEq<bstr::ByteStr> for [u8]>::eq",
  "hash": "183404955884303094617450581480051485893",
  "hash_direct": "62699654249378986419453453509239236459",
  "src": "fn eq(&self, other: &$lhs) -> bool {\n                let this: &[u8] = self.as_ref();\n                PartialEq::eq(this, other.as_bytes())\n            }",
  "macro_backtrace": [
    {
      "callsite": "impl_partial_eq!(ByteStr, [u8])",
      "defsite": "macro_rules! impl_partial_eq {\n    ($lhs:ty, $rhs:ty) => {\n        #[allow(unused_lifetimes)]\n        impl<'a> PartialEq<$rhs> for $lhs {\n            #[inline]\n            fn eq(&self, other: &$rhs) -> bool {\n                let other: &[u8] = other.as_ref();\n                PartialEq::eq(self.as_bytes(), other)\n            }\n        }\n\n        #[allow(unused_lifetimes)]\n        impl<'a> PartialEq<$lhs> for $rhs {\n            #[inline]\n            fn eq(&self, other: &$lhs) -> bool {\n                let this: &[u8] = self.as_ref();\n                PartialEq::eq(this, other.as_bytes())\n            }\n        }\n    };\n}"
    }
  ],
  "callees": [
    "109876452559006158611413615147675014073",
    "409953223021744549014008692042846920983",
    "7832507060962758874697651425918563686",
    "126692834448097932228994692025940173998",
    "25558485697757400065874176408609551720",
    "156130332443363785142369276941490088427"
  ]
}
