{
  "file": "core/src/bstr/traits.rs",
  "name": "bstr::traits::<impl slice::index::SliceIndex<bstr::ByteStr> for (ops::range::Bound<usize>, ops::range::Bound<usize>)>::get_mut",
  "hash": "49106286894500674762780840085914001140",
  "hash_direct": "1001535709047449051317679384025607645036",
  "src": "fn get_mut(self, slice: &mut ByteStr) -> Option<&mut Self::Output> {\n                self.get_mut(slice.as_bytes_mut()).map(ByteStr::from_bytes_mut)\n            }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_index!((ops::Bound<usize>, ops::Bound<usize>))",
      "defsite": "macro_rules! impl_slice_index {\n    ($index:ty) => {\n        #[unstable(feature = \"bstr\", issue = \"134915\")]\n        unsafe impl SliceIndex<ByteStr> for $index {\n            type Output = ByteStr;\n            #[inline]\n            fn get(self, slice: &ByteStr) -> Option<&Self::Output> {\n                self.get(slice.as_bytes()).map(ByteStr::from_bytes)\n            }\n            #[inline]\n            fn get_mut(self, slice: &mut ByteStr) -> Option<&mut Self::Output> {\n                self.get_mut(slice.as_bytes_mut()).map(ByteStr::from_bytes_mut)\n            }\n            #[inline]\n            unsafe fn get_unchecked(self, slice: *const ByteStr) -> *const Self::Output {\n                // SAFETY: the caller has to uphold the safety contract for `get_unchecked`.\n                unsafe { self.get_unchecked(slice as *const [u8]) as *const ByteStr }\n            }\n            #[inline]\n            unsafe fn get_unchecked_mut(self, slice: *mut ByteStr) -> *mut Self::Output {\n                // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.\n                unsafe { self.get_unchecked_mut(slice as *mut [u8]) as *mut ByteStr }\n            }\n            #[inline]\n            fn index(self, slice: &ByteStr) -> &Self::Output {\n                ByteStr::from_bytes(self.index(slice.as_bytes()))\n            }\n            #[inline]\n            fn index_mut(self, slice: &mut ByteStr) -> &mut Self::Output {\n                ByteStr::from_bytes_mut(self.index_mut(slice.as_bytes_mut()))\n            }\n        }\n    };\n}"
    }
  ],
  "callees": [
    "51582421529292649889618319417880190376",
    "655644704543625357914499273589454619946",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "38173889201636315922757092210776486888",
    "36263650381921031236374006938891928812",
    "1833099800729826288815633692934262716120",
    "1789589934729638079314472717619136894232",
    "97258710297774307175121940197255709961",
    "1258464984597353139113143524566786893794",
    "935327613547407926313303453668085555306",
    "91259232927623171162263126407313537318",
    "732374513817134745817071711119891796662",
    "934644342406538756817550331137138605071",
    "108765155324211261704978182904838323355",
    "25047678897068037619032084817793238854",
    "89873470787809197489045283781578292418"
  ]
}
