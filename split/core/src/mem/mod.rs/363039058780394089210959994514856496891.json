{
  "file": "core/src/mem/mod.rs",
  "name": "mem::transmute_copy::<core_simd::vector::Simd<f32, 2>, core_simd::vector::Simd<u32, 2>>",
  "hash": "363039058780394089210959994514856496891",
  "hash_direct": "25191491358181104917517236637143961073",
  "src": "pub const unsafe fn transmute_copy<Src, Dst>(src: &Src) -> Dst {\n    assert!(\n        size_of::<Src>() >= size_of::<Dst>(),\n        \"cannot transmute_copy if Dst is larger than Src\"\n    );\n\n    // If Dst has a higher alignment requirement, src might not be suitably aligned.\n    if align_of::<Dst>() > align_of::<Src>() {\n        // SAFETY: `src` is a reference which is guaranteed to be valid for reads.\n        // The caller must guarantee that the actual transmutation is safe.\n        unsafe { ptr::read_unaligned(src as *const Src as *const Dst) }\n    } else {\n        // SAFETY: `src` is a reference which is guaranteed to be valid for reads.\n        // We just checked that `src as *const Dst` was properly aligned.\n        // The caller must guarantee that the actual transmutation is safe.\n        unsafe { ptr::read(src as *const Src as *const Dst) }\n    }\n}",
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "108707259045694085775836519297574235438",
    "1494987184257192057015121261184473843897",
    "41207407053044484906965245351991009831",
    "5216507227569570683376384589405764711",
    "1629639695779141601712915318856383048181",
    "38217196742947992835679479997123307043",
    "825937024435420881918435440490123299724",
    "663342553803526814514684384962125149151",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "761861023504359043615820998596748928032",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "239591158215506969112537241852154903566",
    "155791507195532360274833498610615284175",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "31656414362767519921773019768940498677",
    "49748258820678417657639994812541312801",
    "1821523690917534440212260140288807845522",
    "48269828393251912102754553129094534608",
    "74111286315405054421392461884745781298",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
