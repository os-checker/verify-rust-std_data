{
  "file": "core/src/mem/mod.rs",
  "name": "mem::transmute_copy::<core_simd::vector::Simd<f32, 16>, core_simd::vector::Simd<u32, 16>>",
  "hash": "6448597079002362047385278963679831723",
  "hash_direct": "109498587560348724403152595512063959275",
  "src": "pub const unsafe fn transmute_copy<Src, Dst>(src: &Src) -> Dst {\n    assert!(\n        size_of::<Src>() >= size_of::<Dst>(),\n        \"cannot transmute_copy if Dst is larger than Src\"\n    );\n\n    // If Dst has a higher alignment requirement, src might not be suitably aligned.\n    if align_of::<Dst>() > align_of::<Src>() {\n        // SAFETY: `src` is a reference which is guaranteed to be valid for reads.\n        // The caller must guarantee that the actual transmutation is safe.\n        unsafe { ptr::read_unaligned(src as *const Src as *const Dst) }\n    } else {\n        // SAFETY: `src` is a reference which is guaranteed to be valid for reads.\n        // We just checked that `src as *const Dst` was properly aligned.\n        // The caller must guarantee that the actual transmutation is safe.\n        unsafe { ptr::read(src as *const Src as *const Dst) }\n    }\n}",
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "161225022469363908823200354701136905531",
    "1438504500421640513412774502242124137920",
    "671215226562133576711237056270775061569",
    "108285080074514177114640560911843217913",
    "822581437236485178816734892656210157088",
    "1296642328725450537214455409774893378051",
    "168545836479171427075036933182194130275",
    "1044677045605134786113686819611979795006",
    "54185051266454667998975018197034780111",
    "1712898201300478840215074793236064467963",
    "1067675883129992420314174327751912045205",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "380262551218047276514654482281297551654",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "56298366544210202453467474593867499876",
    "62387139789057758277645801779564593910",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "94774452442185535288317545443977520870",
    "172961149307020906794215413069588151713",
    "1169212014256387985010498064718145354410",
    "153999075255816246604435272140943255557",
    "48548664629730829953422984265893277498",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "15859584444614920947579563356650829639"
  ]
}
