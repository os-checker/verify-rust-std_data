{
  "file": "core/src/net/ip_addr.rs",
  "name": "<&net::ip_addr::Ipv6Addr as ops::bit::BitAnd<net::ip_addr::Ipv6Addr>>::bitand",
  "hash": "947026038782299596713283875371031526550",
  "hash_direct": "75630798007565021792630675181814378934",
  "src": "fn $bitop(self, rhs: $ty) -> $ty {\n                    let mut lhs = *self;\n                    lhs.$bitop_assign(rhs);\n                    lhs\n                }",
  "macro_backtrace": [
    {
      "callsite": "bitop_impls! {\n    #[stable(feature = \"ip_bitops\", since = \"1.75.0\")]\n    #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n    impl (BitAnd, BitAndAssign) for Ipv4Addr = (bitand, bitand_assign);\n    #[stable(feature = \"ip_bitops\", since = \"1.75.0\")]\n    #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n    impl (BitOr, BitOrAssign) for Ipv4Addr = (bitor, bitor_assign);\n\n    #[stable(feature = \"ip_bitops\", since = \"1.75.0\")]\n    #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n    impl (BitAnd, BitAndAssign) for Ipv6Addr = (bitand, bitand_assign);\n    #[stable(feature = \"ip_bitops\", since = \"1.75.0\")]\n    #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n    impl (BitOr, BitOrAssign) for Ipv6Addr = (bitor, bitor_assign);\n}",
      "defsite": "macro_rules! bitop_impls {\n    ($(\n        $(#[$attr:meta])*\n        impl ($BitOp:ident, $BitOpAssign:ident) for $ty:ty = ($bitop:ident, $bitop_assign:ident);\n    )*) => {\n        $(\n            $(#[$attr])*\n            impl const $BitOpAssign for $ty {\n                fn $bitop_assign(&mut self, rhs: $ty) {\n                    let mut idx = 0;\n                    while idx < self.octets.len() {\n                        self.octets[idx].$bitop_assign(rhs.octets[idx]);\n                        idx += 1;\n                    }\n                }\n            }\n\n            $(#[$attr])*\n            impl const $BitOpAssign<&'_ $ty> for $ty {\n                fn $bitop_assign(&mut self, rhs: &'_ $ty) {\n                    self.$bitop_assign(*rhs);\n                }\n            }\n\n            $(#[$attr])*\n            impl const $BitOp for $ty {\n                type Output = $ty;\n\n                #[inline]\n                fn $bitop(mut self, rhs: $ty) -> $ty {\n                    self.$bitop_assign(rhs);\n                    self\n                }\n            }\n\n            $(#[$attr])*\n            impl const $BitOp<&'_ $ty> for $ty {\n                type Output = $ty;\n\n                #[inline]\n                fn $bitop(mut self, rhs: &'_ $ty) -> $ty {\n                    self.$bitop_assign(*rhs);\n                    self\n                }\n            }\n\n            $(#[$attr])*\n            impl const $BitOp<$ty> for &'_ $ty {\n                type Output = $ty;\n\n                #[inline]\n                fn $bitop(self, rhs: $ty) -> $ty {\n                    let mut lhs = *self;\n                    lhs.$bitop_assign(rhs);\n                    lhs\n                }\n            }\n\n            $(#[$attr])*\n            impl const $BitOp<&'_ $ty> for &'_ $ty {\n                type Output = $ty;\n\n                #[inline]\n                fn $bitop(self, rhs: &'_ $ty) -> $ty {\n                    let mut lhs = *self;\n                    lhs.$bitop_assign(*rhs);\n                    lhs\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "7071427928082939459235444216712354480",
    "1522427492371917782218325836342021640496"
  ]
}
