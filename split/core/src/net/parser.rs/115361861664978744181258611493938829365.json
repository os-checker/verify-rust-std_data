{
  "file": "core/src/net/parser.rs",
  "name": "net::parser::Parser::<'_>::read_number::<u16>::{closure#0}",
  "hash": "115361861664978744181258611493938829365",
  "hash_direct": "71097626424408167309755453324578538657",
  "src": "move |p| {\n            let mut digit_count = 0;\n            let has_leading_zero = p.peek_char() == Some('0');\n\n            // If max_digits.is_some(), then we are parsing a `u8` or `u16` and\n            // don't need to use checked arithmetic since it fits within a `u32`.\n            let result = if let Some(max_digits) = max_digits {\n                // u32::MAX = 4_294_967_295u32, which is 10 digits long.\n                // `max_digits` must be less than 10 to not overflow a `u32`.\n                debug_assert!(max_digits < 10);\n\n                let mut result = 0_u32;\n                while let Some(digit) = p.read_atomically(|p| p.read_char()?.to_digit(radix)) {\n                    result *= radix;\n                    result += digit;\n                    digit_count += 1;\n\n                    if digit_count > max_digits {\n                        return None;\n                    }\n                }\n\n                result.try_into().ok()\n            } else {\n                let mut result = T::ZERO;\n\n                while let Some(digit) = p.read_atomically(|p| p.read_char()?.to_digit(radix)) {\n                    result = result.checked_mul(radix)?;\n                    result = result.checked_add(digit)?;\n                    digit_count += 1;\n                }\n\n                Some(result)\n            };\n\n            if digit_count == 0 {\n                None\n            } else if !allow_zero_prefix && has_leading_zero && digit_count > 1 {\n                None\n            } else {\n                result\n            }\n        }",
  "callees": [
    "68581623244024013215145596633238016545",
    "4210014628989957347484966718734559295",
    "161110257280051412412943306079497681034",
    "25614342394285118778213958506470249860",
    "918000332450224975711802885814461250465",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "130885398888314509736212690022412268544",
    "1255059881266019554813950205633902236470",
    "67289340086559420173957743949970974538",
    "937080787853609349417625262597259398636",
    "83760801335973120452228026641906867763",
    "11905843360629198847416804024805031316",
    "752687342413269091317542133211502201034",
    "626994940997236582818164055641051462528",
    "186062959457172378813938833961760769221",
    "151055299924738897389584978777686108272",
    "1761664836038391706912370904109030807900",
    "891612569876134670010584546105289597937",
    "105079983965503949187429510421372327552",
    "164769300933020566656262923669273525158",
    "126505910557947610811814870065204418151",
    "680091505401528085250888837121127168",
    "132509252322383585907916144519519696663",
    "308281749257430291910317330785577133908",
    "176742512093848468045239021356424772729",
    "745524210749183305612829606260244433079",
    "141007910209282000879729043567797035532",
    "163394636913786159345259614198733661079",
    "23882414329025749689761660045954070725",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "74722179737445951668192129359189854819",
    "160181710596894879409206814565814475412",
    "338794201840290685319712039863758526",
    "1262940562127148830716588840615468451407",
    "254837619815442127015884532988627347636",
    "85943950329656913574916204525430344889",
    "22357101018955144842858340993688817638",
    "154502864350574923945507183674678843794"
  ]
}
