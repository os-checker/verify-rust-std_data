{
  "file": "core/src/net/parser.rs",
  "name": "net::parser::Parser::<'_>::read_number::<u32>::{closure#0}",
  "hash": "417852619922062885814145448273923010448",
  "hash_direct": "1681091969790516801015193518955794089734",
  "src": "move |p| {\n            let mut digit_count = 0;\n            let has_leading_zero = p.peek_char() == Some('0');\n\n            // If max_digits.is_some(), then we are parsing a `u8` or `u16` and\n            // don't need to use checked arithmetic since it fits within a `u32`.\n            let result = if let Some(max_digits) = max_digits {\n                // u32::MAX = 4_294_967_295u32, which is 10 digits long.\n                // `max_digits` must be less than 10 to not overflow a `u32`.\n                debug_assert!(max_digits < 10);\n\n                let mut result = 0_u32;\n                while let Some(digit) = p.read_atomically(|p| p.read_char()?.to_digit(radix)) {\n                    result *= radix;\n                    result += digit;\n                    digit_count += 1;\n\n                    if digit_count > max_digits {\n                        return None;\n                    }\n                }\n\n                result.try_into().ok()\n            } else {\n                let mut result = T::ZERO;\n\n                while let Some(digit) = p.read_atomically(|p| p.read_char()?.to_digit(radix)) {\n                    result = result.checked_mul(radix)?;\n                    result = result.checked_add(digit)?;\n                    digit_count += 1;\n                }\n\n                Some(result)\n            };\n\n            if digit_count == 0 {\n                None\n            } else if !allow_zero_prefix && has_leading_zero && digit_count > 1 {\n                None\n            } else {\n                result\n            }\n        }",
  "callees": [
    "511962504776047044912646038885098500692",
    "85573708867003773503727706164971877350",
    "15518699560175228058918609018343356989",
    "1392407438641980646011338402895728813916",
    "634927983275490497016701312471324181130",
    "194409383402153860316229451154861162774",
    "1123712166519360581914509162167226732765",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "1085398929461512376613630071574080050688",
    "108078900980728946107200203014405602196",
    "44421782838203085223217897581467993698",
    "1496059028021580695016992067514637295596",
    "938326492856713379915195394648764096241",
    "6675680828209440068406281673959822455",
    "1090802516613202497515360573503366486326",
    "1593816907297385618710307221619963429327",
    "603188238084655611214252115119464753113",
    "113881526879938769836313903739316191288",
    "7339833673235926594506370228278878806",
    "141105166115437627477272930219714833415",
    "1745451321050495194918138817064128180120",
    "303127917241666984113380325134893912788",
    "60869249937273539602008894281350951915",
    "11394109588989514066836781073732518434",
    "1424839172046310268011085042199237354602",
    "719129286597258618217317545152508524920",
    "533978393061650897214741362182416016139",
    "90434442550312736906949358693105215038",
    "1507457419509717148718386372359226764513",
    "107750154537374038185532791974515303762",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "177514769518540065432700141126543643261",
    "540990493817502691515157495818752962571",
    "12583040371049054649997982659979050806",
    "1817215089507823436616338053904223106794",
    "132216090387111466077274355354934980437",
    "1747882974803406678316717807912919332347",
    "21617172818475739555230285502389437314",
    "78204921097721474912957416123615891283"
  ]
}
