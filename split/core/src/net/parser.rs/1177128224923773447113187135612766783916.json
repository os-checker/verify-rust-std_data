{
  "file": "core/src/net/parser.rs",
  "name": "net::parser::Parser::<'_>::read_number::<u16>",
  "hash": "1177128224923773447113187135612766783916",
  "hash_direct": "103425645397810232624156536755117168411",
  "src": "fn read_number<T: ReadNumberHelper + TryFrom<u32>>(\n        &mut self,\n        radix: u32,\n        max_digits: Option<usize>,\n        allow_zero_prefix: bool,\n    ) -> Option<T> {\n        self.read_atomically(move |p| {\n            let mut digit_count = 0;\n            let has_leading_zero = p.peek_char() == Some('0');\n\n            // If max_digits.is_some(), then we are parsing a `u8` or `u16` and\n            // don't need to use checked arithmetic since it fits within a `u32`.\n            let result = if let Some(max_digits) = max_digits {\n                // u32::MAX = 4_294_967_295u32, which is 10 digits long.\n                // `max_digits` must be less than 10 to not overflow a `u32`.\n                debug_assert!(max_digits < 10);\n\n                let mut result = 0_u32;\n                while let Some(digit) = p.read_atomically(|p| p.read_char()?.to_digit(radix)) {\n                    result *= radix;\n                    result += digit;\n                    digit_count += 1;\n\n                    if digit_count > max_digits {\n                        return None;\n                    }\n                }\n\n                result.try_into().ok()\n            } else {\n                let mut result = T::ZERO;\n\n                while let Some(digit) = p.read_atomically(|p| p.read_char()?.to_digit(radix)) {\n                    result = result.checked_mul(radix)?;\n                    result = result.checked_add(digit)?;\n                    digit_count += 1;\n                }\n\n                Some(result)\n            };\n\n            if digit_count == 0 {\n                None\n            } else if !allow_zero_prefix && has_leading_zero && digit_count > 1 {\n                None\n            } else {\n                result\n            }\n        })\n    }",
  "callees": [
    "511962504776047044912646038885098500692",
    "941830179972098197316651007639829831459",
    "15518699560175228058918609018343356989",
    "51216914812936804314134785464961727021",
    "141490897541753691963849345144419509446",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "539121335870744671012350925530138496216",
    "41696721149340869551941639921540757723",
    "44421782838203085223217897581467993698",
    "1496059028021580695016992067514637295596",
    "1412018592215060135613110705121686885938",
    "1286994600056195484011195515395684925960",
    "30764983122208640909938873545379717588",
    "1090802516613202497515360573503366486326",
    "1593816907297385618710307221619963429327",
    "63200125451857310498425057220146852040",
    "59614676208301789727926580631363459384",
    "1162238451188991240414683249478957769388",
    "19803807215760642039079174007093190693",
    "132206149694843101553195521296093368390",
    "34592207622385251312187007769926517319",
    "20170180267557332822120616943783807769",
    "60869249937273539602008894281350951915",
    "11394109588989514066836781073732518434",
    "1206804965956081593213843103055931360059",
    "62522805592676016269642550063448762286",
    "1424839172046310268011085042199237354602",
    "533978393061650897214741362182416016139",
    "90434442550312736906949358693105215038",
    "97179054028041517936744457590545356189",
    "302426152425675612212977433821647950365",
    "1507457419509717148718386372359226764513",
    "107750154537374038185532791974515303762",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "9415230033719881551100479702541278001",
    "135710756291504804587550868687823101358",
    "150567892505730402506580299695654398474",
    "1817215089507823436616338053904223106794",
    "132216090387111466077274355354934980437",
    "362063923325643096717377828351042387428",
    "21617172818475739555230285502389437314",
    "78204921097721474912957416123615891283"
  ]
}
