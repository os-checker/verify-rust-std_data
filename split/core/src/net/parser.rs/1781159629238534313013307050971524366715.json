{
  "file": "core/src/net/parser.rs",
  "name": "net::parser::Parser::<'_>::read_number::<u32>::{closure#0}",
  "hash": "1781159629238534313013307050971524366715",
  "hash_direct": "1681091969790516801015193518955794089734",
  "src": "move |p| {\n            let mut digit_count = 0;\n            let has_leading_zero = p.peek_char() == Some('0');\n\n            // If max_digits.is_some(), then we are parsing a `u8` or `u16` and\n            // don't need to use checked arithmetic since it fits within a `u32`.\n            let result = if let Some(max_digits) = max_digits {\n                // u32::MAX = 4_294_967_295u32, which is 10 digits long.\n                // `max_digits` must be less than 10 to not overflow a `u32`.\n                debug_assert!(max_digits < 10);\n\n                let mut result = 0_u32;\n                while let Some(digit) = p.read_atomically(|p| p.read_char()?.to_digit(radix)) {\n                    result *= radix;\n                    result += digit;\n                    digit_count += 1;\n\n                    if digit_count > max_digits {\n                        return None;\n                    }\n                }\n\n                result.try_into().ok()\n            } else {\n                let mut result = T::ZERO;\n\n                while let Some(digit) = p.read_atomically(|p| p.read_char()?.to_digit(radix)) {\n                    result = result.checked_mul(radix)?;\n                    result = result.checked_add(digit)?;\n                    digit_count += 1;\n                }\n\n                Some(result)\n            };\n\n            if digit_count == 0 {\n                None\n            } else if !allow_zero_prefix && has_leading_zero && digit_count > 1 {\n                None\n            } else {\n                result\n            }\n        }",
  "callees": [
    "68581623244024013215145596633238016545",
    "4210014628989957347484966718734559295",
    "161110257280051412412943306079497681034",
    "72699670695286742389939697480050866043",
    "1621612210293079169912755667901066539728",
    "3351683997119320703362045787580459341",
    "14519620076955137704272943162241028679",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "170633591477864579768096160390403518255",
    "175940197571205246596528045153582124669",
    "67289340086559420173957743949970974538",
    "937080787853609349417625262597259398636",
    "1029854974765519150017420762479940272897",
    "34612648838302615177326184208350664434",
    "752687342413269091317542133211502201034",
    "626994940997236582818164055641051462528",
    "96711161821861913608792502828705710292",
    "11793377706996387243948712279496371333",
    "1108399665838346317518401576463185100821",
    "1013669197487730806312859888601026435838",
    "66449392659434954285407600121191159076",
    "164769300933020566656262923669273525158",
    "126505910557947610811814870065204418151",
    "680091505401528085250888837121127168",
    "176742512093848468045239021356424772729",
    "447091738145596157516402889003445234529",
    "745524210749183305612829606260244433079",
    "141007910209282000879729043567797035532",
    "163394636913786159345259614198733661079",
    "23882414329025749689761660045954070725",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "123850870404158706907409499655311853480",
    "15957317058116225863653187313457710307",
    "178908583266819311171056730682051642189",
    "1262940562127148830716588840615468451407",
    "254837619815442127015884532988627347636",
    "18579137802854950601114601667911227264",
    "22357101018955144842858340993688817638",
    "154502864350574923945507183674678843794"
  ]
}
