{
  "file": "core/src/array/iter/iter_inner.rs",
  "name": "array::iter::iter_inner::PolymorphicIter::<[mem::maybe_uninit::MaybeUninit<bool>]>::try_fold::<u8, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/ops/try_trait.rs:398:9: 398:20}, ops::try_trait::NeverShortCircuit<u8>>",
  "hash": "253429216806526744815178287324247721658",
  "hash_direct": "143551888943308369661924501543408255361",
  "src": "pub(super) fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R\n    where\n        F: FnMut(B, T) -> R,\n        R: Try<Output = B>,\n    {\n        // `alive` is an `IndexRange`, not an arbitrary iterator, so we can\n        // trust that its `try_fold` isn't going to do something weird like\n        // call the fold-er multiple times for the same index.\n        let data = &mut self.data;\n        self.alive.try_fold(init, move |accum, idx| {\n            // SAFETY: `idx` has been removed from the alive range, so we're not\n            // going to drop it (even if `f` panics) and thus its ok to give\n            // out ownership of that item to `f` to handle.\n            let elem = unsafe { data.get_unchecked(idx).assume_init_read() };\n            f(accum, elem)\n        })\n    }",
  "callees": [
    "711721895462790746594962502165478778",
    "258820287469578611817448591488600041899",
    "6962362284417680556415378392413733050",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "123282905749082481871021511695537222033",
    "95615634588530129754325239223227478335",
    "54724029972380287997312107304386063911",
    "658562313199932033113320253697734861112",
    "31905993340822523516642016646258431532",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "174107661030119018973646362480685393050",
    "2806803150502179082378717023746695692",
    "212928144464252219117278275833446446061",
    "992275621815851552413461958853915402745",
    "465974363902275324511601404467167577535",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "54104130289664392713771502668382599922",
    "83041036538342381393304603444628700948",
    "182029328991862475774353496657393119545",
    "98548455107584176526138467604576685276",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "179957548386362372047399332626891628586",
    "177080457510933375621473395026744608705",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "482242367082080498048410775885053189",
    "825444994840224825916566360789797426862",
    "113377476234098108565178548019831255433",
    "110436030872880631446977172233166094945",
    "6562418950143853582399054255015499128",
    "789169877560704355517210231802019779543",
    "154911443990380340341563367924870465980",
    "36990817497430174858508344623774643994",
    "126048648882406442003602795325732745334",
    "74111286315405054421392461884745781298",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
