{
  "file": "core/src/array/iter/iter_inner.rs",
  "name": "array::iter::iter_inner::PolymorphicIter::<[mem::maybe_uninit::MaybeUninit<bool>]>::try_fold::<u8, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/ops/try_trait.rs:401:9: 401:20}, ops::try_trait::NeverShortCircuit<u8>>",
  "hash": "157437113217931283479092514083812253083",
  "hash_direct": "91612008637532607905047860883940849985",
  "src": "pub(super) fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R\n    where\n        F: FnMut(B, T) -> R,\n        R: Try<Output = B>,\n    {\n        // `alive` is an `IndexRange`, not an arbitrary iterator, so we can\n        // trust that its `try_fold` isn't going to do something weird like\n        // call the fold-er multiple times for the same index.\n        let data = &mut self.data;\n        self.alive.try_fold(init, move |accum, idx| {\n            // SAFETY: `idx` has been removed from the alive range, so we're not\n            // going to drop it (even if `f` panics) and thus its ok to give\n            // out ownership of that item to `f` to handle.\n            let elem = unsafe { data.get_unchecked(idx).assume_init_read() };\n            f(accum, elem)\n        })\n    }",
  "callees": [
    "1677587441436172911410996985768965168627",
    "47323665595455568617290020941376774286",
    "11139495935450220752286966752445431093",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "67907408066771805855239489631091415951",
    "50809497396593503993638134972020500511",
    "650463517479782358297473684833412165",
    "87419385692387248398289998159813044811",
    "146590879974118605845372616464410298795",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "13796074939706337624507826801091410480",
    "7708064001393377036215195782975837604",
    "73871712140644949516200388382938902615",
    "182866091610822053407238202135802860299",
    "1843431938194307817118086587069802181967",
    "801446357874677668914799739322228370056",
    "173992050631692450749433818483486390957",
    "171962049247896174773212207393872413660",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "52869776872241147002256786717338787463",
    "20569745211695097992867446013624579005",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "85221642740453505813939323115408224683",
    "100222243237428866291009424995338676278",
    "50288206971270858088439665352875901103",
    "151682171092531710112961160430348060890",
    "159369186613016935902672314364074929615",
    "135151201819924723063771660373258523992",
    "138774632689772549819578629668035245923",
    "90175179397242369455372712796954544135",
    "156558724737321886766153526308848840146",
    "48548664629730829953422984265893277498",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
