{
  "file": "core/src/slice/cmp.rs",
  "name": "<u16 as slice::cmp::SliceContains>::slice_contains",
  "hash": "19214485512255191127677756756053126209",
  "hash_direct": "1807785927546976733315772848050236130693",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "52183666436964755381984886303138480834",
    "180871247543759714613101001828138036109",
    "225952500164735912514546972505243856357",
    "1231693553175053426510927854933676924735",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1204668293620499224013336883119093261459",
    "5667765796385169624800112337147502292",
    "171593739300022194915526452191835401234",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "1214574077763705187516383491048990527345",
    "1484317575113356170418007905627406545354",
    "176176883158605747429644823526988905884",
    "68697607470231643498534298785222425436",
    "1392172287277376782912799715368628960800",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "15240147311945697125183643526666791600",
    "116493993968203631779782501274936096641",
    "1262076319586358531712252901929338923022",
    "675922915413654873717954021931812075786",
    "918489619756420946512812432513247876790",
    "108444829301752185813433330423923852289",
    "449637264080571459055009589071427003",
    "121624359469247674033673321514528397437",
    "1329496730596483490617109103624580436236",
    "114388622460639148977872041798051543354",
    "140954174520696374242176545070822229699",
    "931493365461724735014051344546270002635",
    "138676056903956447753252192351551680327",
    "1669615658078647717411349731917737797944",
    "1034130238494268771916034688844804115446",
    "7315038583701776471218090447676319539",
    "1767654438288481953014282647243908208869",
    "843508017043365551014375625198536735325",
    "1555591609127614968815993404680057095798",
    "1296912199327628502710391383988700701537",
    "1446127210444154311713626860105434368915",
    "136597344973440926616462557905486970495",
    "690360302647286911112160353701968066984",
    "179332158022455323631861930783810148871",
    "1479141264627446374913041212463771975334",
    "731924098384737545917946444555092845242",
    "1557618167599384092917487465593620033128",
    "1362357234112178145510267224500967347357",
    "1617850914691839991611107867059964560713",
    "1110411606582294422715013628751707269029",
    "112298542209523882782478361650492090395",
    "157546711783880326776009083471729335630",
    "15472993023242622644736942317682895384",
    "1515124957656164019513280095720948173138",
    "1737046666080539081914974966237099365643",
    "621698472431332816417792581602959129152",
    "1703660345011483495218041991169194027213",
    "92658835324565758495130762072978604201",
    "606608081756831098117273329568996374994",
    "56448737519681294968960799914289695112",
    "2270854481895276807307011598962175177",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
