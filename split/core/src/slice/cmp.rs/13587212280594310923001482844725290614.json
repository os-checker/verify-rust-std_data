{
  "file": "core/src/slice/cmp.rs",
  "name": "<[f16] as slice::cmp::SlicePartialEq<f16>>::equal",
  "hash": "13587212280594310923001482844725290614",
  "hash_direct": "14469711748047089694353927504266273907",
  "src": "default fn equal(&self, other: &[B]) -> bool {\n        if self.len() != other.len() {\n            return false;\n        }\n\n        // Implemented as explicit indexing rather\n        // than zipped iterators for performance reasons.\n        // See PR https://github.com/rust-lang/rust/pull/116846\n        // FIXME(const_hack): make this a `for idx in 0..self.len()` loop.\n        let mut idx = 0;\n        while idx < self.len() {\n            // bound checks are optimized away\n            if self[idx] != other[idx] {\n                return false;\n            }\n            idx += 1;\n        }\n\n        true\n    }",
  "callees": [
    "468911333765529061212624884115263298328"
  ]
}
