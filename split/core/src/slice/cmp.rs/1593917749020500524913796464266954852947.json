{
  "file": "core/src/slice/cmp.rs",
  "name": "<u32 as slice::cmp::SliceContains>::slice_contains",
  "hash": "1593917749020500524913796464266954852947",
  "hash_direct": "492671329263712653010805744416519256780",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "119629500061757555531741641347977509910",
    "1312740467931728780616833249884712857780",
    "158959414668720189031913592930207227087",
    "99603598099498707762068107842012164044",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1204668293620499224013336883119093261459",
    "5667765796385169624800112337147502292",
    "171593739300022194915526452191835401234",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "1214574077763705187516383491048990527345",
    "765651209451334399318101243735296902594",
    "124136043214748897212366978666582003224",
    "46403460040447917584474138551510745026",
    "1299320173005259176217029432174392215732",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "218834276175767504515328027281012437761",
    "116493993968203631779782501274936096641",
    "1262076319586358531712252901929338923022",
    "152206577154351304493888433837304075634",
    "1326947131710622430311013605150371745982",
    "20946831672102756615324517140542342935",
    "449637264080571459055009589071427003",
    "127148877277899799212930952168473704044",
    "1137478830075394179710321564206986343125",
    "167727689149889732012371385327419155313",
    "1727553854790856278011052472099747994665",
    "126305104619962271371784891153497802945",
    "1158861151257444367413252165885433366400",
    "10044693719423595159435737627777218116",
    "150078872849429602735832397785542156102",
    "33331637534491476913440505814675408305",
    "1512091111473861295010674915588079355189",
    "129554570757985733413117109142277739837",
    "83701329576096449194952412384715944643",
    "60054236286150791097117179405686804193",
    "173516630427108803021415939199756660505",
    "101634514395571963562077950882370578140",
    "108303759948869317637662560326479582512",
    "6060303793051037878763371415992439215",
    "131808466708049701511166167827677679515",
    "676255523888441553212288494095030270828",
    "1238502639381154962915783879200333344603",
    "300789021156018688612686022687093941341",
    "16792553020288426025493726896898592308",
    "1799592510821550684114218618098412984057",
    "341935721355673669314284782457952191125",
    "4990551501380397435027494859200414499",
    "874846985984929824111034586107902612655",
    "873351963531676645810926171300746475684",
    "1737046666080539081914974966237099365643",
    "621698472431332816417792581602959129152",
    "1703660345011483495218041991169194027213",
    "92658835324565758495130762072978604201",
    "606608081756831098117273329568996374994",
    "56448737519681294968960799914289695112",
    "2270854481895276807307011598962175177",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
