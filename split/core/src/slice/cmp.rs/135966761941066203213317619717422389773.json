{
  "file": "core/src/slice/cmp.rs",
  "name": "<[*const ()] as slice::cmp::SlicePartialEq<*const ()>>::equal",
  "hash": "135966761941066203213317619717422389773",
  "hash_direct": "79278789732115166805882660182482093945",
  "src": "default fn equal(&self, other: &[B]) -> bool {\n        if self.len() != other.len() {\n            return false;\n        }\n\n        // Implemented as explicit indexing rather\n        // than zipped iterators for performance reasons.\n        // See PR https://github.com/rust-lang/rust/pull/116846\n        // FIXME(const_hack): make this a `for idx in 0..self.len()` loop.\n        let mut idx = 0;\n        while idx < self.len() {\n            // bound checks are optimized away\n            if self[idx] != other[idx] {\n                return false;\n            }\n            idx += 1;\n        }\n\n        true\n    }",
  "callees": [
    "956192433992750534412567906030905791799",
    "140946044947404378736178758315022981785"
  ]
}
