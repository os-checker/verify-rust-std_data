{
  "file": "core/src/slice/cmp.rs",
  "name": "<i32 as slice::cmp::SliceContains>::slice_contains",
  "hash": "33692610411970031757977856538809196895",
  "hash_direct": "135893839252246096687485511560970848691",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "87171854991877519594033210999551847037",
    "59682521697637857283260846605017964411",
    "171877024039358361415531368687110875076",
    "79147560314209947671815415446941048751",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1204668293620499224013336883119093261459",
    "5667765796385169624800112337147502292",
    "171593739300022194915526452191835401234",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "1214574077763705187516383491048990527345",
    "128147112378082399129270322807893007254",
    "1844299790297716401214554147328263867313",
    "1509431403047076797915200786056414979046",
    "412729549358684593912096888906968277131",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "176200189164093623236477081102808498343",
    "116493993968203631779782501274936096641",
    "1262076319586358531712252901929338923022",
    "183821823452460794188119792571684334922",
    "66467625991432139116411933171465265888",
    "172375647958570815339516107797095637278",
    "449637264080571459055009589071427003",
    "81987046990845435486202282033102520410",
    "273415576575767061110563276965785236574",
    "502094234030130318111628597852501312940",
    "169128170068249798141380897037948207053",
    "76622831520453128806684417801178317003",
    "1695060976276531121212619016060169719785",
    "1280173388007479022616687824679951531251",
    "1221860769817398645016782035806767822108",
    "1248523668675078374717473437136873169174",
    "804710156281639903411151492088214878063",
    "1106073802426908357011432982945519213202",
    "1503469304403438643051122624709972856",
    "435239761064303110512908270333592725805",
    "337868723017954939013330827346093906642",
    "1125081035912177338618358122744671299949",
    "83928255411050372752274556462363192913",
    "9350699698745806911422534937280606600",
    "138775403012962819332035430267670054893",
    "1201468045446855955210496057496499260794",
    "22543142031656522594319255084070930783",
    "910126820824964285814090287285688600507",
    "1383084820795414539613079467530422840171",
    "353528678592458677611037027021323290376",
    "37516374517444385159729010545395818832",
    "710134705886480695117737175022686972046",
    "1666602472109091244614584958469398550932",
    "884390732592264913514957900135059436135",
    "1737046666080539081914974966237099365643",
    "621698472431332816417792581602959129152",
    "1703660345011483495218041991169194027213",
    "92658835324565758495130762072978604201",
    "606608081756831098117273329568996374994",
    "56448737519681294968960799914289695112",
    "2270854481895276807307011598962175177",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
