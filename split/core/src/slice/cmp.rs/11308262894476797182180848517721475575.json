{
  "file": "core/src/slice/cmp.rs",
  "name": "<isize as slice::cmp::SliceContains>::slice_contains",
  "hash": "11308262894476797182180848517721475575",
  "hash_direct": "456228072316727335014395141580213153798",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "1814887188547013565216082404582348712192",
    "634021228055360782616805292963713237105",
    "17323186081395837313549468917351058504",
    "905114680296962325516868337507534432120",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1204668293620499224013336883119093261459",
    "5667765796385169624800112337147502292",
    "171593739300022194915526452191835401234",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "1214574077763705187516383491048990527345",
    "150442963469388222838128087678300334755",
    "158346796018911080368825649529711317852",
    "1067374454398322343015366556819824943902",
    "14186404492885942772377287816282837856",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "1187397751759410800617955955577017750069",
    "116493993968203631779782501274936096641",
    "1262076319586358531712252901929338923022",
    "1726676104410723802210294721762636216922",
    "29905801339284525310520699511278034189",
    "128542042999099616522638681699495215246",
    "449637264080571459055009589071427003",
    "1818353813762347630611901583115423586348",
    "339420785481690377711597827809658315615",
    "113824207960084905842525628282620112550",
    "1819729955671444241914159717157259803702",
    "802209813628455228017293837089057592073",
    "95216835949300192298538387842814759688",
    "12883402382800519635570054527286161598",
    "916661081706695001417153483406853464706",
    "100555803261128583338054111552964782381",
    "1166047455427458091711324717340599904935",
    "909804043612443344718020345275087855424",
    "1789683895296792553314114112484932322765",
    "1412989929097501854316061203169759623602",
    "145649499333078699342284592545315616193",
    "18179818521802981552527489870840056945",
    "77526170498342319864216549685833737559",
    "314772215768521846517598217164960679192",
    "742152587062113301314118054126469615293",
    "135869849245627669618071148294109634007",
    "117493073107884758604458953593135428232",
    "13650267958915532550125821261091595281",
    "851532679599571441714819485426933368601",
    "146314699231048093217704668076064036132",
    "471032262540506775917433932359799542927",
    "29766270972197816079949855168064736450",
    "97985165116411359647693945986058045849",
    "644389071246300577613952799300482871561",
    "1737046666080539081914974966237099365643",
    "621698472431332816417792581602959129152",
    "1703660345011483495218041991169194027213",
    "92658835324565758495130762072978604201",
    "606608081756831098117273329568996374994",
    "56448737519681294968960799914289695112",
    "2270854481895276807307011598962175177",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
