{
  "file": "core/src/slice/cmp.rs",
  "name": "<u16 as slice::cmp::SliceContains>::slice_contains",
  "hash": "66390390526286601051881074248941068323",
  "hash_direct": "1807785927546976733315772848050236130693",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "47278574192031232971799194590021398469",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "166898960679904997198346772164983200380",
    "148486374725703933647459070162752430830",
    "149326227909015720697761317981472343203",
    "1034317870221814136813621446782838396319",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "14289085791843058303972699274315536239",
    "86630631289008011844003543117271321961",
    "168410297734394674028443580433418846808",
    "380165708567129001611836553880015653231",
    "83916392849396158178111596492500792131",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "1754560248182943121418019299551310626619",
    "1538271089334494951410756580781593735995",
    "1790298101339239581015202674947191725599",
    "82227640059969872306939205293062197874",
    "786782619365902460311863399604991640740",
    "590443687084653205110112967294089910956",
    "169017152061146820209827866672499117723",
    "5492834593798373529724102597289745294",
    "473702618824894503911682800716032201678",
    "68392369673776064155587010497993352816",
    "70618672707111692214729948544682702677",
    "661566576188526468417008979395264059420",
    "172616897202646351715356988592109633508",
    "155160837560005048093603615437363981166",
    "7086951486516216773093788495051128201",
    "167337527222265298165734095020724424009",
    "616275782359287728818326315676458256824",
    "132125757871077059112628726735823107087",
    "1426376315369300938218435941761858328188",
    "321378214032097268913125882274968118314",
    "422954679669435412914055059400161049205",
    "53023032487506029213662148892815115604",
    "1118633399207098970713575279648632945633",
    "62446514457617501401973424161623221063",
    "1449438519310142801515090096986100068596",
    "142132855718699213834779026987548928133",
    "100524603729019895710976347451540888344",
    "1301029272140792342114095676987355156769",
    "1042223814731861056911308547666785830666",
    "1285618503161573883514182188942500697398",
    "1645081682958298297417877115268624271993",
    "84978679014034350883216430399768817938",
    "1764073992082400473117795324829779322052",
    "804377236661680470813680215261233847958",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "7839859953712079114640771271960005865",
    "1137271765924114987514947403158445640283",
    "393974833682574441515290398983271504453",
    "180126912453652104473132457509626900161",
    "1149265318701628438811160570489210589004",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
