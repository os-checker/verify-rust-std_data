{
  "file": "core/src/slice/cmp.rs",
  "name": "<u64 as slice::cmp::SliceContains>::slice_contains",
  "hash": "299871255692384314613596113352308636314",
  "hash_direct": "1433848449860283206515627558919597605653",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "176119282557073079467626309872119066558",
    "582249195873328786411616025371376245451",
    "234227229089476163612421358661318231265",
    "97524482424029537145306757146156791937",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "157526224548632931644224402393760490185",
    "174107661030119018973646362480685393050",
    "366503061556370158810229951695642705038",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1214574077763705187516383491048990527345",
    "1565202473984474961712867631319207512279",
    "157260714127207434086876595811521606728",
    "102380357323114470404923118519025924553",
    "988006329908156859117108017259133499048",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "42976752917362359145347942858202851756",
    "141639776557979467351154191462161712427",
    "151332515389462887513652497243051504477",
    "49698100983142100143716371019608048004",
    "226334709450360186712556313237333335606",
    "45809227081074457045673793151690499738",
    "293645540748671545017999185713660079650",
    "123046923276340098447791937349790972152",
    "80640588118531204614425710408279852464",
    "46017009917589023836427160149175966399",
    "1361299990765362941515059283581451387325",
    "892633887777971702510134218703005344543",
    "863204421128486941014626556652876475045",
    "69712855194280322278685193224733980901",
    "105892202319459975335526682349174417979",
    "181022635354629047665173518644138996933",
    "414683892902911705411298859748945512365",
    "1168304474963351823913573592458945737474",
    "37872338376808105671106045144010737881",
    "87767010996992193597511484834959437587",
    "19694957672987505116736210752043591114",
    "87670014428689688217329411862305897180",
    "1254933014196064074911034426378149141458",
    "15191710767515193738384674559524043616",
    "1015180079393884597117504212798088645880",
    "360427136540154550713674215611891972429",
    "45801051422916137448727688812593488010",
    "264680247558426853713849815515070475645",
    "83294179640200043717211286197336963100",
    "21031454237551578164524684388197675477",
    "20631514622760144921725918763075991679",
    "94518889310959113798275879870743654784",
    "399786850203159816213989809436074304767",
    "90973867952805261699163466352280034276",
    "126048648882406442003602795325732745334",
    "60020754642282354823285669083003912494",
    "1006928117247909106515604664996585110540",
    "92658835324565758495130762072978604201",
    "982812517398244847818134688650878457542",
    "56448737519681294968960799914289695112",
    "51920321377442756437204742573348251158",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
