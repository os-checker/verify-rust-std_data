{
  "file": "core/src/slice/cmp.rs",
  "name": "<u16 as slice::cmp::SliceContains>::slice_contains",
  "hash": "1243985864736671454510540750367338868132",
  "hash_direct": "1807785927546976733315772848050236130693",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "52183666436964755381984886303138480834",
    "10071627539505597367443642856770546025",
    "225952500164735912514546972505243856357",
    "1231693553175053426510927854933676924735",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "157526224548632931644224402393760490185",
    "174107661030119018973646362480685393050",
    "366503061556370158810229951695642705038",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1214574077763705187516383491048990527345",
    "59632887010840495917925895842201146845",
    "176176883158605747429644823526988905884",
    "68697607470231643498534298785222425436",
    "1392172287277376782912799715368628960800",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "15240147311945697125183643526666791600",
    "141639776557979467351154191462161712427",
    "151332515389462887513652497243051504477",
    "675922915413654873717954021931812075786",
    "918489619756420946512812432513247876790",
    "108444829301752185813433330423923852289",
    "293645540748671545017999185713660079650",
    "7277743934854482381409639521708029938",
    "1329496730596483490617109103624580436236",
    "114388622460639148977872041798051543354",
    "140954174520696374242176545070822229699",
    "931493365461724735014051344546270002635",
    "138676056903956447753252192351551680327",
    "1669615658078647717411349731917737797944",
    "1034130238494268771916034688844804115446",
    "7315038583701776471218090447676319539",
    "1767654438288481953014282647243908208869",
    "843508017043365551014375625198536735325",
    "1555591609127614968815993404680057095798",
    "1296912199327628502710391383988700701537",
    "132460876411447536468256725238328064931",
    "237191256428869868313033844720805133324",
    "690360302647286911112160353701968066984",
    "34389259824791070753657425144929702033",
    "71585932647506492510386369314071803355",
    "884640803596655219918395680722383439008",
    "921702391078081666911572809696879556524",
    "1362357234112178145510267224500967347357",
    "182134943648568657491775519800951450382",
    "1662471360083104705811869091850257242077",
    "985345253917208489718025730718518675048",
    "1505956396637081415714193237599195318945",
    "7805914052129925952652995606339358731",
    "126536229925536367725609798195767832102",
    "126048648882406442003602795325732745334",
    "60020754642282354823285669083003912494",
    "1006928117247909106515604664996585110540",
    "92658835324565758495130762072978604201",
    "982812517398244847818134688650878457542",
    "56448737519681294968960799914289695112",
    "51920321377442756437204742573348251158",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
