{
  "file": "core/src/slice/cmp.rs",
  "name": "<f64 as slice::cmp::SliceContains>::slice_contains",
  "hash": "146056843985513244652915760868970941261",
  "hash_direct": "76749353386115880003403210182275011934",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "47278574192031232971799194590021398469",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "1695247785337118181811080082051028654547",
    "1488753619335872861710417255170681490670",
    "35416910900921381748552437083050086013",
    "267397640077708419917774511588833123757",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "14289085791843058303972699274315536239",
    "890071058825386332013290477145660140073",
    "161263700816094279859879054611643512714",
    "236797181405830541614091662326621396718",
    "119976524039045110771832514217196520210",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "409210836128193024417711493231767687098",
    "1538271089334494951410756580781593735995",
    "1790298101339239581015202674947191725599",
    "180122699953750833379021451185700692729",
    "67267793339474474303909593486247538586",
    "1423011787872367120216310740497813052063",
    "169017152061146820209827866672499117723",
    "4714829824583885766745164475970492146",
    "170875689440776785211405527121510504749",
    "81877559730294322377401320128918131526",
    "48213586775929389068550060437536500334",
    "53430480600814415224525260719628978920",
    "520233047670824035610565554135566329664",
    "141624443933055076782939734711974272095",
    "141216803347765393959996176066066157975",
    "18340613000915983551906244797138814605",
    "78203422095961827213884423847032818655",
    "381460501544224102414559503963540110405",
    "6719548065344093059941601758732533677",
    "1580932088218251058517192584083631020825",
    "1324952543771906740518274230531322151416",
    "1032182449158097282117687993142154340748",
    "34185042405839966976902026975014038579",
    "5833947472665859094999969680355356680",
    "1509857387636071393111424152446134446838",
    "431756111524019058410974809785143880078",
    "1232858721291193491215698849830984140398",
    "109469966708849791032487464821451459508",
    "19668263233226411806468518852159400085",
    "1167052736646558506410287871732183179958",
    "103969658969588898869397792951409629995",
    "1346231447600651960313912470065223534484",
    "75283450280881399723574985762838510444",
    "1842776406791280928016632613403285694641",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "7839859953712079114640771271960005865",
    "1137271765924114987514947403158445640283",
    "393974833682574441515290398983271504453",
    "180126912453652104473132457509626900161",
    "1149265318701628438811160570489210589004",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
