{
  "file": "core/src/slice/cmp.rs",
  "name": "<isize as slice::cmp::SliceContains>::slice_contains",
  "hash": "20991947197809428274793070295275728886",
  "hash_direct": "456228072316727335014395141580213153798",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "47278574192031232971799194590021398469",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "1535218516997226775112502792586845662955",
    "76189569098595373876557189590947551495",
    "487114701554283758518212756654054852353",
    "10670053638863724582289285116550063412",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "14289085791843058303972699274315536239",
    "79725465380082734083535837149064935692",
    "94440856448441697619126561338466028891",
    "152200382009987768849172842305617128868",
    "1639419515456015849010030381085485416351",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "176327636746558310148231660787539552443",
    "1538271089334494951410756580781593735995",
    "1790298101339239581015202674947191725599",
    "215808486774117203510534614729133746643",
    "106593447877339203338843576292925465160",
    "176614118187819005486473094133252167419",
    "169017152061146820209827866672499117723",
    "11874022895694160236688553223401786963",
    "35713159214090906943929766125509745056",
    "84801269354909748676584679872776945524",
    "940986396335024326317582599467138586802",
    "28643892514597766189829692396359988489",
    "41585324558164544705278062906175445823",
    "1198995698708165999812736410268284044237",
    "145557214738628542201428361333150936547",
    "174716917231587569914325819970435490250",
    "1409191525439765568210189839685211293252",
    "1421020299824716483217542196479452557062",
    "1578931770093481993414030727304580590105",
    "979610729789030914315383553294700733025",
    "1488658216685386667117157789010185792852",
    "1809201295450394480314314397764555788870",
    "71553159670784018786439110900476762355",
    "15348513438126974274952799667584223164",
    "1841551936868785892513460157870552038287",
    "674557765203538361518442145153625873679",
    "47109143074851264886035876583285796095",
    "85447197346766846873750653481370199037",
    "69128155673317300398192922869304733341",
    "155731535164037986174466054330232531321",
    "80377748376428454723144821504172065849",
    "95047205670219217159426357310155942950",
    "999367664848339701512317531430071355865",
    "468895982693622576314712568649062737483",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "7839859953712079114640771271960005865",
    "1137271765924114987514947403158445640283",
    "393974833682574441515290398983271504453",
    "180126912453652104473132457509626900161",
    "1149265318701628438811160570489210589004",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
