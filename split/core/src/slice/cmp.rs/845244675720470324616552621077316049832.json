{
  "file": "core/src/slice/cmp.rs",
  "name": "<u32 as slice::cmp::SliceContains>::slice_contains",
  "hash": "845244675720470324616552621077316049832",
  "hash_direct": "492671329263712653010805744416519256780",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "47278574192031232971799194590021398469",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "5103233508854939937929579248898507518",
    "272655059741105656411232898554049090361",
    "1318686654956897216711385591645864997868",
    "107365534946901948286099583667090509800",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "14289085791843058303972699274315536239",
    "171004500602768806114294316369927563883",
    "89451239044445474983747370988275294790",
    "163315299660315221408931673209847063407",
    "1362143533271388965013002416929296147249",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "14519802542504413592318552666121024534",
    "1538271089334494951410756580781593735995",
    "1790298101339239581015202674947191725599",
    "1064203217473128011511952902978152301917",
    "20075051057369538158523661365264829131",
    "74512768270735193605455446381812612971",
    "169017152061146820209827866672499117723",
    "382102276782495437517959715810121609849",
    "133025333465388290804956663776654837677",
    "577944926872942618417408236605840020151",
    "1311365410795522838216246549815849367768",
    "1317671834819730233515955370724438670194",
    "88292890543296978245365215901137092326",
    "4999872853717853714635077603434703792",
    "286293591795113710217346735846798360237",
    "1060448573230263915014803683681339895296",
    "178930264627547076913761065422079678397",
    "120915428975705757218209924628682220526",
    "114015224840271150472112237713689654179",
    "176158964620997506324807311063896499053",
    "16552743482934109725567130808580749064",
    "2339705682581664277728574709047484306",
    "1046651967303618973212687868210494005040",
    "68179644205203726657036952230784263657",
    "882172718067800578212814919704410844511",
    "743590844111674091718391275895137283064",
    "12639428878018232838407114996535982565",
    "920713391853314947217397224819823471928",
    "147881143613844304965419339422309768157",
    "142006084490213697682690074566563211051",
    "1812427325380537087215256536926001397541",
    "7212489125043360126050421015806745577",
    "102021136910342688637444855606475620024",
    "152928245264552852917025301865021459252",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "7839859953712079114640771271960005865",
    "1137271765924114987514947403158445640283",
    "393974833682574441515290398983271504453",
    "180126912453652104473132457509626900161",
    "1149265318701628438811160570489210589004",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
