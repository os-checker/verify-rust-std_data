{
  "file": "core/src/slice/cmp.rs",
  "name": "<i16 as slice::cmp::SliceContains>::slice_contains",
  "hash": "637254281119652895717382431927907173010",
  "hash_direct": "134752474604268522952706596647573780921",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "60314103983334121656880421323216098863",
    "278157131533595709214024994359446116770",
    "143278112709895103115515125728946639573",
    "101522080141485307182836483156899478704",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1204668293620499224013336883119093261459",
    "5667765796385169624800112337147502292",
    "171593739300022194915526452191835401234",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "1214574077763705187516383491048990527345",
    "1337115992367723748615626989361878917646",
    "1531873070913594010418165069759689485021",
    "119434026961854661015025703690607194761",
    "634289316105000433112808356108265948121",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "118197269368877241794659835223147352444",
    "116493993968203631779782501274936096641",
    "1262076319586358531712252901929338923022",
    "95542775439783952566166773445675510088",
    "101433886987886537208878901714780700634",
    "705049929631834990711610963601089422946",
    "449637264080571459055009589071427003",
    "1621543115997150520216171111674046072390",
    "71327700629771979206764273854407327776",
    "671755449185416658816246526077396529929",
    "55130804945039560398743496887926720415",
    "9486458909534575916908444859926042148",
    "78532589441628182829744328799337367779",
    "1539483941511631222017248749549795057246",
    "349643102456837954111388116486972362120",
    "1837042076776133743112882701714612475740",
    "98551067149142308585924646181156423395",
    "833120437538950239717401649166062168142",
    "25489922926799551163205588160652821106",
    "133849724012465515219992635668864575995",
    "171479401949343531691794535701497487358",
    "1832624582731260022214417373482007608872",
    "6669541559133358530968391158545556333",
    "164175017914760062606917340499430838554",
    "171912580301248783969057945959164846609",
    "829498721063746480716890565113898493795",
    "143881421101346384681071628615238245872",
    "349786159139192906515225607564457165994",
    "582978959353980229215327475349742829148",
    "318736606834316514314676327886605974286",
    "1727308643084532928611441745557671275046",
    "1290868132390164555014781370514968365399",
    "12830445838730571666122911488646679324",
    "15009269672855158293260411727354109322",
    "1737046666080539081914974966237099365643",
    "621698472431332816417792581602959129152",
    "1703660345011483495218041991169194027213",
    "92658835324565758495130762072978604201",
    "606608081756831098117273329568996374994",
    "56448737519681294968960799914289695112",
    "2270854481895276807307011598962175177",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
