{
  "file": "core/src/slice/cmp.rs",
  "name": "<f64 as slice::cmp::SliceContains>::slice_contains",
  "hash": "610624959909445289512630421081306934710",
  "hash_direct": "76749353386115880003403210182275011934",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "1139176629821932896116911918308105613016",
    "107129409543350087417472151480984720330",
    "27143329980388801218198615083747125661",
    "872205114925099333011215560138034927031",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "157526224548632931644224402393760490185",
    "174107661030119018973646362480685393050",
    "366503061556370158810229951695642705038",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1214574077763705187516383491048990527345",
    "1074011387222553981714592241021871998873",
    "96487762211201916858729326018990149616",
    "1309335071828052651315750919495992172843",
    "104610047409876224445341320655097374986",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "85087518350441944038218124851204462662",
    "141639776557979467351154191462161712427",
    "151332515389462887513652497243051504477",
    "1285548268893532030213075616539937343990",
    "1272749313921239986915089392795177858055",
    "1559561105971596888612876101318509779027",
    "293645540748671545017999185713660079650",
    "16945391567286791139892170040202505549",
    "557497757215417478515540250567779685770",
    "1189125441299371330110850847451179633956",
    "78695061969302408769374514781371415455",
    "110759326900875676011747141900413538011",
    "623913104379338278773325338979549694",
    "1389106265453530165917755980970944113107",
    "103986286732657080188935128400690598685",
    "558725686018112103514032818749171004659",
    "45910177006801370494269702314496646176",
    "157280443753075018331999564683159906582",
    "51381460279504884239796544415751021637",
    "3881165666405462204470257328721756876",
    "123896148790991843377467762372663808284",
    "50633331179837636721533181329699509931",
    "1317826020016463436012672495516357464828",
    "800532244855086161811838801951635861940",
    "96271951057005739796674724684610055644",
    "43934747910753773467116852581492789117",
    "182812198112380669239591981105842333063",
    "301523161726526337515800343411294147396",
    "397017418749728577615356961766188517349",
    "1770337934320163313215885502698849666771",
    "546699098494763027514136236042696682761",
    "1433173286384601063717880278874736214506",
    "163428743464231202636315204035612379707",
    "720126287901070241918341578873861846411",
    "126048648882406442003602795325732745334",
    "60020754642282354823285669083003912494",
    "1006928117247909106515604664996585110540",
    "92658835324565758495130762072978604201",
    "982812517398244847818134688650878457542",
    "56448737519681294968960799914289695112",
    "51920321377442756437204742573348251158",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
