{
  "file": "core/src/slice/cmp.rs",
  "name": "<u64 as slice::cmp::SliceContains>::slice_contains",
  "hash": "31657136582501130201510443280797262777",
  "hash_direct": "1433848449860283206515627558919597605653",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "176119282557073079467626309872119066558",
    "1045666699165246804610220084576949920700",
    "234227229089476163612421358661318231265",
    "97524482424029537145306757146156791937",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1204668293620499224013336883119093261459",
    "5667765796385169624800112337147502292",
    "171593739300022194915526452191835401234",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "1214574077763705187516383491048990527345",
    "115984623358273034601250512549426397923",
    "157260714127207434086876595811521606728",
    "102380357323114470404923118519025924553",
    "988006329908156859117108017259133499048",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "42976752917362359145347942858202851756",
    "116493993968203631779782501274936096641",
    "1262076319586358531712252901929338923022",
    "49698100983142100143716371019608048004",
    "226334709450360186712556313237333335606",
    "45809227081074457045673793151690499738",
    "449637264080571459055009589071427003",
    "601195960319105261818232760554100414395",
    "80640588118531204614425710408279852464",
    "46017009917589023836427160149175966399",
    "1361299990765362941515059283581451387325",
    "892633887777971702510134218703005344543",
    "863204421128486941014626556652876475045",
    "69712855194280322278685193224733980901",
    "105892202319459975335526682349174417979",
    "181022635354629047665173518644138996933",
    "414683892902911705411298859748945512365",
    "1168304474963351823913573592458945737474",
    "37872338376808105671106045144010737881",
    "87767010996992193597511484834959437587",
    "26515938450787639004760872908162510571",
    "171317696274808719835623883277048321519",
    "1254933014196064074911034426378149141458",
    "1456070093510938718913900447761122083463",
    "231456550467867186115506036578120703454",
    "178859826194390669806714745442442788219",
    "1460827026523641524413215666421431060601",
    "264680247558426853713849815515070475645",
    "841006241089302889414699513152352811101",
    "96692571448758180177466730917710645903",
    "805797972949425329459320600246654802",
    "84853034238460468678800212329380538992",
    "18840060843158501198817981512729607231",
    "22561458039204297922282651153976523431",
    "1737046666080539081914974966237099365643",
    "621698472431332816417792581602959129152",
    "1703660345011483495218041991169194027213",
    "92658835324565758495130762072978604201",
    "606608081756831098117273329568996374994",
    "56448737519681294968960799914289695112",
    "2270854481895276807307011598962175177",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
