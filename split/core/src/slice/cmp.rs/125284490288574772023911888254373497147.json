{
  "file": "core/src/slice/cmp.rs",
  "name": "<usize as slice::cmp::SliceContains>::slice_contains",
  "hash": "125284490288574772023911888254373497147",
  "hash_direct": "933581182209642078914135042069548780475",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "109142634190004248364801602973869512735",
    "969379156683921132014117389149400345827",
    "1342521228831833354715461413551686205925",
    "1749362715435459353511933873995340031229",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1204668293620499224013336883119093261459",
    "5667765796385169624800112337147502292",
    "171593739300022194915526452191835401234",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "1214574077763705187516383491048990527345",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "1032722381226407642916192559235445092884",
    "594398967705273052918318531949127567864",
    "172590953658237452717460291587113135731",
    "7056591373678726669491691124850027667",
    "91930047381741681611917147084398403736",
    "116493993968203631779782501274936096641",
    "1262076319586358531712252901929338923022",
    "1448899345559094949112654453072162878043",
    "677493057230061463812906195098240769208",
    "805684210294475109813538994712986997895",
    "449637264080571459055009589071427003",
    "1533506450707940432815148545061652761442",
    "700543147431208495615048645222424964691",
    "297532347729453258118377692418064396029",
    "1255593489441337196411111792584951488284",
    "4874888224965231630903852514116604247",
    "1113702662891479336314686028484409217895",
    "1014498806628630430116225554036073706840",
    "99505528804453027457861451108826778638",
    "404530585981013310415620289049541730647",
    "719049603193869984913180724586595888983",
    "43844078268887123814784585152832108001",
    "376917519991986149913510268799244370374",
    "134768706046413987392570498523821348035",
    "844824311235801753417542428777190862758",
    "52418489344950108031333373837563179574",
    "37043092114680487918359978352102659908",
    "7239933877371721559081823970141719882",
    "704057624858512158313707799935209401870",
    "68324461818002054297676926556390557997",
    "654015476928643451917635075376917698161",
    "358571424882708899413310170471965259775",
    "1138245216618411076913651565368079384213",
    "1604474312357677770115987518178518823320",
    "121460048239657617232671404094706435596",
    "1443622435226146153716365849873431969246",
    "93531719892614626754448873551539024442",
    "1579032903346544014011091588398186030115",
    "1737046666080539081914974966237099365643",
    "621698472431332816417792581602959129152",
    "1703660345011483495218041991169194027213",
    "92658835324565758495130762072978604201",
    "606608081756831098117273329568996374994",
    "56448737519681294968960799914289695112",
    "2270854481895276807307011598962175177",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
