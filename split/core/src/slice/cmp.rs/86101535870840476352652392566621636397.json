{
  "file": "core/src/slice/cmp.rs",
  "name": "<u64 as slice::cmp::SliceContains>::slice_contains",
  "hash": "86101535870840476352652392566621636397",
  "hash_direct": "1433848449860283206515627558919597605653",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "47278574192031232971799194590021398469",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "12884385009654185797472981876527943557",
    "170074269422521707458126925692801279699",
    "57218758650343227067455153908103614730",
    "1139034081708029965316433271901076709067",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "14289085791843058303972699274315536239",
    "1445718840964425158813576364100289895642",
    "47320185126408214302663217158235651311",
    "43627504744782642834455144281805096963",
    "1514419988804325475313191374631644555126",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "1368978261605149911713906997405372090769",
    "1538271089334494951410756580781593735995",
    "1790298101339239581015202674947191725599",
    "3412102102040037657545619295203457350",
    "915848842876896992816174500258166912892",
    "132910186520960427884863553252520294676",
    "169017152061146820209827866672499117723",
    "182660372727841364954607404746031020436",
    "31118451635700208837077077760541028873",
    "8288258377410521057576417344897491313",
    "1699059157950656592415775212606790472032",
    "23228823908275567092961232107289754309",
    "1640824052371827128118071525532956821269",
    "58937960161688833387153492153287799056",
    "33027875316315816397806100907252534733",
    "669302255532407385413838407457066153651",
    "400063908261948320716469007140433711902",
    "1400379713065300068216893425018414943316",
    "1821348130241114401216038606129439656773",
    "10281466786102887603734215375731692526",
    "13947218087212674236809884336234843489",
    "105224752952147104753418366534411912027",
    "1727835022376642672816685084057015479642",
    "561224656301835786312689667204323009324",
    "10916915566927304497873394007378856232",
    "578322790086175839210614540979398311957",
    "979765790716932317611801494937488971401",
    "266043580760822618812742725091803232464",
    "232445562953391433017767648913411568353",
    "180127706948904125373036603355507757075",
    "47173517266423971104743407061229552410",
    "633205625214495719310134879181485534486",
    "135611786043679873210844615985822541307",
    "85471187085199742697955122768076633782",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "7839859953712079114640771271960005865",
    "1137271765924114987514947403158445640283",
    "393974833682574441515290398983271504453",
    "180126912453652104473132457509626900161",
    "1149265318701628438811160570489210589004",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
