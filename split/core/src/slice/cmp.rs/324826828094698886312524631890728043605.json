{
  "file": "core/src/slice/cmp.rs",
  "name": "<isize as slice::cmp::SliceContains>::slice_contains",
  "hash": "324826828094698886312524631890728043605",
  "hash_direct": "456228072316727335014395141580213153798",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "1814887188547013565216082404582348712192",
    "161892925628450010755007366539588244303",
    "17323186081395837313549468917351058504",
    "905114680296962325516868337507534432120",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "157526224548632931644224402393760490185",
    "174107661030119018973646362480685393050",
    "366503061556370158810229951695642705038",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1214574077763705187516383491048990527345",
    "38297031494722825457089894120684496383",
    "158346796018911080368825649529711317852",
    "1067374454398322343015366556819824943902",
    "14186404492885942772377287816282837856",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "1187397751759410800617955955577017750069",
    "141639776557979467351154191462161712427",
    "151332515389462887513652497243051504477",
    "1726676104410723802210294721762636216922",
    "29905801339284525310520699511278034189",
    "128542042999099616522638681699495215246",
    "293645540748671545017999185713660079650",
    "284754813532859868010288229065130255025",
    "339420785481690377711597827809658315615",
    "113824207960084905842525628282620112550",
    "1819729955671444241914159717157259803702",
    "802209813628455228017293837089057592073",
    "95216835949300192298538387842814759688",
    "12883402382800519635570054527286161598",
    "916661081706695001417153483406853464706",
    "100555803261128583338054111552964782381",
    "1166047455427458091711324717340599904935",
    "909804043612443344718020345275087855424",
    "1789683895296792553314114112484932322765",
    "1412989929097501854316061203169759623602",
    "152717032225801373614568845864969089937",
    "50051038487694179808278246555336921698",
    "77526170498342319864216549685833737559",
    "153852664295506321793432572158366859549",
    "990408077810722430914816889021484733536",
    "167006545284187914616853032987021042119",
    "903243853820591389913778125645374637228",
    "13650267958915532550125821261091595281",
    "34628157871404896913078535171997952122",
    "1799261211886332903817773558883834352451",
    "179280523386153091669765968618265341077",
    "166549728706632797479824124716114952277",
    "127266718797870794310734849638165274676",
    "133284907998908052841203153591544884683",
    "126048648882406442003602795325732745334",
    "60020754642282354823285669083003912494",
    "1006928117247909106515604664996585110540",
    "92658835324565758495130762072978604201",
    "982812517398244847818134688650878457542",
    "56448737519681294968960799914289695112",
    "51920321377442756437204742573348251158",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
