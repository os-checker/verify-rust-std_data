{
  "file": "core/src/slice/cmp.rs",
  "name": "<i32 as slice::cmp::SliceContains>::slice_contains",
  "hash": "1339868933374395553716771088085800647996",
  "hash_direct": "135893839252246096687485511560970848691",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "47278574192031232971799194590021398469",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "170589546443582194527356850918197604176",
    "166911719008208187447157952635303346408",
    "213607149785356270215901880299945194497",
    "114237918779244328384041181855876026942",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "14289085791843058303972699274315536239",
    "519459177078618024815361250502737151921",
    "1346659317756233138615993210780284003833",
    "119600505622512933577986124176763231007",
    "299590898312920758711721101008452733869",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "53347177997510375494957978140013295806",
    "1538271089334494951410756580781593735995",
    "1790298101339239581015202674947191725599",
    "71268066481043242051480847593416773980",
    "44103361854034244301469042013525615892",
    "132942521601202899907699719070000846142",
    "169017152061146820209827866672499117723",
    "521043477674187200312662520968414326182",
    "149627099328129153403599654871524767046",
    "9751080661887906558202743226592111449",
    "11869176602650864599754839472546853797",
    "180839006106486390683485086636636812572",
    "13273897593936766052228289033818175746",
    "29638316476189767685677014707893424217",
    "86045450598699538313444216848550122119",
    "66641183364798998117636454762623096696",
    "25147361864698131227854974404080205993",
    "66555850630062356206350728848457504958",
    "26873327785989689748717230806853895409",
    "48679828696075621514030437367964360285",
    "5086160168792883799616433838688085966",
    "1364902542524784633616782574275686280567",
    "39494827987575904203030369309977671499",
    "166200970333084451718836176914981208593",
    "488253959291947632213448161357105293222",
    "300021697147426902013224867443493170778",
    "395489215858488686512019421609667216181",
    "138735876835073551937100399629754306776",
    "7490941630085106027906130310506167740",
    "39624006517950265706881470562769184305",
    "36964628913536106594187557186612179768",
    "149093387675933300078593211498165573352",
    "1368689782463294348014844761455158445816",
    "48479313399747491599420705855649564209",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "7839859953712079114640771271960005865",
    "1137271765924114987514947403158445640283",
    "393974833682574441515290398983271504453",
    "180126912453652104473132457509626900161",
    "1149265318701628438811160570489210589004",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
