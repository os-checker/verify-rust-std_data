{
  "file": "core/src/slice/cmp.rs",
  "name": "<char as slice::cmp::SliceContains>::slice_contains",
  "hash": "149426275695533651206244974115803519675",
  "hash_direct": "635629628409249312111317370606249085826",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "1739146978571685336110787061377367598468",
    "50461216945389855517357319161070199563",
    "154632036321720824021555629139300729764",
    "86133515756163850188547131179003511107",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1204668293620499224013336883119093261459",
    "5667765796385169624800112337147502292",
    "171593739300022194915526452191835401234",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "1214574077763705187516383491048990527345",
    "30947713614753980416780467102410518166",
    "151465894222760985751884944789248963379",
    "123392787403333522114801427658681051416",
    "137638191651198256152934878091397323237",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "7065725997555242645633793423334929656",
    "116493993968203631779782501274936096641",
    "1262076319586358531712252901929338923022",
    "19598639546271956478323969070632122613",
    "124710319586905057958318115364369969444",
    "148664112212318182776732958171872954842",
    "449637264080571459055009589071427003",
    "606068568314152626010609465835554653515",
    "713233157836084329410268009751975845722",
    "198021199222547916510679953360118767895",
    "81264130636358974545768169241293445904",
    "157752022931090375414365432214032337958",
    "24082385461372069497351352971528272912",
    "7163171386125464284848219555395350090",
    "113033727022671715501371996817381553917",
    "22541281049052359744737794208685719497",
    "1596107777564894141812642702892764966441",
    "483546792607859174915015273475929525259",
    "150163745876709628211763192932616206",
    "84650008727451994901876933626595746792",
    "59801045429658934408039938651258106766",
    "131262795128029582487528336733004473190",
    "1710013705732633574312129660004226566868",
    "1255588593991484553510887419219121388458",
    "475489462295480826215695502660684789454",
    "101946329726157536165991186421850393755",
    "129411776739109088927232106429878301068",
    "1484805978921758630811822796640318192554",
    "146429756795515871171059561736637062088",
    "1176101146186992732014850296204176645847",
    "1769840461066194390918059909887917552191",
    "70088151158737585112233633863669814330",
    "424729500743401051210814393801508146564",
    "169466651813465290045128528449010666477",
    "1737046666080539081914974966237099365643",
    "621698472431332816417792581602959129152",
    "1703660345011483495218041991169194027213",
    "92658835324565758495130762072978604201",
    "606608081756831098117273329568996374994",
    "56448737519681294968960799914289695112",
    "2270854481895276807307011598962175177",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
