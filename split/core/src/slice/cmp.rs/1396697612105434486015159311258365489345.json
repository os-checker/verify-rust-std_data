{
  "file": "core/src/slice/cmp.rs",
  "name": "<u32 as slice::cmp::SliceContains>::slice_contains",
  "hash": "1396697612105434486015159311258365489345",
  "hash_direct": "492671329263712653010805744416519256780",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "119629500061757555531741641347977509910",
    "171867408824654785467089720590086997158",
    "158959414668720189031913592930207227087",
    "99603598099498707762068107842012164044",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "157526224548632931644224402393760490185",
    "174107661030119018973646362480685393050",
    "366503061556370158810229951695642705038",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1214574077763705187516383491048990527345",
    "1802851107412558659318308686356277259083",
    "124136043214748897212366978666582003224",
    "46403460040447917584474138551510745026",
    "1299320173005259176217029432174392215732",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "218834276175767504515328027281012437761",
    "141639776557979467351154191462161712427",
    "151332515389462887513652497243051504477",
    "152206577154351304493888433837304075634",
    "1326947131710622430311013605150371745982",
    "20946831672102756615324517140542342935",
    "293645540748671545017999185713660079650",
    "129467395471765524418520994966618689871",
    "1137478830075394179710321564206986343125",
    "167727689149889732012371385327419155313",
    "1727553854790856278011052472099747994665",
    "126305104619962271371784891153497802945",
    "1158861151257444367413252165885433366400",
    "10044693719423595159435737627777218116",
    "150078872849429602735832397785542156102",
    "33331637534491476913440505814675408305",
    "1512091111473861295010674915588079355189",
    "129554570757985733413117109142277739837",
    "83701329576096449194952412384715944643",
    "60054236286150791097117179405686804193",
    "564653063111379834816680313292139283140",
    "1514641030327767080418297553044734174924",
    "108303759948869317637662560326479582512",
    "112230851453125851423205293281516054891",
    "12682046338441604771694512845609844075",
    "125615531541071004363749832358749074262",
    "43804121266590111503292180144973032661",
    "300789021156018688612686022687093941341",
    "613804123612719678313067580960636530719",
    "1628474576436772980215031976562618365786",
    "94668351869007463472426777167779507834",
    "151203025044635823883803764165391990399",
    "100416876525090243638191154719296594368",
    "92125261803031702789570328297059667507",
    "126048648882406442003602795325732745334",
    "60020754642282354823285669083003912494",
    "1006928117247909106515604664996585110540",
    "92658835324565758495130762072978604201",
    "982812517398244847818134688650878457542",
    "56448737519681294968960799914289695112",
    "51920321377442756437204742573348251158",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
