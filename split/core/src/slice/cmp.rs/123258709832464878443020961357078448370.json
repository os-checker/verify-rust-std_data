{
  "file": "core/src/slice/cmp.rs",
  "name": "<i64 as slice::cmp::SliceContains>::slice_contains",
  "hash": "123258709832464878443020961357078448370",
  "hash_direct": "1475636798079732335814339674203800760907",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "74417372440636343316225424270113426399",
    "7734791072743254149462868271220414170",
    "1182015270437117693710034979354745602205",
    "7294383037529148129694068087461345583",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "157526224548632931644224402393760490185",
    "174107661030119018973646362480685393050",
    "366503061556370158810229951695642705038",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1214574077763705187516383491048990527345",
    "154131510893666597395841700143639124164",
    "601689626651229494214998586744948637227",
    "12701467911441684089470617471353343047",
    "14560721898568267631990576878055796531",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "16730977548137824048911875704576283669",
    "141639776557979467351154191462161712427",
    "151332515389462887513652497243051504477",
    "1415812637824419025617411133288449540795",
    "599120885609691624310534648287277436227",
    "151047629242057232943425166912898676867",
    "293645540748671545017999185713660079650",
    "55855658331419926431448663647921908033",
    "46085804060150752363088444349042879706",
    "337967017188864588216644411916584241564",
    "447399253130752149514535466883067125424",
    "67107595776572277308228662616231432186",
    "863434042337576520413743515849989374855",
    "909066504283472687311211022489362656096",
    "113631040590481626245421048856174009375",
    "1805799030285775268310633464516686030076",
    "20627388938875235198707057769052350304",
    "839295055152999000218073005702306108163",
    "105324983876714714047280719938156802392",
    "69038386206572023512707758434359310124",
    "3595606158363746566497278046253529293",
    "149257628270004872739672937772062114771",
    "1060185239778386177014259659617801186490",
    "456727954965408156711812124441330201792",
    "600809001100693148114198931862730069419",
    "148680314524888741366353168516168406000",
    "148618105010151476754900154245036230190",
    "121069008826513481769959924250516256994",
    "655003355414712060117090584655830144887",
    "20708225609693386931431141209877750949",
    "1380046987452365924818194498069013351231",
    "102286530204613851496097000723328519666",
    "180779861036076384602685594277764617979",
    "1506488909945206213611226040312714583509",
    "126048648882406442003602795325732745334",
    "60020754642282354823285669083003912494",
    "1006928117247909106515604664996585110540",
    "92658835324565758495130762072978604201",
    "982812517398244847818134688650878457542",
    "56448737519681294968960799914289695112",
    "51920321377442756437204742573348251158",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
