{
  "file": "core/src/slice/cmp.rs",
  "name": "<usize as slice::cmp::SliceContains>::slice_contains",
  "hash": "130156491264452149392763142299854264904",
  "hash_direct": "933581182209642078914135042069548780475",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "47278574192031232971799194590021398469",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "71743234318212240533962181893874202147",
    "154601655487933603089659167662180220271",
    "1245138925531671967011772485621443291799",
    "1067675883129992420314174327751912045205",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "14289085791843058303972699274315536239",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "104831405656903467145249333363974848645",
    "166731958795390711014401438738375660172",
    "170643549057433678244294044399486155477",
    "15381174843012187353748644559918181235",
    "699677282037119441912902108102153124040",
    "1538271089334494951410756580781593735995",
    "1790298101339239581015202674947191725599",
    "705720955307329014517734924079983333105",
    "491291023697495753013211284803811616795",
    "183304351666724829317590170706630038849",
    "169017152061146820209827866672499117723",
    "1191898201809378325315295870108407566549",
    "1180283320154936987317687023111507811148",
    "13793318655968310006884853032227681042",
    "90717827950038266317724794688744091509",
    "484471573878144096018004521534736974390",
    "1709809215670154039418099455961948399924",
    "96916315473583579836508686922498622791",
    "1262939944460148277811000139254508406606",
    "139679375284959323487025069545409596711",
    "18715316072765276746430930647862132791",
    "2118504388115811606960253635530655015",
    "171829241337302672293934152746151941312",
    "1174405261437610547511867158011741763706",
    "160062072937108951019701226437819495378",
    "85929701974145874209244575302446049323",
    "140157886493951987314618352100082031646",
    "617092763968904127517665973127834451336",
    "1436633118968452545447048920335514355",
    "20159984032277224669091875539586265172",
    "4934620328571622263466073158373293264",
    "1809343474275607681211888501461793289939",
    "1001164460673399968211398585282402807815",
    "191955226679272286116324456769319086740",
    "82869399406577355236900753945207284521",
    "1312337259679107324810632236067710137987",
    "1281491428722655105812293039240564558174",
    "81865490382594657408046274180724905068",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "7839859953712079114640771271960005865",
    "1137271765924114987514947403158445640283",
    "393974833682574441515290398983271504453",
    "180126912453652104473132457509626900161",
    "1149265318701628438811160570489210589004",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
