{
  "file": "core/src/slice/cmp.rs",
  "name": "<f64 as slice::cmp::SliceContains>::slice_contains",
  "hash": "1339294755094018199313656301789871011945",
  "hash_direct": "76749353386115880003403210182275011934",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "1139176629821932896116911918308105613016",
    "161311511226096847691369364074483243780",
    "27143329980388801218198615083747125661",
    "872205114925099333011215560138034927031",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1204668293620499224013336883119093261459",
    "5667765796385169624800112337147502292",
    "171593739300022194915526452191835401234",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "1214574077763705187516383491048990527345",
    "143085707185960270575150342734534970533",
    "96487762211201916858729326018990149616",
    "1309335071828052651315750919495992172843",
    "104610047409876224445341320655097374986",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "85087518350441944038218124851204462662",
    "116493993968203631779782501274936096641",
    "1262076319586358531712252901929338923022",
    "1285548268893532030213075616539937343990",
    "1272749313921239986915089392795177858055",
    "1559561105971596888612876101318509779027",
    "449637264080571459055009589071427003",
    "33494271737232998493322355908395718749",
    "557497757215417478515540250567779685770",
    "1189125441299371330110850847451179633956",
    "78695061969302408769374514781371415455",
    "110759326900875676011747141900413538011",
    "623913104379338278773325338979549694",
    "1389106265453530165917755980970944113107",
    "103986286732657080188935128400690598685",
    "558725686018112103514032818749171004659",
    "45910177006801370494269702314496646176",
    "157280443753075018331999564683159906582",
    "51381460279504884239796544415751021637",
    "3881165666405462204470257328721756876",
    "967149023357693910314381086134458191158",
    "144638557127284342004733198563411735164",
    "1317826020016463436012672495516357464828",
    "50682633915511039006804324690228999929",
    "70044257496298245997926686639546112581",
    "1485769391784297553012158713538109005551",
    "129221745688007519212666482108980729441",
    "301523161726526337515800343411294147396",
    "414120969765985647518052004374780955635",
    "1235093261420884245010779125654388195825",
    "150644697738961163815734366237447504686",
    "888649278789082174411072612721791007739",
    "901693778445401435717463670635026539477",
    "1047716239047703993017797887000254024817",
    "1737046666080539081914974966237099365643",
    "621698472431332816417792581602959129152",
    "1703660345011483495218041991169194027213",
    "92658835324565758495130762072978604201",
    "606608081756831098117273329568996374994",
    "56448737519681294968960799914289695112",
    "2270854481895276807307011598962175177",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
