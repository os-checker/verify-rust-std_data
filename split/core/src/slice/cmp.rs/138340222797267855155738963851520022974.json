{
  "file": "core/src/slice/cmp.rs",
  "name": "<i32 as slice::cmp::SliceContains>::slice_contains",
  "hash": "138340222797267855155738963851520022974",
  "hash_direct": "135893839252246096687485511560970848691",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "87171854991877519594033210999551847037",
    "1698374122691359587114937540266498352907",
    "171877024039358361415531368687110875076",
    "79147560314209947671815415446941048751",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "157526224548632931644224402393760490185",
    "174107661030119018973646362480685393050",
    "366503061556370158810229951695642705038",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1214574077763705187516383491048990527345",
    "171347586233455390614863723570072745783",
    "1844299790297716401214554147328263867313",
    "1509431403047076797915200786056414979046",
    "412729549358684593912096888906968277131",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "176200189164093623236477081102808498343",
    "141639776557979467351154191462161712427",
    "151332515389462887513652497243051504477",
    "183821823452460794188119792571684334922",
    "66467625991432139116411933171465265888",
    "172375647958570815339516107797095637278",
    "293645540748671545017999185713660079650",
    "346514693739384529214030417018176026367",
    "273415576575767061110563276965785236574",
    "502094234030130318111628597852501312940",
    "169128170068249798141380897037948207053",
    "76622831520453128806684417801178317003",
    "1695060976276531121212619016060169719785",
    "1280173388007479022616687824679951531251",
    "1221860769817398645016782035806767822108",
    "1248523668675078374717473437136873169174",
    "804710156281639903411151492088214878063",
    "1106073802426908357011432982945519213202",
    "1503469304403438643051122624709972856",
    "435239761064303110512908270333592725805",
    "589657143344069229516012129278341512248",
    "1753197907151557019016748412337489951208",
    "83928255411050372752274556462363192913",
    "1103640643490011647813283551762810498799",
    "30960878329381866117262148068712117545",
    "103998601278320789133417007870097893154",
    "1131523057971589470916995265363838013805",
    "910126820824964285814090287285688600507",
    "886327172367248146715632079405440895063",
    "5168952795162731163123174827862467150",
    "142004042326937604955100201437830150711",
    "1496280581357608178813053499345132293193",
    "42648359817159391071830541342408664749",
    "71135322617303050388065311492889445550",
    "126048648882406442003602795325732745334",
    "60020754642282354823285669083003912494",
    "1006928117247909106515604664996585110540",
    "92658835324565758495130762072978604201",
    "982812517398244847818134688650878457542",
    "56448737519681294968960799914289695112",
    "51920321377442756437204742573348251158",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
