{
  "file": "core/src/slice/cmp.rs",
  "name": "<i64 as slice::cmp::SliceContains>::slice_contains",
  "hash": "1606441255865426077110445257385386131365",
  "hash_direct": "1475636798079732335814339674203800760907",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "47278574192031232971799194590021398469",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "4258870729790012902811253567083817009",
    "58546306076534425325735881036965951636",
    "832614595633416012411363935001553236698",
    "151648183144342744342921226948666492037",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "14289085791843058303972699274315536239",
    "640733709302247474817204086784374277554",
    "115555205615687306856865117926649470214",
    "65706698147482018057796787595105843509",
    "119192726758984349101234495329931869583",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "192827680051164684517588053497252451335",
    "1538271089334494951410756580781593735995",
    "1790298101339239581015202674947191725599",
    "75511745283696677799407639139044806139",
    "12777244984139077067090081518820596267",
    "170473093001769744084416700117787022245",
    "169017152061146820209827866672499117723",
    "100292503588841594566603151825508845747",
    "40194229073258242183140619236161844584",
    "34618202288657808338499856864988927299",
    "1025852362502215753410908119571745836308",
    "107162624972614326708664117372158418846",
    "1412375278281894283413854205966970147029",
    "12007210415939798849461453698655422656",
    "133512054353652028132894230170684990144",
    "158374245847212308478760082524356378107",
    "385973819148907056616137519496960148020",
    "282100904855940539517123652996853046406",
    "89045191440309183162380568474624251417",
    "1075154227402769127710158932930297239455",
    "50949570814213942355551201931066540818",
    "83000163192930164078151196212805182146",
    "119558264654503758657435117293106993213",
    "72475416260054813944218377163842888482",
    "1754156318557849930411716180577810003437",
    "1608485843039613329215665110612628226470",
    "19621186627199372879937868363402641084",
    "1375085673399693327514175394051767453832",
    "80005422122819319313277002935457922275",
    "1778394993393792684418032022568128159610",
    "1198803604824220862416087694356255760604",
    "1406083644870496151728725897278452727",
    "39006092466086750706212973817469725168",
    "102203130844416669492588966930570306874",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "7839859953712079114640771271960005865",
    "1137271765924114987514947403158445640283",
    "393974833682574441515290398983271504453",
    "180126912453652104473132457509626900161",
    "1149265318701628438811160570489210589004",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
