{
  "file": "core/src/slice/cmp.rs",
  "name": "<f32 as slice::cmp::SliceContains>::slice_contains",
  "hash": "33259070188037590814769229927761081195",
  "hash_direct": "124898575789737244407462670066142212671",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "34407055298595236278572437376582266537",
    "649936685510067888214469380957314753736",
    "1554592054844705604815491083685925038228",
    "31244240180128544175272526361568808560",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "157526224548632931644224402393760490185",
    "174107661030119018973646362480685393050",
    "366503061556370158810229951695642705038",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1214574077763705187516383491048990527345",
    "168982609068613527704618957716390693902",
    "87240960322451000991370160781765781532",
    "559204835772302728615611125492369716962",
    "72183287433346257945482871886082299138",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "29060292595203819616753101509882389635",
    "141639776557979467351154191462161712427",
    "151332515389462887513652497243051504477",
    "75668365260124385837999611938706969645",
    "135659256419129268442437921344857302949",
    "15499096037232303986283599954117871103",
    "293645540748671545017999185713660079650",
    "104462103040602924085297176652652961077",
    "1164135365616094349311144313684218517309",
    "10123075558364530123633962475815670592",
    "543130095745585460916113122662205460051",
    "128611323394681832327801109941670938579",
    "100764025474357784378949075689012252950",
    "35485446422980885339585144742890076820",
    "722894127766671061812197463609362046165",
    "102229269141722818449343818220528749356",
    "15549687165489609511324492664920005534",
    "349818050798869001414471715272427657124",
    "718264971920259253314190906910074347587",
    "56516666103598655473237776158822401329",
    "723145229539310489915154639287889184195",
    "148725321537531500294517867804446801918",
    "57039444922361082164413539865376629085",
    "1175118871368419140514155764071141447371",
    "1009001744781027445312477626010992083756",
    "145310721910149349310703790015917135856",
    "270344180699467671212023004863515791451",
    "7017136333540388200713431365939228262",
    "92759682122858424457197096949106790779",
    "27690935034406746226910044750592829869",
    "70813740755376170642151798947761580358",
    "218564685544363262717645280460593455",
    "291393036769070960817337476880067785826",
    "110720480464068566803233798472171819846",
    "126048648882406442003602795325732745334",
    "60020754642282354823285669083003912494",
    "1006928117247909106515604664996585110540",
    "92658835324565758495130762072978604201",
    "982812517398244847818134688650878457542",
    "56448737519681294968960799914289695112",
    "51920321377442756437204742573348251158",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
