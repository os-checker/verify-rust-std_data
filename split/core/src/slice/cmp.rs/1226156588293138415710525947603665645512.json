{
  "file": "core/src/slice/cmp.rs",
  "name": "<f32 as slice::cmp::SliceContains>::slice_contains",
  "hash": "1226156588293138415710525947603665645512",
  "hash_direct": "124898575789737244407462670066142212671",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "47278574192031232971799194590021398469",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "28707937016062154848948131368885322501",
    "105586173680376865703558112969544306251",
    "42378138817949430056736156431645255910",
    "135598008489588662314776882657014310925",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "14289085791843058303972699274315536239",
    "30080784956360149839779979229530348120",
    "1041115573972753134416684278001432566794",
    "136610186943633245834526515438065719264",
    "44548674369207234447228003937358831808",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "1255367732930267936011751873400407364531",
    "1538271089334494951410756580781593735995",
    "1790298101339239581015202674947191725599",
    "932660749601166493416911828088004100813",
    "52157765871122605412867998862326058654",
    "12466301824950517687499568532182194756",
    "169017152061146820209827866672499117723",
    "126848878295068376216938117831082859107",
    "136731459071020275662185450164424290100",
    "606747806125029218115879523592546027318",
    "1188716364092266167913732176000384352625",
    "61773707605623348526611857262405737544",
    "151336702563196323177662156130057869842",
    "1383106303206615436518061423611684936446",
    "1658999062725857412815645670095620620560",
    "859114949078385887011597354898906718972",
    "449508210215163961514029549326352998334",
    "37113797879140880383636539728913066719",
    "674431666769269559416182846871079564206",
    "279351011336920330214151090572993480018",
    "1590476116593296152118275058473090478169",
    "174896610931061561146062271614546001416",
    "917664962260790457215114224709591859409",
    "13103592116746351274210378757587110734",
    "1748074434055435309712886870150281056594",
    "1144174100132891458514583687033610824463",
    "127731780861063165204554773324358596513",
    "75826364580901856306168378982072251228",
    "39770212946515250072935443960315544211",
    "1621750678312983413018314111706318938482",
    "45143283256876035424572192263241311421",
    "89654432799125808668356771512029266812",
    "916206836489762122210698186344188832194",
    "1051611829387554242012133397608820880065",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "7839859953712079114640771271960005865",
    "1137271765924114987514947403158445640283",
    "393974833682574441515290398983271504453",
    "180126912453652104473132457509626900161",
    "1149265318701628438811160570489210589004",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
