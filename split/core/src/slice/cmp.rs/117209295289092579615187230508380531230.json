{
  "file": "core/src/slice/cmp.rs",
  "name": "<char as slice::cmp::SliceContains>::slice_contains",
  "hash": "117209295289092579615187230508380531230",
  "hash_direct": "635629628409249312111317370606249085826",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "47278574192031232971799194590021398469",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "276384347977183897514759873585443975079",
    "32251256033946934681219780700878185791",
    "179027492598291092807980692871672984191",
    "1156543629781806943613236490158137181630",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "14289085791843058303972699274315536239",
    "127919147422064380131033250293632003113",
    "19175242352379257894524511946426654035",
    "157419191093478936518787831921895095700",
    "1195934742954190154118432795911407274332",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "159036998390405294233013104769383931048",
    "1538271089334494951410756580781593735995",
    "1790298101339239581015202674947191725599",
    "1199221165850083547212862563242345472222",
    "79864552017977064554718232825118263405",
    "35533776158220467232372629384472754561",
    "169017152061146820209827866672499117723",
    "183084010255680729445495992945602528853",
    "26664490570856306671306019945196746362",
    "7252890572114370307317666805867717317",
    "74002631578558466352820320767584210544",
    "60398301833937082456673431992872147767",
    "1256347874659859794517657351340104146603",
    "29573527650795721644159815627231359192",
    "109935697058282479017211616811513520319",
    "542107969656591403611120475955569064682",
    "286190699060886541614696498458211890697",
    "52407632342254686257204761749902704057",
    "668686469152453848114549420575228927843",
    "1736853288604236139610086725641874733126",
    "8442300616066315232712456918074153922",
    "1501969426469103783429254560904549239",
    "658590663910188915316074637713513190",
    "451773334865780391313917419124282258084",
    "23563357909487150613911991033846127796",
    "197846339077842974317431915715446581476",
    "1666212383405334839316695648773573360898",
    "108518209064054063968008844564744915498",
    "118028538875063715297882133702139365497",
    "684451011680717484712301707546685075738",
    "9580866240197829643702969080900415458",
    "73079579697555378763024655495901103763",
    "1233144417391001064213441018466550989740",
    "1662145476760961550110758253520109229403",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "7839859953712079114640771271960005865",
    "1137271765924114987514947403158445640283",
    "393974833682574441515290398983271504453",
    "180126912453652104473132457509626900161",
    "1149265318701628438811160570489210589004",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
