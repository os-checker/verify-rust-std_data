{
  "file": "core/src/slice/cmp.rs",
  "name": "<i16 as slice::cmp::SliceContains>::slice_contains",
  "hash": "12517125250891315213503012888793561159",
  "hash_direct": "134752474604268522952706596647573780921",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "60314103983334121656880421323216098863",
    "877677737652423542716900951775918487287",
    "143278112709895103115515125728946639573",
    "101522080141485307182836483156899478704",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "157526224548632931644224402393760490185",
    "174107661030119018973646362480685393050",
    "366503061556370158810229951695642705038",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1214574077763705187516383491048990527345",
    "1123252473878446617114503928984889004456",
    "1531873070913594010418165069759689485021",
    "119434026961854661015025703690607194761",
    "634289316105000433112808356108265948121",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "118197269368877241794659835223147352444",
    "141639776557979467351154191462161712427",
    "151332515389462887513652497243051504477",
    "95542775439783952566166773445675510088",
    "101433886987886537208878901714780700634",
    "705049929631834990711610963601089422946",
    "293645540748671545017999185713660079650",
    "98326481664974899662955024070681285238",
    "71327700629771979206764273854407327776",
    "671755449185416658816246526077396529929",
    "55130804945039560398743496887926720415",
    "9486458909534575916908444859926042148",
    "78532589441628182829744328799337367779",
    "1539483941511631222017248749549795057246",
    "349643102456837954111388116486972362120",
    "1837042076776133743112882701714612475740",
    "98551067149142308585924646181156423395",
    "833120437538950239717401649166062168142",
    "25489922926799551163205588160652821106",
    "133849724012465515219992635668864575995",
    "28091368675368221911374374487639400749",
    "307392527293866034110415436464195895642",
    "6669541559133358530968391158545556333",
    "177474031909579778007276256371127310112",
    "1144276622549624228417361200988433615114",
    "129546920604477141515520804003677712226",
    "143586339869585107518277722507231771396",
    "349786159139192906515225607564457165994",
    "173955513419713994262699164930561186920",
    "1708085576331460601611161533227407969709",
    "1786352486659646557213924837933080704413",
    "47740449998406987111510734488941397318",
    "107994121286314909824656459823401417832",
    "1012486406727184128612113800856015785553",
    "126048648882406442003602795325732745334",
    "60020754642282354823285669083003912494",
    "1006928117247909106515604664996585110540",
    "92658835324565758495130762072978604201",
    "982812517398244847818134688650878457542",
    "56448737519681294968960799914289695112",
    "51920321377442756437204742573348251158",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
