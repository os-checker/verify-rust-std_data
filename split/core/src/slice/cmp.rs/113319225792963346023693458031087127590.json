{
  "file": "core/src/slice/cmp.rs",
  "name": "<f32 as slice::cmp::SliceContains>::slice_contains",
  "hash": "113319225792963346023693458031087127590",
  "hash_direct": "124898575789737244407462670066142212671",
  "src": "fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_slice_contains!(u16, u32, u64, i16, i32, i64, f32, f64, usize, isize, char)",
      "defsite": "macro_rules! impl_slice_contains {\n    ($($t:ty),*) => {\n        $(\n            impl SliceContains for $t {\n                #[inline]\n                fn slice_contains(&self, arr: &[$t]) -> bool {\n                    // Make our LANE_COUNT 4x the normal lane count (aiming for 128 bit vectors).\n                    // The compiler will nicely unroll it.\n                    const LANE_COUNT: usize = 4 * (128 / (size_of::<$t>() * 8));\n                    // SIMD\n                    let mut chunks = arr.chunks_exact(LANE_COUNT);\n                    for chunk in &mut chunks {\n                        if chunk.iter().fold(false, |acc, x| acc | (*x == *self)) {\n                            return true;\n                        }\n                    }\n                    // Scalar remainder\n                    return chunks.remainder().iter().any(|x| *x == *self);\n                }\n            }\n        )*\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "34407055298595236278572437376582266537",
    "160480354522168672807741099441537878803",
    "1554592054844705604815491083685925038228",
    "31244240180128544175272526361568808560",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1204668293620499224013336883119093261459",
    "5667765796385169624800112337147502292",
    "171593739300022194915526452191835401234",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "1214574077763705187516383491048990527345",
    "153359812303060870313745291357235121700",
    "87240960322451000991370160781765781532",
    "559204835772302728615611125492369716962",
    "72183287433346257945482871886082299138",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "29060292595203819616753101509882389635",
    "116493993968203631779782501274936096641",
    "1262076319586358531712252901929338923022",
    "75668365260124385837999611938706969645",
    "135659256419129268442437921344857302949",
    "15499096037232303986283599954117871103",
    "449637264080571459055009589071427003",
    "1220077814106487456211144053578469298836",
    "1164135365616094349311144313684218517309",
    "10123075558364530123633962475815670592",
    "543130095745585460916113122662205460051",
    "128611323394681832327801109941670938579",
    "100764025474357784378949075689012252950",
    "35485446422980885339585144742890076820",
    "722894127766671061812197463609362046165",
    "102229269141722818449343818220528749356",
    "15549687165489609511324492664920005534",
    "349818050798869001414471715272427657124",
    "718264971920259253314190906910074347587",
    "56516666103598655473237776158822401329",
    "15010300971986335756224518614904067714",
    "19350545243758039752560016225043069396",
    "57039444922361082164413539865376629085",
    "705457505361776719010347058209512259319",
    "129560689130207757912117504051833529054",
    "707706810849996455417416709545317731153",
    "113478863145036139035818798277645652702",
    "7017136333540388200713431365939228262",
    "463047486413039375518022736166895194470",
    "263568399383825004913757149679641722154",
    "49459234763379602715530329142440388057",
    "91838039324375798376118680765458183815",
    "1520041217188898403915012862878742459068",
    "21126380299816879417806468224630319620",
    "1737046666080539081914974966237099365643",
    "621698472431332816417792581602959129152",
    "1703660345011483495218041991169194027213",
    "92658835324565758495130762072978604201",
    "606608081756831098117273329568996374994",
    "56448737519681294968960799914289695112",
    "2270854481895276807307011598962175177",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
