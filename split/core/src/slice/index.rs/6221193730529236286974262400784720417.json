{
  "file": "core/src/slice/index.rs",
  "name": "<ops::index_range::IndexRange as slice::index::SliceIndex<[mem::maybe_uninit::MaybeUninit<char>]>>::get_unchecked",
  "hash": "6221193730529236286974262400784720417",
  "hash_direct": "561025337401101647736220075963769276",
  "src": "unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {\n        assert_unsafe_precondition!(\n            check_library_ub,\n            \"slice::get_unchecked requires that the index is within the slice\",\n            (end: usize = self.end(), len: usize = slice.len()) => end <= len\n        );\n        // SAFETY: the caller guarantees that `slice` is not dangling, so it\n        // cannot be longer than `isize::MAX`. They also guarantee that\n        // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,\n        // so the call to `add` is safe.\n        unsafe { get_offset_len_noubcheck(slice, self.start(), self.len()) }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "884246074448727927914595282961940941192",
    "975615807404907599012293873143289411403",
    "27547235193633795771352944920978011050",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "132356016862926281278936911290964574083",
    "17885338024940159556008007307872397104",
    "117796122268892311417933652125854295320",
    "527301041467884922111309565656307235599"
  ]
}
