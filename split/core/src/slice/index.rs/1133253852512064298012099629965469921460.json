{
  "file": "core/src/slice/index.rs",
  "name": "<ops::range::Range<usize> as slice::index::SliceIndex<[u16]>>::get_unchecked",
  "hash": "1133253852512064298012099629965469921460",
  "hash_direct": "90267915578428628187011778050590150209",
  "src": "unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {\n        assert_unsafe_precondition!(\n            check_library_ub,\n            \"slice::get_unchecked requires that the range is within the slice\",\n            (\n                start: usize = self.start,\n                end: usize = self.end,\n                len: usize = slice.len()\n            ) => end >= start && end <= len\n        );\n\n        // SAFETY: the caller guarantees that `slice` is not dangling, so it\n        // cannot be longer than `isize::MAX`. They also guarantee that\n        // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,\n        // so the call to `add` is safe and the length calculation cannot overflow.\n        unsafe {\n            // Using the intrinsic avoids a superfluous UB check,\n            // since the one on this method already checked `end >= start`.\n            let new_len = crate::intrinsics::unchecked_sub(self.end, self.start);\n            get_offset_len_noubcheck(slice, self.start, new_len)\n        }\n    }",
  "callees": [
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "4425045479647121218916370217570622286",
    "187736884739787678612652258961405659760",
    "75477001305211620987548859554168086338",
    "113814366055626271438047374284421353461"
  ]
}
