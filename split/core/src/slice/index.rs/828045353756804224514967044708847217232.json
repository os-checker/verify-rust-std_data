{
  "file": "core/src/slice/index.rs",
  "name": "<ops::range::Range<usize> as slice::index::SliceIndex<[mem::maybe_uninit::MaybeUninit<(f64, bool)>]>>::get_unchecked_mut",
  "hash": "828045353756804224514967044708847217232",
  "hash_direct": "131034639553355724115994543175983804964",
  "src": "unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {\n        assert_unsafe_precondition!(\n            check_library_ub,\n            \"slice::get_unchecked_mut requires that the range is within the slice\",\n            (\n                start: usize = self.start,\n                end: usize = self.end,\n                len: usize = slice.len()\n            ) => end >= start && end <= len\n        );\n        // SAFETY: see comments for `get_unchecked` above.\n        unsafe {\n            let new_len = crate::intrinsics::unchecked_sub(self.end, self.start);\n            get_offset_len_mut_noubcheck(slice, self.start, new_len)\n        }\n    }",
  "callees": [
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "80821512056730926049671463704150015164",
    "114112430019948462434175136111420524766",
    "112646913299211492072930622288030172296",
    "109562649191060178038182565159088266799"
  ]
}
