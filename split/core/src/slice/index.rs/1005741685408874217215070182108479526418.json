{
  "file": "core/src/slice/index.rs",
  "name": "<usize as slice::index::SliceIndex<[ascii::ascii_char::AsciiChar]>>::get_unchecked",
  "hash": "1005741685408874217215070182108479526418",
  "hash_direct": "334526281714294737916496317922495140653",
  "src": "unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {\n        assert_unsafe_precondition!(\n            check_language_ub,\n            \"slice::get_unchecked requires that the index is within the slice\",\n            (this: usize = self, len: usize = slice.len()) => this < len\n        );\n        // SAFETY: the caller guarantees that `slice` is not dangling, so it\n        // cannot be longer than `isize::MAX`. They also guarantee that\n        // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,\n        // so the call to `add` is safe.\n        unsafe {\n            // Use intrinsics::assume instead of hint::assert_unchecked so that we don't check the\n            // precondition of this function twice.\n            crate::intrinsics::assume(self < slice.len());\n            slice_get_unchecked(slice, self)\n        }\n    }",
  "callees": [
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "174434980853599669988324850529807540275",
    "1129159093616037571015539647390591854279",
    "138774632689772549819578629668035245923",
    "399232661239117480517401994520839366833"
  ]
}
