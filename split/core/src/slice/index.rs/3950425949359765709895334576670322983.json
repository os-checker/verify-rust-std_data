{
  "file": "core/src/slice/index.rs",
  "name": "<usize as slice::index::SliceIndex<[mem::maybe_uninit::MaybeUninit<char>]>>::get_unchecked",
  "hash": "3950425949359765709895334576670322983",
  "hash_direct": "56863161187384213519800811695355509330",
  "src": "unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {\n        assert_unsafe_precondition!(\n            check_language_ub,\n            \"slice::get_unchecked requires that the index is within the slice\",\n            (this: usize = self, len: usize = slice.len()) => this < len\n        );\n        // SAFETY: the caller guarantees that `slice` is not dangling, so it\n        // cannot be longer than `isize::MAX`. They also guarantee that\n        // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,\n        // so the call to `add` is safe.\n        unsafe {\n            // Use intrinsics::assume instead of hint::assert_unchecked so that we don't check the\n            // precondition of this function twice.\n            crate::intrinsics::assume(self < slice.len());\n            slice_get_unchecked(slice, self)\n        }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "132356016862926281278936911290964574083",
    "17885338024940159556008007307872397104",
    "154911443990380340341563367924870465980",
    "739520556846959085018120036998133255835"
  ]
}
