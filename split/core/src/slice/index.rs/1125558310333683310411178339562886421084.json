{
  "file": "core/src/slice/index.rs",
  "name": "slice::index::into_slice_range",
  "hash": "1125558310333683310411178339562886421084",
  "hash_direct": "177325628010630237357833009160913777942",
  "src": "pub(crate) fn into_slice_range(\n    len: usize,\n    (start, end): (ops::Bound<usize>, ops::Bound<usize>),\n) -> ops::Range<usize> {\n    use ops::Bound;\n    let start = match start {\n        Bound::Included(start) => start,\n        Bound::Excluded(start) => {\n            start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())\n        }\n        Bound::Unbounded => 0,\n    };\n\n    let end = match end {\n        Bound::Included(end) => {\n            end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())\n        }\n        Bound::Excluded(end) => end,\n        Bound::Unbounded => len,\n    };\n\n    // Don't bother with checking `start < end` and `end <= len`\n    // since these checks are handled by `Range` impls\n\n    start..end\n}",
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "38173889201636315922757092210776486888",
    "7118183161990756673291204628608545550",
    "1823867377379330720213323395194175130212",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "1160534967191759785813385056323526306898",
    "1075727625988750378612673303270333916748",
    "322556944079689933510295233661681375569",
    "169106531821490641399289075464575795242",
    "169087461624945913379326739353759338513",
    "1529446589783479626613736920769896610141"
  ]
}
