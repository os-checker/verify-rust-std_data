{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [mem::maybe_uninit::MaybeUninit<(f64, bool)>]>::get_unchecked_mut::<ops::range::RangeTo<usize>>",
  "hash": "1236683947905717609914880954997194826112",
  "hash_direct": "12404459784659877716119129446191808729",
  "src": "pub const unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n    where\n        I: ~const SliceIndex<Self>,\n    {\n        // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;\n        // the slice is dereferenceable because `self` is a safe reference.\n        // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n        unsafe { &mut *index.get_unchecked_mut(self) }\n    }",
  "callees": [
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "80821512056730926049671463704150015164",
    "114112430019948462434175136111420524766",
    "828045353756804224514967044708847217232",
    "1262726502375209813814470198509255958813",
    "112646913299211492072930622288030172296",
    "109562649191060178038182565159088266799"
  ]
}
