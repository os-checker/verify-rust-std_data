{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [char]>::align_to_mut::<u16>",
  "hash": "117289889111255699282241328261626898142",
  "hash_direct": "1671338266501624601612207195170464292447",
  "src": "pub unsafe fn align_to_mut<U>(&mut self) -> (&mut [T], &mut [U], &mut [T]) {\n        // Note that most of this function will be constant-evaluated,\n        if U::IS_ZST || T::IS_ZST {\n            // handle ZSTs specially, which is â€“ don't handle them at all.\n            return (self, &mut [], &mut []);\n        }\n\n        // First, find at what point do we split between the first and 2nd slice. Easy with\n        // ptr.align_offset.\n        let ptr = self.as_ptr();\n        // SAFETY: Here we are ensuring we will use aligned pointers for U for the\n        // rest of the method. This is done by passing a pointer to &[T] with an\n        // alignment targeted for U.\n        // `crate::ptr::align_offset` is called with a correctly aligned and\n        // valid pointer `ptr` (it comes from a reference to `self`) and with\n        // a size that is a power of two (since it comes from the alignment for U),\n        // satisfying its safety constraints.\n        let offset = unsafe { crate::ptr::align_offset(ptr, align_of::<U>()) };\n        if offset > self.len() {\n            (self, &mut [], &mut [])\n        } else {\n            let (left, rest) = self.split_at_mut(offset);\n            let (us_len, ts_len) = rest.align_to_offsets::<U>();\n            let rest_len = rest.len();\n            let mut_ptr = rest.as_mut_ptr();\n            // Inform Miri that we want to consider the \"middle\" pointer to be suitably aligned.\n            #[cfg(miri)]\n            crate::intrinsics::miri_promise_symbolic_alignment(\n                mut_ptr.cast() as *const (),\n                align_of::<U>(),\n            );\n            // We can't use `rest` again after this, that would invalidate its alias `mut_ptr`!\n            // SAFETY: see comments for `align_to`.\n            unsafe {\n                (\n                    left,\n                    from_raw_parts_mut(mut_ptr as *mut U, us_len),\n                    from_raw_parts_mut(mut_ptr.add(rest_len - ts_len), ts_len),\n                )\n            }\n        }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154632036321720824021555629139300729764",
    "225952500164735912514546972505243856357",
    "86133515756163850188547131179003511107",
    "1231693553175053426510927854933676924735",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "151465894222760985751884944789248963379",
    "123392787403333522114801427658681051416",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "115536848358193506319642622868201624499",
    "75759395252596853998260837546904752859",
    "806945297804534494217251214108297872904",
    "108552149900633290919250115311635650035",
    "1573495954036948654416521138177013796438",
    "1714565960307064113413665168143907139022",
    "293645540748671545017999185713660079650",
    "1065652937264261495312316808979844699500",
    "604329295346385592012648384023131770098",
    "1964782170882930472404111691267111118",
    "1484805978921758630811822796640318192554",
    "108744414311248209822134737780932630162",
    "858478165821293093715850338416279403673",
    "115763059443108124133258333038429587907",
    "855670810018620916517890358889807151388",
    "175199079261386767549535591106668177763",
    "982812517398244847818134688650878457542",
    "1262268302406396300513565250820649213634",
    "1320801548407176755117757300189063729311",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
