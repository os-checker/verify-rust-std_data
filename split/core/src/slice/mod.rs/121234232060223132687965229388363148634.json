{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [(char, u32)]>::binary_search_by::<'_, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/unicode/unicode_data.rs:763:35: 763:46}>",
  "hash": "121234232060223132687965229388363148634",
  "hash_direct": "1064095445025072332514073201703637455303",
  "src": "pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>\n    where\n        F: FnMut(&'a T) -> Ordering,\n    {\n        let mut size = self.len();\n        if size == 0 {\n            return Err(0);\n        }\n        let mut base = 0usize;\n\n        // This loop intentionally doesn't have an early exit if the comparison\n        // returns Equal. We want the number of loop iterations to depend *only*\n        // on the size of the input slice so that the CPU can reliably predict\n        // the loop count.\n        while size > 1 {\n            let half = size / 2;\n            let mid = base + half;\n\n            // SAFETY: the call is made safe by the following invariants:\n            // - `mid >= 0`: by definition\n            // - `mid < size`: `mid = size / 2 + size / 4 + size / 8 ...`\n            let cmp = f(unsafe { self.get_unchecked(mid) });\n\n            // Binary search interacts poorly with branch prediction, so force\n            // the compiler to use conditional moves if supported by the target\n            // architecture.\n            base = hint::select_unpredictable(cmp == Greater, base, mid);\n\n            // This is imprecise in the case where `size` is odd and the\n            // comparison returns Greater: the mid element still gets included\n            // by `size` even though it's known to be larger than the element\n            // being searched for.\n            //\n            // This is fine though: we gain more performance by keeping the\n            // loop iteration count invariant (and thus predictable) than we\n            // lose from considering one additional element.\n            size -= half;\n        }\n\n        // SAFETY: base is always in [0, size) because base <= mid.\n        let cmp = f(unsafe { self.get_unchecked(base) });\n        if cmp == Equal {\n            // SAFETY: same as the `get_unchecked` above.\n            unsafe { hint::assert_unchecked(base < self.len()) };\n            Ok(base)\n        } else {\n            let result = base + (cmp == Less) as usize;\n            // SAFETY: same as the `get_unchecked` above.\n            // Note that this is `<=`, unlike the assume in the `Ok` path.\n            unsafe { hint::assert_unchecked(result <= self.len()) };\n            Err(result)\n        }\n    }",
  "callees": [
    "81385294222362714685518950164453635767",
    "60781470217526102963610385287279976834",
    "47323665595455568617290020941376774286",
    "11139495935450220752286966752445431093",
    "1048826569175922670011956699091393235644",
    "144365221844634164973961738423316145170",
    "52266615998776091406665035415017120997",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "93472950105651706242259860463308488264",
    "102189070583536888521073139681085973390",
    "164434928084716863346001339216522172725",
    "138978394266802077512946941858154207832",
    "1097272359839326724310084488330926354210",
    "1245138925531671967011772485621443291799",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "18115598430807543054675411521391838088",
    "53398805961609338523376489634073401615",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "92880896475004770282622108900229659760",
    "1101365253157721460216453966694365083821",
    "20986198496993118725423036564777905464",
    "718111253804944270316602693767644141239",
    "136032794974893814259994759472454752644",
    "162134990375745756059287537099603494952",
    "1412396542820481544111291621418681240082",
    "1217415261097087342010145822498820928306",
    "31687359370865642814087223291213153854",
    "138774632689772549819578629668035245923",
    "90175179397242369455372712796954544135",
    "48548664629730829953422984265893277498",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "353377204300046762514908300176021542578"
  ]
}
