{
  "file": "core/src/slice/mod.rs",
  "name": "core::slice::<impl [(char, u32)]>::binary_search_by::<'_, {closure@core::unicode::conversions::to_lower::{closure#0}}>",
  "hash": "112237083326985232158877307455562811808",
  "hash_direct": "42083978010913045545037235623227176098",
  "src": "pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>\n    where\n        F: FnMut(&'a T) -> Ordering,\n    {\n        let mut size = self.len();\n        if size == 0 {\n            return Err(0);\n        }\n        let mut base = 0usize;\n\n        // This loop intentionally doesn't have an early exit if the comparison\n        // returns Equal. We want the number of loop iterations to depend *only*\n        // on the size of the input slice so that the CPU can reliably predict\n        // the loop count.\n        while size > 1 {\n            let half = size / 2;\n            let mid = base + half;\n\n            // SAFETY: the call is made safe by the following invariants:\n            // - `mid >= 0`: by definition\n            // - `mid < size`: `mid = size / 2 + size / 4 + size / 8 ...`\n            let cmp = f(unsafe { self.get_unchecked(mid) });\n\n            // Binary search interacts poorly with branch prediction, so force\n            // the compiler to use conditional moves if supported by the target\n            // architecture.\n            base = hint::select_unpredictable(cmp == Greater, base, mid);\n\n            // This is imprecise in the case where `size` is odd and the\n            // comparison returns Greater: the mid element still gets included\n            // by `size` even though it's known to be larger than the element\n            // being searched for.\n            //\n            // This is fine though: we gain more performance by keeping the\n            // loop iteration count invariant (and thus predictable) than we\n            // lose from considering one additional element.\n            size -= half;\n        }\n\n        // SAFETY: base is always in [0, size) because base <= mid.\n        let cmp = f(unsafe { self.get_unchecked(base) });\n        if cmp == Equal {\n            // SAFETY: same as the `get_unchecked` above.\n            unsafe { hint::assert_unchecked(base < self.len()) };\n            Ok(base)\n        } else {\n            let result = base + (cmp == Less) as usize;\n            // SAFETY: same as the `get_unchecked` above.\n            // Note that this is `<=`, unlike the assume in the `Ok` path.\n            unsafe { hint::assert_unchecked(result <= self.len()) };\n            Err(result)\n        }\n    }",
  "callees": [
    "141364671331973869778270942055776551817",
    "90140468976857215748324199211043385084",
    "12281449246394340237926324936375242532",
    "1511275866077199755612412536318849312657",
    "1768913793289742146612177224668359908109",
    "94205340984548205403161824858415082908",
    "1263945855766849354510334944065532128780",
    "181267529910573756716102767087485333561",
    "79817071675776388295206212610749591701",
    "1824545319189397521315695847785602896178",
    "141051090481435808783715316343782561731",
    "11976266579713756835272321175156879554",
    "700121798421844638112954362982616513440",
    "3426408591059629602792909874372843773",
    "114741638161998136903549224640438971859",
    "139483837448589163674758035261080447269",
    "439022777647632696517945103495108037392",
    "4076984766143030440815189235784749564",
    "51372523453683089364244340980133861262",
    "169382045895387326079929663684999712557",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "146612017564224181584303574960223420416",
    "63085389524472853348886374617170044294",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "139907086782363519768211215911218405340",
    "181953690662554297912505335505865467275",
    "54915130795945560367074131250030912561",
    "10435104334233940885347855730897394048",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "453447829425605175013828912841818007745",
    "238255751538736212110403326967051462921",
    "401184682645594039513185690909655823909",
    "1102707990469809545812015399289882219301",
    "19058764743854314419670517218317949449",
    "97319372947783631613391498944003669071",
    "1321571500445129312813707138744963876450",
    "35090294169429653114888470028367354460",
    "659647383495895196114591628620715457311",
    "1142352860299231163216467253037577302956",
    "42640861811413251621458178080920148489",
    "8787952082428538504365079471726452107",
    "34168428747107921917921965588564672058",
    "112989397975222255532054380452996322405",
    "56586361413793673417653620039252553370",
    "192903257417349624310389255189038584608",
    "23796445857807887548652931133775610154"
  ]
}
