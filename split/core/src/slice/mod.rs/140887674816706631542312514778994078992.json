{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [unicode::unicode_data::ShortOffsetRunHeader]>::binary_search_by::<'_, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3042:31: 3042:34}>",
  "hash": "140887674816706631542312514778994078992",
  "hash_direct": "1442580562691834466017371592341689381853",
  "src": "pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>\n    where\n        F: FnMut(&'a T) -> Ordering,\n    {\n        let mut size = self.len();\n        if size == 0 {\n            return Err(0);\n        }\n        let mut base = 0usize;\n\n        // This loop intentionally doesn't have an early exit if the comparison\n        // returns Equal. We want the number of loop iterations to depend *only*\n        // on the size of the input slice so that the CPU can reliably predict\n        // the loop count.\n        while size > 1 {\n            let half = size / 2;\n            let mid = base + half;\n\n            // SAFETY: the call is made safe by the following invariants:\n            // - `mid >= 0`: by definition\n            // - `mid < size`: `mid = size / 2 + size / 4 + size / 8 ...`\n            let cmp = f(unsafe { self.get_unchecked(mid) });\n\n            // Binary search interacts poorly with branch prediction, so force\n            // the compiler to use conditional moves if supported by the target\n            // architecture.\n            base = hint::select_unpredictable(cmp == Greater, base, mid);\n\n            // This is imprecise in the case where `size` is odd and the\n            // comparison returns Greater: the mid element still gets included\n            // by `size` even though it's known to be larger than the element\n            // being searched for.\n            //\n            // This is fine though: we gain more performance by keeping the\n            // loop iteration count invariant (and thus predictable) than we\n            // lose from considering one additional element.\n            size -= half;\n        }\n\n        // SAFETY: base is always in [0, size) because base <= mid.\n        let cmp = f(unsafe { self.get_unchecked(base) });\n        if cmp == Equal {\n            // SAFETY: same as the `get_unchecked` above.\n            unsafe { hint::assert_unchecked(base < self.len()) };\n            Ok(base)\n        } else {\n            let result = base + (cmp == Less) as usize;\n            // SAFETY: same as the `get_unchecked` above.\n            // Note that this is `<=`, unlike the assume in the `Ok` path.\n            unsafe { hint::assert_unchecked(result <= self.len()) };\n            Err(result)\n        }\n    }",
  "callees": [
    "25315992229481465352451865580694346951",
    "131804240691040385559237509421631119204",
    "258820287469578611817448591488600041899",
    "6962362284417680556415378392413733050",
    "435856115563378382217848427661083879501",
    "177977349961938475224388387914435186804",
    "92366369245146006064319085484006805154",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "121087737844564590059481680028118075790",
    "1819947172139969375117075366088933977903",
    "172945843078855720802584938355221151874",
    "134353298228998308018737326158340948077",
    "1816085489936401008914403015960886614493",
    "1342521228831833354715461413551686205925",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "6413297363691962391133416434026805125",
    "1068637569658805762318411432081459704427",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "1723599536204470635113497313051694197046",
    "106633419293027594483292114003604846516",
    "69156619694491663387050862550003969596",
    "139811699956511703589497305218828960943",
    "12583040371049054649997982659979050806",
    "18924474281332607947427114014473837479",
    "127384926811241171998194025864122303075",
    "172260194559773182629656345293376304049",
    "1403577039181256549912198932270946634710",
    "74929093371794978701026743813799616289",
    "9085913821388381438405004062018594468",
    "154911443990380340341563367924870465980",
    "36990817497430174858508344623774643994",
    "76610361547970390014041401956375253519",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "176283044632245812574533887137304559068"
  ]
}
