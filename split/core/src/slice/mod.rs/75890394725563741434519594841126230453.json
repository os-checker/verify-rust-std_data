{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [mem::maybe_uninit::MaybeUninit<(i8, u16, i32, u64, isize)>]>::get_unchecked_mut::<ops::range::RangeTo<usize>>",
  "hash": "75890394725563741434519594841126230453",
  "hash_direct": "166633035023346709895428305479985177568",
  "src": "pub const unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n    where\n        I: [const] SliceIndex<Self>,\n    {\n        // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;\n        // the slice is dereferenceable because `self` is a safe reference.\n        // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n        unsafe { &mut *index.get_unchecked_mut(self) }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "131632623155026531303545583214835257543",
    "550320954593909230917838609017524313559",
    "1661362199156581598615941633375312675136",
    "153812760318012419804438540720194116726",
    "1464713233704017944416382115502018620118",
    "84580457401506839910573102725714505987"
  ]
}
