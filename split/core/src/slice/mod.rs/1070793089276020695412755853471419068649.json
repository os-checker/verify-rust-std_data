{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [u32]>::align_to::<u8>",
  "hash": "1070793089276020695412755853471419068649",
  "hash_direct": "79242457097190180412397918816711193013",
  "src": "pub unsafe fn align_to<U>(&self) -> (&[T], &[U], &[T]) {\n        // Note that most of this function will be constant-evaluated,\n        if U::IS_ZST || T::IS_ZST {\n            // handle ZSTs specially, which is â€“ don't handle them at all.\n            return (self, &[], &[]);\n        }\n\n        // First, find at what point do we split between the first and 2nd slice. Easy with\n        // ptr.align_offset.\n        let ptr = self.as_ptr();\n        // SAFETY: See the `align_to_mut` method for the detailed safety comment.\n        let offset = unsafe { crate::ptr::align_offset(ptr, align_of::<U>()) };\n        if offset > self.len() {\n            (self, &[], &[])\n        } else {\n            let (left, rest) = self.split_at(offset);\n            let (us_len, ts_len) = rest.align_to_offsets::<U>();\n            // Inform Miri that we want to consider the \"middle\" pointer to be suitably aligned.\n            #[cfg(miri)]\n            crate::intrinsics::miri_promise_symbolic_alignment(\n                rest.as_ptr().cast(),\n                align_of::<U>(),\n            );\n            // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,\n            // since the caller guarantees that we can transmute `T` to `U` safely.\n            unsafe {\n                (\n                    left,\n                    from_raw_parts(rest.as_ptr() as *const U, us_len),\n                    from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),\n                )\n            }\n        }\n    }",
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "1318686654956897216711385591645864997868",
    "168545836479171427075036933182194130275",
    "107365534946901948286099583667090509800",
    "1712898201300478840215074793236064467963",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "171004500602768806114294316369927563883",
    "89451239044445474983747370988275294790",
    "163315299660315221408931673209847063407",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "14519802542504413592318552666121024534",
    "316650073974070898314677646691025099244",
    "161273812808914258166092947401312628161",
    "10280076113730517359836576566793155285",
    "1064203217473128011511952902978152301917",
    "25269069644916694782526525713115896132",
    "1466741941324657487217965648919115545458",
    "920713391853314947217397224819823471928",
    "1812427325380537087215256536926001397541",
    "7212489125043360126050421015806745577",
    "102021136910342688637444855606475620024",
    "152928245264552852917025301865021459252",
    "179654496502614639316000517910785552386",
    "7839859953712079114640771271960005865",
    "180126912453652104473132457509626900161",
    "1149265318701628438811160570489210589004",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
