{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [()]>::align_to_mut::<char>",
  "hash": "1341370214380392676817135638514854538350",
  "hash_direct": "121192245779298981159424817929081054088",
  "src": "pub unsafe fn align_to_mut<U>(&mut self) -> (&mut [T], &mut [U], &mut [T]) {\n        // Note that most of this function will be constant-evaluated,\n        if U::IS_ZST || T::IS_ZST {\n            // handle ZSTs specially, which is â€“ don't handle them at all.\n            return (self, &mut [], &mut []);\n        }\n\n        // First, find at what point do we split between the first and 2nd slice. Easy with\n        // ptr.align_offset.\n        let ptr = self.as_ptr();\n        // SAFETY: Here we are ensuring we will use aligned pointers for U for the\n        // rest of the method. This is done by passing a pointer to &[T] with an\n        // alignment targeted for U.\n        // `crate::ptr::align_offset` is called with a correctly aligned and\n        // valid pointer `ptr` (it comes from a reference to `self`) and with\n        // a size that is a power of two (since it comes from the alignment for U),\n        // satisfying its safety constraints.\n        let offset = unsafe { crate::ptr::align_offset(ptr, align_of::<U>()) };\n        if offset > self.len() {\n            (self, &mut [], &mut [])\n        } else {\n            let (left, rest) = self.split_at_mut(offset);\n            let (us_len, ts_len) = rest.align_to_offsets::<U>();\n            let rest_len = rest.len();\n            let mut_ptr = rest.as_mut_ptr();\n            // Inform Miri that we want to consider the \"middle\" pointer to be suitably aligned.\n            #[cfg(miri)]\n            crate::intrinsics::miri_promise_symbolic_alignment(\n                mut_ptr.cast() as *const (),\n                align_of::<U>(),\n            );\n            // We can't use `rest` again after this, that would invalidate its alias `mut_ptr`!\n            // SAFETY: see comments for `align_to`.\n            unsafe {\n                (\n                    left,\n                    from_raw_parts_mut(mut_ptr as *mut U, us_len),\n                    from_raw_parts_mut(mut_ptr.add(rest_len - ts_len), ts_len),\n                )\n            }\n        }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "24899707394772763509340058915194816546",
    "154632036321720824021555629139300729764",
    "274291830502248510811445962002553983266",
    "86133515756163850188547131179003511107",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "145782911555955994657420671920868302508",
    "115536848358193506319642622868201624499",
    "152599612354742914567231948237776357721",
    "108552149900633290919250115311635650035",
    "779784849012811898113018314751156098928",
    "1573495954036948654416521138177013796438",
    "1521850508245734630418167718667247570637",
    "449637264080571459055009589071427003",
    "1606030480809784422315766327258874816074",
    "204296572780863747512001934371932616105",
    "1447601486929668150610263772015915174545",
    "147035600006627515794000337732028394529",
    "74643398536132358324182650117968660381",
    "177474564494500311398028947481309393070",
    "1485559670337968087615057608913190259809",
    "31063796054136311127461780546361866874",
    "606608081756831098117273329568996374994",
    "1262268302406396300513565250820649213634",
    "1027590512138995399024066666285567387",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
