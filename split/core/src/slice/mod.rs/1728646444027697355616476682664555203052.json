{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [mem::maybe_uninit::MaybeUninit<(u8, u8)>]>::get_unchecked_mut::<usize>",
  "hash": "1728646444027697355616476682664555203052",
  "hash_direct": "294736375417059550415910122013553716187",
  "src": "pub const unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n    where\n        I: [const] SliceIndex<Self>,\n    {\n        // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;\n        // the slice is dereferenceable because `self` is a safe reference.\n        // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n        unsafe { &mut *index.get_unchecked_mut(self) }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "58316628287730772615136146098355746411",
    "781449874781748605712179065288679828105",
    "23482827877992812013412502612887362035",
    "1504286091581735299715570781132246701377"
  ]
}
