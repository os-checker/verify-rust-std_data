{
  "file": "core/src/slice/mod.rs",
  "name": "core::slice::<impl [u8]>::align_to::<u16>",
  "hash": "171502924270126586939968106035583740198",
  "hash_direct": "807619137842744541013372091552002917536",
  "src": "pub unsafe fn align_to<U>(&self) -> (&[T], &[U], &[T]) {\n        // Note that most of this function will be constant-evaluated,\n        if U::IS_ZST || T::IS_ZST {\n            // handle ZSTs specially, which is â€“ don't handle them at all.\n            return (self, &[], &[]);\n        }\n\n        // First, find at what point do we split between the first and 2nd slice. Easy with\n        // ptr.align_offset.\n        let ptr = self.as_ptr();\n        // SAFETY: See the `align_to_mut` method for the detailed safety comment.\n        let offset = unsafe { crate::ptr::align_offset(ptr, align_of::<U>()) };\n        if offset > self.len() {\n            (self, &[], &[])\n        } else {\n            let (left, rest) = self.split_at(offset);\n            let (us_len, ts_len) = rest.align_to_offsets::<U>();\n            // Inform Miri that we want to consider the \"middle\" pointer to be suitably aligned.\n            #[cfg(miri)]\n            crate::intrinsics::miri_promise_symbolic_alignment(\n                rest.as_ptr().cast(),\n                align_of::<U>(),\n            );\n            // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,\n            // since the caller guarantees that we can transmute `T` to `U` safely.\n            unsafe {\n                (\n                    left,\n                    from_raw_parts(rest.as_ptr() as *const U, us_len),\n                    from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),\n                )\n            }\n        }\n    }",
  "callees": [
    "12281449246394340237926324936375242532",
    "99835071136844477394667148890151411684",
    "73694171442177138896992135977130617471",
    "181267529910573756716102767087485333561",
    "1362727304153836450215186853291845605124",
    "79817071675776388295206212610749591701",
    "1824545319189397521315695847785602896178",
    "1022803319099694746713266409355997953681",
    "177987519138314399017412680212925096921",
    "97566299569839892074656028861613377837",
    "917596525785715091311548338319238057837",
    "1055043272310861592713228670863657256034",
    "17976542625295060605041426324269334020",
    "897265533945643607115272871669854221703",
    "89502211078669479795623704974378882516",
    "170846580729842163074659927269266210653",
    "8010637041282557608011263416999007001",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "146612017564224181584303574960223420416",
    "63085389524472853348886374617170044294",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "20743252454400330067347997888777335224",
    "181953690662554297912505335505865467275",
    "927601772743169303216908637897944691801",
    "1574198065840570931715496922327374750806",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "127965419896399948626970707982837068770",
    "121866230926415018332270093276707107239",
    "222498892104036848916498256494801876148",
    "1670871865166106544517920089333181878250",
    "29967883548165253139037276138762272965",
    "1427536526616347568511859223439081842037",
    "967202211415186331811049433872676554081",
    "47672539441842164771342608976601968881",
    "52630605772870343943441445399186965319",
    "156382324379294206645788345239008516755",
    "26513880466180391136266502522707955176",
    "38122023399861248961841700193863605685",
    "471059197914006352117967940518452112349",
    "356896403557560017460350669106551612",
    "116003191352895236935716644142521429105",
    "916552609649539653110630350571106092626",
    "112989397975222255532054380452996322405",
    "734748700356449319315300238482033757944",
    "597683522621928614711119364722938279780",
    "17341452779707394601695269753709495351"
  ]
}
