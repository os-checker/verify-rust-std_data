{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [u64]>::align_to_mut::<u32>",
  "hash": "45022774768661913681595999082953652397",
  "hash_direct": "100963610057269487744097419203031749470",
  "src": "pub unsafe fn align_to_mut<U>(&mut self) -> (&mut [T], &mut [U], &mut [T]) {\n        // Note that most of this function will be constant-evaluated,\n        if U::IS_ZST || T::IS_ZST {\n            // handle ZSTs specially, which is â€“ don't handle them at all.\n            return (self, &mut [], &mut []);\n        }\n\n        // First, find at what point do we split between the first and 2nd slice. Easy with\n        // ptr.align_offset.\n        let ptr = self.as_ptr();\n        // SAFETY: Here we are ensuring we will use aligned pointers for U for the\n        // rest of the method. This is done by passing a pointer to &[T] with an\n        // alignment targeted for U.\n        // `crate::ptr::align_offset` is called with a correctly aligned and\n        // valid pointer `ptr` (it comes from a reference to `self`) and with\n        // a size that is a power of two (since it comes from the alignment for U),\n        // satisfying its safety constraints.\n        let offset = unsafe { crate::ptr::align_offset(ptr, align_of::<U>()) };\n        if offset > self.len() {\n            (self, &mut [], &mut [])\n        } else {\n            let (left, rest) = self.split_at_mut(offset);\n            let (us_len, ts_len) = rest.align_to_offsets::<U>();\n            let rest_len = rest.len();\n            let mut_ptr = rest.as_mut_ptr();\n            // Inform Miri that we want to consider the \"middle\" pointer to be suitably aligned.\n            #[cfg(miri)]\n            crate::intrinsics::miri_promise_symbolic_alignment(\n                mut_ptr.cast() as *const (),\n                align_of::<U>(),\n            );\n            // We can't use `rest` again after this, that would invalidate its alias `mut_ptr`!\n            // SAFETY: see comments for `align_to`.\n            unsafe {\n                (\n                    left,\n                    from_raw_parts_mut(mut_ptr as *mut U, us_len),\n                    from_raw_parts_mut(mut_ptr.add(rest_len - ts_len), ts_len),\n                )\n            }\n        }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "158959414668720189031913592930207227087",
    "234227229089476163612421358661318231265",
    "99603598099498707762068107842012164044",
    "97524482424029537145306757146156791937",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "157260714127207434086876595811521606728",
    "102380357323114470404923118519025924553",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "157087143386868340562001447915050087882",
    "888830239597289289217982654906752590772",
    "781405339110205334418431474887374535562",
    "108552149900633290919250115311635650035",
    "108167761755204755622502645340083741304",
    "1792821438995724413910466562286197803325",
    "293645540748671545017999185713660079650",
    "123046923276340098447791937349790972152",
    "701911412504141078410269302870269408721",
    "1524503919708685464516305666418844827971",
    "264680247558426853713849815515070475645",
    "1340458596775338220918296363835669840665",
    "1040629275093129796014207926380465218843",
    "170598776575892035805056831155596851227",
    "1306045899052901120417965651359500953842",
    "138382391501683766369610659660808390106",
    "982812517398244847818134688650878457542",
    "1262268302406396300513565250820649213634",
    "1320801548407176755117757300189063729311",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
