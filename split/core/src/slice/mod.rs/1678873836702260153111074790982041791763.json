{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [mem::maybe_uninit::MaybeUninit<intrinsics::verify::u8_struct>]>::get_unchecked_mut::<ops::range::RangeTo<usize>>",
  "hash": "1678873836702260153111074790982041791763",
  "hash_direct": "1252808649835900214010383042705252353562",
  "src": "pub const unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n    where\n        I: ~const SliceIndex<Self>,\n    {\n        // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;\n        // the slice is dereferenceable because `self` is a safe reference.\n        // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n        unsafe { &mut *index.get_unchecked_mut(self) }\n    }",
  "callees": [
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "33113476794003137927215037454840543832",
    "66215810171327678282240979718074043875",
    "777807283988205692417978826813881666849",
    "1068118711925509901317029648632578742156",
    "9455997133118925581828981048973035128",
    "109562649191060178038182565159088266799"
  ]
}
