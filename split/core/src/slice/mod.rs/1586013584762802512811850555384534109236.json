{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [mem::maybe_uninit::MaybeUninit<(char, u8)>]>::get_unchecked_mut::<ops::range::RangeTo<usize>>",
  "hash": "1586013584762802512811850555384534109236",
  "hash_direct": "160124520614299505942982142630102699214",
  "src": "pub const unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n    where\n        I: ~const SliceIndex<Self>,\n    {\n        // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;\n        // the slice is dereferenceable because `self` is a safe reference.\n        // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n        unsafe { &mut *index.get_unchecked_mut(self) }\n    }",
  "callees": [
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "4990756322398885889067371377127489863",
    "50253568519481701847154759086382746704",
    "626061183747735738311219292790402372629",
    "709016751910675343916801043074966039020",
    "902611429001890371314444169506717726806",
    "109562649191060178038182565159088266799"
  ]
}
