{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [u32]>::align_to_mut::<u32>",
  "hash": "1006574356131049627718352239795674175002",
  "hash_direct": "1510971461091684042216228086047000266769",
  "src": "pub unsafe fn align_to_mut<U>(&mut self) -> (&mut [T], &mut [U], &mut [T]) {\n        // Note that most of this function will be constant-evaluated,\n        if U::IS_ZST || T::IS_ZST {\n            // handle ZSTs specially, which is â€“ don't handle them at all.\n            return (self, &mut [], &mut []);\n        }\n\n        // First, find at what point do we split between the first and 2nd slice. Easy with\n        // ptr.align_offset.\n        let ptr = self.as_ptr();\n        // SAFETY: Here we are ensuring we will use aligned pointers for U for the\n        // rest of the method. This is done by passing a pointer to &[T] with an\n        // alignment targeted for U.\n        // `crate::ptr::align_offset` is called with a correctly aligned and\n        // valid pointer `ptr` (it comes from a reference to `self`) and with\n        // a size that is a power of two (since it comes from the alignment for U),\n        // satisfying its safety constraints.\n        let offset = unsafe { crate::ptr::align_offset(ptr, align_of::<U>()) };\n        if offset > self.len() {\n            (self, &mut [], &mut [])\n        } else {\n            let (left, rest) = self.split_at_mut(offset);\n            let (us_len, ts_len) = rest.align_to_offsets::<U>();\n            let rest_len = rest.len();\n            let mut_ptr = rest.as_mut_ptr();\n            // Inform Miri that we want to consider the \"middle\" pointer to be suitably aligned.\n            #[cfg(miri)]\n            crate::intrinsics::miri_promise_symbolic_alignment(\n                mut_ptr.cast() as *const (),\n                align_of::<U>(),\n            );\n            // We can't use `rest` again after this, that would invalidate its alias `mut_ptr`!\n            // SAFETY: see comments for `align_to`.\n            unsafe {\n                (\n                    left,\n                    from_raw_parts_mut(mut_ptr as *mut U, us_len),\n                    from_raw_parts_mut(mut_ptr.add(rest_len - ts_len), ts_len),\n                )\n            }\n        }\n    }",
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "1318686654956897216711385591645864997868",
    "107365534946901948286099583667090509800",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "89451239044445474983747370988275294790",
    "163315299660315221408931673209847063407",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "81308668944592722359377106915600840841",
    "161273812808914258166092947401312628161",
    "10280076113730517359836576566793155285",
    "82891569163089095483059867218455315050",
    "169017152061146820209827866672499117723",
    "382102276782495437517959715810121609849",
    "754413599125328860914768135609805790677",
    "1090169688290078836317604971221909991967",
    "920713391853314947217397224819823471928",
    "14698784508981540506641256144354999971",
    "57929735580122959742161782969564792659",
    "41239146827618740624044326144221292727",
    "1291498518568449446412940687040355204823",
    "393974833682574441515290398983271504453",
    "188477357021356532517716614779858660745",
    "1624379938933529147317881339677401093926",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
