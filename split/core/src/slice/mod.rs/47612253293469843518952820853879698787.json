{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [f32]>::swap",
  "hash": "47612253293469843518952820853879698787",
  "hash_direct": "169725889484019408156263639913125067561",
  "src": "pub const fn swap(&mut self, a: usize, b: usize) {\n        // FIXME: use swap_unchecked here (https://github.com/rust-lang/rust/pull/88540#issuecomment-944344343)\n        // Can't take two mutable loans from one vector, so instead use raw pointers.\n        let pa = &raw mut self[a];\n        let pb = &raw mut self[b];\n        // SAFETY: `pa` and `pb` have been created from safe mutable references and refer\n        // to elements in the slice and therefore are guaranteed to be valid and aligned.\n        // Note that accessing the elements behind `a` and `b` is checked and will\n        // panic when out of bounds.\n        unsafe {\n            ptr::swap(pa, pb);\n        }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "1726194437602966340016757301249689204343",
    "1243884323998816418613498969745733613209",
    "468393518768745234312254314427889265270",
    "1554592054844705604815491083685925038228",
    "31244240180128544175272526361568808560",
    "1749362715435459353511933873995340031229",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "761861023504359043615820998596748928032",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "21053746991689950572086053362961811452",
    "96215875939356596816347523621977200521",
    "118249639070332596736236671801810198183",
    "684705619041318229017965376202785420997",
    "48269828393251912102754553129094534608",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
