{
  "file": "core/src/slice/mod.rs",
  "name": "core::slice::<impl [u8]>::align_to::<usize>",
  "hash": "1054699114304908737011830985850819465296",
  "hash_direct": "4135290804560478093062967744304154291",
  "src": "pub unsafe fn align_to<U>(&self) -> (&[T], &[U], &[T]) {\n        // Note that most of this function will be constant-evaluated,\n        if U::IS_ZST || T::IS_ZST {\n            // handle ZSTs specially, which is â€“ don't handle them at all.\n            return (self, &[], &[]);\n        }\n\n        // First, find at what point do we split between the first and 2nd slice. Easy with\n        // ptr.align_offset.\n        let ptr = self.as_ptr();\n        // SAFETY: See the `align_to_mut` method for the detailed safety comment.\n        let offset = unsafe { crate::ptr::align_offset(ptr, align_of::<U>()) };\n        if offset > self.len() {\n            (self, &[], &[])\n        } else {\n            let (left, rest) = self.split_at(offset);\n            let (us_len, ts_len) = rest.align_to_offsets::<U>();\n            // Inform Miri that we want to consider the \"middle\" pointer to be suitably aligned.\n            #[cfg(miri)]\n            crate::intrinsics::miri_promise_symbolic_alignment(\n                rest.as_ptr().cast(),\n                align_of::<U>(),\n            );\n            // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,\n            // since the caller guarantees that we can transmute `T` to `U` safely.\n            unsafe {\n                (\n                    left,\n                    from_raw_parts(rest.as_ptr() as *const U, us_len),\n                    from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),\n                )\n            }\n        }\n    }",
  "callees": [
    "12281449246394340237926324936375242532",
    "99835071136844477394667148890151411684",
    "73694171442177138896992135977130617471",
    "181267529910573756716102767087485333561",
    "1565020019114964267317960250432518071469",
    "79817071675776388295206212610749591701",
    "1824545319189397521315695847785602896178",
    "141051090481435808783715316343782561731",
    "97566299569839892074656028861613377837",
    "439022777647632696517945103495108037392",
    "1055043272310861592713228670863657256034",
    "149201007125728463455320865149411692001",
    "5731834383683152134719350346688847365",
    "51372523453683089364244340980133861262",
    "169382045895387326079929663684999712557",
    "105784042461548404615622384875082564775",
    "8896238559920380735332622633484699245",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "146612017564224181584303574960223420416",
    "63085389524472853348886374617170044294",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "139907086782363519768211215911218405340",
    "181953690662554297912505335505865467275",
    "11698000759949897711048017399610553732",
    "112050202507687194710833208384567936327",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "121866230926415018332270093276707107239",
    "52131524192159307112338547729152425310",
    "1436162929177886985111617736217739715982",
    "1670871865166106544517920089333181878250",
    "1427536526616347568511859223439081842037",
    "49486676450572692257520937044805320286",
    "87939428955807673686027838603829456410",
    "47672539441842164771342608976601968881",
    "22088878678923505746012913266394000328",
    "1312830356245743083712904935176137025355",
    "68527355879072987775488394988812200583",
    "907377439821672286413857727237844849140",
    "1088232294858530192217029531727323979822",
    "82217186331112526329158372954156056404",
    "116003191352895236935716644142521429105",
    "45381972001922168241039115176097203457",
    "112989397975222255532054380452996322405",
    "734748700356449319315300238482033757944",
    "56586361413793673417653620039252553370",
    "192903257417349624310389255189038584608"
  ]
}
