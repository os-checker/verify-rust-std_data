{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [mem::maybe_uninit::MaybeUninit<(i8, u16, i32, u64, isize)>]>::get_unchecked_mut::<ops::range::RangeTo<usize>>",
  "hash": "467696555487875738415256901455136668347",
  "hash_direct": "148337653202625998881092593734529791519",
  "src": "pub const unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n    where\n        I: ~const SliceIndex<Self>,\n    {\n        // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;\n        // the slice is dereferenceable because `self` is a safe reference.\n        // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n        unsafe { &mut *index.get_unchecked_mut(self) }\n    }",
  "callees": [
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "111126056559924131403631134608834179351",
    "132021729902078457001269646631864553717",
    "739845899250793455714949207997993508240",
    "1535946633560488689017318889738338090038",
    "64043555870402104209564832724297189017",
    "109562649191060178038182565159088266799"
  ]
}
