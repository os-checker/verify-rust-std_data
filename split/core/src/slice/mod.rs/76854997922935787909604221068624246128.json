{
  "file": "core/src/slice/mod.rs",
  "name": "slice::<impl [u16]>::align_to::<bool>",
  "hash": "76854997922935787909604221068624246128",
  "hash_direct": "515361581730201965415731374453281092416",
  "src": "pub unsafe fn align_to<U>(&self) -> (&[T], &[U], &[T]) {\n        // Note that most of this function will be constant-evaluated,\n        if U::IS_ZST || T::IS_ZST {\n            // handle ZSTs specially, which is â€“ don't handle them at all.\n            return (self, &[], &[]);\n        }\n\n        // First, find at what point do we split between the first and 2nd slice. Easy with\n        // ptr.align_offset.\n        let ptr = self.as_ptr();\n        // SAFETY: See the `align_to_mut` method for the detailed safety comment.\n        let offset = unsafe { crate::ptr::align_offset(ptr, align_of::<U>()) };\n        if offset > self.len() {\n            (self, &[], &[])\n        } else {\n            let (left, rest) = self.split_at(offset);\n            let (us_len, ts_len) = rest.align_to_offsets::<U>();\n            // Inform Miri that we want to consider the \"middle\" pointer to be suitably aligned.\n            #[cfg(miri)]\n            crate::intrinsics::miri_promise_symbolic_alignment(\n                rest.as_ptr().cast(),\n                align_of::<U>(),\n            );\n            // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,\n            // since the caller guarantees that we can transmute `T` to `U` safely.\n            unsafe {\n                (\n                    left,\n                    from_raw_parts(rest.as_ptr() as *const U, us_len),\n                    from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),\n                )\n            }\n        }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "31905993340822523516642016646258431532",
    "225952500164735912514546972505243856357",
    "877140690957637017516835725769869964204",
    "1231693553175053426510927854933676924735",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "1484317575113356170418007905627406545354",
    "176176883158605747429644823526988905884",
    "68697607470231643498534298785222425436",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "1170281421462382215414983065948529231104",
    "15240147311945697125183643526666791600",
    "88886021662826014977863229635206939558",
    "108552149900633290919250115311635650035",
    "84667914416712377373518185880397876833",
    "675922915413654873717954021931812075786",
    "1576269977830174737815464949654377708745",
    "1362357234112178145510267224500967347357",
    "112298542209523882782478361650492090395",
    "157546711783880326776009083471729335630",
    "15472993023242622644736942317682895384",
    "749508126873199606714139523156951300610",
    "1515124957656164019513280095720948173138",
    "1703660345011483495218041991169194027213",
    "56448737519681294968960799914289695112",
    "2270854481895276807307011598962175177",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
