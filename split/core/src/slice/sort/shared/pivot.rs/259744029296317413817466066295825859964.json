{
  "file": "core/src/slice/sort/shared/pivot.rs",
  "name": "slice::sort::shared::pivot::median3::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "259744029296317413817466066295825859964",
  "hash_direct": "110673844001564689357526878691514569879",
  "src": "fn median3<T, F: FnMut(&T, &T) -> bool>(a: &T, b: &T, c: &T, is_less: &mut F) -> *const T {\n    // Compiler tends to make this branchless when sensible, and avoids the\n    // third comparison when not.\n    let x = is_less(a, b);\n    let y = is_less(a, c);\n    if x == y {\n        // If x=y=0 then b, c <= a. In this case we want to return max(b, c).\n        // If x=y=1 then a < b, c. In this case we want to return min(b, c).\n        // By toggling the outcome of b < c using XOR x we get this behavior.\n        let z = is_less(b, c);\n        if z ^ x { c } else { b }\n    } else {\n        // Either c <= a < b or b <= a < c, thus a is our median.\n        a\n    }\n}",
  "callees": [
    "81385294222362714685518950164453635767",
    "10436405171744302504267274923569342957",
    "85253214614932633916524759824229868238",
    "1342255621888147885315125004424529991795",
    "1783659889351469353310279621573179415628",
    "52088871005951181071266739164392301923"
  ]
}
