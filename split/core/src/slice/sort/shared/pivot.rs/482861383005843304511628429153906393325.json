{
  "file": "core/src/slice/sort/shared/pivot.rs",
  "name": "slice::sort::shared::pivot::choose_pivot::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "482861383005843304511628429153906393325",
  "hash_direct": "126342447263610021816253980172726309102",
  "src": "pub fn choose_pivot<T, F: FnMut(&T, &T) -> bool>(v: &[T], is_less: &mut F) -> usize {\n    // We use unsafe code and raw pointers here because we're dealing with\n    // heavy recursion. Passing safe slices around would involve a lot of\n    // branches and function call overhead.\n\n    let len = v.len();\n    if len < 8 {\n        intrinsics::abort();\n    }\n\n    // SAFETY: a, b, c point to initialized regions of len_div_8 elements,\n    // satisfying median3 and median3_rec's preconditions as v_base points\n    // to an initialized region of n = len elements.\n    let index = unsafe {\n        let v_base = v.as_ptr();\n        let len_div_8 = len / 8;\n\n        let a = v_base; // [0, floor(n/8))\n        let b = v_base.add(len_div_8 * 4); // [4*floor(n/8), 5*floor(n/8))\n        let c = v_base.add(len_div_8 * 7); // [7*floor(n/8), 8*floor(n/8))\n\n        if len < PSEUDO_MEDIAN_REC_THRESHOLD {\n            median3(&*a, &*b, &*c, is_less).offset_from_unsigned(v_base)\n        } else {\n            median3_rec(a, b, c, len_div_8, is_less).offset_from_unsigned(v_base)\n        }\n    };\n    // SAFETY: preconditions must have been met for offset_from_unsigned()\n    unsafe {\n        hint::assert_unchecked(index < v.len());\n        index\n    }\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "131203065817488211067140136749599673893",
    "258820287469578611817448591488600041899",
    "6962362284417680556415378392413733050",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "1529875730411415803517587657844377161231",
    "23815256893174302637797703719499456373",
    "872205114925099333011215560138034927031",
    "1033976944350554769714411313899354111723",
    "935865976961147776913102301421189848381",
    "97892229237199250718782565098232937194",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "29910668401302440137796026586948212988",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "8161291837423649642305263678029669375",
    "1214574077763705187516383491048990527345",
    "143085707185960270575150342734534970533",
    "104610047409876224445341320655097374986",
    "301523161726526337515800343411294147396",
    "294184564209653742213128939253919937053",
    "1466671174949117389017784166539836362296",
    "65404810435876558293400972824523765667",
    "36990817497430174858508344623774643994",
    "1703660345011483495218041991169194027213",
    "92658835324565758495130762072978604201",
    "739520556846959085018120036998133255835"
  ]
}
