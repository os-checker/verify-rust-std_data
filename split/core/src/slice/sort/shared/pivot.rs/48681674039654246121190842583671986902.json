{
  "file": "core/src/slice/sort/shared/pivot.rs",
  "name": "slice::sort::shared::pivot::choose_pivot::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "48681674039654246121190842583671986902",
  "hash_direct": "126342447263610021816253980172726309102",
  "src": "pub fn choose_pivot<T, F: FnMut(&T, &T) -> bool>(v: &[T], is_less: &mut F) -> usize {\n    // We use unsafe code and raw pointers here because we're dealing with\n    // heavy recursion. Passing safe slices around would involve a lot of\n    // branches and function call overhead.\n\n    let len = v.len();\n    if len < 8 {\n        intrinsics::abort();\n    }\n\n    // SAFETY: a, b, c point to initialized regions of len_div_8 elements,\n    // satisfying median3 and median3_rec's preconditions as v_base points\n    // to an initialized region of n = len elements.\n    let index = unsafe {\n        let v_base = v.as_ptr();\n        let len_div_8 = len / 8;\n\n        let a = v_base; // [0, floor(n/8))\n        let b = v_base.add(len_div_8 * 4); // [4*floor(n/8), 5*floor(n/8))\n        let c = v_base.add(len_div_8 * 7); // [7*floor(n/8), 8*floor(n/8))\n\n        if len < PSEUDO_MEDIAN_REC_THRESHOLD {\n            median3(&*a, &*b, &*c, is_less).offset_from_unsigned(v_base)\n        } else {\n            median3_rec(a, b, c, len_div_8, is_less).offset_from_unsigned(v_base)\n        }\n    };\n    // SAFETY: preconditions must have been met for offset_from_unsigned()\n    unsafe {\n        hint::assert_unchecked(index < v.len());\n        index\n    }\n}",
  "callees": [
    "81385294222362714685518950164453635767",
    "10436405171744302504267274923569342957",
    "47323665595455568617290020941376774286",
    "11139495935450220752286966752445431093",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "47278574192031232971799194590021398469",
    "16824420916691935049705640393259467449",
    "267397640077708419917774511588833123757",
    "85253214614932633916524759824229868238",
    "1342255621888147885315125004424529991795",
    "841346702487865802717731804342903065853",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1783659889351469353310279621573179415628",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "152018209062913109616942758022114057971",
    "14289085791843058303972699274315536239",
    "890071058825386332013290477145660140073",
    "119976524039045110771832514217196520210",
    "109469966708849791032487464821451459508",
    "52088871005951181071266739164392301923",
    "259744029296317413817466066295825859964",
    "131346070945710284288571495283951938032",
    "90175179397242369455372712796954544135",
    "7839859953712079114640771271960005865",
    "1137271765924114987514947403158445640283",
    "399232661239117480517401994520839366833"
  ]
}
