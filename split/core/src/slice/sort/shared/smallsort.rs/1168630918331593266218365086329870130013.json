{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::sort13_optimal::<f32, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "1168630918331593266218365086329870130013",
  "hash_direct": "1056968271266401075512434304752403919169",
  "src": "fn sort13_optimal<T, F>(v: &mut [T], is_less: &mut F)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    if v.len() < 13 {\n        intrinsics::abort();\n    }\n\n    let v_base = v.as_mut_ptr();\n\n    // Optimal sorting network see:\n    // https://bertdobbelaere.github.io/sorting_networks.html.\n\n    // SAFETY: We checked the len.\n    unsafe {\n        swap_if_less(v_base, 0, 12, is_less);\n        swap_if_less(v_base, 1, 10, is_less);\n        swap_if_less(v_base, 2, 9, is_less);\n        swap_if_less(v_base, 3, 7, is_less);\n        swap_if_less(v_base, 5, 11, is_less);\n        swap_if_less(v_base, 6, 8, is_less);\n        swap_if_less(v_base, 1, 6, is_less);\n        swap_if_less(v_base, 2, 3, is_less);\n        swap_if_less(v_base, 4, 11, is_less);\n        swap_if_less(v_base, 7, 9, is_less);\n        swap_if_less(v_base, 8, 10, is_less);\n        swap_if_less(v_base, 0, 4, is_less);\n        swap_if_less(v_base, 1, 2, is_less);\n        swap_if_less(v_base, 3, 6, is_less);\n        swap_if_less(v_base, 7, 8, is_less);\n        swap_if_less(v_base, 9, 10, is_less);\n        swap_if_less(v_base, 11, 12, is_less);\n        swap_if_less(v_base, 4, 6, is_less);\n        swap_if_less(v_base, 5, 9, is_less);\n        swap_if_less(v_base, 8, 11, is_less);\n        swap_if_less(v_base, 10, 12, is_less);\n        swap_if_less(v_base, 0, 5, is_less);\n        swap_if_less(v_base, 3, 8, is_less);\n        swap_if_less(v_base, 4, 7, is_less);\n        swap_if_less(v_base, 6, 11, is_less);\n        swap_if_less(v_base, 9, 10, is_less);\n        swap_if_less(v_base, 0, 1, is_less);\n        swap_if_less(v_base, 2, 5, is_less);\n        swap_if_less(v_base, 6, 9, is_less);\n        swap_if_less(v_base, 7, 8, is_less);\n        swap_if_less(v_base, 10, 11, is_less);\n        swap_if_less(v_base, 1, 3, is_less);\n        swap_if_less(v_base, 2, 4, is_less);\n        swap_if_less(v_base, 5, 6, is_less);\n        swap_if_less(v_base, 9, 10, is_less);\n        swap_if_less(v_base, 1, 2, is_less);\n        swap_if_less(v_base, 3, 4, is_less);\n        swap_if_less(v_base, 5, 7, is_less);\n        swap_if_less(v_base, 6, 8, is_less);\n        swap_if_less(v_base, 2, 3, is_less);\n        swap_if_less(v_base, 4, 5, is_less);\n        swap_if_less(v_base, 6, 7, is_less);\n        swap_if_less(v_base, 8, 9, is_less);\n        swap_if_less(v_base, 3, 4, is_less);\n        swap_if_less(v_base, 5, 6, is_less);\n    }\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "842267059997019422815333829425931124000",
    "258820287469578611817448591488600041899",
    "108405325740194239468703699157912546754",
    "588974892899239543415856878986124229421",
    "512025234808573526812473141793642908853",
    "195906651498126693711873346609041151231",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "98948247701979796981383318440935444036",
    "1181047503821259640715862953390532475195",
    "685837618491054085418214840674583290794",
    "1203941343652735381418091052915140268463",
    "1745833431236583275112658403751359725410",
    "916265930722000173617239060415090889913",
    "105358205211415583910007752475065903432",
    "171478660599761938823798238921074606660",
    "1554592054844705604815491083685925038228",
    "31244240180128544175272526361568808560",
    "1749362715435459353511933873995340031229",
    "1280257502160233765816408910554470634604",
    "1157832635988226544312579101964623411278",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1239687241192450573815900328634536806436",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "939216601629970047517130593109292221833",
    "196947132396865061710647143094248738344",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "797634491229914867614080535361717737146",
    "463148830072667891214453452474049709022",
    "742648293927293403116298046442872262035",
    "50434367259982919184243988459294877425",
    "1814024728092996720912341531616753304217",
    "1069702212178127763314378987073339101494",
    "1803948104025856588218214767042593335285",
    "449637264080571459055009589071427003",
    "1220077814106487456211144053578469298836",
    "59577599673772235326466319876396498692",
    "124656679884072299719740859888952081738",
    "80493492398698236549394400339994883788",
    "166776697050612785113883264850514388619",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "76610361547970390014041401956375253519",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
