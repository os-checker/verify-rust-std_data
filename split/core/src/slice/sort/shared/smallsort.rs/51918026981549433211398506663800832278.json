{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::sort4_stable::<f32, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3165:41: 3165:47}>",
  "hash": "51918026981549433211398506663800832278",
  "hash_direct": "1561639638745924613315813428698343719095",
  "src": "pub unsafe fn sort4_stable<T, F: FnMut(&T, &T) -> bool>(\n    v_base: *const T,\n    dst: *mut T,\n    is_less: &mut F,\n) {\n    // By limiting select to picking pointers, we are guaranteed good cmov code-gen\n    // regardless of type T's size. Further this only does 5 instead of 6\n    // comparisons compared to a stable transposition 4 element sorting-network,\n    // and always copies each element exactly once.\n\n    // SAFETY: all pointers have offset at most 3 from v_base and dst, and are\n    // thus in-bounds by the precondition.\n    unsafe {\n        // Stably create two pairs a <= b and c <= d.\n        let c1 = is_less(&*v_base.add(1), &*v_base);\n        let c2 = is_less(&*v_base.add(3), &*v_base.add(2));\n        let a = v_base.add(c1 as usize);\n        let b = v_base.add(!c1 as usize);\n        let c = v_base.add(2 + c2 as usize);\n        let d = v_base.add(2 + (!c2 as usize));\n\n        // Compare (a, c) and (b, d) to identify max/min. We're left with two\n        // unknown elements, but because we are a stable sort we must know which\n        // one is leftmost and which one is rightmost.\n        // c3, c4 | min max unknown_left unknown_right\n        //  0,  0 |  a   d    b         c\n        //  0,  1 |  a   b    c         d\n        //  1,  0 |  c   d    a         b\n        //  1,  1 |  c   b    a         d\n        let c3 = is_less(&*c, &*a);\n        let c4 = is_less(&*d, &*b);\n        let min = hint::select_unpredictable(c3, c, a);\n        let max = hint::select_unpredictable(c4, b, d);\n        let unknown_left = hint::select_unpredictable(c3, a, hint::select_unpredictable(c4, c, b));\n        let unknown_right = hint::select_unpredictable(c4, d, hint::select_unpredictable(c3, b, c));\n\n        // Sort the last two unknown elements.\n        let c5 = is_less(&*unknown_right, &*unknown_left);\n        let lo = hint::select_unpredictable(c5, unknown_right, unknown_left);\n        let hi = hint::select_unpredictable(c5, unknown_left, unknown_right);\n\n        ptr::copy_nonoverlapping(min, dst, 1);\n        ptr::copy_nonoverlapping(lo, dst.add(1), 1);\n        ptr::copy_nonoverlapping(hi, dst.add(2), 1);\n        ptr::copy_nonoverlapping(max, dst.add(3), 1);\n    }\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "842267059997019422815333829425931124000",
    "258820287469578611817448591488600041899",
    "614245616664893827015428981560536142269",
    "588974892899239543415856878986124229421",
    "272361348126339150511002610720064829432",
    "866708020042406907314718060065758188604",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "71901952651970587475581820008514493941",
    "21823152912743153784992366015052637329",
    "175112052875320498919565231687966570341",
    "159954625414763837031752635655860900728",
    "152674157784593419216769873421433144452",
    "1504860913707788879912528238737452773888",
    "1554592054844705604815491083685925038228",
    "1596336242708767558610380242603204579634",
    "31244240180128544175272526361568808560",
    "1749362715435459353511933873995340031229",
    "1280257502160233765816408910554470634604",
    "1157832635988226544312579101964623411278",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "1239687241192450573815900328634536806436",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "17376629601737242896624702279584427848",
    "375960559020688079617955032586718986019",
    "168982609068613527704618957716390693902",
    "1330057056569147237418037907305446289339",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "96215875939356596816347523621977200521",
    "145608176270486528831437549097020014987",
    "132605809577090032073308126737078909198",
    "332969873952842765515657998139185731598",
    "110198453413901534315375840302302260813",
    "13034211047842984045869203849636957556",
    "293645540748671545017999185713660079650",
    "104462103040602924085297176652652961077",
    "124656679884072299719740859888952081738",
    "1006928117247909106515604664996585110540",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "74111286315405054421392461884745781298",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
