{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::merge_down::<f32, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3165:41: 3165:47}>",
  "hash": "62149718818216411739164816645132023320",
  "hash_direct": "201589551186614866018258674357949935473",
  "src": "unsafe fn merge_down<T, F: FnMut(&T, &T) -> bool>(\n    mut left_src: *const T,\n    mut right_src: *const T,\n    mut dst: *mut T,\n    is_less: &mut F,\n) -> (*const T, *const T, *mut T) {\n    // This is a branchless merge utility function.\n    // The equivalent code with a branch would be:\n    //\n    // if !is_less(&*right_src, &*left_src) {\n    //     ptr::copy_nonoverlapping(right_src, dst, 1);\n    //     right_src = right_src.wrapping_sub(1);\n    // } else {\n    //     ptr::copy_nonoverlapping(left_src, dst, 1);\n    //     left_src = left_src.wrapping_sub(1);\n    // }\n    // dst = dst.sub(1);\n\n    // SAFETY: The caller must guarantee that `left_src`, `right_src` are valid\n    // to read and `dst` is valid to write, while not aliasing.\n    unsafe {\n        let is_l = !is_less(&*right_src, &*left_src);\n        let src = if is_l { right_src } else { left_src };\n        ptr::copy_nonoverlapping(src, dst, 1);\n        right_src = right_src.wrapping_sub(is_l as usize);\n        left_src = left_src.wrapping_sub(!is_l as usize);\n        dst = dst.sub(1);\n    }\n\n    (left_src, right_src, dst)\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "842267059997019422815333829425931124000",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "118969608371033492241203013207235849818",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "1554592054844705604815491083685925038228",
    "31244240180128544175272526361568808560",
    "1749362715435459353511933873995340031229",
    "1280257502160233765816408910554470634604",
    "1157832635988226544312579101964623411278",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "427948772593900246015617695218292297348",
    "7858545234940505117539855476375371758",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "761861023504359043615820998596748928032",
    "1239687241192450573815900328634536806436",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "147426714049374313624852995509887346090",
    "183236159753291968595787354460555299002",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "96215875939356596816347523621977200521",
    "170477930193487407342654832140393402043",
    "17010093941313189584755672698701959371",
    "124656679884072299719740859888952081738",
    "48269828393251912102754553129094534608",
    "935658007883373388218268314737148286081",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
