{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::insertion_sort_shift_left::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3165:41: 3165:47}>",
  "hash": "1437868544591254349802129428243400316",
  "hash_direct": "991136309865311644916848380295792652461",
  "src": "pub fn insertion_sort_shift_left<T, F: FnMut(&T, &T) -> bool>(\n    v: &mut [T],\n    offset: usize,\n    is_less: &mut F,\n) {\n    let len = v.len();\n    if offset == 0 || offset > len {\n        intrinsics::abort();\n    }\n\n    // SAFETY: see individual comments.\n    unsafe {\n        // We write this basic loop directly using pointers, as when we use a\n        // for loop LLVM likes to unroll this loop which we do not want.\n        // SAFETY: v_end is the one-past-end pointer, and we checked that\n        // offset <= len, thus tail is also in-bounds.\n        let v_base = v.as_mut_ptr();\n        let v_end = v_base.add(len);\n        let mut tail = v_base.add(offset);\n        while tail != v_end {\n            // SAFETY: v_base and tail are both valid pointers to elements, and\n            // v_base < tail since we checked offset != 0.\n            insert_tail(v_base, tail, is_less);\n\n            // SAFETY: we checked that tail is not yet the one-past-end pointer.\n            tail = tail.add(1);\n        }\n    }\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "131203065817488211067140136749599673893",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "118969608371033492241203013207235849818",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "1773433010229001091613907777891715491506",
    "177198898458980010943989196887491139632",
    "27143329980388801218198615083747125661",
    "872205114925099333011215560138034927031",
    "1749362715435459353511933873995340031229",
    "1033976944350554769714411313899354111723",
    "935865976961147776913102301421189848381",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "29910668401302440137796026586948212988",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "371192579773467124910131766380195795041",
    "1771652388590607545712984509371277924879",
    "95361434355292140996541898939168217904",
    "293645540748671545017999185713660079650",
    "170477930193487407342654832140393402043",
    "16945391567286791139892170040202505549",
    "97035042303285179535964744919838693636",
    "150977970989936139035235426040927428810",
    "1731824179572293139318170269715532491601",
    "294184564209653742213128939253919937053",
    "1259501359551487769214603611193503299843",
    "745700687152575931811153636128696697474",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "935658007883373388218268314737148286081",
    "74111286315405054421392461884745781298",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
