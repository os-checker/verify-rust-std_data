{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::sort4_stable::<f32, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "1249566985082927014417876051479060017352",
  "hash_direct": "78699988999860702113261257772068984570",
  "src": "pub unsafe fn sort4_stable<T, F: FnMut(&T, &T) -> bool>(\n    v_base: *const T,\n    dst: *mut T,\n    is_less: &mut F,\n) {\n    // By limiting select to picking pointers, we are guaranteed good cmov code-gen\n    // regardless of type T's size. Further this only does 5 instead of 6\n    // comparisons compared to a stable transposition 4 element sorting-network,\n    // and always copies each element exactly once.\n\n    // SAFETY: all pointers have offset at most 3 from v_base and dst, and are\n    // thus in-bounds by the precondition.\n    unsafe {\n        // Stably create two pairs a <= b and c <= d.\n        let c1 = is_less(&*v_base.add(1), &*v_base);\n        let c2 = is_less(&*v_base.add(3), &*v_base.add(2));\n        let a = v_base.add(c1 as usize);\n        let b = v_base.add(!c1 as usize);\n        let c = v_base.add(2 + c2 as usize);\n        let d = v_base.add(2 + (!c2 as usize));\n\n        // Compare (a, c) and (b, d) to identify max/min. We're left with two\n        // unknown elements, but because we are a stable sort we must know which\n        // one is leftmost and which one is rightmost.\n        // c3, c4 | min max unknown_left unknown_right\n        //  0,  0 |  a   d    b         c\n        //  0,  1 |  a   b    c         d\n        //  1,  0 |  c   d    a         b\n        //  1,  1 |  c   b    a         d\n        let c3 = is_less(&*c, &*a);\n        let c4 = is_less(&*d, &*b);\n        let min = hint::select_unpredictable(c3, c, a);\n        let max = hint::select_unpredictable(c4, b, d);\n        let unknown_left = hint::select_unpredictable(c3, a, hint::select_unpredictable(c4, c, b));\n        let unknown_right = hint::select_unpredictable(c4, d, hint::select_unpredictable(c3, b, c));\n\n        // Sort the last two unknown elements.\n        let c5 = is_less(&*unknown_right, &*unknown_left);\n        let lo = hint::select_unpredictable(c5, unknown_right, unknown_left);\n        let hi = hint::select_unpredictable(c5, unknown_left, unknown_right);\n\n        ptr::copy_nonoverlapping(min, dst, 1);\n        ptr::copy_nonoverlapping(lo, dst.add(1), 1);\n        ptr::copy_nonoverlapping(hi, dst.add(2), 1);\n        ptr::copy_nonoverlapping(max, dst.add(3), 1);\n    }\n}",
  "callees": [
    "81385294222362714685518950164453635767",
    "46489561819967951214045237103392664622",
    "47323665595455568617290020941376774286",
    "1515449205156259623117219324388051243616",
    "111425599901702694743874629435682172347",
    "27898396265284196932431097334752412735",
    "151840974889468561699943794651609097652",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "161225022469363908823200354701136905531",
    "5685759175004267156517164361458157556",
    "411435597639791344610060646680281142183",
    "41516842800588858343752134003097033074",
    "76135488984430735019438092558966220385",
    "1127020680960916790512851424139627226865",
    "136233821879019021216971101597352788382",
    "42378138817949430056736156431645255910",
    "135598008489588662314776882657014310925",
    "1067675883129992420314174327751912045205",
    "162361112433299032238584891523845488474",
    "93773215297586442255071597017053773700",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1509749051880564672214139607973048202552",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "380262551218047276514654482281297551654",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "65940660956069815313883754507930434433",
    "152018209062913109616942758022114057971",
    "30080784956360149839779979229530348120",
    "1115781963391974761110184508675818631626",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "127996716050881673667025817820463335062",
    "1639287981880464919011332595470881517302",
    "1610750184434167170912753016457180239035",
    "132502552141584866547007254427792824119",
    "137719304684985531861086849333583722748",
    "169017152061146820209827866672499117723",
    "126848878295068376216938117831082859107",
    "118042308767439437138395977050205460629",
    "7839859953712079114640771271960005865",
    "153999075255816246604435272140943255557",
    "393974833682574441515290398983271504453",
    "48548664629730829953422984265893277498",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "15859584444614920947579563356650829639"
  ]
}
