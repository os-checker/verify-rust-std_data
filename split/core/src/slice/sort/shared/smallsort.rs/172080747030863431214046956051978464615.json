{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::insertion_sort_shift_left::<f32, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "172080747030863431214046956051978464615",
  "hash_direct": "202599930248832600014427340572570526795",
  "src": "pub fn insertion_sort_shift_left<T, F: FnMut(&T, &T) -> bool>(\n    v: &mut [T],\n    offset: usize,\n    is_less: &mut F,\n) {\n    let len = v.len();\n    if offset == 0 || offset > len {\n        intrinsics::abort();\n    }\n\n    // SAFETY: see individual comments.\n    unsafe {\n        // We write this basic loop directly using pointers, as when we use a\n        // for loop LLVM likes to unroll this loop which we do not want.\n        // SAFETY: v_end is the one-past-end pointer, and we checked that\n        // offset <= len, thus tail is also in-bounds.\n        let v_base = v.as_mut_ptr();\n        let v_end = v_base.add(len);\n        let mut tail = v_base.add(offset);\n        while tail != v_end {\n            // SAFETY: v_base and tail are both valid pointers to elements, and\n            // v_base < tail since we checked offset != 0.\n            insert_tail(v_base, tail, is_less);\n\n            // SAFETY: we checked that tail is not yet the one-past-end pointer.\n            tail = tail.add(1);\n        }\n    }\n}",
  "callees": [
    "81385294222362714685518950164453635767",
    "46489561819967951214045237103392664622",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "84909938954906103112758184730426842057",
    "104310221742716516106825842456563485195",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "161225022469363908823200354701136905531",
    "1056654010424199182016439961042112504513",
    "113409710184701619025179446284329884676",
    "42378138817949430056736156431645255910",
    "135598008489588662314776882657014310925",
    "1067675883129992420314174327751912045205",
    "162361112433299032238584891523845488474",
    "93773215297586442255071597017053773700",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1509749051880564672214139607973048202552",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "380262551218047276514654482281297551654",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "127996716050881673667025817820463335062",
    "1795969226137326522716546503440481195119",
    "1471284738009705221911766363129781462391",
    "169017152061146820209827866672499117723",
    "174277204108153543316058831477041384365",
    "126848878295068376216938117831082859107",
    "254603215815508390610288247988159286007",
    "734322039046123027617517464218937872705",
    "93887220617839191357133813816346400830",
    "118042308767439437138395977050205460629",
    "902101893129550829515811349604086336909",
    "77798130298432370589408453074629428121",
    "153999075255816246604435272140943255557",
    "393974833682574441515290398983271504453",
    "1564004178496337119316507105125054707476",
    "48548664629730829953422984265893277498",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "15859584444614920947579563356650829639"
  ]
}
