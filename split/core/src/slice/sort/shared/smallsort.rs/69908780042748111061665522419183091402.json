{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::small_sort_general_with_scratch::<f32, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "69908780042748111061665522419183091402",
  "hash_direct": "234548023776648904217912114057417711904",
  "src": "fn small_sort_general_with_scratch<T: FreezeMarker, F: FnMut(&T, &T) -> bool>(\n    v: &mut [T],\n    scratch: &mut [MaybeUninit<T>],\n    is_less: &mut F,\n) {\n    let len = v.len();\n    if len < 2 {\n        return;\n    }\n\n    if scratch.len() < len + 16 {\n        intrinsics::abort();\n    }\n\n    let v_base = v.as_mut_ptr();\n    let len_div_2 = len / 2;\n\n    // SAFETY: See individual comments.\n    unsafe {\n        let scratch_base = scratch.as_mut_ptr() as *mut T;\n\n        let presorted_len = if const { size_of::<T>() <= 16 } && len >= 16 {\n            // SAFETY: scratch_base is valid and has enough space.\n            sort8_stable(v_base, scratch_base, scratch_base.add(len), is_less);\n            sort8_stable(\n                v_base.add(len_div_2),\n                scratch_base.add(len_div_2),\n                scratch_base.add(len + 8),\n                is_less,\n            );\n\n            8\n        } else if len >= 8 {\n            // SAFETY: scratch_base is valid and has enough space.\n            sort4_stable(v_base, scratch_base, is_less);\n            sort4_stable(v_base.add(len_div_2), scratch_base.add(len_div_2), is_less);\n\n            4\n        } else {\n            ptr::copy_nonoverlapping(v_base, scratch_base, 1);\n            ptr::copy_nonoverlapping(v_base.add(len_div_2), scratch_base.add(len_div_2), 1);\n\n            1\n        };\n\n        for offset in [0, len_div_2] {\n            // SAFETY: at this point dst is initialized with presorted_len elements.\n            // We extend this to desired_len, src is valid for desired_len elements.\n            let src = v_base.add(offset);\n            let dst = scratch_base.add(offset);\n            let desired_len = if offset == 0 { len_div_2 } else { len - len_div_2 };\n\n            for i in presorted_len..desired_len {\n                ptr::copy_nonoverlapping(src.add(i), dst.add(i), 1);\n                insert_tail(dst, dst.add(i), is_less);\n            }\n        }\n\n        // SAFETY: see comment in `CopyOnDrop::drop`.\n        let drop_guard = CopyOnDrop { src: scratch_base, dst: v_base, len };\n\n        // SAFETY: at this point scratch_base is fully initialized, allowing us\n        // to use it as the source of our merge back into the original array.\n        // If a panic occurs we ensure the original array is restored to a valid\n        // permutation of the input through drop_guard. This technique is similar\n        // to ping-pong merging.\n        bidirectional_merge(\n            &*ptr::slice_from_raw_parts(drop_guard.src, drop_guard.len),\n            drop_guard.dst,\n            is_less,\n        );\n        mem::forget(drop_guard);\n    }\n}",
  "callees": [
    "5691105619613571499181380243691370548",
    "164990924868829835338594208825241637473",
    "25157582980489959215611460069903422136",
    "172618602834764011159883962278544677408",
    "171107143708729659712818433116512496847",
    "33833248959262743239749507068274582851",
    "246884006990283351112728686427332341490",
    "129934805316762061352056491888055415965",
    "104984115654323030032096312581400593009",
    "12572926163148945562053905039534402404",
    "25315992229481465352451865580694346951",
    "842267059997019422815333829425931124000",
    "155146884437592745449279657258619050520",
    "258820287469578611817448591488600041899",
    "65649496869428084066092477043246278777",
    "588974892899239543415856878986124229421",
    "878443069670864751210475720415056818067",
    "866708020042406907314718060065758188604",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "844874268796424553916489422294626291889",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "11996021044221125357274189770344285829",
    "6914657791414926604643248476891087136",
    "12115540591965961592218455255086567020",
    "56992650673164436291130925969138191855",
    "1232630557319299762117464203181083790137",
    "98948247701979796981383318440935444036",
    "71901952651970587475581820008514493941",
    "685837618491054085418214840674583290794",
    "505450140074593165911434528305558854915",
    "21282222690676335712137581847522815711",
    "175112052875320498919565231687966570341",
    "88913173682101047419027878516742687184",
    "1532680422397532127215813626969657334099",
    "152674157784593419216769873421433144452",
    "33042992310055245188183099101083799669",
    "12429890166757429253686753757513305045",
    "1504860913707788879912528238737452773888",
    "1554592054844705604815491083685925038228",
    "1342521228831833354715461413551686205925",
    "38410679809363850363680207228048299578",
    "31244240180128544175272526361568808560",
    "1749362715435459353511933873995340031229",
    "1280257502160233765816408910554470634604",
    "1157832635988226544312579101964623411278",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "1258220971271417206117729622567699832507",
    "107896500699219007011661308826584571988",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "681932933892771600113755084868377368020",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "5667765796385169624800112337147502292",
    "1239687241192450573815900328634536806436",
    "366974912920839386515801963218903644372",
    "880099753416866301016817688796490528363",
    "893655551047304721011068898142380368208",
    "884246074448727927914595282961940941192",
    "975615807404907599012293873143289411403",
    "76512364011266228718507200393334295670",
    "465974363902275324511601404467167577535",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "27547235193633795771352944920978011050",
    "97912592448095803783191936410021855138",
    "158686955155723961512990861743778362268",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "12005403118339899222204789315726708155",
    "8161291837423649642305263678029669375",
    "17018701894801811388989276999089902303",
    "153359812303060870313745291357235121700",
    "155091460395977933247805804921988192005",
    "147426714049374313624852995509887346090",
    "136662503515188431369196551783269046934",
    "1330057056569147237418037907305446289339",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "1723599536204470635113497313051694197046",
    "29060292595203819616753101509882389635",
    "20769496869668818891224081341897612990",
    "463148830072667891214453452474049709022",
    "171915815783395201304222515541447921988",
    "145608176270486528831437549097020014987",
    "56771380296863258365292171566219158103",
    "177873690323934560824507033209875573135",
    "1711803526998921243212234553671451621943",
    "332969873952842765515657998139185731598",
    "83073599152339492514601186786599769421",
    "8856004213898147781592655248059949830",
    "1092907013099221958016055827300136111500",
    "1803948104025856588218214767042593335285",
    "172260194559773182629656345293376304049",
    "75668365260124385837999611938706969645",
    "449637264080571459055009589071427003",
    "14793593705814998347416339440269146414",
    "87118742526036214784874418592913721460",
    "1220077814106487456211144053578469298836",
    "83554310679616438933972841632042535709",
    "1628068759159941485211848414904201608003",
    "10028625014578992415748978204009993976",
    "104146325589933591886703414640642333807",
    "102741531711776819612478009525719629257",
    "59577599673772235326466319876396498692",
    "7017136333540388200713431365939228262",
    "124656679884072299719740859888952081738",
    "10945329692186039131910781961178305139",
    "125106416838162417102443172008673540768",
    "1693154876786778756015345546248813964782",
    "149588873162497332836210716558493052153",
    "181892569495853782439411663079055486243",
    "1389380045413327538816629928410546178447",
    "182891627717839814008999627764106443076",
    "896043463780224064315792165598017428780",
    "42862075438888937226574528024466141816",
    "717316864195020333212717142816164069242",
    "1014513224762342876816913537272945177988",
    "1492114366990774559916025264929425520979",
    "98672616218528724113768882390038008401",
    "154911443990380340341563367924870465980",
    "1737046666080539081914974966237099365643",
    "1703660345011483495218041991169194027213",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "38941281761602438632163576978956991022",
    "76610361547970390014041401956375253519",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
