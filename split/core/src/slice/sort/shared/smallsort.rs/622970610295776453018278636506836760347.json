{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::small_sort_network::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "622970610295776453018278636506836760347",
  "hash_direct": "82990627625314868256712126343401779410",
  "src": "fn small_sort_network<T, F>(v: &mut [T], is_less: &mut F)\nwhere\n    T: FreezeMarker,\n    F: FnMut(&T, &T) -> bool,\n{\n    // This implementation is tuned to be efficient for integer types.\n\n    let len = v.len();\n    if len < 2 {\n        return;\n    }\n\n    if len > SMALL_SORT_NETWORK_SCRATCH_LEN {\n        intrinsics::abort();\n    }\n\n    let mut stack_array = MaybeUninit::<[T; SMALL_SORT_NETWORK_SCRATCH_LEN]>::uninit();\n\n    let len_div_2 = len / 2;\n    let no_merge = len < 18;\n\n    let v_base = v.as_mut_ptr();\n    let initial_region_len = if no_merge { len } else { len_div_2 };\n    // SAFETY: Both possible values of `initial_region_len` are in-bounds.\n    let mut region = unsafe { &mut *ptr::slice_from_raw_parts_mut(v_base, initial_region_len) };\n\n    // Avoid compiler unrolling, we *really* don't want that to happen here for binary-size reasons.\n    loop {\n        let presorted_len = if region.len() >= 13 {\n            sort13_optimal(region, is_less);\n            13\n        } else if region.len() >= 9 {\n            sort9_optimal(region, is_less);\n            9\n        } else {\n            1\n        };\n\n        insertion_sort_shift_left(region, presorted_len, is_less);\n\n        if no_merge {\n            return;\n        }\n\n        if region.as_ptr() != v_base {\n            break;\n        }\n\n        // SAFETY: The right side of `v` based on `len_div_2` is guaranteed in-bounds.\n        unsafe {\n            region = &mut *ptr::slice_from_raw_parts_mut(v_base.add(len_div_2), len - len_div_2)\n        };\n    }\n\n    // SAFETY: We checked that T is Freeze and thus observation safe.\n    // Should is_less panic v was not modified in parity_merge and retains it's original input.\n    // scratch and v must not alias and scratch has v.len() space.\n    unsafe {\n        let scratch_base = stack_array.as_mut_ptr() as *mut T;\n        bidirectional_merge(\n            &mut *ptr::slice_from_raw_parts_mut(v_base, len),\n            scratch_base,\n            is_less,\n        );\n        ptr::copy_nonoverlapping(scratch_base, v_base, len);\n    }\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "131203065817488211067140136749599673893",
    "155146884437592745449279657258619050520",
    "258820287469578611817448591488600041899",
    "17952490876904025491179797362731547419",
    "588974892899239543415856878986124229421",
    "16731847445636760016886686763268945276",
    "453211650212179521216982411325342330736",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "844874268796424553916489422294626291889",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "11996021044221125357274189770344285829",
    "6914657791414926604643248476891087136",
    "12115540591965961592218455255086567020",
    "56992650673164436291130925969138191855",
    "1773433010229001091613907777891715491506",
    "1716443215232136769817525172431023982267",
    "177198898458980010943989196887491139632",
    "1781690009562880789613805605064966989",
    "67830932826870317167811597850670844860",
    "177175712007621356012478631590678446814",
    "288019430802205018595144664109986139",
    "54950859563042596194067354215311704801",
    "40838815926553577492733164104978273982",
    "266080518554646339012946240505549165565",
    "27143329980388801218198615083747125661",
    "872205114925099333011215560138034927031",
    "1749362715435459353511933873995340031229",
    "1033976944350554769714411313899354111723",
    "935865976961147776913102301421189848381",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "1258220971271417206117729622567699832507",
    "107896500699219007011661308826584571988",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "681932933892771600113755084868377368020",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "5667765796385169624800112337147502292",
    "29910668401302440137796026586948212988",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "1797631000324623339713612420305020920283",
    "8161291837423649642305263678029669375",
    "143085707185960270575150342734534970533",
    "1798830088522245698710644459163533821120",
    "37086712814028636114793508434074774477",
    "176056865273948954471033932128544384603",
    "97594018308861176561694743857133180298",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "383941379499944612415686561901705214345",
    "140037284170250879412165657698016564751",
    "33667224288951003956713148699857240956",
    "96124213409740596604317153356339968403",
    "178315078884488900363857138358026485986",
    "101626236615345659495105267688567427260",
    "117656571688255920932799653834118455637",
    "106173986076596950018431688857119920681",
    "140397597977264513897043940497651763735",
    "129204178816377018123994311592856603771",
    "449637264080571459055009589071427003",
    "14793593705814998347416339440269146414",
    "33494271737232998493322355908395718749",
    "89408624801781563112459924758663425967",
    "125541693435944971532826525145213872905",
    "1731824179572293139318170269715532491601",
    "301523161726526337515800343411294147396",
    "294184564209653742213128939253919937053",
    "1577213576999725134711408429017764734996",
    "82706816978384744646700729135316446562",
    "95306677991933656604979415818155079671",
    "225117061634733298512363466521580961344",
    "115980808431716924056871256452888394250",
    "188454685683600352310502536781328751220",
    "717316864195020333212717142816164069242",
    "7594643672915113577155452625926199491",
    "615736672642139238313272613975929771066",
    "445564360041168516913487848433621611908",
    "1737046666080539081914974966237099365643",
    "1703660345011483495218041991169194027213",
    "166776697050612785113883264850514388619",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "38941281761602438632163576978956991022",
    "76610361547970390014041401956375253519",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
