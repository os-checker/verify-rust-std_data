{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::sort13_optimal::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3165:41: 3165:47}>",
  "hash": "588924462845860779612391630550425360810",
  "hash_direct": "50940223488463314881522140434776842397",
  "src": "fn sort13_optimal<T, F>(v: &mut [T], is_less: &mut F)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    if v.len() < 13 {\n        intrinsics::abort();\n    }\n\n    let v_base = v.as_mut_ptr();\n\n    // Optimal sorting network see:\n    // https://bertdobbelaere.github.io/sorting_networks.html.\n\n    // SAFETY: We checked the len.\n    unsafe {\n        swap_if_less(v_base, 0, 12, is_less);\n        swap_if_less(v_base, 1, 10, is_less);\n        swap_if_less(v_base, 2, 9, is_less);\n        swap_if_less(v_base, 3, 7, is_less);\n        swap_if_less(v_base, 5, 11, is_less);\n        swap_if_less(v_base, 6, 8, is_less);\n        swap_if_less(v_base, 1, 6, is_less);\n        swap_if_less(v_base, 2, 3, is_less);\n        swap_if_less(v_base, 4, 11, is_less);\n        swap_if_less(v_base, 7, 9, is_less);\n        swap_if_less(v_base, 8, 10, is_less);\n        swap_if_less(v_base, 0, 4, is_less);\n        swap_if_less(v_base, 1, 2, is_less);\n        swap_if_less(v_base, 3, 6, is_less);\n        swap_if_less(v_base, 7, 8, is_less);\n        swap_if_less(v_base, 9, 10, is_less);\n        swap_if_less(v_base, 11, 12, is_less);\n        swap_if_less(v_base, 4, 6, is_less);\n        swap_if_less(v_base, 5, 9, is_less);\n        swap_if_less(v_base, 8, 11, is_less);\n        swap_if_less(v_base, 10, 12, is_less);\n        swap_if_less(v_base, 0, 5, is_less);\n        swap_if_less(v_base, 3, 8, is_less);\n        swap_if_less(v_base, 4, 7, is_less);\n        swap_if_less(v_base, 6, 11, is_less);\n        swap_if_less(v_base, 9, 10, is_less);\n        swap_if_less(v_base, 0, 1, is_less);\n        swap_if_less(v_base, 2, 5, is_less);\n        swap_if_less(v_base, 6, 9, is_less);\n        swap_if_less(v_base, 7, 8, is_less);\n        swap_if_less(v_base, 10, 11, is_less);\n        swap_if_less(v_base, 1, 3, is_less);\n        swap_if_less(v_base, 2, 4, is_less);\n        swap_if_less(v_base, 5, 6, is_less);\n        swap_if_less(v_base, 9, 10, is_less);\n        swap_if_less(v_base, 1, 2, is_less);\n        swap_if_less(v_base, 3, 4, is_less);\n        swap_if_less(v_base, 5, 7, is_less);\n        swap_if_less(v_base, 6, 8, is_less);\n        swap_if_less(v_base, 2, 3, is_less);\n        swap_if_less(v_base, 4, 5, is_less);\n        swap_if_less(v_base, 6, 7, is_less);\n        swap_if_less(v_base, 8, 9, is_less);\n        swap_if_less(v_base, 3, 4, is_less);\n        swap_if_less(v_base, 5, 6, is_less);\n    }\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "131203065817488211067140136749599673893",
    "258820287469578611817448591488600041899",
    "116304916034512097425483387721203124618",
    "588974892899239543415856878986124229421",
    "1604627830876215615115087685615869343494",
    "453211650212179521216982411325342330736",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "1773433010229001091613907777891715491506",
    "1716443215232136769817525172431023982267",
    "177198898458980010943989196887491139632",
    "561630264488052752814874265660932536905",
    "1781690009562880789613805605064966989",
    "65529338401743991971348499925853541721",
    "288019430802205018595144664109986139",
    "266080518554646339012946240505549165565",
    "27143329980388801218198615083747125661",
    "55088709743009439210713825457170869827",
    "872205114925099333011215560138034927031",
    "1749362715435459353511933873995340031229",
    "1033976944350554769714411313899354111723",
    "935865976961147776913102301421189848381",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "29910668401302440137796026586948212988",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "1091386818374001927410149984079160722279",
    "97594018308861176561694743857133180298",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "76087680206635820056667644559109535396",
    "371192579773467124910131766380195795041",
    "88584634134516743865765855768986953291",
    "178315078884488900363857138358026485986",
    "101626236615345659495105267688567427260",
    "68082955985422682445392449306428223181",
    "95361434355292140996541898939168217904",
    "175501891140104149459627757130570617075",
    "293645540748671545017999185713660079650",
    "16945391567286791139892170040202505549",
    "1731824179572293139318170269715532491601",
    "294184564209653742213128939253919937053",
    "62725698995014711444687450284203129758",
    "684705619041318229017965376202785420997",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "74111286315405054421392461884745781298",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
