{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::small_sort_general_with_scratch::<f32, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3165:41: 3165:47}>",
  "hash": "594189157417879384617438599409024635837",
  "hash_direct": "99836742362888797284137300932341255310",
  "src": "fn small_sort_general_with_scratch<T: FreezeMarker, F: FnMut(&T, &T) -> bool>(\n    v: &mut [T],\n    scratch: &mut [MaybeUninit<T>],\n    is_less: &mut F,\n) {\n    let len = v.len();\n    if len < 2 {\n        return;\n    }\n\n    if scratch.len() < len + 16 {\n        intrinsics::abort();\n    }\n\n    let v_base = v.as_mut_ptr();\n    let len_div_2 = len / 2;\n\n    // SAFETY: See individual comments.\n    unsafe {\n        let scratch_base = scratch.as_mut_ptr() as *mut T;\n\n        let presorted_len = if const { size_of::<T>() <= 16 } && len >= 16 {\n            // SAFETY: scratch_base is valid and has enough space.\n            sort8_stable(v_base, scratch_base, scratch_base.add(len), is_less);\n            sort8_stable(\n                v_base.add(len_div_2),\n                scratch_base.add(len_div_2),\n                scratch_base.add(len + 8),\n                is_less,\n            );\n\n            8\n        } else if len >= 8 {\n            // SAFETY: scratch_base is valid and has enough space.\n            sort4_stable(v_base, scratch_base, is_less);\n            sort4_stable(v_base.add(len_div_2), scratch_base.add(len_div_2), is_less);\n\n            4\n        } else {\n            ptr::copy_nonoverlapping(v_base, scratch_base, 1);\n            ptr::copy_nonoverlapping(v_base.add(len_div_2), scratch_base.add(len_div_2), 1);\n\n            1\n        };\n\n        for offset in [0, len_div_2] {\n            // SAFETY: at this point dst is initialized with presorted_len elements.\n            // We extend this to desired_len, src is valid for desired_len elements.\n            let src = v_base.add(offset);\n            let dst = scratch_base.add(offset);\n            let desired_len = if offset == 0 { len_div_2 } else { len - len_div_2 };\n\n            for i in presorted_len..desired_len {\n                ptr::copy_nonoverlapping(src.add(i), dst.add(i), 1);\n                insert_tail(dst, dst.add(i), is_less);\n            }\n        }\n\n        // SAFETY: see comment in `CopyOnDrop::drop`.\n        let drop_guard = CopyOnDrop { src: scratch_base, dst: v_base, len };\n\n        // SAFETY: at this point scratch_base is fully initialized, allowing us\n        // to use it as the source of our merge back into the original array.\n        // If a panic occurs we ensure the original array is restored to a valid\n        // permutation of the input through drop_guard. This technique is similar\n        // to ping-pong merging.\n        bidirectional_merge(\n            &*ptr::slice_from_raw_parts(drop_guard.src, drop_guard.len),\n            drop_guard.dst,\n            is_less,\n        );\n        mem::forget(drop_guard);\n    }\n}",
  "callees": [
    "1203263015148700691813768649275090494044",
    "164990924868829835338594208825241637473",
    "25157582980489959215611460069903422136",
    "172618602834764011159883962278544677408",
    "171107143708729659712818433116512496847",
    "33833248959262743239749507068274582851",
    "246884006990283351112728686427332341490",
    "129934805316762061352056491888055415965",
    "73012982905768247717917694598862899551",
    "59801562553687689092623600929310060834",
    "25315992229481465352451865580694346951",
    "842267059997019422815333829425931124000",
    "155146884437592745449279657258619050520",
    "258820287469578611817448591488600041899",
    "614245616664893827015428981560536142269",
    "588974892899239543415856878986124229421",
    "272361348126339150511002610720064829432",
    "866708020042406907314718060065758188604",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "118969608371033492241203013207235849818",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "58079812985260614779074871743441829358",
    "61537032802646890302053131132263133848",
    "1670765222083267730010075026643490075615",
    "56992650673164436291130925969138191855",
    "1232630557319299762117464203181083790137",
    "98948247701979796981383318440935444036",
    "71901952651970587475581820008514493941",
    "685837618491054085418214840674583290794",
    "21823152912743153784992366015052637329",
    "505450140074593165911434528305558854915",
    "21282222690676335712137581847522815711",
    "175112052875320498919565231687966570341",
    "159954625414763837031752635655860900728",
    "152674157784593419216769873421433144452",
    "33042992310055245188183099101083799669",
    "73628352820189091529088643620501609539",
    "1504860913707788879912528238737452773888",
    "1554592054844705604815491083685925038228",
    "1342521228831833354715461413551686205925",
    "1596336242708767558610380242603204579634",
    "38410679809363850363680207228048299578",
    "31244240180128544175272526361568808560",
    "1749362715435459353511933873995340031229",
    "1280257502160233765816408910554470634604",
    "1157832635988226544312579101964623411278",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "427948772593900246015617695218292297348",
    "7858545234940505117539855476375371758",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "80466408942777512049363027701449327301",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "174107661030119018973646362480685393050",
    "1239687241192450573815900328634536806436",
    "366974912920839386515801963218903644372",
    "880099753416866301016817688796490528363",
    "130717245747538899593395990241756055369",
    "884246074448727927914595282961940941192",
    "975615807404907599012293873143289411403",
    "992275621815851552413461958853915402745",
    "465974363902275324511601404467167577535",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "27547235193633795771352944920978011050",
    "97912592448095803783191936410021855138",
    "931724475706603837711487856799374627976",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "17376629601737242896624702279584427848",
    "375960559020688079617955032586718986019",
    "17018701894801811388989276999089902303",
    "168982609068613527704618957716390693902",
    "155091460395977933247805804921988192005",
    "147426714049374313624852995509887346090",
    "183236159753291968595787354460555299002",
    "1330057056569147237418037907305446289339",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "1618241054506692736412506772334197899706",
    "29060292595203819616753101509882389635",
    "20769496869668818891224081341897612990",
    "96215875939356596816347523621977200521",
    "145608176270486528831437549097020014987",
    "132605809577090032073308126737078909198",
    "56771380296863258365292171566219158103",
    "177873690323934560824507033209875573135",
    "1711803526998921243212234553671451621943",
    "332969873952842765515657998139185731598",
    "1701986260824784680415699759641227614741",
    "8856004213898147781592655248059949830",
    "110198453413901534315375840302302260813",
    "121183940754470095572383989014897197632",
    "148582739576724500918539485428619977857",
    "75668365260124385837999611938706969645",
    "13034211047842984045869203849636957556",
    "293645540748671545017999185713660079650",
    "170477930193487407342654832140393402043",
    "87118742526036214784874418592913721460",
    "104462103040602924085297176652652961077",
    "1084570579200791657613187196807525806397",
    "17010093941313189584755672698701959371",
    "10028625014578992415748978204009993976",
    "104146325589933591886703414640642333807",
    "102741531711776819612478009525719629257",
    "59577599673772235326466319876396498692",
    "7017136333540388200713431365939228262",
    "124656679884072299719740859888952081738",
    "10945329692186039131910781961178305139",
    "125106416838162417102443172008673540768",
    "1693154876786778756015345546248813964782",
    "149588873162497332836210716558493052153",
    "787839369617017869912874464972675651773",
    "947202158088834676014402979811483297072",
    "251054035190364497811277763381319780096",
    "62149718818216411739164816645132023320",
    "136975780697439702535064971790882165725",
    "717316864195020333212717142816164069242",
    "51918026981549433211398506663800832278",
    "136460410289181344576477241948426725251",
    "98672616218528724113768882390038008401",
    "154911443990380340341563367924870465980",
    "126048648882406442003602795325732745334",
    "1006928117247909106515604664996585110540",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "935658007883373388218268314737148286081",
    "74111286315405054421392461884745781298",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
