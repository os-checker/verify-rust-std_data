{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::merge_down::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "115980808431716924056871256452888394250",
  "hash_direct": "904886316241489211812667884923944530407",
  "src": "unsafe fn merge_down<T, F: FnMut(&T, &T) -> bool>(\n    mut left_src: *const T,\n    mut right_src: *const T,\n    mut dst: *mut T,\n    is_less: &mut F,\n) -> (*const T, *const T, *mut T) {\n    // This is a branchless merge utility function.\n    // The equivalent code with a branch would be:\n    //\n    // if !is_less(&*right_src, &*left_src) {\n    //     ptr::copy_nonoverlapping(right_src, dst, 1);\n    //     right_src = right_src.wrapping_sub(1);\n    // } else {\n    //     ptr::copy_nonoverlapping(left_src, dst, 1);\n    //     left_src = left_src.wrapping_sub(1);\n    // }\n    // dst = dst.sub(1);\n\n    // SAFETY: The caller must guarantee that `left_src`, `right_src` are valid\n    // to read and `dst` is valid to write, while not aliasing.\n    unsafe {\n        let is_l = !is_less(&*right_src, &*left_src);\n        let src = if is_l { right_src } else { left_src };\n        ptr::copy_nonoverlapping(src, dst, 1);\n        right_src = right_src.wrapping_sub(is_l as usize);\n        left_src = left_src.wrapping_sub(!is_l as usize);\n        dst = dst.sub(1);\n    }\n\n    (left_src, right_src, dst)\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "131203065817488211067140136749599673893",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "844874268796424553916489422294626291889",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "27143329980388801218198615083747125661",
    "872205114925099333011215560138034927031",
    "1749362715435459353511933873995340031229",
    "1033976944350554769714411313899354111723",
    "935865976961147776913102301421189848381",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "1258220971271417206117729622567699832507",
    "107896500699219007011661308826584571988",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "632379827537218859118037651046044448068",
    "29910668401302440137796026586948212988",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "37086712814028636114793508434074774477",
    "176056865273948954471033932128544384603",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "33667224288951003956713148699857240956",
    "14793593705814998347416339440269146414",
    "125541693435944971532826525145213872905",
    "294184564209653742213128939253919937053",
    "92293406756414262231157972400238103749",
    "38941281761602438632163576978956991022",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
