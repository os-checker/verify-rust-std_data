{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::swap_if_less::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "11425787473525927873242447089270695192",
  "hash_direct": "1314540166311985530711618923799506489466",
  "src": "unsafe fn swap_if_less<T, F>(v_base: *mut T, a_pos: usize, b_pos: usize, is_less: &mut F)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    // SAFETY: the caller must guarantee that `a_pos` and `b_pos` each added to `v_base` yield valid\n    // pointers into `v_base`, and are properly aligned, and part of the same allocation.\n    unsafe {\n        let v_a = v_base.add(a_pos);\n        let v_b = v_base.add(b_pos);\n\n        // PANIC SAFETY: if is_less panics, no scratch memory was created and the slice should still be\n        // in a well defined state, without duplicates.\n\n        // Important to only swap if it is more and not if it is equal. is_less should return false for\n        // equal, so we don't swap.\n        let should_swap = is_less(&*v_b, &*v_a);\n\n        // This is a branchless version of swap if.\n        // The equivalent code with a branch would be:\n        //\n        // if should_swap {\n        //     ptr::swap(v_a, v_b, 1);\n        // }\n\n        // The goal is to generate cmov instructions here.\n        let v_a_swap = hint::select_unpredictable(should_swap, v_b, v_a);\n        let v_b_swap = hint::select_unpredictable(should_swap, v_a, v_b);\n\n        let v_b_swap_tmp = ManuallyDrop::new(ptr::read(v_b_swap));\n        ptr::copy(v_a_swap, v_a, 1);\n        ptr::copy_nonoverlapping(&*v_b_swap_tmp, v_b, 1);\n    }\n}",
  "callees": [
    "81385294222362714685518950164453635767",
    "10436405171744302504267274923569342957",
    "47323665595455568617290020941376774286",
    "22705812558827111329283723858216813875",
    "111425599901702694743874629435682172347",
    "1211208467353976933716434349230374973041",
    "338767980120759628216770009205192908701",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "161225022469363908823200354701136905531",
    "1318689887869696768916027194617270353866",
    "478963796818765230011614905701744971505",
    "127373222190113940911382518085484404284",
    "13690886856464921264592307169254381298",
    "2970558563338118601695745824178924829",
    "7806710684141319259603624147177559909",
    "72069073103208969911225242555062416714",
    "1519947878957728317715395164626185264519",
    "35416910900921381748552437083050086013",
    "267397640077708419917774511588833123757",
    "1067675883129992420314174327751912045205",
    "85253214614932633916524759824229868238",
    "1342255621888147885315125004424529991795",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1783659889351469353310279621573179415628",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "380262551218047276514654482281297551654",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "163170642666796060956286475568727631006",
    "1477511422753946740316655228456845827721",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "27655842266785146994666362440773715747",
    "132875940520269593265470766514320119664",
    "100993824523230373517684506930625255989",
    "765005664251686918017801768978488558766",
    "56019540459191385932005176823350594765",
    "15377017856913222858050043622536508057",
    "85431504423290297139523741126676433890",
    "169017152061146820209827866672499117723",
    "4714829824583885766745164475970492146",
    "52088871005951181071266739164392301923",
    "1833648891477721821513278565533866774739",
    "153999075255816246604435272140943255557",
    "393974833682574441515290398983271504453",
    "48548664629730829953422984265893277498",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "15859584444614920947579563356650829639"
  ]
}
