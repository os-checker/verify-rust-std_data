{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::bidirectional_merge::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "82706816978384744646700729135316446562",
  "hash_direct": "170993847556404068169626959472227283345",
  "src": "unsafe fn bidirectional_merge<T: FreezeMarker, F: FnMut(&T, &T) -> bool>(\n    v: &[T],\n    dst: *mut T,\n    is_less: &mut F,\n) {\n    // It helps to visualize the merge:\n    //\n    // Initial:\n    //\n    //  |dst (in dst)\n    //  |left               |right\n    //  v                   v\n    // [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]\n    //                     ^                   ^\n    //                     |left_rev           |right_rev\n    //                                         |dst_rev (in dst)\n    //\n    // After:\n    //\n    //                      |dst (in dst)\n    //        |left         |           |right\n    //        v             v           v\n    // [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]\n    //       ^             ^           ^\n    //       |left_rev     |           |right_rev\n    //                     |dst_rev (in dst)\n    //\n    // In each iteration one of left or right moves up one position, and one of\n    // left_rev or right_rev moves down one position, whereas dst always moves\n    // up one position and dst_rev always moves down one position. Assuming\n    // the input was sorted and the comparison function is correctly implemented\n    // at the end we will have left == left_rev + 1, and right == right_rev + 1,\n    // fully consuming the input having written it to dst.\n\n    let len = v.len();\n    let src = v.as_ptr();\n\n    let len_div_2 = len / 2;\n\n    // SAFETY: The caller has to ensure that len >= 2.\n    unsafe {\n        intrinsics::assume(len_div_2 != 0); // This can avoid useless code-gen.\n    }\n\n    // SAFETY: no matter what the result of the user-provided comparison function\n    // is, all 4 read pointers will always be in-bounds. Writing `dst` and `dst_rev`\n    // will always be in bounds if the caller guarantees that `dst` is valid for\n    // `v.len()` writes.\n    unsafe {\n        let mut left = src;\n        let mut right = src.add(len_div_2);\n        let mut dst = dst;\n\n        let mut left_rev = src.add(len_div_2 - 1);\n        let mut right_rev = src.add(len - 1);\n        let mut dst_rev = dst.add(len - 1);\n\n        for _ in 0..len_div_2 {\n            (left, right, dst) = merge_up(left, right, dst, is_less);\n            (left_rev, right_rev, dst_rev) = merge_down(left_rev, right_rev, dst_rev, is_less);\n        }\n\n        let left_end = left_rev.wrapping_add(1);\n        let right_end = right_rev.wrapping_add(1);\n\n        // Odd length, so one element is left unconsumed in the input.\n        if !len.is_multiple_of(2) {\n            let left_nonempty = left < left_end;\n            let last_src = if left_nonempty { left } else { right };\n            ptr::copy_nonoverlapping(last_src, dst, 1);\n            left = left.add(left_nonempty as usize);\n            right = right.add((!left_nonempty) as usize);\n        }\n\n        // We now should have consumed the full input exactly once. This can only fail if the\n        // user-provided comparison function fails to implement a strict weak ordering. In that case\n        // we panic and never access the inconsistent state in dst.\n        if left != left_end || right != right_end {\n            panic_on_ord_violation();\n        }\n    }\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "131203065817488211067140136749599673893",
    "155146884437592745449279657258619050520",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "844874268796424553916489422294626291889",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "11996021044221125357274189770344285829",
    "6914657791414926604643248476891087136",
    "12115540591965961592218455255086567020",
    "56992650673164436291130925969138191855",
    "27143329980388801218198615083747125661",
    "872205114925099333011215560138034927031",
    "1749362715435459353511933873995340031229",
    "1033976944350554769714411313899354111723",
    "935865976961147776913102301421189848381",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "1258220971271417206117729622567699832507",
    "107896500699219007011661308826584571988",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "681932933892771600113755084868377368020",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "5667765796385169624800112337147502292",
    "29910668401302440137796026586948212988",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "143085707185960270575150342734534970533",
    "1798830088522245698710644459163533821120",
    "37086712814028636114793508434074774477",
    "176056865273948954471033932128544384603",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "33667224288951003956713148699857240956",
    "449637264080571459055009589071427003",
    "14793593705814998347416339440269146414",
    "33494271737232998493322355908395718749",
    "125541693435944971532826525145213872905",
    "301523161726526337515800343411294147396",
    "294184564209653742213128939253919937053",
    "115980808431716924056871256452888394250",
    "188454685683600352310502536781328751220",
    "717316864195020333212717142816164069242",
    "1737046666080539081914974966237099365643",
    "1703660345011483495218041991169194027213",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "38941281761602438632163576978956991022",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
