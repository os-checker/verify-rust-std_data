{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::small_sort_network::<f32, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "20067201441403705635292925693404681761",
  "hash_direct": "344617493562756721411156008723852178894",
  "src": "fn small_sort_network<T, F>(v: &mut [T], is_less: &mut F)\nwhere\n    T: FreezeMarker,\n    F: FnMut(&T, &T) -> bool,\n{\n    // This implementation is tuned to be efficient for integer types.\n\n    let len = v.len();\n    if len < 2 {\n        return;\n    }\n\n    if len > SMALL_SORT_NETWORK_SCRATCH_LEN {\n        intrinsics::abort();\n    }\n\n    let mut stack_array = MaybeUninit::<[T; SMALL_SORT_NETWORK_SCRATCH_LEN]>::uninit();\n\n    let len_div_2 = len / 2;\n    let no_merge = len < 18;\n\n    let v_base = v.as_mut_ptr();\n    let initial_region_len = if no_merge { len } else { len_div_2 };\n    // SAFETY: Both possible values of `initial_region_len` are in-bounds.\n    let mut region = unsafe { &mut *ptr::slice_from_raw_parts_mut(v_base, initial_region_len) };\n\n    // Avoid compiler unrolling, we *really* don't want that to happen here for binary-size reasons.\n    loop {\n        let presorted_len = if region.len() >= 13 {\n            sort13_optimal(region, is_less);\n            13\n        } else if region.len() >= 9 {\n            sort9_optimal(region, is_less);\n            9\n        } else {\n            1\n        };\n\n        insertion_sort_shift_left(region, presorted_len, is_less);\n\n        if no_merge {\n            return;\n        }\n\n        if region.as_ptr() != v_base {\n            break;\n        }\n\n        // SAFETY: The right side of `v` based on `len_div_2` is guaranteed in-bounds.\n        unsafe {\n            region = &mut *ptr::slice_from_raw_parts_mut(v_base.add(len_div_2), len - len_div_2)\n        };\n    }\n\n    // SAFETY: We checked that T is Freeze and thus observation safe.\n    // Should is_less panic v was not modified in parity_merge and retains it's original input.\n    // scratch and v must not alias and scratch has v.len() space.\n    unsafe {\n        let scratch_base = stack_array.as_mut_ptr() as *mut T;\n        bidirectional_merge(\n            &mut *ptr::slice_from_raw_parts_mut(v_base, len),\n            scratch_base,\n            is_less,\n        );\n        ptr::copy_nonoverlapping(scratch_base, v_base, len);\n    }\n}",
  "callees": [
    "81385294222362714685518950164453635767",
    "46489561819967951214045237103392664622",
    "589599466487462365011430963401962118509",
    "47323665595455568617290020941376774286",
    "1643893656287367199112762225120565410353",
    "111425599901702694743874629435682172347",
    "15899560319964511987843429756068441035",
    "135390779472134343456549084863314002035",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "84909938954906103112758184730426842057",
    "104310221742716516106825842456563485195",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "161225022469363908823200354701136905531",
    "1438611585775203574910130895685408999981",
    "180874735662080423702617202418949819065",
    "1388505351152652276212287879007466526739",
    "526814189773195139817557993623059721647",
    "1056654010424199182016439961042112504513",
    "4542927925944022674188154561199238674",
    "113409710184701619025179446284329884676",
    "1672597247167133550614826510494444174584",
    "86983546936197521454794818735802737459",
    "827484748844333567715496669765587432190",
    "532325228926717670112667264928092443735",
    "123684148174539001794704386591696722743",
    "171682529493004011511827424929063963454",
    "74511873801206093096775845001017214914",
    "42378138817949430056736156431645255910",
    "135598008489588662314776882657014310925",
    "1067675883129992420314174327751912045205",
    "162361112433299032238584891523845488474",
    "93773215297586442255071597017053773700",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "25602688744340186171314083485517995425",
    "1660513410314982984011153915826543479765",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "643349473068727846115780678007450923004",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "13796074939706337624507826801091410480",
    "1509749051880564672214139607973048202552",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "380262551218047276514654482281297551654",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "15080233063725118826907574149538767695",
    "152018209062913109616942758022114057971",
    "30080784956360149839779979229530348120",
    "448911720921930932501022158412431074",
    "112961645855638968208766737642047064341",
    "140381602032467739968058261525267964113",
    "1691776540274792500612324792448187625229",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "1620449656897867735912941335158942427531",
    "15079626449537338615768363195140101085",
    "127996716050881673667025817820463335062",
    "1441446466562904257912012183411159650170",
    "143235899371019448110570449009390707954",
    "161602283977109201292864778579778869612",
    "1795969226137326522716546503440481195119",
    "1011791535811276310011189196041404254576",
    "1471284738009705221911766363129781462391",
    "1425999545722817754210514237757853813438",
    "169017152061146820209827866672499117723",
    "174277204108153543316058831477041384365",
    "126848878295068376216938117831082859107",
    "254603215815508390610288247988159286007",
    "734322039046123027617517464218937872705",
    "93887220617839191357133813816346400830",
    "75826364580901856306168378982072251228",
    "118042308767439437138395977050205460629",
    "902101893129550829515811349604086336909",
    "911825113979175104616971860656251131265",
    "77798130298432370589408453074629428121",
    "172080747030863431214046956051978464615",
    "110057657247955798841429693785108810919",
    "446162758613514972713065607815379918261",
    "20864404773103763994288951545195620080",
    "356298384155096612611597809977494457925",
    "1569096732809047574617094089810642427091",
    "110046208974634932568331222352388725363",
    "156558724737321886766153526308848840146",
    "7839859953712079114640771271960005865",
    "1833648891477721821513278565533866774739",
    "153999075255816246604435272140943255557",
    "393974833682574441515290398983271504453",
    "1564004178496337119316507105125054707476",
    "48548664629730829953422984265893277498",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "15859584444614920947579563356650829639"
  ]
}
