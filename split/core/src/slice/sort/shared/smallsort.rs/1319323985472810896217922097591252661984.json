{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::small_sort_network::<f32, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3165:41: 3165:47}>",
  "hash": "1319323985472810896217922097591252661984",
  "hash_direct": "1771730817974352556816493882691062509660",
  "src": "fn small_sort_network<T, F>(v: &mut [T], is_less: &mut F)\nwhere\n    T: FreezeMarker,\n    F: FnMut(&T, &T) -> bool,\n{\n    // This implementation is tuned to be efficient for integer types.\n\n    let len = v.len();\n    if len < 2 {\n        return;\n    }\n\n    if len > SMALL_SORT_NETWORK_SCRATCH_LEN {\n        intrinsics::abort();\n    }\n\n    let mut stack_array = MaybeUninit::<[T; SMALL_SORT_NETWORK_SCRATCH_LEN]>::uninit();\n\n    let len_div_2 = len / 2;\n    let no_merge = len < 18;\n\n    let v_base = v.as_mut_ptr();\n    let initial_region_len = if no_merge { len } else { len_div_2 };\n    // SAFETY: Both possible values of `initial_region_len` are in-bounds.\n    let mut region = unsafe { &mut *ptr::slice_from_raw_parts_mut(v_base, initial_region_len) };\n\n    // Avoid compiler unrolling, we *really* don't want that to happen here for binary-size reasons.\n    loop {\n        let presorted_len = if region.len() >= 13 {\n            sort13_optimal(region, is_less);\n            13\n        } else if region.len() >= 9 {\n            sort9_optimal(region, is_less);\n            9\n        } else {\n            1\n        };\n\n        insertion_sort_shift_left(region, presorted_len, is_less);\n\n        if no_merge {\n            return;\n        }\n\n        if region.as_ptr() != v_base {\n            break;\n        }\n\n        // SAFETY: The right side of `v` based on `len_div_2` is guaranteed in-bounds.\n        unsafe {\n            region = &mut *ptr::slice_from_raw_parts_mut(v_base.add(len_div_2), len - len_div_2)\n        };\n    }\n\n    // SAFETY: We checked that T is Freeze and thus observation safe.\n    // Should is_less panic v was not modified in parity_merge and retains it's original input.\n    // scratch and v must not alias and scratch has v.len() space.\n    unsafe {\n        let scratch_base = stack_array.as_mut_ptr() as *mut T;\n        bidirectional_merge(\n            &mut *ptr::slice_from_raw_parts_mut(v_base, len),\n            scratch_base,\n            is_less,\n        );\n        ptr::copy_nonoverlapping(scratch_base, v_base, len);\n    }\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "842267059997019422815333829425931124000",
    "155146884437592745449279657258619050520",
    "258820287469578611817448591488600041899",
    "1749896470962094197513721574537271080664",
    "588974892899239543415856878986124229421",
    "95145360150927316508712636882109290953",
    "195906651498126693711873346609041151231",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "118969608371033492241203013207235849818",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "58079812985260614779074871743441829358",
    "61537032802646890302053131132263133848",
    "1670765222083267730010075026643490075615",
    "56992650673164436291130925969138191855",
    "98948247701979796981383318440935444036",
    "1181047503821259640715862953390532475195",
    "685837618491054085418214840674583290794",
    "516949490060059682910749834855084636853",
    "1203941343652735381418091052915140268463",
    "1007486007083768665013590249423603789078",
    "105358205211415583910007752475065903432",
    "804380288526545477915371929517593600679",
    "1237039252410549238112685582795900886554",
    "171478660599761938823798238921074606660",
    "1554592054844705604815491083685925038228",
    "9077079987565736857968315209525048774",
    "31244240180128544175272526361568808560",
    "1749362715435459353511933873995340031229",
    "1280257502160233765816408910554470634604",
    "1157832635988226544312579101964623411278",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "427948772593900246015617695218292297348",
    "7858545234940505117539855476375371758",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "80466408942777512049363027701449327301",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "174107661030119018973646362480685393050",
    "1239687241192450573815900328634536806436",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "126299841668548339956842962787614012875",
    "375960559020688079617955032586718986019",
    "168982609068613527704618957716390693902",
    "155091460395977933247805804921988192005",
    "147426714049374313624852995509887346090",
    "183236159753291968595787354460555299002",
    "196947132396865061710647143094248738344",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "130083723643071762058484072077162773150",
    "21053746991689950572086053362961811452",
    "96215875939356596816347523621977200521",
    "45483721650608319215891144303956371443",
    "50434367259982919184243988459294877425",
    "1814024728092996720912341531616753304217",
    "1701986260824784680415699759641227614741",
    "1836821856671223999714514043280971284941",
    "121183940754470095572383989014897197632",
    "1178529521704731285217495632489560401031",
    "1818408236388629076212678547730061000564",
    "293645540748671545017999185713660079650",
    "170477930193487407342654832140393402043",
    "104462103040602924085297176652652961077",
    "1084570579200791657613187196807525806397",
    "17010093941313189584755672698701959371",
    "59577599673772235326466319876396498692",
    "7017136333540388200713431365939228262",
    "124656679884072299719740859888952081738",
    "787839369617017869912874464972675651773",
    "947202158088834676014402979811483297072",
    "251054035190364497811277763381319780096",
    "536145182828619068311626222312551261501",
    "62149718818216411739164816645132023320",
    "136975780697439702535064971790882165725",
    "717316864195020333212717142816164069242",
    "13090224200268001078993493245219541652",
    "133677347463581751888007265891699597941",
    "125434254175504552561964517986820535704",
    "126048648882406442003602795325732745334",
    "1006928117247909106515604664996585110540",
    "684705619041318229017965376202785420997",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "935658007883373388218268314737148286081",
    "74111286315405054421392461884745781298",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
