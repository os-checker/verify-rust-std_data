{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::small_sort_network::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3165:41: 3165:47}>",
  "hash": "635627476537658394413448678167145217170",
  "hash_direct": "126655511640010771431699879597621171686",
  "src": "fn small_sort_network<T, F>(v: &mut [T], is_less: &mut F)\nwhere\n    T: FreezeMarker,\n    F: FnMut(&T, &T) -> bool,\n{\n    // This implementation is tuned to be efficient for integer types.\n\n    let len = v.len();\n    if len < 2 {\n        return;\n    }\n\n    if len > SMALL_SORT_NETWORK_SCRATCH_LEN {\n        intrinsics::abort();\n    }\n\n    let mut stack_array = MaybeUninit::<[T; SMALL_SORT_NETWORK_SCRATCH_LEN]>::uninit();\n\n    let len_div_2 = len / 2;\n    let no_merge = len < 18;\n\n    let v_base = v.as_mut_ptr();\n    let initial_region_len = if no_merge { len } else { len_div_2 };\n    // SAFETY: Both possible values of `initial_region_len` are in-bounds.\n    let mut region = unsafe { &mut *ptr::slice_from_raw_parts_mut(v_base, initial_region_len) };\n\n    // Avoid compiler unrolling, we *really* don't want that to happen here for binary-size reasons.\n    loop {\n        let presorted_len = if region.len() >= 13 {\n            sort13_optimal(region, is_less);\n            13\n        } else if region.len() >= 9 {\n            sort9_optimal(region, is_less);\n            9\n        } else {\n            1\n        };\n\n        insertion_sort_shift_left(region, presorted_len, is_less);\n\n        if no_merge {\n            return;\n        }\n\n        if region.as_ptr() != v_base {\n            break;\n        }\n\n        // SAFETY: The right side of `v` based on `len_div_2` is guaranteed in-bounds.\n        unsafe {\n            region = &mut *ptr::slice_from_raw_parts_mut(v_base.add(len_div_2), len - len_div_2)\n        };\n    }\n\n    // SAFETY: We checked that T is Freeze and thus observation safe.\n    // Should is_less panic v was not modified in parity_merge and retains it's original input.\n    // scratch and v must not alias and scratch has v.len() space.\n    unsafe {\n        let scratch_base = stack_array.as_mut_ptr() as *mut T;\n        bidirectional_merge(\n            &mut *ptr::slice_from_raw_parts_mut(v_base, len),\n            scratch_base,\n            is_less,\n        );\n        ptr::copy_nonoverlapping(scratch_base, v_base, len);\n    }\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "131203065817488211067140136749599673893",
    "155146884437592745449279657258619050520",
    "258820287469578611817448591488600041899",
    "116304916034512097425483387721203124618",
    "588974892899239543415856878986124229421",
    "1604627830876215615115087685615869343494",
    "453211650212179521216982411325342330736",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "118969608371033492241203013207235849818",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "58079812985260614779074871743441829358",
    "61537032802646890302053131132263133848",
    "1670765222083267730010075026643490075615",
    "56992650673164436291130925969138191855",
    "1773433010229001091613907777891715491506",
    "1716443215232136769817525172431023982267",
    "177198898458980010943989196887491139632",
    "561630264488052752814874265660932536905",
    "1781690009562880789613805605064966989",
    "65529338401743991971348499925853541721",
    "288019430802205018595144664109986139",
    "54950859563042596194067354215311704801",
    "40838815926553577492733164104978273982",
    "266080518554646339012946240505549165565",
    "27143329980388801218198615083747125661",
    "55088709743009439210713825457170869827",
    "872205114925099333011215560138034927031",
    "1749362715435459353511933873995340031229",
    "1033976944350554769714411313899354111723",
    "935865976961147776913102301421189848381",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "427948772593900246015617695218292297348",
    "7858545234940505117539855476375371758",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "80466408942777512049363027701449327301",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "174107661030119018973646362480685393050",
    "29910668401302440137796026586948212988",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "1091386818374001927410149984079160722279",
    "375960559020688079617955032586718986019",
    "1074011387222553981714592241021871998873",
    "1798830088522245698710644459163533821120",
    "37086712814028636114793508434074774477",
    "10028408331298968888642529138096795132",
    "97594018308861176561694743857133180298",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "383941379499944612415686561901705214345",
    "76087680206635820056667644559109535396",
    "371192579773467124910131766380195795041",
    "88584634134516743865765855768986953291",
    "178315078884488900363857138358026485986",
    "101626236615345659495105267688567427260",
    "1771652388590607545712984509371277924879",
    "68082955985422682445392449306428223181",
    "95361434355292140996541898939168217904",
    "129204178816377018123994311592856603771",
    "175501891140104149459627757130570617075",
    "293645540748671545017999185713660079650",
    "170477930193487407342654832140393402043",
    "16945391567286791139892170040202505549",
    "97035042303285179535964744919838693636",
    "150977970989936139035235426040927428810",
    "1731824179572293139318170269715532491601",
    "301523161726526337515800343411294147396",
    "294184564209653742213128939253919937053",
    "1259501359551487769214603611193503299843",
    "1674521261859068018214524318302796956848",
    "745700687152575931811153636128696697474",
    "1437868544591254349802129428243400316",
    "276069504690705450417781480541525615203",
    "28799182752424723714798084487234723887",
    "717316864195020333212717142816164069242",
    "588924462845860779612391630550425360810",
    "64494129477953814083434967678612075500",
    "62725698995014711444687450284203129758",
    "126048648882406442003602795325732745334",
    "1006928117247909106515604664996585110540",
    "684705619041318229017965376202785420997",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "935658007883373388218268314737148286081",
    "74111286315405054421392461884745781298",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
