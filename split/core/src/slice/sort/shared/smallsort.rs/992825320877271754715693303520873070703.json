{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::small_sort_general_with_scratch::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3165:41: 3165:47}>",
  "hash": "992825320877271754715693303520873070703",
  "hash_direct": "178688306348239678521745407452084466514",
  "src": "fn small_sort_general_with_scratch<T: FreezeMarker, F: FnMut(&T, &T) -> bool>(\n    v: &mut [T],\n    scratch: &mut [MaybeUninit<T>],\n    is_less: &mut F,\n) {\n    let len = v.len();\n    if len < 2 {\n        return;\n    }\n\n    if scratch.len() < len + 16 {\n        intrinsics::abort();\n    }\n\n    let v_base = v.as_mut_ptr();\n    let len_div_2 = len / 2;\n\n    // SAFETY: See individual comments.\n    unsafe {\n        let scratch_base = scratch.as_mut_ptr() as *mut T;\n\n        let presorted_len = if const { size_of::<T>() <= 16 } && len >= 16 {\n            // SAFETY: scratch_base is valid and has enough space.\n            sort8_stable(v_base, scratch_base, scratch_base.add(len), is_less);\n            sort8_stable(\n                v_base.add(len_div_2),\n                scratch_base.add(len_div_2),\n                scratch_base.add(len + 8),\n                is_less,\n            );\n\n            8\n        } else if len >= 8 {\n            // SAFETY: scratch_base is valid and has enough space.\n            sort4_stable(v_base, scratch_base, is_less);\n            sort4_stable(v_base.add(len_div_2), scratch_base.add(len_div_2), is_less);\n\n            4\n        } else {\n            ptr::copy_nonoverlapping(v_base, scratch_base, 1);\n            ptr::copy_nonoverlapping(v_base.add(len_div_2), scratch_base.add(len_div_2), 1);\n\n            1\n        };\n\n        for offset in [0, len_div_2] {\n            // SAFETY: at this point dst is initialized with presorted_len elements.\n            // We extend this to desired_len, src is valid for desired_len elements.\n            let src = v_base.add(offset);\n            let dst = scratch_base.add(offset);\n            let desired_len = if offset == 0 { len_div_2 } else { len - len_div_2 };\n\n            for i in presorted_len..desired_len {\n                ptr::copy_nonoverlapping(src.add(i), dst.add(i), 1);\n                insert_tail(dst, dst.add(i), is_less);\n            }\n        }\n\n        // SAFETY: see comment in `CopyOnDrop::drop`.\n        let drop_guard = CopyOnDrop { src: scratch_base, dst: v_base, len };\n\n        // SAFETY: at this point scratch_base is fully initialized, allowing us\n        // to use it as the source of our merge back into the original array.\n        // If a panic occurs we ensure the original array is restored to a valid\n        // permutation of the input through drop_guard. This technique is similar\n        // to ping-pong merging.\n        bidirectional_merge(\n            &*ptr::slice_from_raw_parts(drop_guard.src, drop_guard.len),\n            drop_guard.dst,\n            is_less,\n        );\n        mem::forget(drop_guard);\n    }\n}",
  "callees": [
    "1203263015148700691813768649275090494044",
    "164990924868829835338594208825241637473",
    "25157582980489959215611460069903422136",
    "172618602834764011159883962278544677408",
    "171107143708729659712818433116512496847",
    "33833248959262743239749507068274582851",
    "246884006990283351112728686427332341490",
    "129934805316762061352056491888055415965",
    "73012982905768247717917694598862899551",
    "59801562553687689092623600929310060834",
    "25315992229481465352451865580694346951",
    "131203065817488211067140136749599673893",
    "155146884437592745449279657258619050520",
    "258820287469578611817448591488600041899",
    "89524114692705289205373110440981351891",
    "588974892899239543415856878986124229421",
    "1702731146511414276017376099407485764646",
    "47269587050330741766516611162095331197",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "118969608371033492241203013207235849818",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "58079812985260614779074871743441829358",
    "61537032802646890302053131132263133848",
    "1670765222083267730010075026643490075615",
    "56992650673164436291130925969138191855",
    "1232630557319299762117464203181083790137",
    "1773433010229001091613907777891715491506",
    "22427942798073410327032676682982568107",
    "177198898458980010943989196887491139632",
    "168077603476409786445563765736881603449",
    "31839912543330792949240639148670359750",
    "21282222690676335712137581847522815711",
    "242361661179939256212814162573512345816",
    "113507157561350201954668145983843466418",
    "104597061187962341608182590542231500442",
    "33042992310055245188183099101083799669",
    "73628352820189091529088643620501609539",
    "1116822316712761912511685576832152150565",
    "27143329980388801218198615083747125661",
    "1342521228831833354715461413551686205925",
    "182137659639592721553559991022176611856",
    "831074948707474570914489591174594528719",
    "872205114925099333011215560138034927031",
    "1749362715435459353511933873995340031229",
    "1033976944350554769714411313899354111723",
    "935865976961147776913102301421189848381",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "427948772593900246015617695218292297348",
    "7858545234940505117539855476375371758",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "80466408942777512049363027701449327301",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "174107661030119018973646362480685393050",
    "29910668401302440137796026586948212988",
    "366974912920839386515801963218903644372",
    "880099753416866301016817688796490528363",
    "130717245747538899593395990241756055369",
    "884246074448727927914595282961940941192",
    "975615807404907599012293873143289411403",
    "992275621815851552413461958853915402745",
    "465974363902275324511601404467167577535",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "27547235193633795771352944920978011050",
    "97912592448095803783191936410021855138",
    "931724475706603837711487856799374627976",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "41401200202353970847390355285864333483",
    "375960559020688079617955032586718986019",
    "17018701894801811388989276999089902303",
    "1074011387222553981714592241021871998873",
    "1798830088522245698710644459163533821120",
    "37086712814028636114793508434074774477",
    "10028408331298968888642529138096795132",
    "1788867498157052767014214874306089807379",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "1618241054506692736412506772334197899706",
    "85087518350441944038218124851204462662",
    "20769496869668818891224081341897612990",
    "371192579773467124910131766380195795041",
    "107572288856308239416310173626982485080",
    "5529107777201021216131280100391824668",
    "56771380296863258365292171566219158103",
    "177873690323934560824507033209875573135",
    "1711803526998921243212234553671451621943",
    "140515859349521543295891833634706299586",
    "1771652388590607545712984509371277924879",
    "8856004213898147781592655248059949830",
    "98960792746239800305942876628660385884",
    "95361434355292140996541898939168217904",
    "148582739576724500918539485428619977857",
    "1285548268893532030213075616539937343990",
    "3945208477995485256302685414128387760",
    "293645540748671545017999185713660079650",
    "170477930193487407342654832140393402043",
    "87118742526036214784874418592913721460",
    "16945391567286791139892170040202505549",
    "97035042303285179535964744919838693636",
    "150977970989936139035235426040927428810",
    "10028625014578992415748978204009993976",
    "104146325589933591886703414640642333807",
    "102741531711776819612478009525719629257",
    "1731824179572293139318170269715532491601",
    "301523161726526337515800343411294147396",
    "294184564209653742213128939253919937053",
    "76558056872559118697370451177876400677",
    "125106416838162417102443172008673540768",
    "1693154876786778756015345546248813964782",
    "149588873162497332836210716558493052153",
    "1259501359551487769214603611193503299843",
    "1674521261859068018214524318302796956848",
    "745700687152575931811153636128696697474",
    "276069504690705450417781480541525615203",
    "28799182752424723714798084487234723887",
    "717316864195020333212717142816164069242",
    "1347291578958130232011134465172650730496",
    "271286642476222177817887620574082934935",
    "98672616218528724113768882390038008401",
    "154911443990380340341563367924870465980",
    "126048648882406442003602795325732745334",
    "1006928117247909106515604664996585110540",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "935658007883373388218268314737148286081",
    "74111286315405054421392461884745781298",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
