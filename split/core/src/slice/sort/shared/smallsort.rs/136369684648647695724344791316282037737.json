{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::small_sort_network::<f32, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "136369684648647695724344791316282037737",
  "hash_direct": "344617493562756721411156008723852178894",
  "src": "fn small_sort_network<T, F>(v: &mut [T], is_less: &mut F)\nwhere\n    T: FreezeMarker,\n    F: FnMut(&T, &T) -> bool,\n{\n    // This implementation is tuned to be efficient for integer types.\n\n    let len = v.len();\n    if len < 2 {\n        return;\n    }\n\n    if len > SMALL_SORT_NETWORK_SCRATCH_LEN {\n        intrinsics::abort();\n    }\n\n    let mut stack_array = MaybeUninit::<[T; SMALL_SORT_NETWORK_SCRATCH_LEN]>::uninit();\n\n    let len_div_2 = len / 2;\n    let no_merge = len < 18;\n\n    let v_base = v.as_mut_ptr();\n    let initial_region_len = if no_merge { len } else { len_div_2 };\n    // SAFETY: Both possible values of `initial_region_len` are in-bounds.\n    let mut region = unsafe { &mut *ptr::slice_from_raw_parts_mut(v_base, initial_region_len) };\n\n    // Avoid compiler unrolling, we *really* don't want that to happen here for binary-size reasons.\n    loop {\n        let presorted_len = if region.len() >= 13 {\n            sort13_optimal(region, is_less);\n            13\n        } else if region.len() >= 9 {\n            sort9_optimal(region, is_less);\n            9\n        } else {\n            1\n        };\n\n        insertion_sort_shift_left(region, presorted_len, is_less);\n\n        if no_merge {\n            return;\n        }\n\n        if region.as_ptr() != v_base {\n            break;\n        }\n\n        // SAFETY: The right side of `v` based on `len_div_2` is guaranteed in-bounds.\n        unsafe {\n            region = &mut *ptr::slice_from_raw_parts_mut(v_base.add(len_div_2), len - len_div_2)\n        };\n    }\n\n    // SAFETY: We checked that T is Freeze and thus observation safe.\n    // Should is_less panic v was not modified in parity_merge and retains it's original input.\n    // scratch and v must not alias and scratch has v.len() space.\n    unsafe {\n        let scratch_base = stack_array.as_mut_ptr() as *mut T;\n        bidirectional_merge(\n            &mut *ptr::slice_from_raw_parts_mut(v_base, len),\n            scratch_base,\n            is_less,\n        );\n        ptr::copy_nonoverlapping(scratch_base, v_base, len);\n    }\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "842267059997019422815333829425931124000",
    "155146884437592745449279657258619050520",
    "258820287469578611817448591488600041899",
    "108405325740194239468703699157912546754",
    "588974892899239543415856878986124229421",
    "512025234808573526812473141793642908853",
    "195906651498126693711873346609041151231",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "844874268796424553916489422294626291889",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "11996021044221125357274189770344285829",
    "6914657791414926604643248476891087136",
    "12115540591965961592218455255086567020",
    "56992650673164436291130925969138191855",
    "98948247701979796981383318440935444036",
    "1181047503821259640715862953390532475195",
    "685837618491054085418214840674583290794",
    "1203941343652735381418091052915140268463",
    "1745833431236583275112658403751359725410",
    "916265930722000173617239060415090889913",
    "105358205211415583910007752475065903432",
    "804380288526545477915371929517593600679",
    "1237039252410549238112685582795900886554",
    "171478660599761938823798238921074606660",
    "1554592054844705604815491083685925038228",
    "31244240180128544175272526361568808560",
    "1749362715435459353511933873995340031229",
    "1280257502160233765816408910554470634604",
    "1157832635988226544312579101964623411278",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "1258220971271417206117729622567699832507",
    "107896500699219007011661308826584571988",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "681932933892771600113755084868377368020",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "5667765796385169624800112337147502292",
    "1239687241192450573815900328634536806436",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "939216601629970047517130593109292221833",
    "8161291837423649642305263678029669375",
    "153359812303060870313745291357235121700",
    "155091460395977933247805804921988192005",
    "147426714049374313624852995509887346090",
    "136662503515188431369196551783269046934",
    "196947132396865061710647143094248738344",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "130083723643071762058484072077162773150",
    "797634491229914867614080535361717737146",
    "463148830072667891214453452474049709022",
    "742648293927293403116298046442872262035",
    "50434367259982919184243988459294877425",
    "1814024728092996720912341531616753304217",
    "83073599152339492514601186786599769421",
    "1069702212178127763314378987073339101494",
    "1803948104025856588218214767042593335285",
    "1178529521704731285217495632489560401031",
    "449637264080571459055009589071427003",
    "14793593705814998347416339440269146414",
    "1220077814106487456211144053578469298836",
    "83554310679616438933972841632042535709",
    "1628068759159941485211848414904201608003",
    "59577599673772235326466319876396498692",
    "7017136333540388200713431365939228262",
    "124656679884072299719740859888952081738",
    "181892569495853782439411663079055486243",
    "1389380045413327538816629928410546178447",
    "182891627717839814008999627764106443076",
    "1802780445000898349110762802119532470240",
    "896043463780224064315792165598017428780",
    "42862075438888937226574528024466141816",
    "717316864195020333212717142816164069242",
    "1168630918331593266218365086329870130013",
    "5348354348306376212485042444235513148",
    "80493492398698236549394400339994883788",
    "1737046666080539081914974966237099365643",
    "1703660345011483495218041991169194027213",
    "166776697050612785113883264850514388619",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "38941281761602438632163576978956991022",
    "76610361547970390014041401956375253519",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
