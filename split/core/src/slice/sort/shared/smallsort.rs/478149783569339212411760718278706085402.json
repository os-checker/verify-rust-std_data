{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::merge_down::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "478149783569339212411760718278706085402",
  "hash_direct": "904886316241489211812667884923944530407",
  "src": "unsafe fn merge_down<T, F: FnMut(&T, &T) -> bool>(\n    mut left_src: *const T,\n    mut right_src: *const T,\n    mut dst: *mut T,\n    is_less: &mut F,\n) -> (*const T, *const T, *mut T) {\n    // This is a branchless merge utility function.\n    // The equivalent code with a branch would be:\n    //\n    // if !is_less(&*right_src, &*left_src) {\n    //     ptr::copy_nonoverlapping(right_src, dst, 1);\n    //     right_src = right_src.wrapping_sub(1);\n    // } else {\n    //     ptr::copy_nonoverlapping(left_src, dst, 1);\n    //     left_src = left_src.wrapping_sub(1);\n    // }\n    // dst = dst.sub(1);\n\n    // SAFETY: The caller must guarantee that `left_src`, `right_src` are valid\n    // to read and `dst` is valid to write, while not aliasing.\n    unsafe {\n        let is_l = !is_less(&*right_src, &*left_src);\n        let src = if is_l { right_src } else { left_src };\n        ptr::copy_nonoverlapping(src, dst, 1);\n        right_src = right_src.wrapping_sub(is_l as usize);\n        left_src = left_src.wrapping_sub(!is_l as usize);\n        dst = dst.sub(1);\n    }\n\n    (left_src, right_src, dst)\n}",
  "callees": [
    "81385294222362714685518950164453635767",
    "10436405171744302504267274923569342957",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "104310221742716516106825842456563485195",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "161225022469363908823200354701136905531",
    "35416910900921381748552437083050086013",
    "267397640077708419917774511588833123757",
    "1067675883129992420314174327751912045205",
    "85253214614932633916524759824229868238",
    "1342255621888147885315125004424529991795",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "25602688744340186171314083485517995425",
    "1660513410314982984011153915826543479765",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "26064680123257945312537992217601395168",
    "1783659889351469353310279621573179415628",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "380262551218047276514654482281297551654",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "606278748447449712310501739003523606747",
    "1142967233751731155212947729574677899571",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "132875940520269593265470766514320119664",
    "174277204108153543316058831477041384365",
    "428943727520842157113583718267113276912",
    "52088871005951181071266739164392301923",
    "153999075255816246604435272140943255557",
    "1564004178496337119316507105125054707476",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "15859584444614920947579563356650829639"
  ]
}
