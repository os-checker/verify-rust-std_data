{
  "file": "core/src/slice/sort/shared/smallsort.rs",
  "name": "slice::sort::shared::smallsort::small_sort_network::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "1695602432141345525510252627039675371021",
  "hash_direct": "82990627625314868256712126343401779410",
  "src": "fn small_sort_network<T, F>(v: &mut [T], is_less: &mut F)\nwhere\n    T: FreezeMarker,\n    F: FnMut(&T, &T) -> bool,\n{\n    // This implementation is tuned to be efficient for integer types.\n\n    let len = v.len();\n    if len < 2 {\n        return;\n    }\n\n    if len > SMALL_SORT_NETWORK_SCRATCH_LEN {\n        intrinsics::abort();\n    }\n\n    let mut stack_array = MaybeUninit::<[T; SMALL_SORT_NETWORK_SCRATCH_LEN]>::uninit();\n\n    let len_div_2 = len / 2;\n    let no_merge = len < 18;\n\n    let v_base = v.as_mut_ptr();\n    let initial_region_len = if no_merge { len } else { len_div_2 };\n    // SAFETY: Both possible values of `initial_region_len` are in-bounds.\n    let mut region = unsafe { &mut *ptr::slice_from_raw_parts_mut(v_base, initial_region_len) };\n\n    // Avoid compiler unrolling, we *really* don't want that to happen here for binary-size reasons.\n    loop {\n        let presorted_len = if region.len() >= 13 {\n            sort13_optimal(region, is_less);\n            13\n        } else if region.len() >= 9 {\n            sort9_optimal(region, is_less);\n            9\n        } else {\n            1\n        };\n\n        insertion_sort_shift_left(region, presorted_len, is_less);\n\n        if no_merge {\n            return;\n        }\n\n        if region.as_ptr() != v_base {\n            break;\n        }\n\n        // SAFETY: The right side of `v` based on `len_div_2` is guaranteed in-bounds.\n        unsafe {\n            region = &mut *ptr::slice_from_raw_parts_mut(v_base.add(len_div_2), len - len_div_2)\n        };\n    }\n\n    // SAFETY: We checked that T is Freeze and thus observation safe.\n    // Should is_less panic v was not modified in parity_merge and retains it's original input.\n    // scratch and v must not alias and scratch has v.len() space.\n    unsafe {\n        let scratch_base = stack_array.as_mut_ptr() as *mut T;\n        bidirectional_merge(\n            &mut *ptr::slice_from_raw_parts_mut(v_base, len),\n            scratch_base,\n            is_less,\n        );\n        ptr::copy_nonoverlapping(scratch_base, v_base, len);\n    }\n}",
  "callees": [
    "81385294222362714685518950164453635767",
    "10436405171744302504267274923569342957",
    "589599466487462365011430963401962118509",
    "47323665595455568617290020941376774286",
    "22705812558827111329283723858216813875",
    "111425599901702694743874629435682172347",
    "1211208467353976933716434349230374973041",
    "338767980120759628216770009205192908701",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "84909938954906103112758184730426842057",
    "104310221742716516106825842456563485195",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "161225022469363908823200354701136905531",
    "1438611585775203574910130895685408999981",
    "180874735662080423702617202418949819065",
    "1388505351152652276212287879007466526739",
    "526814189773195139817557993623059721647",
    "1318689887869696768916027194617270353866",
    "478963796818765230011614905701744971505",
    "127373222190113940911382518085484404284",
    "13690886856464921264592307169254381298",
    "2970558563338118601695745824178924829",
    "7806710684141319259603624147177559909",
    "72069073103208969911225242555062416714",
    "46889210748222038459296515004761626512",
    "1515570499237971047415050118004209565579",
    "1519947878957728317715395164626185264519",
    "35416910900921381748552437083050086013",
    "267397640077708419917774511588833123757",
    "1067675883129992420314174327751912045205",
    "85253214614932633916524759824229868238",
    "1342255621888147885315125004424529991795",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "25602688744340186171314083485517995425",
    "1660513410314982984011153915826543479765",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "643349473068727846115780678007450923004",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "13796074939706337624507826801091410480",
    "1783659889351469353310279621573179415628",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "380262551218047276514654482281297551654",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "163170642666796060956286475568727631006",
    "152018209062913109616942758022114057971",
    "890071058825386332013290477145660140073",
    "1475265068283050278915922321297878761320",
    "606278748447449712310501739003523606747",
    "1142967233751731155212947729574677899571",
    "1477511422753946740316655228456845827721",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "1472221441905198229316361628601040100701",
    "27655842266785146994666362440773715747",
    "132875940520269593265470766514320119664",
    "100993824523230373517684506930625255989",
    "765005664251686918017801768978488558766",
    "56019540459191385932005176823350594765",
    "8561876929084412397884517111050665137",
    "15377017856913222858050043622536508057",
    "85431504423290297139523741126676433890",
    "15530226500034424031374734222713951844",
    "169017152061146820209827866672499117723",
    "174277204108153543316058831477041384365",
    "4714829824583885766745164475970492146",
    "134520947048342040114926136864876993155",
    "428943727520842157113583718267113276912",
    "1589696344118059098717663854829197973274",
    "109469966708849791032487464821451459508",
    "52088871005951181071266739164392301923",
    "162847881169445680872835607174508120647",
    "43779394767917283706880008299822622021",
    "253424773888833947414574766405095891679",
    "1533364841792773299417975608639601378605",
    "478149783569339212411760718278706085402",
    "1186811983988351349414119038610302739164",
    "20864404773103763994288951545195620080",
    "1420081478519851209010977271388177030986",
    "127418728950704623968317714355074548185",
    "11425787473525927873242447089270695192",
    "156558724737321886766153526308848840146",
    "7839859953712079114640771271960005865",
    "1833648891477721821513278565533866774739",
    "153999075255816246604435272140943255557",
    "393974833682574441515290398983271504453",
    "1564004178496337119316507105125054707476",
    "48548664629730829953422984265893277498",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "15859584444614920947579563356650829639"
  ]
}
