{
  "file": "core/src/slice/sort/unstable/quicksort.rs",
  "name": "slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::<f32, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/sort/unstable/quicksort.rs:52:59: 52:65}>",
  "hash": "102293265631035818168954484351623432524",
  "hash_direct": "479592297566957600414827279735921339129",
  "src": "fn partition_lomuto_branchless_cyclic<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    // Novel partition implementation by Lukas Bergdoll and Orson Peters. Branchless Lomuto\n    // partition paired with a cyclic permutation.\n    // https://github.com/Voultapher/sort-research-rs/blob/main/writeup/lomcyc_partition/text.md\n\n    let len = v.len();\n    let v_base = v.as_mut_ptr();\n\n    if len == 0 {\n        return 0;\n    }\n\n    // SAFETY: We checked that `len` is more than zero, which means that reading `v_base` is safe to\n    // do. From there we have a bounded loop where `v_base.add(i)` is guaranteed in-bounds. `v` and\n    // `pivot` can't alias because of type system rules. The drop-guard `gap` ensures that should\n    // `is_less` panic we always overwrite the duplicate in the input. `gap.pos` stores the previous\n    // value of `right` and starts at `v_base` and so it too is in-bounds. Given `UNROLL_LEN == 2`\n    // after the main loop we either have A) the last element in `v` that has not yet been processed\n    // because `len % 2 != 0`, or B) all elements have been processed except the gap value that was\n    // saved at the beginning with `ptr::read(v_base)`. In the case A) the loop will iterate twice,\n    // first performing loop_body to take care of the last element that didn't fit into the unroll.\n    // After that the behavior is the same as for B) where we use the saved value as `right` to\n    // overwrite the duplicate. If this very last call to `is_less` panics the saved value will be\n    // copied back including all possible changes via interior mutability. If `is_less` does not\n    // panic and the code continues we overwrite the duplicate and do `right = right.add(1)`, this\n    // is safe to do with `&mut *gap.value` because `T` is the same as `[T; 1]` and generating a\n    // pointer one past the allocation is safe.\n    unsafe {\n        let mut loop_body = |state: &mut PartitionState<T>| {\n            let right_is_lt = is_less(&*state.right, pivot);\n            let left = v_base.add(state.num_lt);\n\n            ptr::copy(left, state.gap.pos, 1);\n            ptr::copy_nonoverlapping(state.right, left, 1);\n\n            state.gap.pos = state.right;\n            state.num_lt += right_is_lt as usize;\n\n            state.right = state.right.add(1);\n        };\n\n        // Ideally we could just use GapGuard in PartitionState, but the reference that is\n        // materialized with `&mut state` when calling `loop_body` would create a mutable reference\n        // to the parent struct that contains the gap value, invalidating the reference pointer\n        // created from a reference to the gap value in the cleanup loop. This is only an issue\n        // under Stacked Borrows, Tree Borrows accepts the intuitive code using GapGuard as valid.\n        let mut gap_value = ManuallyDrop::new(ptr::read(v_base));\n\n        let mut state = PartitionState {\n            num_lt: 0,\n            right: v_base.add(1),\n\n            gap: GapGuardRaw { pos: v_base, value: &mut *gap_value },\n        };\n\n        // Manual unrolling that works well on x86, Arm and with opt-level=s without murdering\n        // compile-times. Leaving this to the compiler yields ok to bad results.\n        let unroll_len = const { if size_of::<T>() <= 16 { 2 } else { 1 } };\n\n        let unroll_end = v_base.add(len - (unroll_len - 1));\n        while state.right < unroll_end {\n            if unroll_len == 2 {\n                loop_body(&mut state);\n                loop_body(&mut state);\n            } else {\n                loop_body(&mut state);\n            }\n        }\n\n        // Single instantiate `loop_body` for both the unroll cleanup and cyclic permutation\n        // cleanup. Optimizes binary-size and compile-time.\n        let end = v_base.add(len);\n        loop {\n            let is_done = state.right == end;\n            state.right = if is_done { state.gap.value } else { state.right };\n\n            loop_body(&mut state);\n\n            if is_done {\n                mem::forget(state.gap);\n                break;\n            }\n        }\n\n        state.num_lt\n    }\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "842267059997019422815333829425931124000",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "113226668389625211533764051112159634765",
    "685837618491054085418214840674583290794",
    "549423067191978244112722515245659862657",
    "1554592054844705604815491083685925038228",
    "160591557134944392321723192299080648438",
    "31244240180128544175272526361568808560",
    "1749362715435459353511933873995340031229",
    "1280257502160233765816408910554470634604",
    "1157832635988226544312579101964623411278",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1239687241192450573815900328634536806436",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "797634491229914867614080535361717737146",
    "463148830072667891214453452474049709022",
    "1803948104025856588218214767042593335285",
    "449637264080571459055009589071427003",
    "1220077814106487456211144053578469298836",
    "59577599673772235326466319876396498692",
    "124656679884072299719740859888952081738",
    "992674187911753027612573299223955998010",
    "149450016945975833939861482711151968848",
    "166776697050612785113883264850514388619",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "76610361547970390014041401956375253519",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
