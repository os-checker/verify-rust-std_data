{
  "file": "core/src/slice/sort/unstable/quicksort.rs",
  "name": "slice::sort::unstable::quicksort::partition::<f32, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "83495945888949871915651258054488379017",
  "hash_direct": "167701855454271462901177880433301948374",
  "src": "pub(crate) fn partition<T, F>(v: &mut [T], pivot: usize, is_less: &mut F) -> usize\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    let len = v.len();\n\n    // Allows for panic-free code-gen by proving this property to the compiler.\n    if len == 0 {\n        return 0;\n    }\n\n    if pivot >= len {\n        intrinsics::abort();\n    }\n\n    // SAFETY: We checked that `pivot` is in-bounds.\n    unsafe {\n        // Place the pivot at the beginning of slice.\n        v.swap_unchecked(0, pivot);\n    }\n    let (pivot, v_without_pivot) = v.split_at_mut(1);\n\n    // Assuming that Rust generates noalias LLVM IR we can be sure that a partition function\n    // signature of the form `(v: &mut [T], pivot: &T)` guarantees that pivot and v can't alias.\n    // Having this guarantee is crucial for optimizations. It's possible to copy the pivot value\n    // into a stack value, but this creates issues for types with interior mutability mandating\n    // a drop guard.\n    let pivot = &mut pivot[0];\n\n    // This construct is used to limit the LLVM IR generated, which saves large amounts of\n    // compile-time by only instantiating the code that is needed. Idea by Frank Steffahn.\n    let num_lt = (const { inst_partition::<T, F>() })(v_without_pivot, pivot, is_less);\n\n    if num_lt >= len {\n        intrinsics::abort();\n    }\n\n    // SAFETY: We checked that `num_lt` is in-bounds.\n    unsafe {\n        // Place the pivot between the two partitions.\n        v.swap_unchecked(0, num_lt);\n    }\n\n    num_lt\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "842267059997019422815333829425931124000",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "113226668389625211533764051112159634765",
    "685837618491054085418214840674583290794",
    "549423067191978244112722515245659862657",
    "1726194437602966340016757301249689204343",
    "1243884323998816418613498969745733613209",
    "468393518768745234312254314427889265270",
    "1554592054844705604815491083685925038228",
    "160591557134944392321723192299080648438",
    "31244240180128544175272526361568808560",
    "1749362715435459353511933873995340031229",
    "1280257502160233765816408910554470634604",
    "1157832635988226544312579101964623411278",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1239687241192450573815900328634536806436",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "130083723643071762058484072077162773150",
    "797634491229914867614080535361717737146",
    "463148830072667891214453452474049709022",
    "1803948104025856588218214767042593335285",
    "1178529521704731285217495632489560401031",
    "15720099998103460418870323427935895143",
    "449637264080571459055009589071427003",
    "1220077814106487456211144053578469298836",
    "59577599673772235326466319876396498692",
    "124656679884072299719740859888952081738",
    "1343142092765441821115514284447289396667",
    "486799885668572616615550018465090899142",
    "1530326239868302809413775937244442573659",
    "77482444210950555514611328337551312872",
    "964068323763253064714810347289686832956",
    "133629307889292919803060037439123987885",
    "128992212038923501071741144127711615383",
    "166776697050612785113883264850514388619",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "76610361547970390014041401956375253519",
    "1262268302406396300513565250820649213634",
    "74402658018052786310281099043124569565",
    "1027590512138995399024066666285567387",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
