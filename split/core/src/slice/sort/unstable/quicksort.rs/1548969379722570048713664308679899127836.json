{
  "file": "core/src/slice/sort/unstable/quicksort.rs",
  "name": "slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::<f64, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3165:41: 3165:47}>",
  "hash": "1548969379722570048713664308679899127836",
  "hash_direct": "64360783465351531528014807340745438937",
  "src": "fn partition_lomuto_branchless_cyclic<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    // Novel partition implementation by Lukas Bergdoll and Orson Peters. Branchless Lomuto\n    // partition paired with a cyclic permutation.\n    // https://github.com/Voultapher/sort-research-rs/blob/main/writeup/lomcyc_partition/text.md\n\n    let len = v.len();\n    let v_base = v.as_mut_ptr();\n\n    if len == 0 {\n        return 0;\n    }\n\n    // SAFETY: We checked that `len` is more than zero, which means that reading `v_base` is safe to\n    // do. From there we have a bounded loop where `v_base.add(i)` is guaranteed in-bounds. `v` and\n    // `pivot` can't alias because of type system rules. The drop-guard `gap` ensures that should\n    // `is_less` panic we always overwrite the duplicate in the input. `gap.pos` stores the previous\n    // value of `right` and starts at `v_base` and so it too is in-bounds. Given `UNROLL_LEN == 2`\n    // after the main loop we either have A) the last element in `v` that has not yet been processed\n    // because `len % 2 != 0`, or B) all elements have been processed except the gap value that was\n    // saved at the beginning with `ptr::read(v_base)`. In the case A) the loop will iterate twice,\n    // first performing loop_body to take care of the last element that didn't fit into the unroll.\n    // After that the behavior is the same as for B) where we use the saved value as `right` to\n    // overwrite the duplicate. If this very last call to `is_less` panics the saved value will be\n    // copied back including all possible changes via interior mutability. If `is_less` does not\n    // panic and the code continues we overwrite the duplicate and do `right = right.add(1)`, this\n    // is safe to do with `&mut *gap.value` because `T` is the same as `[T; 1]` and generating a\n    // pointer one past the allocation is safe.\n    unsafe {\n        let mut loop_body = |state: &mut PartitionState<T>| {\n            let right_is_lt = is_less(&*state.right, pivot);\n            let left = v_base.add(state.num_lt);\n\n            ptr::copy(left, state.gap.pos, 1);\n            ptr::copy_nonoverlapping(state.right, left, 1);\n\n            state.gap.pos = state.right;\n            state.num_lt += right_is_lt as usize;\n\n            state.right = state.right.add(1);\n        };\n\n        // Ideally we could just use GapGuard in PartitionState, but the reference that is\n        // materialized with `&mut state` when calling `loop_body` would create a mutable reference\n        // to the parent struct that contains the gap value, invalidating the reference pointer\n        // created from a reference to the gap value in the cleanup loop. This is only an issue\n        // under Stacked Borrows, Tree Borrows accepts the intuitive code using GapGuard as valid.\n        let mut gap_value = ManuallyDrop::new(ptr::read(v_base));\n\n        let mut state = PartitionState {\n            num_lt: 0,\n            right: v_base.add(1),\n\n            gap: GapGuardRaw { pos: v_base, value: &mut *gap_value },\n        };\n\n        // Manual unrolling that works well on x86, Arm and with opt-level=s without murdering\n        // compile-times. Leaving this to the compiler yields ok to bad results.\n        let unroll_len = const { if size_of::<T>() <= 16 { 2 } else { 1 } };\n\n        let unroll_end = v_base.add(len - (unroll_len - 1));\n        while state.right < unroll_end {\n            if unroll_len == 2 {\n                loop_body(&mut state);\n                loop_body(&mut state);\n            } else {\n                loop_body(&mut state);\n            }\n        }\n\n        // Single instantiate `loop_body` for both the unroll cleanup and cyclic permutation\n        // cleanup. Optimizes binary-size and compile-time.\n        let end = v_base.add(len);\n        loop {\n            let is_done = state.right == end;\n            state.right = if is_done { state.gap.value } else { state.right };\n\n            loop_body(&mut state);\n\n            if is_done {\n                mem::forget(state.gap);\n                break;\n            }\n        }\n\n        state.num_lt\n    }\n}",
  "callees": [
    "25315992229481465352451865580694346951",
    "131203065817488211067140136749599673893",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "66033579580843115639216122945030028401",
    "177198898458980010943989196887491139632",
    "412668679751514760211927490316490023937",
    "27143329980388801218198615083747125661",
    "24957256455678140611948673534700671105",
    "872205114925099333011215560138034927031",
    "1749362715435459353511933873995340031229",
    "1033976944350554769714411313899354111723",
    "935865976961147776913102301421189848381",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "29910668401302440137796026586948212988",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "76087680206635820056667644559109535396",
    "371192579773467124910131766380195795041",
    "95361434355292140996541898939168217904",
    "293645540748671545017999185713660079650",
    "16945391567286791139892170040202505549",
    "1731824179572293139318170269715532491601",
    "294184564209653742213128939253919937053",
    "180222540055607842394270083248253722713",
    "684705619041318229017965376202785420997",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "74111286315405054421392461884745781298",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
