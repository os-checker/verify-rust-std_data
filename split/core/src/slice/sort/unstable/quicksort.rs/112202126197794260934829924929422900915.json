{
  "file": "core/src/slice/sort/unstable/quicksort.rs",
  "name": "slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::<f32, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/slice/mod.rs:3158:41: 3158:47}>",
  "hash": "112202126197794260934829924929422900915",
  "hash_direct": "126951414809156454446347076206666182734",
  "src": "fn partition_lomuto_branchless_cyclic<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    // Novel partition implementation by Lukas Bergdoll and Orson Peters. Branchless Lomuto\n    // partition paired with a cyclic permutation.\n    // https://github.com/Voultapher/sort-research-rs/blob/main/writeup/lomcyc_partition/text.md\n\n    let len = v.len();\n    let v_base = v.as_mut_ptr();\n\n    if len == 0 {\n        return 0;\n    }\n\n    // SAFETY: We checked that `len` is more than zero, which means that reading `v_base` is safe to\n    // do. From there we have a bounded loop where `v_base.add(i)` is guaranteed in-bounds. `v` and\n    // `pivot` can't alias because of type system rules. The drop-guard `gap` ensures that should\n    // `is_less` panic we always overwrite the duplicate in the input. `gap.pos` stores the previous\n    // value of `right` and starts at `v_base` and so it too is in-bounds. Given `UNROLL_LEN == 2`\n    // after the main loop we either have A) the last element in `v` that has not yet been processed\n    // because `len % 2 != 0`, or B) all elements have been processed except the gap value that was\n    // saved at the beginning with `ptr::read(v_base)`. In the case A) the loop will iterate twice,\n    // first performing loop_body to take care of the last element that didn't fit into the unroll.\n    // After that the behavior is the same as for B) where we use the saved value as `right` to\n    // overwrite the duplicate. If this very last call to `is_less` panics the saved value will be\n    // copied back including all possible changes via interior mutability. If `is_less` does not\n    // panic and the code continues we overwrite the duplicate and do `right = right.add(1)`, this\n    // is safe to do with `&mut *gap.value` because `T` is the same as `[T; 1]` and generating a\n    // pointer one past the allocation is safe.\n    unsafe {\n        let mut loop_body = |state: &mut PartitionState<T>| {\n            let right_is_lt = is_less(&*state.right, pivot);\n            let left = v_base.add(state.num_lt);\n\n            ptr::copy(left, state.gap.pos, 1);\n            ptr::copy_nonoverlapping(state.right, left, 1);\n\n            state.gap.pos = state.right;\n            state.num_lt += right_is_lt as usize;\n\n            state.right = state.right.add(1);\n        };\n\n        // Ideally we could just use GapGuard in PartitionState, but the reference that is\n        // materialized with `&mut state` when calling `loop_body` would create a mutable reference\n        // to the parent struct that contains the gap value, invalidating the reference pointer\n        // created from a reference to the gap value in the cleanup loop. This is only an issue\n        // under Stacked Borrows, Tree Borrows accepts the intuitive code using GapGuard as valid.\n        let mut gap_value = ManuallyDrop::new(ptr::read(v_base));\n\n        let mut state = PartitionState {\n            num_lt: 0,\n            right: v_base.add(1),\n\n            gap: GapGuardRaw { pos: v_base, value: &mut *gap_value },\n        };\n\n        // Manual unrolling that works well on x86, Arm and with opt-level=s without murdering\n        // compile-times. Leaving this to the compiler yields ok to bad results.\n        let unroll_len = const { if size_of::<T>() <= 16 { 2 } else { 1 } };\n\n        let unroll_end = v_base.add(len - (unroll_len - 1));\n        while state.right < unroll_end {\n            if unroll_len == 2 {\n                loop_body(&mut state);\n                loop_body(&mut state);\n            } else {\n                loop_body(&mut state);\n            }\n        }\n\n        // Single instantiate `loop_body` for both the unroll cleanup and cyclic permutation\n        // cleanup. Optimizes binary-size and compile-time.\n        let end = v_base.add(len);\n        loop {\n            let is_done = state.right == end;\n            state.right = if is_done { state.gap.value } else { state.right };\n\n            loop_body(&mut state);\n\n            if is_done {\n                mem::forget(state.gap);\n                break;\n            }\n        }\n\n        state.num_lt\n    }\n}",
  "callees": [
    "81385294222362714685518950164453635767",
    "46489561819967951214045237103392664622",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "161225022469363908823200354701136905531",
    "172723407883740348927191742104314741909",
    "113409710184701619025179446284329884676",
    "1410004887989501644515845180698037014023",
    "42378138817949430056736156431645255910",
    "169902515749800337588702901421078122050",
    "135598008489588662314776882657014310925",
    "1067675883129992420314174327751912045205",
    "162361112433299032238584891523845488474",
    "93773215297586442255071597017053773700",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1509749051880564672214139607973048202552",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "380262551218047276514654482281297551654",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "15079626449537338615768363195140101085",
    "127996716050881673667025817820463335062",
    "1471284738009705221911766363129781462391",
    "169017152061146820209827866672499117723",
    "126848878295068376216938117831082859107",
    "93887220617839191357133813816346400830",
    "118042308767439437138395977050205460629",
    "1722823965196009580810238198280048864575",
    "1833648891477721821513278565533866774739",
    "153999075255816246604435272140943255557",
    "393974833682574441515290398983271504453",
    "48548664629730829953422984265893277498",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "15859584444614920947579563356650829639"
  ]
}
