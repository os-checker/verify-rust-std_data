{
  "file": "core/src/slice/ascii.rs",
  "name": "slice::ascii::<impl [u8]>::eq_ignore_ascii_case",
  "hash": "350884704123850350513319172588132258227",
  "hash_direct": "1771295013358738684410467100384095761376",
  "src": "pub const fn eq_ignore_ascii_case(&self, other: &[u8]) -> bool {\n        if self.len() != other.len() {\n            return false;\n        }\n\n        // FIXME(const-hack): This implementation can be reverted when\n        // `core::iter::zip` is allowed in const. The original implementation:\n        //  self.len() == other.len() && iter::zip(self, other).all(|(a, b)| a.eq_ignore_ascii_case(b))\n        let mut a = self;\n        let mut b = other;\n\n        while let ([first_a, rest_a @ ..], [first_b, rest_b @ ..]) = (a, b) {\n            if first_a.eq_ignore_ascii_case(&first_b) {\n                a = rest_a;\n                b = rest_b;\n            } else {\n                return false;\n            }\n        }\n\n        true\n    }",
  "callees": [
    "483471699704086520114400434403057824853",
    "867036244033790321718200992945714773095",
    "529980032388086197635251657099553279"
  ]
}
