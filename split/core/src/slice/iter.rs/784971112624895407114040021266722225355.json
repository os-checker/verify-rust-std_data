{
  "file": "core/src/slice/iter.rs",
  "name": "slice::iter::verify::verify_u8::check_next_back::{closure#0}",
  "hash": "784971112624895407114040021266722225355",
  "hash_direct": "160376974542549402318839371198694759484",
  "src": "|iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                }",
  "macro_backtrace": [
    {
      "callsite": "check_iter_with_ty!(verify_u8, u8, u32::MAX as usize)",
      "defsite": "macro_rules! check_iter_with_ty {\n        ($module:ident, $ty:ty, $max:expr) => {\n            mod $module {\n                use super::*;\n                const MAX_LEN: usize = $max;\n\n                #[kani::proof]\n                fn check_new_iter() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let slice = any_slice::<$ty>(&array);\n                    let mut iter = Iter::new(slice);\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                /// Count consumes the value, thus, invoke it directly.\n                #[kani::proof]\n                fn check_count() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let mut iter = any_iter::<$ty>(&array);\n                    iter.count();\n                }\n\n                #[kani::proof]\n                fn check_default() {\n                    let iter: Iter<'_, $ty> = Iter::default();\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                check_unsafe_contracts!(check_next_back_unchecked, $ty, next_back_unchecked());\n                check_unsafe_contracts!(check_post_inc_start, $ty, post_inc_start(kani::any()));\n                check_unsafe_contracts!(check_pre_dec_end, $ty, pre_dec_end(kani::any()));\n\n                // Public functions that call safe abstraction `make_slice`.\n                check_safe_abstraction!(check_as_slice, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_slice();\n                });\n                check_safe_abstraction!(check_as_ref, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_ref();\n                });\n\n                check_safe_abstraction!(check_advance_back_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.advance_back_by(kani::any());\n                });\n\n                check_safe_abstraction!(check_is_empty, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.is_empty();\n                });\n                check_safe_abstraction!(check_len, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.len();\n                });\n                check_safe_abstraction!(check_size_hint, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.size_hint();\n                });\n                check_safe_abstraction!(check_nth, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth(kani::any());\n                });\n                check_safe_abstraction!(check_advance_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.advance_by(kani::any());\n                });\n                check_safe_abstraction!(check_next_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                });\n                check_safe_abstraction!(check_nth_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth_back(kani::any());\n                });\n                check_safe_abstraction!(check_next, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next();\n                });\n\n                // Ensure that clone always generates a safe object.\n                check_safe_abstraction!(check_clone, $ty, |iter: &mut Iter<'_, $ty>| {\n                    kani::assert(iter.clone().is_safe(), \"Clone is safe\");\n                });\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "64998410348949013165534729523823375850",
    "101445464642493846677061784532715524123",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "229282620068738124516643974501969903000",
    "69893069659343665423091634361181161066",
    "671334365265236941113753063318744059957",
    "115305965424151250157684815253829770404",
    "53569486981529370344752868158650318763",
    "33020214437710035965402411197660679021",
    "61832321833168172414891909952066628566",
    "298808489315491136111835410837383964297",
    "1818030476393896762115732806288582042143",
    "740076357531504978616276254362912957022",
    "35887217987802178871848455395254617178",
    "132977040173719154057256981446941835376",
    "58392407700799511755287538562328636651",
    "58392407700799511755287538562328636651",
    "58392407700799511755287538562328636651",
    "58392407700799511755287538562328636651",
    "171103174678191354385881825173134270213",
    "171103174678191354385881825173134270213",
    "171103174678191354385881825173134270213",
    "171103174678191354385881825173134270213",
    "67422619050628989531877668274484584789",
    "67708966930769958617679162683566997821",
    "67708966930769958617679162683566997821",
    "67708966930769958617679162683566997821",
    "67708966930769958617679162683566997821",
    "1519530991981792435917141154700341988379",
    "1519530991981792435917141154700341988379",
    "1519530991981792435917141154700341988379",
    "1519530991981792435917141154700341988379",
    "1283868160390231989212228490164833471738",
    "739520556846959085018120036998133255835"
  ]
}
