{
  "file": "core/src/slice/iter.rs",
  "name": "slice::iter::verify::verify_unit::check_size_hint::{closure#0}",
  "hash": "1518245642307003516712176316430030413889",
  "hash_direct": "50578458485569491042797387141220076198",
  "src": "|iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.size_hint();\n                }",
  "macro_backtrace": [
    {
      "callsite": "check_iter_with_ty!(verify_unit, (), isize::MAX as usize)",
      "defsite": "macro_rules! check_iter_with_ty {\n        ($module:ident, $ty:ty, $max:expr) => {\n            mod $module {\n                use super::*;\n                const MAX_LEN: usize = $max;\n\n                #[kani::proof]\n                fn check_new_iter() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let slice = any_slice::<$ty>(&array);\n                    let mut iter = Iter::new(slice);\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                /// Count consumes the value, thus, invoke it directly.\n                #[kani::proof]\n                fn check_count() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let mut iter = any_iter::<$ty>(&array);\n                    iter.count();\n                }\n\n                #[kani::proof]\n                fn check_default() {\n                    let iter: Iter<'_, $ty> = Iter::default();\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                check_unsafe_contracts!(check_next_back_unchecked, $ty, next_back_unchecked());\n                check_unsafe_contracts!(check_post_inc_start, $ty, post_inc_start(kani::any()));\n                check_unsafe_contracts!(check_pre_dec_end, $ty, pre_dec_end(kani::any()));\n\n                // Public functions that call safe abstraction `make_slice`.\n                check_safe_abstraction!(check_as_slice, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_slice();\n                });\n                check_safe_abstraction!(check_as_ref, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_ref();\n                });\n\n                check_safe_abstraction!(check_advance_back_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.advance_back_by(kani::any());\n                });\n\n                check_safe_abstraction!(check_is_empty, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.is_empty();\n                });\n                check_safe_abstraction!(check_len, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.len();\n                });\n                check_safe_abstraction!(check_size_hint, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.size_hint();\n                });\n                check_safe_abstraction!(check_nth, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth(kani::any());\n                });\n                check_safe_abstraction!(check_advance_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.advance_by(kani::any());\n                });\n                check_safe_abstraction!(check_next_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                });\n                check_safe_abstraction!(check_nth_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth_back(kani::any());\n                });\n                check_safe_abstraction!(check_next, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next();\n                });\n\n                // Ensure that clone always generates a safe object.\n                check_safe_abstraction!(check_clone, $ty, |iter: &mut Iter<'_, $ty>| {\n                    kani::assert(iter.clone().is_safe(), \"Clone is safe\");\n                });\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "47278574192031232971799194590021398469",
    "16824420916691935049705640393259467449",
    "719588359901845686911442526210849021919",
    "3049359533754430701641135011748168414",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "3048369820222268561457240744739527535",
    "14289085791843058303972699274315536239",
    "234744906565390750713786964370604964323",
    "124586139718338474718261279442774237855",
    "67882232402767719010514515033653854877",
    "730151217416494602411066005484484619249",
    "1137271765924114987514947403158445640283",
    "399232661239117480517401994520839366833"
  ]
}
