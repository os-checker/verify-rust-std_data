{
  "file": "core/src/slice/iter.rs",
  "name": "<slice::iter::Iter<'_, ()> as ub_checks::Invariant>::is_safe",
  "hash": "1296399491885110488144173181242802852",
  "hash_direct": "116579575796608718727726644230828340120",
  "src": "fn is_safe(&self) -> bool {\n        let ty_size = crate::mem::size_of::<T>();\n        // Use `abs_diff` since `end_or_len` may be smaller than `ptr` if `T` is a ZST.\n        let distance = self.ptr.addr().get().abs_diff(self.end_or_len as usize);\n        if ty_size == 0 || distance == 0 {\n            self.ptr.is_aligned()\n        } else {\n            let slice_ptr: *const [T] =\n                crate::ptr::from_raw_parts(self.ptr.as_ptr(), distance / ty_size);\n            crate::ub_checks::same_allocation(self.ptr.as_ptr(), self.end_or_len)\n                && self.ptr.addr().get() <= self.end_or_len as usize\n                && distance % ty_size == 0\n                && crate::ub_checks::can_dereference(slice_ptr)\n        }\n    }",
  "callees": [
    "938248124271107744012249479729763505168",
    "80989463918046823203044749903697808714",
    "1295499066349112484912490938496969975321",
    "808690604947597133713899618615583714737",
    "108393381985250317406898676759665844160",
    "177504877725561479516307868202288769850",
    "176936122189106107208026065836265178622",
    "505024343408408130413325987021625987746",
    "67202008249250073035419006078308699005",
    "87155493850759147613706940596486426522",
    "12613664237720278528179521057155220527",
    "30327504586663122653748936807822272957",
    "247863734272995071816029882222598095082",
    "1576661033887935551017067258717129938136",
    "642177043321009562414109667214760056829",
    "1314967675786698997011950244940417197826",
    "896888444305093759317012834705524625919",
    "919068891404014203217949855778924663488",
    "596794692914067914615904078176451152302",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "24899707394772763509340058915194816546",
    "274291830502248510811445962002553983266",
    "1749362715435459353511933873995340031229",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "34410515695185066949979771014252260096",
    "1676806814539779643518083197252466559589",
    "137727233253125029217674386074482569004",
    "83296026332579416941842209678709993328",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "1439450515919927509916541642317184703626",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "1045253218198362802817926442850613386040",
    "114094904968422577324113150898770820303",
    "1362358863161692250215592468137871508810",
    "8061732690348531818738474067480076930",
    "64642539992052733795813670609047831595",
    "695446806827517711713616901697655231173",
    "229928786779365060416476958219270538056",
    "816803838456459018614894698904992159",
    "887235042902537721816254572592014930578",
    "739520556846959085018120036998133255835"
  ]
}
