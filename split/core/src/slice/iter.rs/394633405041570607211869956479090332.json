{
  "file": "core/src/slice/iter.rs",
  "name": "slice::iter::IterMut::<'_, mem::maybe_uninit::MaybeUninit<u8>>::new",
  "hash": "394633405041570607211869956479090332",
  "hash_direct": "481471149124090936812542592705151345962",
  "src": "pub(super) const fn new(slice: &'a mut [T]) -> Self {\n        let len = slice.len();\n        let ptr: NonNull<T> = NonNull::from_mut(slice).cast();\n        // SAFETY: There are several things here:\n        //\n        // `ptr` has been obtained by `slice.as_ptr()` where `slice` is a valid\n        // reference thus it is non-NUL and safe to use and pass to\n        // `NonNull::new_unchecked` .\n        //\n        // Adding `slice.len()` to the starting pointer gives a pointer\n        // at the end of `slice`. `end` will never be dereferenced, only checked\n        // for direct pointer equality with `ptr` to check if the iterator is\n        // done.\n        //\n        // In the case of a ZST, the end pointer is just the length.  It's never\n        // used as a pointer at all, and thus it's fine to have no provenance.\n        //\n        // See the `next_unchecked!` and `is_empty!` macros as well as the\n        // `post_inc_start` method for more information.\n        unsafe {\n            let end_or_len =\n                if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };\n\n            Self { ptr, end_or_len, _marker: PhantomData }\n        }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "44779967027244448155971750888438996769",
    "143572956432032064744447501745832117320",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "885535563108047284817345520813573949421",
    "293645540748671545017999185713660079650",
    "11558354065183020098272268202305191574",
    "737126953224577057818380955279881575188",
    "79018716508007134222946936271710862449",
    "8210967931803479727635651667445876416",
    "464009354773158060415329964262630302776",
    "982812517398244847818134688650878457542",
    "739520556846959085018120036998133255835"
  ]
}
