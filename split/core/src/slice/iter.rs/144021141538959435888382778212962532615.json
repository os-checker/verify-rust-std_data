{
  "file": "core/src/slice/iter.rs",
  "name": "slice::iter::verify::verify_char::check_next_back::{closure#0}",
  "hash": "144021141538959435888382778212962532615",
  "hash_direct": "898149709131023580510390496124927710921",
  "src": "|iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                }",
  "macro_backtrace": [
    {
      "callsite": "check_iter_with_ty!(verify_char, char, 50)",
      "defsite": "macro_rules! check_iter_with_ty {\n        ($module:ident, $ty:ty, $max:expr) => {\n            mod $module {\n                use super::*;\n                const MAX_LEN: usize = $max;\n\n                #[kani::proof]\n                fn check_new_iter() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let slice = any_slice::<$ty>(&array);\n                    let mut iter = Iter::new(slice);\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                /// Count consumes the value, thus, invoke it directly.\n                #[kani::proof]\n                fn check_count() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let mut iter = any_iter::<$ty>(&array);\n                    iter.count();\n                }\n\n                #[kani::proof]\n                fn check_default() {\n                    let iter: Iter<'_, $ty> = Iter::default();\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                check_unsafe_contracts!(check_next_back_unchecked, $ty, next_back_unchecked());\n                check_unsafe_contracts!(check_post_inc_start, $ty, post_inc_start(kani::any()));\n                check_unsafe_contracts!(check_pre_dec_end, $ty, pre_dec_end(kani::any()));\n\n                // Public functions that call safe abstraction `make_slice`.\n                check_safe_abstraction!(check_as_slice, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_slice();\n                });\n                check_safe_abstraction!(check_as_ref, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_ref();\n                });\n\n                check_safe_abstraction!(check_advance_back_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.advance_back_by(kani::any());\n                });\n\n                check_safe_abstraction!(check_is_empty, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.is_empty();\n                });\n                check_safe_abstraction!(check_len, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.len();\n                });\n                check_safe_abstraction!(check_size_hint, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.size_hint();\n                });\n                check_safe_abstraction!(check_nth, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth(kani::any());\n                });\n                check_safe_abstraction!(check_advance_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.advance_by(kani::any());\n                });\n                check_safe_abstraction!(check_next_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                });\n                check_safe_abstraction!(check_nth_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth_back(kani::any());\n                });\n                check_safe_abstraction!(check_next, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next();\n                });\n\n                // Ensure that clone always generates a safe object.\n                check_safe_abstraction!(check_clone, $ty, |iter: &mut Iter<'_, $ty>| {\n                    kani::assert(iter.clone().is_safe(), \"Clone is safe\");\n                });\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "6221741227072437069508312353437850718",
    "841528230883583910260472553997390736",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "19175242352379257894524511946426654035",
    "157419191093478936518787831921895095700",
    "436551162395812163215461316838716953548",
    "153447232197298544813603997248993017217",
    "26664490570856306671306019945196746362",
    "74002631578558466352820320767584210544",
    "542107969656591403611120475955569064682",
    "286190699060886541614696498458211890697",
    "304801419941651841910401968772499240583",
    "1052342503697437556617942654769462624158",
    "153875055561663340753415090302841894524",
    "158142288592394205304531518305159488887",
    "1661098735954058077313331678224451019543",
    "873553439411192054217928980363503086913",
    "151799947931234680724993450151785473783",
    "151799947931234680724993450151785473783",
    "151799947931234680724993450151785473783",
    "151799947931234680724993450151785473783",
    "178047160462714400025354569479675145522",
    "178047160462714400025354569479675145522",
    "178047160462714400025354569479675145522",
    "178047160462714400025354569479675145522",
    "30545534060300319003176930052732022160",
    "11966462423530437086445775802129771100",
    "11966462423530437086445775802129771100",
    "11966462423530437086445775802129771100",
    "11966462423530437086445775802129771100",
    "142996366076643612457142535678239907824",
    "142996366076643612457142535678239907824",
    "142996366076643612457142535678239907824",
    "142996366076643612457142535678239907824",
    "160761334367309494176444203284255754796",
    "399232661239117480517401994520839366833"
  ]
}
