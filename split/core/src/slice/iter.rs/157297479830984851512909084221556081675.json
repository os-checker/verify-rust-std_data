{
  "file": "core/src/slice/iter.rs",
  "name": "<slice::iter::Iter<'_, (char, u8)> as ub_checks::Invariant>::is_safe",
  "hash": "157297479830984851512909084221556081675",
  "hash_direct": "1285881470867366789711871432538708238901",
  "src": "fn is_safe(&self) -> bool {\n        let ty_size = crate::mem::size_of::<T>();\n        // Use `abs_diff` since `end_or_len` may be smaller than `ptr` if `T` is a ZST.\n        let distance = self.ptr.addr().get().abs_diff(self.end_or_len as usize);\n        if ty_size == 0 || distance == 0 {\n            self.ptr.is_aligned()\n        } else {\n            let slice_ptr: *const [T] =\n                crate::ptr::from_raw_parts(self.ptr.as_ptr(), distance / ty_size);\n            crate::ub_checks::same_allocation(self.ptr.as_ptr(), self.end_or_len)\n                && self.ptr.addr().get() <= self.end_or_len as usize\n                && distance % ty_size == 0\n                && crate::ub_checks::can_dereference(slice_ptr)\n        }\n    }",
  "callees": [
    "938248124271107744012249479729763505168",
    "80989463918046823203044749903697808714",
    "1295499066349112484912490938496969975321",
    "808690604947597133713899618615583714737",
    "108393381985250317406898676759665844160",
    "177504877725561479516307868202288769850",
    "30045367355715999169594564136086036541",
    "390669978356670566211495759724191258278",
    "42439857493457686231976896950670544502",
    "289671106212139821911541211630919692796",
    "166856188763976225565795950411525405630",
    "1769635765532257451911986051852889773882",
    "1815553186172281223816604261080148270538",
    "1077938019079185917312017377021403592040",
    "1534626612498321684714396064035226642407",
    "175059148501234920615695024018406584683",
    "896888444305093759317012834705524625919",
    "489702804960442037916614441355077017759",
    "179502675693711841552358459238056744792",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "7602438606779048989898402776595262926",
    "17360208289351134406940465553705335284",
    "1749362715435459353511933873995340031229",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "34410515695185066949979771014252260096",
    "1676806814539779643518083197252466559589",
    "137727233253125029217674386074482569004",
    "124679516092357812428249133337169351543",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "878421830618701031513655699169137715274",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "54897316287137490095531547770638573442",
    "198569201550149961010120249127509736371",
    "716378168436744459215062807310114211185",
    "20410936953331727203121086985828025206",
    "145793309278644190682972340321194247513",
    "65147809718878398548076729766909886410",
    "416840175099677302012350366025939820227",
    "1064140948399795852418210495461543011572",
    "887235042902537721816254572592014930578",
    "739520556846959085018120036998133255835"
  ]
}
