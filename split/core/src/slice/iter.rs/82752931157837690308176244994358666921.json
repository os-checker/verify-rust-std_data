{
  "file": "core/src/slice/iter.rs",
  "name": "slice::iter::verify::verify_unit::check_default",
  "hash": "82752931157837690308176244994358666921",
  "hash_direct": "1679948800475678639713946649860509793107",
  "proof_kind": "\"Standard\"",
  "attrs": [
    "#[kanitool::proof]\n"
  ],
  "src": "fn check_default() {\n                    let iter: Iter<'_, $ty> = Iter::default();\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }",
  "macro_backtrace": [
    {
      "callsite": "check_iter_with_ty!(verify_unit, (), isize::MAX as usize)",
      "defsite": "macro_rules! check_iter_with_ty {\n        ($module:ident, $ty:ty, $max:expr) => {\n            mod $module {\n                use super::*;\n                const MAX_LEN: usize = $max;\n\n                #[kani::proof]\n                fn check_new_iter() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let slice = any_slice::<$ty>(&array);\n                    let mut iter = Iter::new(slice);\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                /// Count consumes the value, thus, invoke it directly.\n                #[kani::proof]\n                fn check_count() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let mut iter = any_iter::<$ty>(&array);\n                    iter.count();\n                }\n\n                #[kani::proof]\n                fn check_default() {\n                    let iter: Iter<'_, $ty> = Iter::default();\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                check_unsafe_contracts!(check_next_back_unchecked, $ty, next_back_unchecked());\n                check_unsafe_contracts!(check_post_inc_start, $ty, post_inc_start(kani::any()));\n                check_unsafe_contracts!(check_pre_dec_end, $ty, pre_dec_end(kani::any()));\n\n                // Public functions that call safe abstraction `make_slice`.\n                check_safe_abstraction!(check_as_slice, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_slice();\n                });\n                check_safe_abstraction!(check_as_ref, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_ref();\n                });\n\n                check_safe_abstraction!(check_advance_back_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.advance_back_by(kani::any());\n                });\n\n                check_safe_abstraction!(check_is_empty, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.is_empty();\n                });\n                check_safe_abstraction!(check_len, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.len();\n                });\n                check_safe_abstraction!(check_size_hint, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.size_hint();\n                });\n                check_safe_abstraction!(check_nth, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth(kani::any());\n                });\n                check_safe_abstraction!(check_advance_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.advance_by(kani::any());\n                });\n                check_safe_abstraction!(check_next_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                });\n                check_safe_abstraction!(check_nth_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth_back(kani::any());\n                });\n                check_safe_abstraction!(check_next, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next();\n                });\n\n                // Ensure that clone always generates a safe object.\n                check_safe_abstraction!(check_clone, $ty, |iter: &mut Iter<'_, $ty>| {\n                    kani::assert(iter.clone().is_safe(), \"Clone is safe\");\n                });\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "145211312828026280949405930095889524950",
    "1481625861283808858614014583013705247864",
    "55198556141731503835375909318612911906",
    "22359847832734915742325702083995179865",
    "24611647080965273959983533232723557439",
    "22860541058604836916644685381819606237",
    "48354165617588990549448172553336931019",
    "1333468605585003631517160268073676769359",
    "1249508280866105536415199724581327788656",
    "1492824275947217417718211518414781028471",
    "436404202841364188417195112280251927042",
    "90730674654503345813804141434603836350",
    "74883043860831708044613736828186905895",
    "131448732132345852092743020617208534612",
    "86250515832242454374568811759490677295",
    "882983803309492135415989863507155329888",
    "473754169328666517310363234321091487898",
    "1482549208266437846313053181281464435035",
    "1029192722547836614416795486446508852871",
    "418010047563488836415041715044263143741",
    "105001968625777286967357012955960525094",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "151691830488044589682052448246913349802",
    "3049359533754430701641135011748168414",
    "1067675883129992420314174327751912045205",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "161003650625398914518944455314788757627",
    "375485108047544468212954122974188100514",
    "133406493184733961254247820125865521283",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "729627626563629377818206298050451764998",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "17378098239619203794530217494280511331",
    "1779415651164731900114956875425899562313",
    "965561441075058674214372158914955250568",
    "70397955517017578078932353775986506576",
    "1826846189959950902712788318046984556946",
    "1219804192165021552112068605144993117424",
    "140933745602425100075824570257732182905",
    "173556983701046639266539271077823390159",
    "169017152061146820209827866672499117723",
    "312088608325321565411462502168662386552",
    "124586139718338474718261279442774237855",
    "1260396228461245748616697351154341028448",
    "1754273014514918207012593641703725755068",
    "960343116406224353014879982372086182939",
    "11756770981925208483910405233730977155",
    "1752839532980506376112600645680140395367",
    "103780137905424046525178582650398979044",
    "21487659241303489417660816814336183636",
    "160917468869404823945422418785820551368",
    "1218790289670026660418434748374709001141",
    "393974833682574441515290398983271504453",
    "399232661239117480517401994520839366833"
  ]
}
