{
  "file": "core/src/slice/iter.rs",
  "name": "<slice::iter::Iter<'_, ()> as ub_checks::Invariant>::is_safe",
  "hash": "749625333122216884612260617959890956382",
  "hash_direct": "116579575796608718727726644230828340120",
  "src": "fn is_safe(&self) -> bool {\n        let ty_size = crate::mem::size_of::<T>();\n        // Use `abs_diff` since `end_or_len` may be smaller than `ptr` if `T` is a ZST.\n        let distance = self.ptr.addr().get().abs_diff(self.end_or_len as usize);\n        if ty_size == 0 || distance == 0 {\n            self.ptr.is_aligned()\n        } else {\n            let slice_ptr: *const [T] =\n                crate::ptr::from_raw_parts(self.ptr.as_ptr(), distance / ty_size);\n            crate::ub_checks::same_allocation(self.ptr.as_ptr(), self.end_or_len)\n                && self.ptr.addr().get() <= self.end_or_len as usize\n                && distance % ty_size == 0\n                && crate::ub_checks::can_dereference(slice_ptr)\n        }\n    }",
  "callees": [
    "938248124271107744012249479729763505168",
    "80989463918046823203044749903697808714",
    "1295499066349112484912490938496969975321",
    "808690604947597133713899618615583714737",
    "108393381985250317406898676759665844160",
    "177504877725561479516307868202288769850",
    "176936122189106107208026065836265178622",
    "48269731752201917824777771328370510021",
    "42439857493457686231976896950670544502",
    "87155493850759147613706940596486426522",
    "12613664237720278528179521057155220527",
    "30327504586663122653748936807822272957",
    "1815553186172281223816604261080148270538",
    "587047091930146757315571650054087588266",
    "642177043321009562414109667214760056829",
    "1314967675786698997011950244940417197826",
    "896888444305093759317012834705524625919",
    "1152551960191047763817206093401461966569",
    "1470404204235853749316648081276265551409",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "24899707394772763509340058915194816546",
    "274291830502248510811445962002553983266",
    "1749362715435459353511933873995340031229",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "34410515695185066949979771014252260096",
    "1676806814539779643518083197252466559589",
    "137727233253125029217674386074482569004",
    "124679516092357812428249133337169351543",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "1439450515919927509916541642317184703626",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "1045253218198362802817926442850613386040",
    "114094904968422577324113150898770820303",
    "1362358863161692250215592468137871508810",
    "149590528297881867168372422186638091319",
    "5585782769536366782326894301687972484",
    "695446806827517711713616901697655231173",
    "229928786779365060416476958219270538056",
    "491881080682552371118090704245976442556",
    "887235042902537721816254572592014930578",
    "739520556846959085018120036998133255835"
  ]
}
