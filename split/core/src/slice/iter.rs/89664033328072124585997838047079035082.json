{
  "file": "core/src/slice/iter.rs",
  "name": "slice::iter::verify::verify_tup::check_nth::{closure#0}",
  "hash": "89664033328072124585997838047079035082",
  "hash_direct": "103797653145534191756265339157256060428",
  "src": "|iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth(kani::any());\n                }",
  "macro_backtrace": [
    {
      "callsite": "check_iter_with_ty!(verify_tup, (char, u8), 50)",
      "defsite": "macro_rules! check_iter_with_ty {\n        ($module:ident, $ty:ty, $max:expr) => {\n            mod $module {\n                use super::*;\n                const MAX_LEN: usize = $max;\n\n                #[kani::proof]\n                fn check_new_iter() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let slice = any_slice::<$ty>(&array);\n                    let mut iter = Iter::new(slice);\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                /// Count consumes the value, thus, invoke it directly.\n                #[kani::proof]\n                fn check_count() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let mut iter = any_iter::<$ty>(&array);\n                    iter.count();\n                }\n\n                #[kani::proof]\n                fn check_default() {\n                    let iter: Iter<'_, $ty> = Iter::default();\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                check_unsafe_contracts!(check_next_back_unchecked, $ty, next_back_unchecked());\n                check_unsafe_contracts!(check_post_inc_start, $ty, post_inc_start(kani::any()));\n                check_unsafe_contracts!(check_pre_dec_end, $ty, pre_dec_end(kani::any()));\n\n                // Public functions that call safe abstraction `make_slice`.\n                check_safe_abstraction!(check_as_slice, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_slice();\n                });\n                check_safe_abstraction!(check_as_ref, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_ref();\n                });\n\n                check_safe_abstraction!(check_advance_back_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.advance_back_by(kani::any());\n                });\n\n                check_safe_abstraction!(check_is_empty, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.is_empty();\n                });\n                check_safe_abstraction!(check_len, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.len();\n                });\n                check_safe_abstraction!(check_size_hint, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.size_hint();\n                });\n                check_safe_abstraction!(check_nth, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth(kani::any());\n                });\n                check_safe_abstraction!(check_advance_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.advance_by(kani::any());\n                });\n                check_safe_abstraction!(check_next_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                });\n                check_safe_abstraction!(check_nth_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth_back(kani::any());\n                });\n                check_safe_abstraction!(check_next, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next();\n                });\n\n                // Ensure that clone always generates a safe object.\n                check_safe_abstraction!(check_clone, $ty, |iter: &mut Iter<'_, $ty>| {\n                    kani::assert(iter.clone().is_safe(), \"Clone is safe\");\n                });\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "306459423763459115515352307666540674473",
    "1221265949630586294716386477749978237909",
    "12523065385450334584774763099255662860",
    "940250525962090252914117803890597989072",
    "22860541058604836916644685381819606237",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "47278574192031232971799194590021398469",
    "16824420916691935049705640393259467449",
    "161418928606512050638591565555485938455",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "110783753230778772095886786950941619740",
    "61662873679071282097351761444290404330",
    "78307816953516272211166937163749831717",
    "14289085791843058303972699274315536239",
    "36192962124456953317298007080640297813",
    "33563304278205502363301451248336062138",
    "965165112309590828117238317937308848504",
    "153519269874251536561455903651902768231",
    "1053444052504016957911508567741032406043",
    "87433577918254712757874082299685864992",
    "410859799392077051011116902122996209797",
    "101689223202477137918937460254541699526",
    "63974567830230360001030741115144439869",
    "71803114075442535716726134931321354179",
    "1639748663404889376515881829844578351803",
    "298186937147738671611296026627548808650",
    "69220226162694467247862563674316060024",
    "69220226162694467247862563674316060024",
    "69220226162694467247862563674316060024",
    "69220226162694467247862563674316060024",
    "79043926980452329854066885770104838760",
    "79043926980452329854066885770104838760",
    "79043926980452329854066885770104838760",
    "79043926980452329854066885770104838760",
    "1137271765924114987514947403158445640283",
    "399232661239117480517401994520839366833"
  ]
}
