{
  "file": "core/src/slice/iter.rs",
  "name": "<slice::iter::Iter<'_, char> as ub_checks::Invariant>::is_safe",
  "hash": "35802741449517837319372164968773782343",
  "hash_direct": "2854704064059761332217204049882327756",
  "src": "fn is_safe(&self) -> bool {\n        let ty_size = crate::mem::size_of::<T>();\n        // Use `abs_diff` since `end_or_len` may be smaller than `ptr` if `T` is a ZST.\n        let distance = self.ptr.addr().get().abs_diff(self.end_or_len as usize);\n        if ty_size == 0 || distance == 0 {\n            self.ptr.is_aligned()\n        } else {\n            let slice_ptr: *const [T] =\n                crate::ptr::from_raw_parts(self.ptr.as_ptr(), distance / ty_size);\n            crate::ub_checks::same_allocation(self.ptr.as_ptr(), self.end_or_len)\n                && self.ptr.addr().get() <= self.end_or_len as usize\n                && distance % ty_size == 0\n                && crate::ub_checks::can_dereference(slice_ptr)\n        }\n    }",
  "callees": [
    "1481625861283808858614014583013705247864",
    "55198556141731503835375909318612911906",
    "22359847832734915742325702083995179865",
    "24611647080965273959983533232723557439",
    "22860541058604836916644685381819606237",
    "48354165617588990549448172553336931019",
    "1771426101862082948513059283921448465912",
    "1836006272373674359515274322920577659712",
    "1492824275947217417718211518414781028471",
    "161565364998390224514718157923580151283",
    "79841207563569786826856416790265355389",
    "181135208536909633415805733480721261522",
    "131448732132345852092743020617208534612",
    "73071250935038005966531341400195235348",
    "142669762483356337877647654390416822437",
    "61236634127340948339479469059822427286",
    "1482549208266437846313053181281464435035",
    "747756158392289078614026389602173436866",
    "1381200318313966933217542407342795194891",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "16824420916691935049705640393259467449",
    "179027492598291092807980692871672984191",
    "1156543629781806943613236490158137181630",
    "1067675883129992420314174327751912045205",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "161003650625398914518944455314788757627",
    "375485108047544468212954122974188100514",
    "133406493184733961254247820125865521283",
    "8850644696306119287964523545649044939",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "699501443006712972284295917074382644",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "159036998390405294233013104769383931048",
    "86885034567453340833700028904052770422",
    "70087765539496414092464353987673489780",
    "96110071230448407154115338616252590945",
    "45608954327408425975791297270925569987",
    "661265890708495692210774198793375360292",
    "542107969656591403611120475955569064682",
    "1665794289229862080115779013075767888728",
    "1218790289670026660418434748374709001141",
    "399232661239117480517401994520839366833"
  ]
}
