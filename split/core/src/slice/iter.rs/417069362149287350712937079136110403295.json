{
  "file": "core/src/slice/iter.rs",
  "name": "slice::iter::verify::verify_tup::check_advance_back_by::{closure#0}",
  "hash": "417069362149287350712937079136110403295",
  "hash_direct": "2036043569578675255609340294625149088",
  "src": "|iter: &mut Iter<'_, $ty>| {\n                    iter.advance_back_by(kani::any());\n                }",
  "macro_backtrace": [
    {
      "callsite": "check_iter_with_ty!(verify_tup, (char, u8), 50)",
      "defsite": "macro_rules! check_iter_with_ty {\n        ($module:ident, $ty:ty, $max:expr) => {\n            mod $module {\n                use super::*;\n                const MAX_LEN: usize = $max;\n\n                #[kani::proof]\n                fn check_new_iter() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let slice = any_slice::<$ty>(&array);\n                    let mut iter = Iter::new(slice);\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                /// Count consumes the value, thus, invoke it directly.\n                #[kani::proof]\n                fn check_count() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let mut iter = any_iter::<$ty>(&array);\n                    iter.count();\n                }\n\n                #[kani::proof]\n                fn check_default() {\n                    let iter: Iter<'_, $ty> = Iter::default();\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                check_unsafe_contracts!(check_next_back_unchecked, $ty, next_back_unchecked());\n                check_unsafe_contracts!(check_post_inc_start, $ty, post_inc_start(kani::any()));\n                check_unsafe_contracts!(check_pre_dec_end, $ty, pre_dec_end(kani::any()));\n\n                // Public functions that call safe abstraction `make_slice`.\n                check_safe_abstraction!(check_as_slice, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_slice();\n                });\n                check_safe_abstraction!(check_as_ref, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_ref();\n                });\n\n                check_safe_abstraction!(check_advance_back_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.advance_back_by(kani::any());\n                });\n\n                check_safe_abstraction!(check_is_empty, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.is_empty();\n                });\n                check_safe_abstraction!(check_len, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.len();\n                });\n                check_safe_abstraction!(check_size_hint, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.size_hint();\n                });\n                check_safe_abstraction!(check_nth, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth(kani::any());\n                });\n                check_safe_abstraction!(check_advance_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.advance_by(kani::any());\n                });\n                check_safe_abstraction!(check_next_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                });\n                check_safe_abstraction!(check_nth_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth_back(kani::any());\n                });\n                check_safe_abstraction!(check_next, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next();\n                });\n\n                // Ensure that clone always generates a safe object.\n                check_safe_abstraction!(check_clone, $ty, |iter: &mut Iter<'_, $ty>| {\n                    kani::assert(iter.clone().is_safe(), \"Clone is safe\");\n                });\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "76761090215908344506703874042953626591",
    "1194204153753465304412874113805257013333",
    "113491588365793266817891648718126780380",
    "826776783017468101310579743103719137160",
    "108393381985250317406898676759665844160",
    "7482589000750884340327816351015335759",
    "155146884437592745449279657258619050520",
    "111948483962809339883106353795926089322",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "1529875730411415803517587657844377161231",
    "23815256893174302637797703719499456373",
    "17360208289351134406940465553705335284",
    "64998410348949013165534729523823375850",
    "101445464642493846677061784532715524123",
    "1676806814539779643518083197252466559589",
    "173406377095566863748465400786477540721",
    "680034622814316217712937714106633543020",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "1652468402460848484917955442527512567508",
    "7234379090280557974956809882848214181",
    "1183231106252226082211358833029120368993",
    "1214574077763705187516383491048990527345",
    "40545036438152791145615465344483147281",
    "16554284367650193786337801210329994104",
    "18924474281332607947427114014473837479",
    "165882115416238345359856429559319876712",
    "1703933323319414818813362801418657756018",
    "109461063561361263892847847968583550849",
    "416840175099677302012350366025939820227",
    "163495454126198687108006090946207494756",
    "91309213124831905084899765166665728425",
    "13162537582743764711917854098009524636",
    "1301995755790878605811491736323759974386",
    "96694206573920183248183541899004286441",
    "413631573285214076813331209808774151388",
    "67422619050628989531877668274484584789",
    "847999804379874702115510527083439030538",
    "847999804379874702115510527083439030538",
    "847999804379874702115510527083439030538",
    "847999804379874702115510527083439030538",
    "1355675556436060377210861967923017066496",
    "1355675556436060377210861967923017066496",
    "1355675556436060377210861967923017066496",
    "1355675556436060377210861967923017066496",
    "1283868160390231989212228490164833471738",
    "92658835324565758495130762072978604201",
    "739520556846959085018120036998133255835"
  ]
}
