{
  "file": "core/src/slice/iter.rs",
  "name": "slice::iter::verify::verify_tup::check_clone::{closure#0}",
  "hash": "1819197437763948127114873379611877001564",
  "hash_direct": "1397879728529713214516013082646004484962",
  "src": "|iter: &mut Iter<'_, $ty>| {\n                    kani::assert(iter.clone().is_safe(), \"Clone is safe\");\n                }",
  "macro_backtrace": [
    {
      "callsite": "check_iter_with_ty!(verify_tup, (char, u8), 50)",
      "defsite": "macro_rules! check_iter_with_ty {\n        ($module:ident, $ty:ty, $max:expr) => {\n            mod $module {\n                use super::*;\n                const MAX_LEN: usize = $max;\n\n                #[kani::proof]\n                fn check_new_iter() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let slice = any_slice::<$ty>(&array);\n                    let mut iter = Iter::new(slice);\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                /// Count consumes the value, thus, invoke it directly.\n                #[kani::proof]\n                fn check_count() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let mut iter = any_iter::<$ty>(&array);\n                    iter.count();\n                }\n\n                #[kani::proof]\n                fn check_default() {\n                    let iter: Iter<'_, $ty> = Iter::default();\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                check_unsafe_contracts!(check_next_back_unchecked, $ty, next_back_unchecked());\n                check_unsafe_contracts!(check_post_inc_start, $ty, post_inc_start(kani::any()));\n                check_unsafe_contracts!(check_pre_dec_end, $ty, pre_dec_end(kani::any()));\n\n                // Public functions that call safe abstraction `make_slice`.\n                check_safe_abstraction!(check_as_slice, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_slice();\n                });\n                check_safe_abstraction!(check_as_ref, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_ref();\n                });\n\n                check_safe_abstraction!(check_advance_back_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.advance_back_by(kani::any());\n                });\n\n                check_safe_abstraction!(check_is_empty, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.is_empty();\n                });\n                check_safe_abstraction!(check_len, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.len();\n                });\n                check_safe_abstraction!(check_size_hint, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.size_hint();\n                });\n                check_safe_abstraction!(check_nth, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth(kani::any());\n                });\n                check_safe_abstraction!(check_advance_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.advance_by(kani::any());\n                });\n                check_safe_abstraction!(check_next_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                });\n                check_safe_abstraction!(check_nth_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth_back(kani::any());\n                });\n                check_safe_abstraction!(check_next, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next();\n                });\n\n                // Ensure that clone always generates a safe object.\n                check_safe_abstraction!(check_clone, $ty, |iter: &mut Iter<'_, $ty>| {\n                    kani::assert(iter.clone().is_safe(), \"Clone is safe\");\n                });\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "96381225063020746367072217221403980848",
    "938248124271107744012249479729763505168",
    "80989463918046823203044749903697808714",
    "1295499066349112484912490938496969975321",
    "808690604947597133713899618615583714737",
    "108393381985250317406898676759665844160",
    "177504877725561479516307868202288769850",
    "30045367355715999169594564136086036541",
    "181086649581165031178171591518175447550",
    "67202008249250073035419006078308699005",
    "289671106212139821911541211630919692796",
    "166856188763976225565795950411525405630",
    "1769635765532257451911986051852889773882",
    "247863734272995071816029882222598095082",
    "1781059024662626888014534669231413671023",
    "1534626612498321684714396064035226642407",
    "175059148501234920615695024018406584683",
    "896888444305093759317012834705524625919",
    "1748644045050747726610202280959142183796",
    "578852153529431154313268128445192934707",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "7602438606779048989898402776595262926",
    "17360208289351134406940465553705335284",
    "1749362715435459353511933873995340031229",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "34410515695185066949979771014252260096",
    "1676806814539779643518083197252466559589",
    "137727233253125029217674386074482569004",
    "83296026332579416941842209678709993328",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "878421830618701031513655699169137715274",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "54897316287137490095531547770638573442",
    "198569201550149961010120249127509736371",
    "716378168436744459215062807310114211185",
    "12004671557839587307613408108265333937",
    "42151442965898011796151442589833443627",
    "65147809718878398548076729766909886410",
    "416840175099677302012350366025939820227",
    "1388340972535146049714170632111627477288",
    "1597461592057364367712652340887221758344",
    "33334938784240251232310829378951961986",
    "887235042902537721816254572592014930578",
    "739520556846959085018120036998133255835"
  ]
}
