{
  "file": "core/src/slice/iter.rs",
  "name": "slice::iter::verify::verify_char::check_default",
  "hash": "714428854637819869017436807331921725312",
  "hash_direct": "172645913664326378214549750511489379379",
  "proof_kind": "\"Standard\"",
  "attrs": [
    "#[kanitool::proof]\n"
  ],
  "src": "fn check_default() {\n                    let iter: Iter<'_, $ty> = Iter::default();\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }",
  "macro_backtrace": [
    {
      "callsite": "check_iter_with_ty!(verify_char, char, 50)",
      "defsite": "macro_rules! check_iter_with_ty {\n        ($module:ident, $ty:ty, $max:expr) => {\n            mod $module {\n                use super::*;\n                const MAX_LEN: usize = $max;\n\n                #[kani::proof]\n                fn check_new_iter() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let slice = any_slice::<$ty>(&array);\n                    let mut iter = Iter::new(slice);\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                /// Count consumes the value, thus, invoke it directly.\n                #[kani::proof]\n                fn check_count() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let mut iter = any_iter::<$ty>(&array);\n                    iter.count();\n                }\n\n                #[kani::proof]\n                fn check_default() {\n                    let iter: Iter<'_, $ty> = Iter::default();\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                check_unsafe_contracts!(check_next_back_unchecked, $ty, next_back_unchecked());\n                check_unsafe_contracts!(check_post_inc_start, $ty, post_inc_start(kani::any()));\n                check_unsafe_contracts!(check_pre_dec_end, $ty, pre_dec_end(kani::any()));\n\n                // Public functions that call safe abstraction `make_slice`.\n                check_safe_abstraction!(check_as_slice, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_slice();\n                });\n                check_safe_abstraction!(check_as_ref, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_ref();\n                });\n\n                check_safe_abstraction!(check_advance_back_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.advance_back_by(kani::any());\n                });\n\n                check_safe_abstraction!(check_is_empty, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.is_empty();\n                });\n                check_safe_abstraction!(check_len, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.len();\n                });\n                check_safe_abstraction!(check_size_hint, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.size_hint();\n                });\n                check_safe_abstraction!(check_nth, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth(kani::any());\n                });\n                check_safe_abstraction!(check_advance_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.advance_by(kani::any());\n                });\n                check_safe_abstraction!(check_next_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                });\n                check_safe_abstraction!(check_nth_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth_back(kani::any());\n                });\n                check_safe_abstraction!(check_next, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next();\n                });\n\n                // Ensure that clone always generates a safe object.\n                check_safe_abstraction!(check_clone, $ty, |iter: &mut Iter<'_, $ty>| {\n                    kani::assert(iter.clone().is_safe(), \"Clone is safe\");\n                });\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "145211312828026280949405930095889524950",
    "1481625861283808858614014583013705247864",
    "55198556141731503835375909318612911906",
    "22359847832734915742325702083995179865",
    "24611647080965273959983533232723557439",
    "22860541058604836916644685381819606237",
    "48354165617588990549448172553336931019",
    "1771426101862082948513059283921448465912",
    "1836006272373674359515274322920577659712",
    "1492824275947217417718211518414781028471",
    "161565364998390224514718157923580151283",
    "79841207563569786826856416790265355389",
    "181135208536909633415805733480721261522",
    "131448732132345852092743020617208534612",
    "73071250935038005966531341400195235348",
    "142669762483356337877647654390416822437",
    "61236634127340948339479469059822427286",
    "1482549208266437846313053181281464435035",
    "747756158392289078614026389602173436866",
    "1381200318313966933217542407342795194891",
    "735809017630567493515142036487812621302",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "179027492598291092807980692871672984191",
    "1156543629781806943613236490158137181630",
    "1067675883129992420314174327751912045205",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "161003650625398914518944455314788757627",
    "375485108047544468212954122974188100514",
    "133406493184733961254247820125865521283",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "699501443006712972284295917074382644",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "159036998390405294233013104769383931048",
    "79864552017977064554718232825118263405",
    "35533776158220467232372629384472754561",
    "169017152061146820209827866672499117723",
    "183084010255680729445495992945602528853",
    "86885034567453340833700028904052770422",
    "70087765539496414092464353987673489780",
    "96110071230448407154115338616252590945",
    "45608954327408425975791297270925569987",
    "60398301833937082456673431992872147767",
    "1256347874659859794517657351340104146603",
    "29573527650795721644159815627231359192",
    "661265890708495692210774198793375360292",
    "542107969656591403611120475955569064682",
    "1665794289229862080115779013075767888728",
    "35802741449517837319372164968773782343",
    "451773334865780391313917419124282258084",
    "73152175638298057006527943627255257448",
    "684451011680717484712301707546685075738",
    "1218790289670026660418434748374709001141",
    "393974833682574441515290398983271504453",
    "399232661239117480517401994520839366833"
  ]
}
