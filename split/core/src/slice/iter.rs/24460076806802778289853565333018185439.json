{
  "file": "core/src/slice/iter.rs",
  "name": "slice::iter::verify::verify_u8::check_next_back::{closure#0}",
  "hash": "24460076806802778289853565333018185439",
  "hash_direct": "160376974542549402318839371198694759484",
  "src": "|iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                }",
  "macro_backtrace": [
    {
      "callsite": "check_iter_with_ty!(verify_u8, u8, u32::MAX as usize)",
      "defsite": "macro_rules! check_iter_with_ty {\n        ($module:ident, $ty:ty, $max:expr) => {\n            mod $module {\n                use super::*;\n                const MAX_LEN: usize = $max;\n\n                #[kani::proof]\n                fn check_new_iter() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let slice = any_slice::<$ty>(&array);\n                    let mut iter = Iter::new(slice);\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                /// Count consumes the value, thus, invoke it directly.\n                #[kani::proof]\n                fn check_count() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let mut iter = any_iter::<$ty>(&array);\n                    iter.count();\n                }\n\n                #[kani::proof]\n                fn check_default() {\n                    let iter: Iter<'_, $ty> = Iter::default();\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                check_unsafe_contracts!(check_next_back_unchecked, $ty, next_back_unchecked());\n                check_unsafe_contracts!(check_post_inc_start, $ty, post_inc_start(kani::any()));\n                check_unsafe_contracts!(check_pre_dec_end, $ty, pre_dec_end(kani::any()));\n\n                // Public functions that call safe abstraction `make_slice`.\n                check_safe_abstraction!(check_as_slice, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_slice();\n                });\n                check_safe_abstraction!(check_as_ref, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_ref();\n                });\n\n                check_safe_abstraction!(check_advance_back_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.advance_back_by(kani::any());\n                });\n\n                check_safe_abstraction!(check_is_empty, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.is_empty();\n                });\n                check_safe_abstraction!(check_len, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.len();\n                });\n                check_safe_abstraction!(check_size_hint, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.size_hint();\n                });\n                check_safe_abstraction!(check_nth, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth(kani::any());\n                });\n                check_safe_abstraction!(check_advance_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.advance_by(kani::any());\n                });\n                check_safe_abstraction!(check_next_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                });\n                check_safe_abstraction!(check_nth_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth_back(kani::any());\n                });\n                check_safe_abstraction!(check_next, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next();\n                });\n\n                // Ensure that clone always generates a safe object.\n                check_safe_abstraction!(check_clone, $ty, |iter: &mut Iter<'_, $ty>| {\n                    kani::assert(iter.clone().is_safe(), \"Clone is safe\");\n                });\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "6221741227072437069508312353437850718",
    "841528230883583910260472553997390736",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "1614903415506775741017981287843401206816",
    "1740741091750212443512988176670821833323",
    "62964906474134410292844024784991518817",
    "934375696446284627516563118665690549226",
    "1028023859496283824714006082102994000183",
    "1375602339865304183616456573312626826122",
    "1038091007637423756616843932505132086543",
    "1163068038768334523712968925068122539241",
    "5815968703736580963562790859338858979",
    "608729603554387759112665830559747788319",
    "17942302198640903099897416856451704995",
    "873553439411192054217928980363503086913",
    "1256571648311385372818048563868553671913",
    "1256571648311385372818048563868553671913",
    "1256571648311385372818048563868553671913",
    "1256571648311385372818048563868553671913",
    "99865840988228285693998358138491244126",
    "99865840988228285693998358138491244126",
    "99865840988228285693998358138491244126",
    "99865840988228285693998358138491244126",
    "30545534060300319003176930052732022160",
    "302067364229160357212378258499441578857",
    "302067364229160357212378258499441578857",
    "302067364229160357212378258499441578857",
    "302067364229160357212378258499441578857",
    "284555045731488463910941043858609989409",
    "284555045731488463910941043858609989409",
    "284555045731488463910941043858609989409",
    "284555045731488463910941043858609989409",
    "160761334367309494176444203284255754796",
    "399232661239117480517401994520839366833"
  ]
}
