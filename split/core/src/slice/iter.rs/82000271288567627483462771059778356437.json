{
  "file": "core/src/slice/iter.rs",
  "name": "slice::iter::verify::verify_char::check_next_back::{closure#0}",
  "hash": "82000271288567627483462771059778356437",
  "hash_direct": "898149709131023580510390496124927710921",
  "src": "|iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                }",
  "macro_backtrace": [
    {
      "callsite": "check_iter_with_ty!(verify_char, char, 50)",
      "defsite": "macro_rules! check_iter_with_ty {\n        ($module:ident, $ty:ty, $max:expr) => {\n            mod $module {\n                use super::*;\n                const MAX_LEN: usize = $max;\n\n                #[kani::proof]\n                fn check_new_iter() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let slice = any_slice::<$ty>(&array);\n                    let mut iter = Iter::new(slice);\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                /// Count consumes the value, thus, invoke it directly.\n                #[kani::proof]\n                fn check_count() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let mut iter = any_iter::<$ty>(&array);\n                    iter.count();\n                }\n\n                #[kani::proof]\n                fn check_default() {\n                    let iter: Iter<'_, $ty> = Iter::default();\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                check_unsafe_contracts!(check_next_back_unchecked, $ty, next_back_unchecked());\n                check_unsafe_contracts!(check_post_inc_start, $ty, post_inc_start(kani::any()));\n                check_unsafe_contracts!(check_pre_dec_end, $ty, pre_dec_end(kani::any()));\n\n                // Public functions that call safe abstraction `make_slice`.\n                check_safe_abstraction!(check_as_slice, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_slice();\n                });\n                check_safe_abstraction!(check_as_ref, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_ref();\n                });\n\n                check_safe_abstraction!(check_advance_back_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.advance_back_by(kani::any());\n                });\n\n                check_safe_abstraction!(check_is_empty, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.is_empty();\n                });\n                check_safe_abstraction!(check_len, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.len();\n                });\n                check_safe_abstraction!(check_size_hint, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.size_hint();\n                });\n                check_safe_abstraction!(check_nth, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth(kani::any());\n                });\n                check_safe_abstraction!(check_advance_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.advance_by(kani::any());\n                });\n                check_safe_abstraction!(check_next_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                });\n                check_safe_abstraction!(check_nth_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth_back(kani::any());\n                });\n                check_safe_abstraction!(check_next, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next();\n                });\n\n                // Ensure that clone always generates a safe object.\n                check_safe_abstraction!(check_clone, $ty, |iter: &mut Iter<'_, $ty>| {\n                    kani::assert(iter.clone().is_safe(), \"Clone is safe\");\n                });\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "153380105951445071398010207846457168641",
    "34406283556650756559915574730829163350",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "151465894222760985751884944789248963379",
    "123392787403333522114801427658681051416",
    "142887839110415191612178723753263412092",
    "1627284949723141279312312283341735323850",
    "713233157836084329410268009751975845722",
    "81264130636358974545768169241293445904",
    "22541281049052359744737794208685719497",
    "1596107777564894141812642702892764966441",
    "1310773459481662169913990115748675016789",
    "919635317562479452513022121588436823251",
    "102616678177756103514965915815212890589",
    "1717526349661973342617266575307869592297",
    "15939151450054048762055673183338076139",
    "132977040173719154057256981446941835376",
    "243197272452919522517934524866437862843",
    "243197272452919522517934524866437862843",
    "243197272452919522517934524866437862843",
    "243197272452919522517934524866437862843",
    "1752283399002651094310250574832378590679",
    "1752283399002651094310250574832378590679",
    "1752283399002651094310250574832378590679",
    "1752283399002651094310250574832378590679",
    "67422619050628989531877668274484584789",
    "104186362063690592621578706170958103832",
    "104186362063690592621578706170958103832",
    "104186362063690592621578706170958103832",
    "104186362063690592621578706170958103832",
    "121254948661117385341550687094516746629",
    "121254948661117385341550687094516746629",
    "121254948661117385341550687094516746629",
    "121254948661117385341550687094516746629",
    "168503001671177803527283064745478359906",
    "739520556846959085018120036998133255835"
  ]
}
