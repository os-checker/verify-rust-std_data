{
  "file": "core/src/slice/iter.rs",
  "name": "slice::iter::IterMut::<'_, u16>::new",
  "hash": "637728355819289748814505171660368704296",
  "hash_direct": "1118382313361776053312562031506269499985",
  "src": "pub(super) const fn new(slice: &'a mut [T]) -> Self {\n        let len = slice.len();\n        let ptr: NonNull<T> = NonNull::from_mut(slice).cast();\n        // SAFETY: There are several things here:\n        //\n        // `ptr` has been obtained by `slice.as_ptr()` where `slice` is a valid\n        // reference thus it is non-NUL and safe to use and pass to\n        // `NonNull::new_unchecked` .\n        //\n        // Adding `slice.len()` to the starting pointer gives a pointer\n        // at the end of `slice`. `end` will never be dereferenced, only checked\n        // for direct pointer equality with `ptr` to check if the iterator is\n        // done.\n        //\n        // In the case of a ZST, the end pointer is just the length.  It's never\n        // used as a pointer at all, and thus it's fine to have no provenance.\n        //\n        // See the `next_unchecked!` and `is_empty!` macros as well as the\n        // `post_inc_start` method for more information.\n        unsafe {\n            let end_or_len =\n                if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };\n\n            Self { ptr, end_or_len, _marker: PhantomData }\n        }\n    }",
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "1034317870221814136813621446782838396319",
    "841346702487865802717731804342903065853",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "590443687084653205110112967294089910956",
    "169017152061146820209827866672499117723",
    "5492834593798373529724102597289745294",
    "661566576188526468417008979395264059420",
    "172616897202646351715356988592109633508",
    "181658609216311780216130905614672958929",
    "167337527222265298165734095020724424009",
    "393974833682574441515290398983271504453",
    "399232661239117480517401994520839366833"
  ]
}
