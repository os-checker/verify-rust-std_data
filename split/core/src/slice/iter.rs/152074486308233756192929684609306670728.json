{
  "file": "core/src/slice/iter.rs",
  "name": "slice::iter::verify::verify_tup::check_next_back::{closure#0}",
  "hash": "152074486308233756192929684609306670728",
  "hash_direct": "62098894439247872731133747339660054934",
  "src": "|iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                }",
  "macro_backtrace": [
    {
      "callsite": "check_iter_with_ty!(verify_tup, (char, u8), 50)",
      "defsite": "macro_rules! check_iter_with_ty {\n        ($module:ident, $ty:ty, $max:expr) => {\n            mod $module {\n                use super::*;\n                const MAX_LEN: usize = $max;\n\n                #[kani::proof]\n                fn check_new_iter() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let slice = any_slice::<$ty>(&array);\n                    let mut iter = Iter::new(slice);\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                /// Count consumes the value, thus, invoke it directly.\n                #[kani::proof]\n                fn check_count() {\n                    let array: [$ty; MAX_LEN] = kani::any();\n                    let mut iter = any_iter::<$ty>(&array);\n                    iter.count();\n                }\n\n                #[kani::proof]\n                fn check_default() {\n                    let iter: Iter<'_, $ty> = Iter::default();\n                    kani::assert(iter.is_safe(), \"Iter is safe\");\n                }\n\n                check_unsafe_contracts!(check_next_back_unchecked, $ty, next_back_unchecked());\n                check_unsafe_contracts!(check_post_inc_start, $ty, post_inc_start(kani::any()));\n                check_unsafe_contracts!(check_pre_dec_end, $ty, pre_dec_end(kani::any()));\n\n                // Public functions that call safe abstraction `make_slice`.\n                check_safe_abstraction!(check_as_slice, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_slice();\n                });\n                check_safe_abstraction!(check_as_ref, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.as_ref();\n                });\n\n                check_safe_abstraction!(check_advance_back_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    iter.advance_back_by(kani::any());\n                });\n\n                check_safe_abstraction!(check_is_empty, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.is_empty();\n                });\n                check_safe_abstraction!(check_len, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.len();\n                });\n                check_safe_abstraction!(check_size_hint, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.size_hint();\n                });\n                check_safe_abstraction!(check_nth, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth(kani::any());\n                });\n                check_safe_abstraction!(check_advance_by, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.advance_by(kani::any());\n                });\n                check_safe_abstraction!(check_next_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next_back();\n                });\n                check_safe_abstraction!(check_nth_back, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.nth_back(kani::any());\n                });\n                check_safe_abstraction!(check_next, $ty, |iter: &mut Iter<'_, $ty>| {\n                    let _ = iter.next();\n                });\n\n                // Ensure that clone always generates a safe object.\n                check_safe_abstraction!(check_clone, $ty, |iter: &mut Iter<'_, $ty>| {\n                    kani::assert(iter.clone().is_safe(), \"Clone is safe\");\n                });\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "153380105951445071398010207846457168641",
    "34406283556650756559915574730829163350",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "1652468402460848484917955442527512567508",
    "7234379090280557974956809882848214181",
    "582925311812973380613212804431044699674",
    "1703933323319414818813362801418657756018",
    "109461063561361263892847847968583550849",
    "124738503831932030077820356251920049995",
    "416840175099677302012350366025939820227",
    "1441123233577855504012953952418461978941",
    "163495454126198687108006090946207494756",
    "1493382323047202700110669140455136096345",
    "87337854589146269878339330556735881654",
    "127655994388557446452848341273513619008",
    "528304870510919789816788127773343192648",
    "132977040173719154057256981446941835376",
    "139461278449651277966964850786775787865",
    "139461278449651277966964850786775787865",
    "139461278449651277966964850786775787865",
    "139461278449651277966964850786775787865",
    "124960447861495816278267851376204686324",
    "124960447861495816278267851376204686324",
    "124960447861495816278267851376204686324",
    "124960447861495816278267851376204686324",
    "67422619050628989531877668274484584789",
    "847999804379874702115510527083439030538",
    "847999804379874702115510527083439030538",
    "847999804379874702115510527083439030538",
    "847999804379874702115510527083439030538",
    "1355675556436060377210861967923017066496",
    "1355675556436060377210861967923017066496",
    "1355675556436060377210861967923017066496",
    "1355675556436060377210861967923017066496",
    "168503001671177803527283064745478359906",
    "739520556846959085018120036998133255835"
  ]
}
