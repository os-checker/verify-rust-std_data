{
  "file": "core/src/alloc/layout.rs",
  "name": "core::alloc::Layout::array::<u8>",
  "hash": "494732214145299266611389719949431102433",
  "hash_direct": "8027240149220202809621296421511990316",
  "src": "pub const fn array<T>(n: usize) -> Result<Self, LayoutError> {\n        // Reduce the amount of code we need to monomorphize per `T`.\n        return inner(T::LAYOUT, n);\n\n        #[inline]\n        const fn inner(element_layout: Layout, n: usize) -> Result<Layout, LayoutError> {\n            let Layout { size: element_size, align } = element_layout;\n\n            // We need to check two things about the size:\n            //  - That the total size won't overflow a `usize`, and\n            //  - That the total size still fits in an `isize`.\n            // By using division we can check them both with a single threshold.\n            // That'd usually be a bad idea, but thankfully here the element size\n            // and alignment are constants, so the compiler will fold all of it.\n            if element_size != 0 && n > Layout::max_size_for_align(align) / element_size {\n                return Err(LayoutError);\n            }\n\n            // SAFETY: We just checked that we won't overflow `usize` when we multiply.\n            // This is a useless hint inside this function, but after inlining this helps\n            // deduplicate checks for whether the overall capacity is zero (e.g., in RawVec's\n            // allocation path) before/after this multiplication.\n            let array_size = unsafe { unchecked_mul(element_size, n) };\n\n            // SAFETY: We just checked above that the `array_size` will not\n            // exceed `isize::MAX` even when rounded up to the alignment.\n            // And `Alignment` guarantees it's a power of two.\n            unsafe { Ok(Layout::from_size_align_unchecked(array_size, align.as_usize())) }\n        }\n    }",
  "callees": [
    "48647649681701578210590277640497700982",
    "551718781299925181210024318657463093093",
    "137853700287551670782226478589806471967",
    "116988710396478150633330979827831642523",
    "12281449246394340237926324936375242532",
    "181267529910573756716102767087485333561",
    "1824545319189397521315695847785602896178",
    "51372523453683089364244340980133861262",
    "169382045895387326079929663684999712557",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "63085389524472853348886374617170044294",
    "41567241620038406215851091758143153711",
    "208567149182403132717134308235452563135",
    "107268837585413814953424804409381581391",
    "59519543515179750412262355502277067147",
    "138781795485423979244701404398922630519",
    "112989397975222255532054380452996322405"
  ]
}
