{
  "file": "core/src/alloc/layout.rs",
  "name": "alloc::layout::Layout::array::<i32>",
  "hash": "73507790062687089810258124229558036996",
  "hash_direct": "62804723675851629807667127676856095326",
  "src": "pub const fn array<T>(n: usize) -> Result<Self, LayoutError> {\n        // Reduce the amount of code we need to monomorphize per `T`.\n        return inner(T::LAYOUT, n);\n\n        #[inline]\n        const fn inner(element_layout: Layout, n: usize) -> Result<Layout, LayoutError> {\n            let Layout { size: element_size, align } = element_layout;\n\n            // We need to check two things about the size:\n            //  - That the total size won't overflow a `usize`, and\n            //  - That the total size still fits in an `isize`.\n            // By using division we can check them both with a single threshold.\n            // That'd usually be a bad idea, but thankfully here the element size\n            // and alignment are constants, so the compiler will fold all of it.\n            if element_size != 0 && n > Layout::max_size_for_align(align) / element_size {\n                return Err(LayoutError);\n            }\n\n            // SAFETY: We just checked that we won't overflow `usize` when we multiply.\n            // This is a useless hint inside this function, but after inlining this helps\n            // deduplicate checks for whether the overall capacity is zero (e.g., in RawVec's\n            // allocation path) before/after this multiplication.\n            let array_size = unsafe { unchecked_mul(element_size, n) };\n\n            // SAFETY: We just checked above that the `array_size` will not\n            // exceed `isize::MAX` even when rounded up to the alignment.\n            // And `Alignment` guarantees it's a power of two.\n            unsafe { Ok(Layout::from_size_align_unchecked(array_size, align.as_usize())) }\n        }\n    }",
  "callees": [
    "127889923421687259182131750266993896404",
    "1578994998615824856317820460975113366188",
    "1181075802237898706213442782841232723352",
    "31265288173249298141030810952705142187",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "96976906222507875941165858861254841419",
    "130784102331378573718503834980433583949",
    "90298716668925847872657680437039980974",
    "797719437272703523812892712801878713523",
    "501832527150057417714281136227809585904",
    "399232661239117480517401994520839366833"
  ]
}
