{
  "file": "core/src/alloc/layout.rs",
  "name": "alloc::layout::Layout::extend",
  "hash": "1835818261999260622914736513936396583107",
  "hash_direct": "707647306276667030316300310416587584640",
  "src": "pub const fn extend(&self, next: Self) -> Result<(Self, usize), LayoutError> {\n        let new_align = Alignment::max(self.align, next.align);\n        let offset = self.size_rounded_up_to_custom_align(next.align);\n\n        // SAFETY: `offset` is at most `isize::MAX + 1` (such as from aligning\n        // to `Alignment::MAX`) and `next.size` is at most `isize::MAX` (from the\n        // `Layout` type invariant).  Thus the largest possible `new_size` is\n        // `isize::MAX + 1 + isize::MAX`, which is `usize::MAX`, and cannot overflow.\n        let new_size = unsafe { unchecked_add(offset, next.size) };\n\n        if let Ok(layout) = Layout::from_size_alignment(new_size, new_align) {\n            Ok((layout, offset))\n        } else {\n            Err(LayoutError)\n        }\n    }",
  "callees": [
    "608664848234302571713593688644672913516",
    "113777446734612017643296714849006136962",
    "1333568670384673713210225900017299121386",
    "112152844438854238887994758767167519478",
    "170995228381040670003312121577996373865"
  ]
}
