{
  "file": "core/src/alloc/layout.rs",
  "name": "alloc::layout::Layout::array::<i32>",
  "hash": "24525616802053053247580614851279970268",
  "hash_direct": "62804723675851629807667127676856095326",
  "src": "pub const fn array<T>(n: usize) -> Result<Self, LayoutError> {\n        // Reduce the amount of code we need to monomorphize per `T`.\n        return inner(T::LAYOUT, n);\n\n        #[inline]\n        const fn inner(element_layout: Layout, n: usize) -> Result<Layout, LayoutError> {\n            let Layout { size: element_size, align } = element_layout;\n\n            // We need to check two things about the size:\n            //  - That the total size won't overflow a `usize`, and\n            //  - That the total size still fits in an `isize`.\n            // By using division we can check them both with a single threshold.\n            // That'd usually be a bad idea, but thankfully here the element size\n            // and alignment are constants, so the compiler will fold all of it.\n            if element_size != 0 && n > Layout::max_size_for_align(align) / element_size {\n                return Err(LayoutError);\n            }\n\n            // SAFETY: We just checked that we won't overflow `usize` when we multiply.\n            // This is a useless hint inside this function, but after inlining this helps\n            // deduplicate checks for whether the overall capacity is zero (e.g., in RawVec's\n            // allocation path) before/after this multiplication.\n            let array_size = unsafe { unchecked_mul(element_size, n) };\n\n            // SAFETY: We just checked above that the `array_size` will not\n            // exceed `isize::MAX` even when rounded up to the alignment.\n            // And `Alignment` guarantees it's a power of two.\n            unsafe { Ok(Layout::from_size_align_unchecked(array_size, align.as_usize())) }\n        }\n    }",
  "callees": [
    "714305564529374077718431988982110330312",
    "144673661539519055195865692774889120235",
    "242109529850616688314394414608629035073",
    "113777446734612017643296714849006136962",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "112152844438854238887994758767167519478",
    "5589667399286252701694525062377909418",
    "21093895404218893828635808083668477303",
    "23184571205716217225614482003446684283",
    "178390828132391436389433453402564282927",
    "739520556846959085018120036998133255835"
  ]
}
