{
  "file": "core/src/alloc/layout.rs",
  "name": "core::alloc::Layout::extend",
  "hash": "626931955400539454411985856298682863107",
  "hash_direct": "25889124328306663475626676445417874138",
  "src": "pub const fn extend(&self, next: Self) -> Result<(Self, usize), LayoutError> {\n        let new_align = Alignment::max(self.align, next.align);\n        let offset = self.size_rounded_up_to_custom_align(next.align);\n\n        // SAFETY: `offset` is at most `isize::MAX + 1` (such as from aligning\n        // to `Alignment::MAX`) and `next.size` is at most `isize::MAX` (from the\n        // `Layout` type invariant).  Thus the largest possible `new_size` is\n        // `isize::MAX + 1 + isize::MAX`, which is `usize::MAX`, and cannot overflow.\n        let new_size = unsafe { unchecked_add(offset, next.size) };\n\n        if let Ok(layout) = Layout::from_size_alignment(new_size, new_align) {\n            Ok((layout, offset))\n        } else {\n            Err(LayoutError)\n        }\n    }",
  "callees": [
    "84664390975742426535529991415601216610",
    "116988710396478150633330979827831642523",
    "1492460362374206871012573143365903954040",
    "41567241620038406215851091758143153711",
    "92818225543983362651346381106628652226"
  ]
}
