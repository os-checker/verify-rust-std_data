{
  "file": "core/src/sync/atomic.rs",
  "name": "<sync::atomic::AtomicU64 as fmt::Debug>::fmt",
  "hash": "18605574050401756868163316489980291582",
  "hash_direct": "167258303205886017338093408925819798740",
  "src": "fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                fmt::Debug::fmt(&self.load(Ordering::Relaxed), f)\n            }",
  "macro_backtrace": [
    {
      "callsite": "atomic_int! {\n    cfg(target_has_atomic = \"64\"),\n    cfg(target_has_atomic_equal_alignment = \"64\"),\n    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n    rustc_const_stable(feature = \"const_atomic_into_inner\", since = \"1.79.0\"),\n    rustc_diagnostic_item = \"AtomicU64\",\n    \"u64\",\n    \"\",\n    atomic_umin, atomic_umax,\n    8,\n    u64 AtomicU64\n}",
      "defsite": "macro_rules! atomic_int {\n    ($cfg_cas:meta,\n     $cfg_align:meta,\n     $stable:meta,\n     $stable_cxchg:meta,\n     $stable_debug:meta,\n     $stable_access:meta,\n     $stable_from:meta,\n     $stable_nand:meta,\n     $const_stable_new:meta,\n     $const_stable_into_inner:meta,\n     $diagnostic_item:meta,\n     $s_int_type:literal,\n     $extra_feature:expr,\n     $min_fn:ident, $max_fn:ident,\n     $align:expr,\n     $int_type:ident $atomic_type:ident) => {\n        /// An integer type which can be safely shared between threads.\n        ///\n        /// This type has the same\n        #[doc = if_8_bit!(\n            $int_type,\n            yes = [\"size, alignment, and bit validity\"],\n            no = [\"size and bit validity\"],\n        )]\n        /// as the underlying integer type, [`\n        #[doc = $s_int_type]\n        /// `].\n        #[doc = if_8_bit! {\n            $int_type,\n            no = [\n                \"However, the alignment of this type is always equal to its \",\n                \"size, even on targets where [`\", $s_int_type, \"`] has a \",\n                \"lesser alignment.\"\n            ],\n        }]\n        ///\n        /// For more about the differences between atomic types and\n        /// non-atomic types as well as information about the portability of\n        /// this type, please see the [module-level documentation].\n        ///\n        /// **Note:** This type is only available on platforms that support\n        /// atomic loads and stores of [`\n        #[doc = $s_int_type]\n        /// `].\n        ///\n        /// [module-level documentation]: crate::sync::atomic\n        #[$stable]\n        #[$diagnostic_item]\n        #[repr(C, align($align))]\n        pub struct $atomic_type {\n            v: UnsafeCell<$int_type>,\n        }\n\n        #[$stable]\n        impl Default for $atomic_type {\n            #[inline]\n            fn default() -> Self {\n                Self::new(Default::default())\n            }\n        }\n\n        #[$stable_from]\n        #[rustc_const_unstable(feature = \"const_try\", issue = \"74935\")]\n        impl const From<$int_type> for $atomic_type {\n            #[doc = concat!(\"Converts an `\", stringify!($int_type), \"` into an `\", stringify!($atomic_type), \"`.\")]\n            #[inline]\n            fn from(v: $int_type) -> Self { Self::new(v) }\n        }\n\n        #[$stable_debug]\n        impl fmt::Debug for $atomic_type {\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                fmt::Debug::fmt(&self.load(Ordering::Relaxed), f)\n            }\n        }\n\n        // Send is implicitly implemented.\n        #[$stable]\n        unsafe impl Sync for $atomic_type {}\n\n        impl $atomic_type {\n            /// Creates a new atomic integer.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::\", stringify!($atomic_type), \";\")]\n            ///\n            #[doc = concat!(\"let atomic_forty_two = \", stringify!($atomic_type), \"::new(42);\")]\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$const_stable_new]\n            #[must_use]\n            pub const fn new(v: $int_type) -> Self {\n                Self {v: UnsafeCell::new(v)}\n            }\n\n            /// Creates a new reference to an atomic integer from a pointer.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{self, \", stringify!($atomic_type), \"};\")]\n            ///\n            /// // Get a pointer to an allocated value\n            #[doc = concat!(\"let ptr: *mut \", stringify!($int_type), \" = Box::into_raw(Box::new(0));\")]\n            ///\n            #[doc = concat!(\"assert!(ptr.cast::<\", stringify!($atomic_type), \">().is_aligned());\")]\n            ///\n            /// {\n            ///     // Create an atomic view of the allocated value\n            // SAFETY: this is a doc comment, tidy, it can't hurt you (also guaranteed by the construction of `ptr` and the assert above)\n            #[doc = concat!(\"    let atomic = unsafe {\", stringify!($atomic_type), \"::from_ptr(ptr) };\")]\n            ///\n            ///     // Use `atomic` for atomic operations, possibly share it with other threads\n            ///     atomic.store(1, atomic::Ordering::Relaxed);\n            /// }\n            ///\n            /// // It's ok to non-atomically access the value behind `ptr`,\n            /// // since the reference to the atomic ended its lifetime in the block above\n            /// assert_eq!(unsafe { *ptr }, 1);\n            ///\n            /// // Deallocate the value\n            /// unsafe { drop(Box::from_raw(ptr)) }\n            /// ```\n            ///\n            /// # Safety\n            ///\n            /// * `ptr` must be aligned to\n            #[doc = concat!(\"  `align_of::<\", stringify!($atomic_type), \">()`\")]\n            #[doc = if_8_bit!{\n                $int_type,\n                yes = [\n                    \"  (note that this is always true, since `align_of::<\",\n                    stringify!($atomic_type), \">() == 1`).\"\n                ],\n                no = [\n                    \"  (note that on some platforms this can be bigger than `align_of::<\",\n                    stringify!($int_type), \">()`).\"\n                ],\n            }]\n            /// * `ptr` must be [valid] for both reads and writes for the whole lifetime `'a`.\n            /// * You must adhere to the [Memory model for atomic accesses]. In particular, it is not\n            ///   allowed to mix conflicting atomic and non-atomic accesses, or atomic accesses of different\n            ///   sizes, without synchronization.\n            ///\n            /// [valid]: crate::ptr#safety\n            /// [Memory model for atomic accesses]: self#memory-model-for-atomic-accesses\n            #[inline]\n            #[stable(feature = \"atomic_from_ptr\", since = \"1.75.0\")]\n            #[rustc_const_stable(feature = \"const_atomic_from_ptr\", since = \"1.84.0\")]\n            pub const unsafe fn from_ptr<'a>(ptr: *mut $int_type) -> &'a $atomic_type {\n                // SAFETY: guaranteed by the caller\n                unsafe { &*ptr.cast() }\n            }\n\n\n            /// Returns a mutable reference to the underlying integer.\n            ///\n            /// This is safe because the mutable reference guarantees that no other threads are\n            /// concurrently accessing the atomic data.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let mut some_var = \", stringify!($atomic_type), \"::new(10);\")]\n            /// assert_eq!(*some_var.get_mut(), 10);\n            /// *some_var.get_mut() = 5;\n            /// assert_eq!(some_var.load(Ordering::SeqCst), 5);\n            /// ```\n            #[inline]\n            #[$stable_access]\n            pub fn get_mut(&mut self) -> &mut $int_type {\n                self.v.get_mut()\n            }\n\n            #[doc = concat!(\"Get atomic access to a `&mut \", stringify!($int_type), \"`.\")]\n            ///\n            #[doc = if_8_bit! {\n                $int_type,\n                no = [\n                    \"**Note:** This function is only available on targets where `\",\n                    stringify!($atomic_type), \"` has the same alignment as `\", stringify!($int_type), \"`.\"\n                ],\n            }]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(atomic_from_mut)]\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            /// let mut some_int = 123;\n            #[doc = concat!(\"let a = \", stringify!($atomic_type), \"::from_mut(&mut some_int);\")]\n            /// a.store(100, Ordering::Relaxed);\n            /// assert_eq!(some_int, 100);\n            /// ```\n            ///\n            #[inline]\n            #[$cfg_align]\n            #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n            pub fn from_mut(v: &mut $int_type) -> &mut Self {\n                let [] = [(); align_of::<Self>() - align_of::<$int_type>()];\n                // SAFETY:\n                //  - the mutable reference guarantees unique ownership.\n                //  - the alignment of `$int_type` and `Self` is the\n                //    same, as promised by $cfg_align and verified above.\n                unsafe { &mut *(v as *mut $int_type as *mut Self) }\n            }\n\n            #[doc = concat!(\"Get non-atomic access to a `&mut [\", stringify!($atomic_type), \"]` slice\")]\n            ///\n            /// This is safe because the mutable reference guarantees that no other threads are\n            /// concurrently accessing the atomic data.\n            ///\n            /// # Examples\n            ///\n            /// ```ignore-wasm\n            /// #![feature(atomic_from_mut)]\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let mut some_ints = [const { \", stringify!($atomic_type), \"::new(0) }; 10];\")]\n            ///\n            #[doc = concat!(\"let view: &mut [\", stringify!($int_type), \"] = \", stringify!($atomic_type), \"::get_mut_slice(&mut some_ints);\")]\n            /// assert_eq!(view, [0; 10]);\n            /// view\n            ///     .iter_mut()\n            ///     .enumerate()\n            ///     .for_each(|(idx, int)| *int = idx as _);\n            ///\n            /// std::thread::scope(|s| {\n            ///     some_ints\n            ///         .iter()\n            ///         .enumerate()\n            ///         .for_each(|(idx, int)| {\n            ///             s.spawn(move || assert_eq!(int.load(Ordering::Relaxed), idx as _));\n            ///         })\n            /// });\n            /// ```\n            #[inline]\n            #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n            pub fn get_mut_slice(this: &mut [Self]) -> &mut [$int_type] {\n                // SAFETY: the mutable reference guarantees unique ownership.\n                unsafe { &mut *(this as *mut [Self] as *mut [$int_type]) }\n            }\n\n            #[doc = concat!(\"Get atomic access to a `&mut [\", stringify!($int_type), \"]` slice.\")]\n            ///\n            /// # Examples\n            ///\n            /// ```ignore-wasm\n            /// #![feature(atomic_from_mut)]\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            /// let mut some_ints = [0; 10];\n            #[doc = concat!(\"let a = &*\", stringify!($atomic_type), \"::from_mut_slice(&mut some_ints);\")]\n            /// std::thread::scope(|s| {\n            ///     for i in 0..a.len() {\n            ///         s.spawn(move || a[i].store(i as _, Ordering::Relaxed));\n            ///     }\n            /// });\n            /// for (i, n) in some_ints.into_iter().enumerate() {\n            ///     assert_eq!(i, n as usize);\n            /// }\n            /// ```\n            #[inline]\n            #[$cfg_align]\n            #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n            pub fn from_mut_slice(v: &mut [$int_type]) -> &mut [Self] {\n                let [] = [(); align_of::<Self>() - align_of::<$int_type>()];\n                // SAFETY:\n                //  - the mutable reference guarantees unique ownership.\n                //  - the alignment of `$int_type` and `Self` is the\n                //    same, as promised by $cfg_align and verified above.\n                unsafe { &mut *(v as *mut [$int_type] as *mut [Self]) }\n            }\n\n            /// Consumes the atomic and returns the contained value.\n            ///\n            /// This is safe because passing `self` by value guarantees that no other threads are\n            /// concurrently accessing the atomic data.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::\", stringify!($atomic_type), \";\")]\n            ///\n            #[doc = concat!(\"let some_var = \", stringify!($atomic_type), \"::new(5);\")]\n            /// assert_eq!(some_var.into_inner(), 5);\n            /// ```\n            #[inline]\n            #[$stable_access]\n            #[$const_stable_into_inner]\n            pub const fn into_inner(self) -> $int_type {\n                self.v.into_inner()\n            }\n\n            /// Loads a value from the atomic integer.\n            ///\n            /// `load` takes an [`Ordering`] argument which describes the memory ordering of this operation.\n            /// Possible values are [`SeqCst`], [`Acquire`] and [`Relaxed`].\n            ///\n            /// # Panics\n            ///\n            /// Panics if `order` is [`Release`] or [`AcqRel`].\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let some_var = \", stringify!($atomic_type), \"::new(5);\")]\n            ///\n            /// assert_eq!(some_var.load(Ordering::Relaxed), 5);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn load(&self, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_load(self.v.get(), order) }\n            }\n\n            /// Stores a value into the atomic integer.\n            ///\n            /// `store` takes an [`Ordering`] argument which describes the memory ordering of this operation.\n            ///  Possible values are [`SeqCst`], [`Release`] and [`Relaxed`].\n            ///\n            /// # Panics\n            ///\n            /// Panics if `order` is [`Acquire`] or [`AcqRel`].\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let some_var = \", stringify!($atomic_type), \"::new(5);\")]\n            ///\n            /// some_var.store(10, Ordering::Relaxed);\n            /// assert_eq!(some_var.load(Ordering::Relaxed), 10);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn store(&self, val: $int_type, order: Ordering) {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_store(self.v.get(), val, order); }\n            }\n\n            /// Stores a value into the atomic integer, returning the previous value.\n            ///\n            /// `swap` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let some_var = \", stringify!($atomic_type), \"::new(5);\")]\n            ///\n            /// assert_eq!(some_var.swap(10, Ordering::Relaxed), 5);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn swap(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_swap(self.v.get(), val, order) }\n            }\n\n            /// Stores a value into the atomic integer if the current value is the same as\n            /// the `current` value.\n            ///\n            /// The return value is always the previous value. If it is equal to `current`, then the\n            /// value was updated.\n            ///\n            /// `compare_and_swap` also takes an [`Ordering`] argument which describes the memory\n            /// ordering of this operation. Notice that even when using [`AcqRel`], the operation\n            /// might fail and hence just perform an `Acquire` load, but not have `Release` semantics.\n            /// Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n            /// happens, and using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Migrating to `compare_exchange` and `compare_exchange_weak`\n            ///\n            /// `compare_and_swap` is equivalent to `compare_exchange` with the following mapping for\n            /// memory orderings:\n            ///\n            /// Original | Success | Failure\n            /// -------- | ------- | -------\n            /// Relaxed  | Relaxed | Relaxed\n            /// Acquire  | Acquire | Acquire\n            /// Release  | Release | Relaxed\n            /// AcqRel   | AcqRel  | Acquire\n            /// SeqCst   | SeqCst  | SeqCst\n            ///\n            /// `compare_and_swap` and `compare_exchange` also differ in their return type. You can use\n            /// `compare_exchange(...).unwrap_or_else(|x| x)` to recover the behavior of `compare_and_swap`,\n            /// but in most cases it is more idiomatic to check whether the return value is `Ok` or `Err`\n            /// rather than to infer success vs failure based on the value that was read.\n            ///\n            /// During migration, consider whether it makes sense to use `compare_exchange_weak` instead.\n            /// `compare_exchange_weak` is allowed to fail spuriously even when the comparison succeeds,\n            /// which allows the compiler to generate better assembly code when the compare and swap\n            /// is used in a loop.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let some_var = \", stringify!($atomic_type), \"::new(5);\")]\n            ///\n            /// assert_eq!(some_var.compare_and_swap(5, 10, Ordering::Relaxed), 5);\n            /// assert_eq!(some_var.load(Ordering::Relaxed), 10);\n            ///\n            /// assert_eq!(some_var.compare_and_swap(6, 12, Ordering::Relaxed), 10);\n            /// assert_eq!(some_var.load(Ordering::Relaxed), 10);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[deprecated(\n                since = \"1.50.0\",\n                note = \"Use `compare_exchange` or `compare_exchange_weak` instead\")\n            ]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn compare_and_swap(&self,\n                                    current: $int_type,\n                                    new: $int_type,\n                                    order: Ordering) -> $int_type {\n                match self.compare_exchange(current,\n                                            new,\n                                            order,\n                                            strongest_failure_ordering(order)) {\n                    Ok(x) => x,\n                    Err(x) => x,\n                }\n            }\n\n            /// Stores a value into the atomic integer if the current value is the same as\n            /// the `current` value.\n            ///\n            /// The return value is a result indicating whether the new value was written and\n            /// containing the previous value. On success this value is guaranteed to be equal to\n            /// `current`.\n            ///\n            /// `compare_exchange` takes two [`Ordering`] arguments to describe the memory\n            /// ordering of this operation. `success` describes the required ordering for the\n            /// read-modify-write operation that takes place if the comparison with `current` succeeds.\n            /// `failure` describes the required ordering for the load operation that takes place when\n            /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n            /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let some_var = \", stringify!($atomic_type), \"::new(5);\")]\n            ///\n            /// assert_eq!(some_var.compare_exchange(5, 10,\n            ///                                      Ordering::Acquire,\n            ///                                      Ordering::Relaxed),\n            ///            Ok(5));\n            /// assert_eq!(some_var.load(Ordering::Relaxed), 10);\n            ///\n            /// assert_eq!(some_var.compare_exchange(6, 12,\n            ///                                      Ordering::SeqCst,\n            ///                                      Ordering::Acquire),\n            ///            Err(10));\n            /// assert_eq!(some_var.load(Ordering::Relaxed), 10);\n            /// ```\n            ///\n            /// # Considerations\n            ///\n            /// `compare_exchange` is a [compare-and-swap operation] and thus exhibits the usual downsides\n            /// of CAS operations. In particular, a load of the value followed by a successful\n            /// `compare_exchange` with the previous load *does not ensure* that other threads have not\n            /// changed the value in the interim! This is usually important when the *equality* check in\n            /// the `compare_exchange` is being used to check the *identity* of a value, but equality\n            /// does not necessarily imply identity. This is a particularly common case for pointers, as\n            /// a pointer holding the same address does not imply that the same object exists at that\n            /// address! In this case, `compare_exchange` can lead to the [ABA problem].\n            ///\n            /// [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem\n            /// [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap\n            #[inline]\n            #[$stable_cxchg]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn compare_exchange(&self,\n                                    current: $int_type,\n                                    new: $int_type,\n                                    success: Ordering,\n                                    failure: Ordering) -> Result<$int_type, $int_type> {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }\n            }\n\n            /// Stores a value into the atomic integer if the current value is the same as\n            /// the `current` value.\n            ///\n            #[doc = concat!(\"Unlike [`\", stringify!($atomic_type), \"::compare_exchange`],\")]\n            /// this function is allowed to spuriously fail even\n            /// when the comparison succeeds, which can result in more efficient code on some\n            /// platforms. The return value is a result indicating whether the new value was\n            /// written and containing the previous value.\n            ///\n            /// `compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\n            /// ordering of this operation. `success` describes the required ordering for the\n            /// read-modify-write operation that takes place if the comparison with `current` succeeds.\n            /// `failure` describes the required ordering for the load operation that takes place when\n            /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n            /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let val = \", stringify!($atomic_type), \"::new(4);\")]\n            ///\n            /// let mut old = val.load(Ordering::Relaxed);\n            /// loop {\n            ///     let new = old * 2;\n            ///     match val.compare_exchange_weak(old, new, Ordering::SeqCst, Ordering::Relaxed) {\n            ///         Ok(_) => break,\n            ///         Err(x) => old = x,\n            ///     }\n            /// }\n            /// ```\n            ///\n            /// # Considerations\n            ///\n            /// `compare_exchange` is a [compare-and-swap operation] and thus exhibits the usual downsides\n            /// of CAS operations. In particular, a load of the value followed by a successful\n            /// `compare_exchange` with the previous load *does not ensure* that other threads have not\n            /// changed the value in the interim. This is usually important when the *equality* check in\n            /// the `compare_exchange` is being used to check the *identity* of a value, but equality\n            /// does not necessarily imply identity. This is a particularly common case for pointers, as\n            /// a pointer holding the same address does not imply that the same object exists at that\n            /// address! In this case, `compare_exchange` can lead to the [ABA problem].\n            ///\n            /// [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem\n            /// [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap\n            #[inline]\n            #[$stable_cxchg]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn compare_exchange_weak(&self,\n                                         current: $int_type,\n                                         new: $int_type,\n                                         success: Ordering,\n                                         failure: Ordering) -> Result<$int_type, $int_type> {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe {\n                    atomic_compare_exchange_weak(self.v.get(), current, new, success, failure)\n                }\n            }\n\n            /// Adds to the current value, returning the previous value.\n            ///\n            /// This operation wraps around on overflow.\n            ///\n            /// `fetch_add` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(0);\")]\n            /// assert_eq!(foo.fetch_add(10, Ordering::SeqCst), 0);\n            /// assert_eq!(foo.load(Ordering::SeqCst), 10);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_add(self.v.get(), val, order) }\n            }\n\n            /// Subtracts from the current value, returning the previous value.\n            ///\n            /// This operation wraps around on overflow.\n            ///\n            /// `fetch_sub` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(20);\")]\n            /// assert_eq!(foo.fetch_sub(10, Ordering::SeqCst), 20);\n            /// assert_eq!(foo.load(Ordering::SeqCst), 10);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_sub(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_sub(self.v.get(), val, order) }\n            }\n\n            /// Bitwise \"and\" with the current value.\n            ///\n            /// Performs a bitwise \"and\" operation on the current value and the argument `val`, and\n            /// sets the new value to the result.\n            ///\n            /// Returns the previous value.\n            ///\n            /// `fetch_and` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(0b101101);\")]\n            /// assert_eq!(foo.fetch_and(0b110011, Ordering::SeqCst), 0b101101);\n            /// assert_eq!(foo.load(Ordering::SeqCst), 0b100001);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_and(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_and(self.v.get(), val, order) }\n            }\n\n            /// Bitwise \"nand\" with the current value.\n            ///\n            /// Performs a bitwise \"nand\" operation on the current value and the argument `val`, and\n            /// sets the new value to the result.\n            ///\n            /// Returns the previous value.\n            ///\n            /// `fetch_nand` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(0x13);\")]\n            /// assert_eq!(foo.fetch_nand(0x31, Ordering::SeqCst), 0x13);\n            /// assert_eq!(foo.load(Ordering::SeqCst), !(0x13 & 0x31));\n            /// ```\n            #[inline]\n            #[$stable_nand]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_nand(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_nand(self.v.get(), val, order) }\n            }\n\n            /// Bitwise \"or\" with the current value.\n            ///\n            /// Performs a bitwise \"or\" operation on the current value and the argument `val`, and\n            /// sets the new value to the result.\n            ///\n            /// Returns the previous value.\n            ///\n            /// `fetch_or` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(0b101101);\")]\n            /// assert_eq!(foo.fetch_or(0b110011, Ordering::SeqCst), 0b101101);\n            /// assert_eq!(foo.load(Ordering::SeqCst), 0b111111);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_or(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_or(self.v.get(), val, order) }\n            }\n\n            /// Bitwise \"xor\" with the current value.\n            ///\n            /// Performs a bitwise \"xor\" operation on the current value and the argument `val`, and\n            /// sets the new value to the result.\n            ///\n            /// Returns the previous value.\n            ///\n            /// `fetch_xor` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(0b101101);\")]\n            /// assert_eq!(foo.fetch_xor(0b110011, Ordering::SeqCst), 0b101101);\n            /// assert_eq!(foo.load(Ordering::SeqCst), 0b011110);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_xor(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_xor(self.v.get(), val, order) }\n            }\n\n            /// Fetches the value, and applies a function to it that returns an optional\n            /// new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else\n            /// `Err(previous_value)`.\n            ///\n            /// Note: This may call the function multiple times if the value has been changed from other threads in\n            /// the meantime, as long as the function returns `Some(_)`, but the function will have been applied\n            /// only once to the stored value.\n            ///\n            /// `fetch_update` takes two [`Ordering`] arguments to describe the memory ordering of this operation.\n            /// The first describes the required ordering for when the operation finally succeeds while the second\n            /// describes the required ordering for loads. These correspond to the success and failure orderings of\n            #[doc = concat!(\"[`\", stringify!($atomic_type), \"::compare_exchange`]\")]\n            /// respectively.\n            ///\n            /// Using [`Acquire`] as success ordering makes the store part\n            /// of this operation [`Relaxed`], and using [`Release`] makes the final successful load\n            /// [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Considerations\n            ///\n            /// This method is not magic; it is not provided by the hardware, and does not act like a\n            /// critical section or mutex.\n            ///\n            /// It is implemented on top of an atomic [compare-and-swap operation], and thus is subject to\n            /// the usual drawbacks of CAS operations. In particular, be careful of the [ABA problem]\n            /// if this atomic integer is an index or more generally if knowledge of only the *bitwise value*\n            /// of the atomic is not in and of itself sufficient to ensure any required preconditions.\n            ///\n            /// [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem\n            /// [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap\n            ///\n            /// # Examples\n            ///\n            /// ```rust\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let x = \", stringify!($atomic_type), \"::new(7);\")]\n            /// assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7));\n            /// assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7));\n            /// assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8));\n            /// assert_eq!(x.load(Ordering::SeqCst), 9);\n            /// ```\n            #[inline]\n            #[stable(feature = \"no_more_cas\", since = \"1.45.0\")]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_update<F>(&self,\n                                   set_order: Ordering,\n                                   fetch_order: Ordering,\n                                   mut f: F) -> Result<$int_type, $int_type>\n            where F: FnMut($int_type) -> Option<$int_type> {\n                let mut prev = self.load(fetch_order);\n                while let Some(next) = f(prev) {\n                    match self.compare_exchange_weak(prev, next, set_order, fetch_order) {\n                        x @ Ok(_) => return x,\n                        Err(next_prev) => prev = next_prev\n                    }\n                }\n                Err(prev)\n            }\n\n            /// Fetches the value, and applies a function to it that returns an optional\n            /// new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else\n            /// `Err(previous_value)`.\n            ///\n            #[doc = concat!(\"See also: [`update`](`\", stringify!($atomic_type), \"::update`).\")]\n            ///\n            /// Note: This may call the function multiple times if the value has been changed from other threads in\n            /// the meantime, as long as the function returns `Some(_)`, but the function will have been applied\n            /// only once to the stored value.\n            ///\n            /// `try_update` takes two [`Ordering`] arguments to describe the memory ordering of this operation.\n            /// The first describes the required ordering for when the operation finally succeeds while the second\n            /// describes the required ordering for loads. These correspond to the success and failure orderings of\n            #[doc = concat!(\"[`\", stringify!($atomic_type), \"::compare_exchange`]\")]\n            /// respectively.\n            ///\n            /// Using [`Acquire`] as success ordering makes the store part\n            /// of this operation [`Relaxed`], and using [`Release`] makes the final successful load\n            /// [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Considerations\n            ///\n            /// This method is not magic; it is not provided by the hardware, and does not act like a\n            /// critical section or mutex.\n            ///\n            /// It is implemented on top of an atomic [compare-and-swap operation], and thus is subject to\n            /// the usual drawbacks of CAS operations. In particular, be careful of the [ABA problem]\n            /// if this atomic integer is an index or more generally if knowledge of only the *bitwise value*\n            /// of the atomic is not in and of itself sufficient to ensure any required preconditions.\n            ///\n            /// [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem\n            /// [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap\n            ///\n            /// # Examples\n            ///\n            /// ```rust\n            /// #![feature(atomic_try_update)]\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let x = \", stringify!($atomic_type), \"::new(7);\")]\n            /// assert_eq!(x.try_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7));\n            /// assert_eq!(x.try_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7));\n            /// assert_eq!(x.try_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8));\n            /// assert_eq!(x.load(Ordering::SeqCst), 9);\n            /// ```\n            #[inline]\n            #[unstable(feature = \"atomic_try_update\", issue = \"135894\")]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn try_update(\n                &self,\n                set_order: Ordering,\n                fetch_order: Ordering,\n                f: impl FnMut($int_type) -> Option<$int_type>,\n            ) -> Result<$int_type, $int_type> {\n                // FIXME(atomic_try_update): this is currently an unstable alias to `fetch_update`;\n                //      when stabilizing, turn `fetch_update` into a deprecated alias to `try_update`.\n                self.fetch_update(set_order, fetch_order, f)\n            }\n\n            /// Fetches the value, applies a function to it that it return a new value.\n            /// The new value is stored and the old value is returned.\n            ///\n            #[doc = concat!(\"See also: [`try_update`](`\", stringify!($atomic_type), \"::try_update`).\")]\n            ///\n            /// Note: This may call the function multiple times if the value has been changed from other threads in\n            /// the meantime, but the function will have been applied only once to the stored value.\n            ///\n            /// `update` takes two [`Ordering`] arguments to describe the memory ordering of this operation.\n            /// The first describes the required ordering for when the operation finally succeeds while the second\n            /// describes the required ordering for loads. These correspond to the success and failure orderings of\n            #[doc = concat!(\"[`\", stringify!($atomic_type), \"::compare_exchange`]\")]\n            /// respectively.\n            ///\n            /// Using [`Acquire`] as success ordering makes the store part\n            /// of this operation [`Relaxed`], and using [`Release`] makes the final successful load\n            /// [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Considerations\n            ///\n            /// [CAS operation]: https://en.wikipedia.org/wiki/Compare-and-swap\n            /// This method is not magic; it is not provided by the hardware, and does not act like a\n            /// critical section or mutex.\n            ///\n            /// It is implemented on top of an atomic [compare-and-swap operation], and thus is subject to\n            /// the usual drawbacks of CAS operations. In particular, be careful of the [ABA problem]\n            /// if this atomic integer is an index or more generally if knowledge of only the *bitwise value*\n            /// of the atomic is not in and of itself sufficient to ensure any required preconditions.\n            ///\n            /// [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem\n            /// [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap\n            ///\n            /// # Examples\n            ///\n            /// ```rust\n            /// #![feature(atomic_try_update)]\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let x = \", stringify!($atomic_type), \"::new(7);\")]\n            /// assert_eq!(x.update(Ordering::SeqCst, Ordering::SeqCst, |x| x + 1), 7);\n            /// assert_eq!(x.update(Ordering::SeqCst, Ordering::SeqCst, |x| x + 1), 8);\n            /// assert_eq!(x.load(Ordering::SeqCst), 9);\n            /// ```\n            #[inline]\n            #[unstable(feature = \"atomic_try_update\", issue = \"135894\")]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn update(\n                &self,\n                set_order: Ordering,\n                fetch_order: Ordering,\n                mut f: impl FnMut($int_type) -> $int_type,\n            ) -> $int_type {\n                let mut prev = self.load(fetch_order);\n                loop {\n                    match self.compare_exchange_weak(prev, f(prev), set_order, fetch_order) {\n                        Ok(x) => break x,\n                        Err(next_prev) => prev = next_prev,\n                    }\n                }\n            }\n\n            /// Maximum with the current value.\n            ///\n            /// Finds the maximum of the current value and the argument `val`, and\n            /// sets the new value to the result.\n            ///\n            /// Returns the previous value.\n            ///\n            /// `fetch_max` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(23);\")]\n            /// assert_eq!(foo.fetch_max(42, Ordering::SeqCst), 23);\n            /// assert_eq!(foo.load(Ordering::SeqCst), 42);\n            /// ```\n            ///\n            /// If you want to obtain the maximum value in one step, you can use the following:\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(23);\")]\n            /// let bar = 42;\n            /// let max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar);\n            /// assert!(max_foo == 42);\n            /// ```\n            #[inline]\n            #[stable(feature = \"atomic_min_max\", since = \"1.45.0\")]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_max(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { $max_fn(self.v.get(), val, order) }\n            }\n\n            /// Minimum with the current value.\n            ///\n            /// Finds the minimum of the current value and the argument `val`, and\n            /// sets the new value to the result.\n            ///\n            /// Returns the previous value.\n            ///\n            /// `fetch_min` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(23);\")]\n            /// assert_eq!(foo.fetch_min(42, Ordering::Relaxed), 23);\n            /// assert_eq!(foo.load(Ordering::Relaxed), 23);\n            /// assert_eq!(foo.fetch_min(22, Ordering::Relaxed), 23);\n            /// assert_eq!(foo.load(Ordering::Relaxed), 22);\n            /// ```\n            ///\n            /// If you want to obtain the minimum value in one step, you can use the following:\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(23);\")]\n            /// let bar = 12;\n            /// let min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar);\n            /// assert_eq!(min_foo, 12);\n            /// ```\n            #[inline]\n            #[stable(feature = \"atomic_min_max\", since = \"1.45.0\")]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_min(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { $min_fn(self.v.get(), val, order) }\n            }\n\n            /// Returns a mutable pointer to the underlying integer.\n            ///\n            /// Doing non-atomic reads and writes on the resulting integer can be a data race.\n            /// This method is mostly useful for FFI, where the function signature may use\n            #[doc = concat!(\"`*mut \", stringify!($int_type), \"` instead of `&\", stringify!($atomic_type), \"`.\")]\n            ///\n            /// Returning an `*mut` pointer from a shared reference to this atomic is safe because the\n            /// atomic types work with interior mutability. All modifications of an atomic change the value\n            /// through a shared reference, and can do so safely as long as they use atomic operations. Any\n            /// use of the returned raw pointer requires an `unsafe` block and still has to uphold the\n            /// requirements of the [memory model].\n            ///\n            /// # Examples\n            ///\n            /// ```ignore (extern-declaration)\n            /// # fn main() {\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::\", stringify!($atomic_type), \";\")]\n            ///\n            /// extern \"C\" {\n            #[doc = concat!(\"    fn my_atomic_op(arg: *mut \", stringify!($int_type), \");\")]\n            /// }\n            ///\n            #[doc = concat!(\"let atomic = \", stringify!($atomic_type), \"::new(1);\")]\n            ///\n            /// // SAFETY: Safe as long as `my_atomic_op` is atomic.\n            /// unsafe {\n            ///     my_atomic_op(atomic.as_ptr());\n            /// }\n            /// # }\n            /// ```\n            ///\n            /// [memory model]: self#memory-model-for-atomic-accesses\n            #[inline]\n            #[stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n            #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n            #[rustc_never_returns_null_ptr]\n            pub const fn as_ptr(&self) -> *mut $int_type {\n                self.v.get()\n            }\n        }\n    }\n}"
    }
  ],
  "callees": [
    "1192718772684472163116811933409423098894",
    "180216954894167382576912062485815426",
    "107395164738996948216702827756884888703",
    "1137504858812645032216016959492348926209",
    "1730104888752463612515843025505589269421",
    "180216954894167382576912062485815426",
    "30477841482411972089439721196610634090",
    "180216954894167382576912062485815426",
    "1198957015710312232917777233370260364904",
    "1026760530544148215311440132616070242899",
    "7482589000750884340327816351015335759",
    "114515349818180266375604241642404432663",
    "14788582008995232797761326074092651079",
    "463280735582930019114404485781406104133",
    "82654341932789732147751919849221457004",
    "1431354684681232682213532060815840762611",
    "782504771221663126315856838856334729028",
    "155146884437592745449279657258619050520",
    "111948483962809339883106353795926089322",
    "1449318134079626371011274072562212788848",
    "93050244294797488033301914806645812456",
    "1441720371923810595717450888984411625212",
    "115454466119445301598558949585089171393",
    "131801960015181826338332137565768028588",
    "104037775070675804029146200957042082268",
    "1764493963101210311413165999113212183409",
    "119539198841178170095714608677850051781",
    "1271799165121182816414134973384602480276",
    "4259929890161278738269551006724674751",
    "1601294861053505017581954277510734537",
    "11222097851883566255542748304429478808",
    "446641282099743021915035641877345940088",
    "180216954894167382576912062485815426",
    "81986060615313457313520860313503674379",
    "180216954894167382576912062485815426",
    "529131735890807885813791093312023364462",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "1093476100484343819814987720024391953916",
    "5727355925197697878453733593054842709",
    "885597861861001000511516117324052716088",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "1501989787004212717414978504657860592208",
    "56432358223333439831597852119164845068",
    "262655926825162372615996610610206939850",
    "180216954894167382576912062485815426",
    "1757545545648602607313084414076169082158",
    "244775683124061126616684258679909756489",
    "180216954894167382576912062485815426",
    "116822910289062242262475793546788134385",
    "1501621636175779253314402450532242777846",
    "150203716713484807054381945197290135428",
    "36380162371624727521206603407905192105",
    "1633046727246801115216304233509619821955",
    "180216954894167382576912062485815426",
    "75205206017573953596003413438756636876",
    "102819279036010928516916893576779525206",
    "129474231414236275906024588525451326834",
    "12139398618265055351930776326506925984",
    "2779407659760916494140995479015179280",
    "1286040984527793700010408138982195338134",
    "55374350330118105413720390969416525719",
    "180216954894167382576912062485815426",
    "243839084150888952911908111539685994713",
    "5816187767072888251886714194878390885",
    "7183820055713762746363169081446514126",
    "1692910407746371913718143362461637207110",
    "9007521356456792533806907033713747580",
    "1140628964753582780115520904480253073068",
    "172140117843934269071100695499597161982",
    "4960461046229976118108876182482238045",
    "398351056859449483913563186545567727466",
    "367181087707974400217372683467500218568",
    "880399244184648853615132446538621153208",
    "91308972039969540988091890815065278470",
    "124525532079653887123362351368115843753",
    "111114487648278519213771264640666093421",
    "126476545879253472322068323394325485129",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "951348494032399170610680252597697495198",
    "97447565643065368638170945263035682108",
    "853842935888302489817116832695820404885",
    "105520003861276918151385759429944427006",
    "631183329542470826111924554291224734483",
    "172791621215325343325333862532506871291",
    "1760011798058273387417430735616051713909",
    "14927565369702206802304095208275322230",
    "19249273478837625535991000438126806034",
    "180216954894167382576912062485815426",
    "156403455487464737952979242664452101533",
    "1333543433828761069214920782310321252028",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "1358226759178952466212208474266436759440",
    "139214267799060696491401111465882916998",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "1122845743808954568315839891299563834211",
    "258820287469578611817448591488600041899",
    "6267750356639735281119899207213949232",
    "173333575624628564314365600339262332595",
    "4954363668049433906791255335906210806",
    "462518227198375540612885370480640396222",
    "263160489966033609311803218267093119168",
    "110661702332738352784492724989411077592",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "6962362284417680556415378392413733050",
    "1415106497522421883676194742336801697",
    "180216954894167382576912062485815426",
    "588974892899239543415856878986124229421",
    "83296569981337185257777514719755004891",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1293607388739574242111226698004271448354",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "1113263782502549457014458472849017156624",
    "11604112776901536261059602527394784134",
    "146302972784592707345017558525924565358",
    "110489938845591258695432360905480776739",
    "838579135528120850312965158638687856356",
    "8388353940802646364767634772864445262",
    "1669644564757728608410559362414825983477",
    "822269050661504501817822006377694013491",
    "1783026951615081149111793107672728722332",
    "72993026513347610222044009578620103685",
    "83277592815980822158438974019698900871",
    "53212576593787280828984978559612536749",
    "82790950900441681094193199491525818949",
    "5386377726707104558702884569949486762",
    "139149306113414265258107706282271906964",
    "223895652400728502310699674759694603316",
    "138705491366165238634028278563846115067",
    "65069040306676020898444859464496431715",
    "1823645488622937895012673111274870809755",
    "6781225442344569542394668875873020156",
    "457879323132651244210037964476759098996",
    "387263740474341501715316744261930101340",
    "1300526082989503184112886594604650643696",
    "1820316365630756497411082775870133134724",
    "713596427418837315916034622167448792635",
    "12790910907938237822370326571745403935",
    "61539750939002654969594741517578054227",
    "1350019424511081821910158691473572249878",
    "102272585106179812897836035233672297670",
    "671207594223492124412859490357503994166",
    "337289423687786246416299369802355006896",
    "507116607738930391111587036035165972673",
    "540564128152414607516220637571452425273",
    "1605633131122579720611961448336401474874",
    "899089149104620122910782754756910095497",
    "564177479688813429716564910718645657356",
    "132979495079251483717565906717834352219",
    "126601631307930206616972114137702790273",
    "1651044975265797863616721065106597564241",
    "38217196742947992835679479997123307043",
    "1342521228831833354715461413551686205925",
    "97895937838022620309026790508679003629",
    "749080744560555709814769272248719962971",
    "146686842676245753349689708687358184876",
    "97524482424029537145306757146156791937",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "618708256121172115917225444658205159680",
    "180216954894167382576912062485815426",
    "1616559401006560778014910978455592941385",
    "34410515695185066949979771014252260096",
    "1676806814539779643518083197252466559589",
    "276416412318150986910935829568641832460",
    "993611605804025130710031722480304785932",
    "20170180267557332822120616943783807769",
    "97892229237199250718782565098232937194",
    "36263650381921031236374006938891928812",
    "37868078735602925891573318122962819320",
    "379345774402074462414438979972804593126",
    "681932933892771600113755084868377368020",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1204668293620499224013336883119093261459",
    "5667765796385169624800112337147502292",
    "171593739300022194915526452191835401234",
    "557156035074123918411895515072456741095",
    "350987180030767754610510964114749211972",
    "65203605087481216765956782074874375619",
    "424359451296716518917226365832879427330",
    "99176271258766477013272333171532202265",
    "138811212228727350724477848972604910203",
    "72761304372883324528891952071758675679",
    "128926335496488349305282019115669664377",
    "816589233988491856113892611160007340113",
    "1706241664392483122616630414095325426767",
    "1336395986670888604714795400021301436124",
    "180942759258101506955182199119065053589",
    "1779425227385014865413763254225852997980",
    "949119772679999304913254775119628944156",
    "143264002039824653101582016475268727293",
    "821053300062536159115601448644934990736",
    "68648213460155011086108492708709849999",
    "2922976863402117239063671147549004081",
    "1424839172046310268011085042199237354602",
    "601536179585149681911167127175566351660",
    "1292179497977935596813342509875710327204",
    "79338743477724285898920606540258882171",
    "28815764710943890042111735716087760171",
    "135562536653374708711117709628363219721",
    "180490860656218517844535655690783186403",
    "61762885803371722481695307475049719440",
    "1283396526632787672314501611027886712886",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "1214574077763705187516383491048990527345",
    "58556264066334599336424357434445237777",
    "960898925801407232312924333468692865726",
    "429511501966379024610548772418614005336",
    "53013231170464020982930967155682389250",
    "157452307909752828034879955455996353017",
    "130453669725098768871634540984100509610",
    "1264448150763745905618356639115650703943",
    "141110666132885552924669202659075536526",
    "56252927251435970978636410777602608721",
    "70189786848693324615028118901413603891",
    "1758079100556217157185991271441314538",
    "698375928041891685218332199603984089953",
    "187482952606822645712460029589708661523",
    "1413561713996145578711397341497777047075",
    "126818845945534382313624863669169238336",
    "144119928408074986676617008060073758280",
    "1032722381226407642916192559235445092884",
    "594398967705273052918318531949127567864",
    "172590953658237452717460291587113135731",
    "974238557182874992112444884018478807048",
    "949723518165874883315854372086659764362",
    "94456838198084845861692920132229050794",
    "91930047381741681611917147084398403736",
    "89121182156207114064839032294436231789",
    "1585972590187889070117028601346813813214",
    "1606202552653889608810199512646967422438",
    "18036140156580546806629269073307822465",
    "100566549119408744214400768677206684395",
    "52821609522733004265605098066925811747",
    "108552149900633290919250115311635650035",
    "211665252660455842616535517088582326351",
    "156761099224162496521554063647246510953",
    "93629764868847211533386885481792043",
    "87962768316051763542817110666100781851",
    "979905345926612536015630663886892108940",
    "177028096127130855141974597834504714571",
    "790336683030703749616005572184538464784",
    "18924474281332607947427114014473837479",
    "1468091910298810725816359353565305732045",
    "364484297899500769415938702538049619119",
    "64933755017346766828885993644262595169",
    "2314453704286586957141741655351484658",
    "14202615834488052409859027248238516218",
    "1584226519763055173017297680793969390949",
    "30908084982265817655199528001939896756",
    "696031761158559988717156830525069362848",
    "1448899345559094949112654453072162878043",
    "1641862387002446068116192096070757843303",
    "1292203662441252026118372580930599634835",
    "137858457737126721339050743717226009000",
    "1094251261101801847513288225556855042079",
    "136250958068228316938199731614362970959",
    "677493057230061463812906195098240769208",
    "146722828362882336003877423755490060119",
    "133190003003759925793667076679125824144",
    "119410572960049574203441365705573330364",
    "139997011880036619526085207717010799176",
    "805684210294475109813538994712986997895",
    "449637264080571459055009589071427003",
    "3497283204404842189758596455256819410",
    "1705039637729676748415488890044718082160",
    "1794231169952300810716746663071531075605",
    "510531638386111881910053340190058988939",
    "1435366853714965822215674984659006405207",
    "118320558337677119769123625739060418786",
    "58480844886996188714196265131261175939",
    "671334365265236941113753063318744059957",
    "1762126293480126793916319187708925702531",
    "1533506450707940432815148545061652761442",
    "700543147431208495615048645222424964691",
    "11172017460127122262247192747398001865",
    "999894065589869448612231539797228218231",
    "86952898111294821451658113502791201350",
    "115305965424151250157684815253829770404",
    "1255593489441337196411111792584951488284",
    "772090384102639362198216457510496193",
    "5918423063880594543047647226827857654",
    "1660358534197915130918065586581585625625",
    "158669007246384560107761733536387868399",
    "1008627084322143835013959721941971697897",
    "3959983230967520511574185766120518907",
    "131951491516562017324429114881873478958",
    "147353619306145463894433932701739289836",
    "73934633302749851638600744339908206828",
    "141296000771128581945497538145890845343",
    "124743396873944380901919017967253874067",
    "150243093200272651816225092713556841110",
    "777454966023882485213336970821447203461",
    "798871996884082421610081782312663349463",
    "13863098581405631524288807864350146405",
    "613513255856977139911489735802844904928",
    "322749754952635112812467217236515710998",
    "97310642151613347726349452651452877766",
    "126337418415726794399520714079003318010",
    "173488751360057668935869030627777552292",
    "124798334296612191009914873740072641817",
    "4874888224965231630903852514116604247",
    "1113702662891479336314686028484409217895",
    "1014498806628630430116225554036073706840",
    "105155837525522083449912883665304934776",
    "1404731032427000255717859115232501530921",
    "1513333453617937806712878309090792611957",
    "63824875704704228052884797545106788461",
    "37611015082660603716849267229566955360",
    "1006965550971568470513339634703718564510",
    "33331637534491476913440505814675408305",
    "1821553421238437798512207917672639540169",
    "14031239273799417297806782851617180873",
    "103695068283875105018623992302427237269",
    "53569486981529370344752868158650318763",
    "33020214437710035965402411197660679021",
    "115359027235546213441845450233673000041",
    "362852919496270894310210925803631069806",
    "3297309995462571210361513208440932689",
    "99505528804453027457861451108826778638",
    "404530585981013310415620289049541730647",
    "719049603193869984913180724586595888983",
    "556160511185732132213865142485227929702",
    "54338610666023313538785988934735143030",
    "813368619794702869414005756234477751011",
    "1359933470730887149416155830775469624234",
    "133941792012963290912121566695757883799",
    "179782706227535055097755371789106436416",
    "180216954894167382576912062485815426",
    "28753697929221812287482212449517425755",
    "1676603290518039711418379565247484306913",
    "174459176821023390372223810531050389067",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "197462227908474429616904113273285874814",
    "180418702711060811601049271977599275130",
    "169890989984787760587841791387523712921",
    "11119406790923360834756731176691512413",
    "875287568511336482318416051223074532749",
    "87610347679382204374849514063484826969",
    "180216954894167382576912062485815426",
    "794694008638894565610503689879218203131",
    "171204665790647804337468407324534125555",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "180175623099158380248987811409809941831",
    "123489981763517494699775008546456061720",
    "115883727412415935571812162924229901730",
    "138902882366249903201239198490399945031",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "343942489170785946313945651402980657563",
    "1574076206413902276617103312132801420117",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "98537152641222695324529647193706528853",
    "119243493707363038616667205371748777440",
    "381953151452297597516075448874366576271",
    "1366933002792501403514034768478701870222",
    "173540199571516859095976017854162481701",
    "1058923641423864233013514372572908024217",
    "168241333773421023116816333440933263218",
    "61310762945082273576676150391410367495",
    "95842351741559959003916650465478545869",
    "7239933877371721559081823970141719882",
    "896459677649231014112590992640874036109",
    "1128686554262168920813585016421773721623",
    "130453159064502157611032799530443760419",
    "90550453206581869791970009265946291996",
    "20881625587194774835840449149047998060",
    "756154173690443859818404881616867249436",
    "654015476928643451917635075376917698161",
    "61170460216323168365416778842010156107",
    "141233208426902244535079999611474988219",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "136315757471550957542716891555713129836",
    "1637911438640321783717995568863978104742",
    "6070603776637052609765524141950388493",
    "218836606927904212311687203535487474550",
    "1094842765693892546910520378412041552806",
    "103109021776793116122227661922289060726",
    "41218525296126056406013342704293785197",
    "21639280041443497202806099100564393988",
    "914540079689617279116496005665597179364",
    "144160729758818962774870203617558065261",
    "100623443557313280538751593615269684508",
    "47822370175813177448723454097252028703",
    "180216954894167382576912062485815426",
    "1190698678281689596011816929587938169114",
    "136304994639276996811277527976407166479",
    "172965107350741823789971049511714888457",
    "134404014330562250309026636177009767546",
    "195583482755466972211682666741083225224",
    "187862353604324805215536331355864734982",
    "9413607458941888151065563895633549628",
    "1810792956600996905110838576613513017534",
    "358571424882708899413310170471965259775",
    "94991374756337164216687314359149512939",
    "183942889134990626643214750014121392010",
    "1604474312357677770115987518178518823320",
    "121460048239657617232671404094706435596",
    "1443622435226146153716365849873431969246",
    "93531719892614626754448873551539024442",
    "330794154560451080815007955482686521703",
    "98917904055168131613348986227478615744",
    "1579032903346544014011091588398186030115",
    "64810720618804514777581746350540323217",
    "1153959874226978119913857890632071810994",
    "1290872813666562319511413746722512367019",
    "180359710145537073298703332960217937548",
    "42675708704912587986905307549981316387",
    "133774208422544204712385208594916672852",
    "41615586143351009079637563054496184054",
    "527941972023686775314153517043849577168",
    "656020278541089165616042705318184400030",
    "155843328531890927210777505987330542723",
    "57937411220298601781990073897903980387",
    "60170252654449672705107845647682893691",
    "612822114093593126210482166879781020957",
    "180216954894167382576912062485815426",
    "1743153353454633366017320764647572977881",
    "167736663620976927092047934639390911599",
    "5028979764259758864839215043717728606",
    "180216954894167382576912062485815426",
    "137147026445318887422604340055542353314",
    "613544804628751927811946789978038613045",
    "1552550943189349917617694230360700488104",
    "180216954894167382576912062485815426",
    "1560000583486082542418261243128396125960",
    "1333956723372366480117056176500260471244",
    "30819441612753718577366232250007643490",
    "852298530973108873212161851321200820382",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "180216954894167382576912062485815426",
    "317131734443709433116505601136930857147",
    "180216954894167382576912062485815426",
    "166408967536619447606926217607836765218",
    "134021551926054372363240583078166288040",
    "392542422746427617410375084093261829377",
    "17139800739615364546948059766295360717",
    "109849097723912452994088294171860151303",
    "486164287917427656918200146926298480057",
    "947833919457653120214810965083035955432",
    "1072671897157902758512066884223785534075",
    "44624737591568607475621954621864870909",
    "87977286206191110206643684053945734595",
    "154911443990380340341563367924870465980",
    "69521336164211208533737404575105193630",
    "36990817497430174858508344623774643994",
    "819756211280848030917202637728825520633",
    "74873526321819745033769428163236242635",
    "1737046666080539081914974966237099365643",
    "621698472431332816417792581602959129152",
    "1703660345011483495218041991169194027213",
    "92658835324565758495130762072978604201",
    "606608081756831098117273329568996374994",
    "41876326851953352365755493579635515678",
    "56448737519681294968960799914289695112",
    "2270854481895276807307011598962175177",
    "1027590512138995399024066666285567387",
    "151177604553563121726407199103432119959",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
