{
  "file": "core/src/sync/atomic.rs",
  "name": "<sync::atomic::AtomicU8 as fmt::Debug>::fmt",
  "hash": "119073135085921752192503705685032160461",
  "hash_direct": "85958871651663443623195364529516125170",
  "src": "fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                fmt::Debug::fmt(&self.load(Ordering::Relaxed), f)\n            }",
  "macro_backtrace": [
    {
      "callsite": "atomic_int! {\n    cfg(target_has_atomic = \"8\"),\n    cfg(target_has_atomic_equal_alignment = \"8\"),\n    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n    rustc_const_stable(feature = \"const_atomic_into_inner\", since = \"1.79.0\"),\n    rustc_diagnostic_item = \"AtomicU8\",\n    \"u8\",\n    \"\",\n    atomic_umin, atomic_umax,\n    1,\n    u8 AtomicU8\n}",
      "defsite": "macro_rules! atomic_int {\n    ($cfg_cas:meta,\n     $cfg_align:meta,\n     $stable:meta,\n     $stable_cxchg:meta,\n     $stable_debug:meta,\n     $stable_access:meta,\n     $stable_from:meta,\n     $stable_nand:meta,\n     $const_stable_new:meta,\n     $const_stable_into_inner:meta,\n     $diagnostic_item:meta,\n     $s_int_type:literal,\n     $extra_feature:expr,\n     $min_fn:ident, $max_fn:ident,\n     $align:expr,\n     $int_type:ident $atomic_type:ident) => {\n        /// An integer type which can be safely shared between threads.\n        ///\n        /// This type has the same\n        #[doc = if_8_bit!(\n            $int_type,\n            yes = [\"size, alignment, and bit validity\"],\n            no = [\"size and bit validity\"],\n        )]\n        /// as the underlying integer type, [`\n        #[doc = $s_int_type]\n        /// `].\n        #[doc = if_8_bit! {\n            $int_type,\n            no = [\n                \"However, the alignment of this type is always equal to its \",\n                \"size, even on targets where [`\", $s_int_type, \"`] has a \",\n                \"lesser alignment.\"\n            ],\n        }]\n        ///\n        /// For more about the differences between atomic types and\n        /// non-atomic types as well as information about the portability of\n        /// this type, please see the [module-level documentation].\n        ///\n        /// **Note:** This type is only available on platforms that support\n        /// atomic loads and stores of [`\n        #[doc = $s_int_type]\n        /// `].\n        ///\n        /// [module-level documentation]: crate::sync::atomic\n        #[$stable]\n        #[$diagnostic_item]\n        #[repr(C, align($align))]\n        pub struct $atomic_type {\n            v: UnsafeCell<$int_type>,\n        }\n\n        #[$stable]\n        impl Default for $atomic_type {\n            #[inline]\n            fn default() -> Self {\n                Self::new(Default::default())\n            }\n        }\n\n        #[$stable_from]\n        #[rustc_const_unstable(feature = \"const_try\", issue = \"74935\")]\n        impl const From<$int_type> for $atomic_type {\n            #[doc = concat!(\"Converts an `\", stringify!($int_type), \"` into an `\", stringify!($atomic_type), \"`.\")]\n            #[inline]\n            fn from(v: $int_type) -> Self { Self::new(v) }\n        }\n\n        #[$stable_debug]\n        impl fmt::Debug for $atomic_type {\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                fmt::Debug::fmt(&self.load(Ordering::Relaxed), f)\n            }\n        }\n\n        // Send is implicitly implemented.\n        #[$stable]\n        unsafe impl Sync for $atomic_type {}\n\n        impl $atomic_type {\n            /// Creates a new atomic integer.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::\", stringify!($atomic_type), \";\")]\n            ///\n            #[doc = concat!(\"let atomic_forty_two = \", stringify!($atomic_type), \"::new(42);\")]\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$const_stable_new]\n            #[must_use]\n            pub const fn new(v: $int_type) -> Self {\n                Self {v: UnsafeCell::new(v)}\n            }\n\n            /// Creates a new reference to an atomic integer from a pointer.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{self, \", stringify!($atomic_type), \"};\")]\n            ///\n            /// // Get a pointer to an allocated value\n            #[doc = concat!(\"let ptr: *mut \", stringify!($int_type), \" = Box::into_raw(Box::new(0));\")]\n            ///\n            #[doc = concat!(\"assert!(ptr.cast::<\", stringify!($atomic_type), \">().is_aligned());\")]\n            ///\n            /// {\n            ///     // Create an atomic view of the allocated value\n            // SAFETY: this is a doc comment, tidy, it can't hurt you (also guaranteed by the construction of `ptr` and the assert above)\n            #[doc = concat!(\"    let atomic = unsafe {\", stringify!($atomic_type), \"::from_ptr(ptr) };\")]\n            ///\n            ///     // Use `atomic` for atomic operations, possibly share it with other threads\n            ///     atomic.store(1, atomic::Ordering::Relaxed);\n            /// }\n            ///\n            /// // It's ok to non-atomically access the value behind `ptr`,\n            /// // since the reference to the atomic ended its lifetime in the block above\n            /// assert_eq!(unsafe { *ptr }, 1);\n            ///\n            /// // Deallocate the value\n            /// unsafe { drop(Box::from_raw(ptr)) }\n            /// ```\n            ///\n            /// # Safety\n            ///\n            /// * `ptr` must be aligned to\n            #[doc = concat!(\"  `align_of::<\", stringify!($atomic_type), \">()`\")]\n            #[doc = if_8_bit!{\n                $int_type,\n                yes = [\n                    \"  (note that this is always true, since `align_of::<\",\n                    stringify!($atomic_type), \">() == 1`).\"\n                ],\n                no = [\n                    \"  (note that on some platforms this can be bigger than `align_of::<\",\n                    stringify!($int_type), \">()`).\"\n                ],\n            }]\n            /// * `ptr` must be [valid] for both reads and writes for the whole lifetime `'a`.\n            /// * You must adhere to the [Memory model for atomic accesses]. In particular, it is not\n            ///   allowed to mix conflicting atomic and non-atomic accesses, or atomic accesses of different\n            ///   sizes, without synchronization.\n            ///\n            /// [valid]: crate::ptr#safety\n            /// [Memory model for atomic accesses]: self#memory-model-for-atomic-accesses\n            #[inline]\n            #[stable(feature = \"atomic_from_ptr\", since = \"1.75.0\")]\n            #[rustc_const_stable(feature = \"const_atomic_from_ptr\", since = \"1.84.0\")]\n            pub const unsafe fn from_ptr<'a>(ptr: *mut $int_type) -> &'a $atomic_type {\n                // SAFETY: guaranteed by the caller\n                unsafe { &*ptr.cast() }\n            }\n\n\n            /// Returns a mutable reference to the underlying integer.\n            ///\n            /// This is safe because the mutable reference guarantees that no other threads are\n            /// concurrently accessing the atomic data.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let mut some_var = \", stringify!($atomic_type), \"::new(10);\")]\n            /// assert_eq!(*some_var.get_mut(), 10);\n            /// *some_var.get_mut() = 5;\n            /// assert_eq!(some_var.load(Ordering::SeqCst), 5);\n            /// ```\n            #[inline]\n            #[$stable_access]\n            pub fn get_mut(&mut self) -> &mut $int_type {\n                self.v.get_mut()\n            }\n\n            #[doc = concat!(\"Get atomic access to a `&mut \", stringify!($int_type), \"`.\")]\n            ///\n            #[doc = if_8_bit! {\n                $int_type,\n                no = [\n                    \"**Note:** This function is only available on targets where `\",\n                    stringify!($atomic_type), \"` has the same alignment as `\", stringify!($int_type), \"`.\"\n                ],\n            }]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(atomic_from_mut)]\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            /// let mut some_int = 123;\n            #[doc = concat!(\"let a = \", stringify!($atomic_type), \"::from_mut(&mut some_int);\")]\n            /// a.store(100, Ordering::Relaxed);\n            /// assert_eq!(some_int, 100);\n            /// ```\n            ///\n            #[inline]\n            #[$cfg_align]\n            #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n            pub fn from_mut(v: &mut $int_type) -> &mut Self {\n                let [] = [(); align_of::<Self>() - align_of::<$int_type>()];\n                // SAFETY:\n                //  - the mutable reference guarantees unique ownership.\n                //  - the alignment of `$int_type` and `Self` is the\n                //    same, as promised by $cfg_align and verified above.\n                unsafe { &mut *(v as *mut $int_type as *mut Self) }\n            }\n\n            #[doc = concat!(\"Get non-atomic access to a `&mut [\", stringify!($atomic_type), \"]` slice\")]\n            ///\n            /// This is safe because the mutable reference guarantees that no other threads are\n            /// concurrently accessing the atomic data.\n            ///\n            /// # Examples\n            ///\n            /// ```ignore-wasm\n            /// #![feature(atomic_from_mut)]\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let mut some_ints = [const { \", stringify!($atomic_type), \"::new(0) }; 10];\")]\n            ///\n            #[doc = concat!(\"let view: &mut [\", stringify!($int_type), \"] = \", stringify!($atomic_type), \"::get_mut_slice(&mut some_ints);\")]\n            /// assert_eq!(view, [0; 10]);\n            /// view\n            ///     .iter_mut()\n            ///     .enumerate()\n            ///     .for_each(|(idx, int)| *int = idx as _);\n            ///\n            /// std::thread::scope(|s| {\n            ///     some_ints\n            ///         .iter()\n            ///         .enumerate()\n            ///         .for_each(|(idx, int)| {\n            ///             s.spawn(move || assert_eq!(int.load(Ordering::Relaxed), idx as _));\n            ///         })\n            /// });\n            /// ```\n            #[inline]\n            #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n            pub fn get_mut_slice(this: &mut [Self]) -> &mut [$int_type] {\n                // SAFETY: the mutable reference guarantees unique ownership.\n                unsafe { &mut *(this as *mut [Self] as *mut [$int_type]) }\n            }\n\n            #[doc = concat!(\"Get atomic access to a `&mut [\", stringify!($int_type), \"]` slice.\")]\n            ///\n            /// # Examples\n            ///\n            /// ```ignore-wasm\n            /// #![feature(atomic_from_mut)]\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            /// let mut some_ints = [0; 10];\n            #[doc = concat!(\"let a = &*\", stringify!($atomic_type), \"::from_mut_slice(&mut some_ints);\")]\n            /// std::thread::scope(|s| {\n            ///     for i in 0..a.len() {\n            ///         s.spawn(move || a[i].store(i as _, Ordering::Relaxed));\n            ///     }\n            /// });\n            /// for (i, n) in some_ints.into_iter().enumerate() {\n            ///     assert_eq!(i, n as usize);\n            /// }\n            /// ```\n            #[inline]\n            #[$cfg_align]\n            #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n            pub fn from_mut_slice(v: &mut [$int_type]) -> &mut [Self] {\n                let [] = [(); align_of::<Self>() - align_of::<$int_type>()];\n                // SAFETY:\n                //  - the mutable reference guarantees unique ownership.\n                //  - the alignment of `$int_type` and `Self` is the\n                //    same, as promised by $cfg_align and verified above.\n                unsafe { &mut *(v as *mut [$int_type] as *mut [Self]) }\n            }\n\n            /// Consumes the atomic and returns the contained value.\n            ///\n            /// This is safe because passing `self` by value guarantees that no other threads are\n            /// concurrently accessing the atomic data.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::\", stringify!($atomic_type), \";\")]\n            ///\n            #[doc = concat!(\"let some_var = \", stringify!($atomic_type), \"::new(5);\")]\n            /// assert_eq!(some_var.into_inner(), 5);\n            /// ```\n            #[inline]\n            #[$stable_access]\n            #[$const_stable_into_inner]\n            pub const fn into_inner(self) -> $int_type {\n                self.v.into_inner()\n            }\n\n            /// Loads a value from the atomic integer.\n            ///\n            /// `load` takes an [`Ordering`] argument which describes the memory ordering of this operation.\n            /// Possible values are [`SeqCst`], [`Acquire`] and [`Relaxed`].\n            ///\n            /// # Panics\n            ///\n            /// Panics if `order` is [`Release`] or [`AcqRel`].\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let some_var = \", stringify!($atomic_type), \"::new(5);\")]\n            ///\n            /// assert_eq!(some_var.load(Ordering::Relaxed), 5);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn load(&self, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_load(self.v.get(), order) }\n            }\n\n            /// Stores a value into the atomic integer.\n            ///\n            /// `store` takes an [`Ordering`] argument which describes the memory ordering of this operation.\n            ///  Possible values are [`SeqCst`], [`Release`] and [`Relaxed`].\n            ///\n            /// # Panics\n            ///\n            /// Panics if `order` is [`Acquire`] or [`AcqRel`].\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let some_var = \", stringify!($atomic_type), \"::new(5);\")]\n            ///\n            /// some_var.store(10, Ordering::Relaxed);\n            /// assert_eq!(some_var.load(Ordering::Relaxed), 10);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn store(&self, val: $int_type, order: Ordering) {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_store(self.v.get(), val, order); }\n            }\n\n            /// Stores a value into the atomic integer, returning the previous value.\n            ///\n            /// `swap` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let some_var = \", stringify!($atomic_type), \"::new(5);\")]\n            ///\n            /// assert_eq!(some_var.swap(10, Ordering::Relaxed), 5);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn swap(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_swap(self.v.get(), val, order) }\n            }\n\n            /// Stores a value into the atomic integer if the current value is the same as\n            /// the `current` value.\n            ///\n            /// The return value is always the previous value. If it is equal to `current`, then the\n            /// value was updated.\n            ///\n            /// `compare_and_swap` also takes an [`Ordering`] argument which describes the memory\n            /// ordering of this operation. Notice that even when using [`AcqRel`], the operation\n            /// might fail and hence just perform an `Acquire` load, but not have `Release` semantics.\n            /// Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n            /// happens, and using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Migrating to `compare_exchange` and `compare_exchange_weak`\n            ///\n            /// `compare_and_swap` is equivalent to `compare_exchange` with the following mapping for\n            /// memory orderings:\n            ///\n            /// Original | Success | Failure\n            /// -------- | ------- | -------\n            /// Relaxed  | Relaxed | Relaxed\n            /// Acquire  | Acquire | Acquire\n            /// Release  | Release | Relaxed\n            /// AcqRel   | AcqRel  | Acquire\n            /// SeqCst   | SeqCst  | SeqCst\n            ///\n            /// `compare_and_swap` and `compare_exchange` also differ in their return type. You can use\n            /// `compare_exchange(...).unwrap_or_else(|x| x)` to recover the behavior of `compare_and_swap`,\n            /// but in most cases it is more idiomatic to check whether the return value is `Ok` or `Err`\n            /// rather than to infer success vs failure based on the value that was read.\n            ///\n            /// During migration, consider whether it makes sense to use `compare_exchange_weak` instead.\n            /// `compare_exchange_weak` is allowed to fail spuriously even when the comparison succeeds,\n            /// which allows the compiler to generate better assembly code when the compare and swap\n            /// is used in a loop.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let some_var = \", stringify!($atomic_type), \"::new(5);\")]\n            ///\n            /// assert_eq!(some_var.compare_and_swap(5, 10, Ordering::Relaxed), 5);\n            /// assert_eq!(some_var.load(Ordering::Relaxed), 10);\n            ///\n            /// assert_eq!(some_var.compare_and_swap(6, 12, Ordering::Relaxed), 10);\n            /// assert_eq!(some_var.load(Ordering::Relaxed), 10);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[deprecated(\n                since = \"1.50.0\",\n                note = \"Use `compare_exchange` or `compare_exchange_weak` instead\")\n            ]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn compare_and_swap(&self,\n                                    current: $int_type,\n                                    new: $int_type,\n                                    order: Ordering) -> $int_type {\n                match self.compare_exchange(current,\n                                            new,\n                                            order,\n                                            strongest_failure_ordering(order)) {\n                    Ok(x) => x,\n                    Err(x) => x,\n                }\n            }\n\n            /// Stores a value into the atomic integer if the current value is the same as\n            /// the `current` value.\n            ///\n            /// The return value is a result indicating whether the new value was written and\n            /// containing the previous value. On success this value is guaranteed to be equal to\n            /// `current`.\n            ///\n            /// `compare_exchange` takes two [`Ordering`] arguments to describe the memory\n            /// ordering of this operation. `success` describes the required ordering for the\n            /// read-modify-write operation that takes place if the comparison with `current` succeeds.\n            /// `failure` describes the required ordering for the load operation that takes place when\n            /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n            /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let some_var = \", stringify!($atomic_type), \"::new(5);\")]\n            ///\n            /// assert_eq!(some_var.compare_exchange(5, 10,\n            ///                                      Ordering::Acquire,\n            ///                                      Ordering::Relaxed),\n            ///            Ok(5));\n            /// assert_eq!(some_var.load(Ordering::Relaxed), 10);\n            ///\n            /// assert_eq!(some_var.compare_exchange(6, 12,\n            ///                                      Ordering::SeqCst,\n            ///                                      Ordering::Acquire),\n            ///            Err(10));\n            /// assert_eq!(some_var.load(Ordering::Relaxed), 10);\n            /// ```\n            ///\n            /// # Considerations\n            ///\n            /// `compare_exchange` is a [compare-and-swap operation] and thus exhibits the usual downsides\n            /// of CAS operations. In particular, a load of the value followed by a successful\n            /// `compare_exchange` with the previous load *does not ensure* that other threads have not\n            /// changed the value in the interim! This is usually important when the *equality* check in\n            /// the `compare_exchange` is being used to check the *identity* of a value, but equality\n            /// does not necessarily imply identity. This is a particularly common case for pointers, as\n            /// a pointer holding the same address does not imply that the same object exists at that\n            /// address! In this case, `compare_exchange` can lead to the [ABA problem].\n            ///\n            /// [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem\n            /// [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap\n            #[inline]\n            #[$stable_cxchg]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn compare_exchange(&self,\n                                    current: $int_type,\n                                    new: $int_type,\n                                    success: Ordering,\n                                    failure: Ordering) -> Result<$int_type, $int_type> {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }\n            }\n\n            /// Stores a value into the atomic integer if the current value is the same as\n            /// the `current` value.\n            ///\n            #[doc = concat!(\"Unlike [`\", stringify!($atomic_type), \"::compare_exchange`],\")]\n            /// this function is allowed to spuriously fail even\n            /// when the comparison succeeds, which can result in more efficient code on some\n            /// platforms. The return value is a result indicating whether the new value was\n            /// written and containing the previous value.\n            ///\n            /// `compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\n            /// ordering of this operation. `success` describes the required ordering for the\n            /// read-modify-write operation that takes place if the comparison with `current` succeeds.\n            /// `failure` describes the required ordering for the load operation that takes place when\n            /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n            /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let val = \", stringify!($atomic_type), \"::new(4);\")]\n            ///\n            /// let mut old = val.load(Ordering::Relaxed);\n            /// loop {\n            ///     let new = old * 2;\n            ///     match val.compare_exchange_weak(old, new, Ordering::SeqCst, Ordering::Relaxed) {\n            ///         Ok(_) => break,\n            ///         Err(x) => old = x,\n            ///     }\n            /// }\n            /// ```\n            ///\n            /// # Considerations\n            ///\n            /// `compare_exchange` is a [compare-and-swap operation] and thus exhibits the usual downsides\n            /// of CAS operations. In particular, a load of the value followed by a successful\n            /// `compare_exchange` with the previous load *does not ensure* that other threads have not\n            /// changed the value in the interim. This is usually important when the *equality* check in\n            /// the `compare_exchange` is being used to check the *identity* of a value, but equality\n            /// does not necessarily imply identity. This is a particularly common case for pointers, as\n            /// a pointer holding the same address does not imply that the same object exists at that\n            /// address! In this case, `compare_exchange` can lead to the [ABA problem].\n            ///\n            /// [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem\n            /// [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap\n            #[inline]\n            #[$stable_cxchg]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn compare_exchange_weak(&self,\n                                         current: $int_type,\n                                         new: $int_type,\n                                         success: Ordering,\n                                         failure: Ordering) -> Result<$int_type, $int_type> {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe {\n                    atomic_compare_exchange_weak(self.v.get(), current, new, success, failure)\n                }\n            }\n\n            /// Adds to the current value, returning the previous value.\n            ///\n            /// This operation wraps around on overflow.\n            ///\n            /// `fetch_add` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(0);\")]\n            /// assert_eq!(foo.fetch_add(10, Ordering::SeqCst), 0);\n            /// assert_eq!(foo.load(Ordering::SeqCst), 10);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_add(self.v.get(), val, order) }\n            }\n\n            /// Subtracts from the current value, returning the previous value.\n            ///\n            /// This operation wraps around on overflow.\n            ///\n            /// `fetch_sub` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(20);\")]\n            /// assert_eq!(foo.fetch_sub(10, Ordering::SeqCst), 20);\n            /// assert_eq!(foo.load(Ordering::SeqCst), 10);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_sub(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_sub(self.v.get(), val, order) }\n            }\n\n            /// Bitwise \"and\" with the current value.\n            ///\n            /// Performs a bitwise \"and\" operation on the current value and the argument `val`, and\n            /// sets the new value to the result.\n            ///\n            /// Returns the previous value.\n            ///\n            /// `fetch_and` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(0b101101);\")]\n            /// assert_eq!(foo.fetch_and(0b110011, Ordering::SeqCst), 0b101101);\n            /// assert_eq!(foo.load(Ordering::SeqCst), 0b100001);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_and(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_and(self.v.get(), val, order) }\n            }\n\n            /// Bitwise \"nand\" with the current value.\n            ///\n            /// Performs a bitwise \"nand\" operation on the current value and the argument `val`, and\n            /// sets the new value to the result.\n            ///\n            /// Returns the previous value.\n            ///\n            /// `fetch_nand` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(0x13);\")]\n            /// assert_eq!(foo.fetch_nand(0x31, Ordering::SeqCst), 0x13);\n            /// assert_eq!(foo.load(Ordering::SeqCst), !(0x13 & 0x31));\n            /// ```\n            #[inline]\n            #[$stable_nand]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_nand(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_nand(self.v.get(), val, order) }\n            }\n\n            /// Bitwise \"or\" with the current value.\n            ///\n            /// Performs a bitwise \"or\" operation on the current value and the argument `val`, and\n            /// sets the new value to the result.\n            ///\n            /// Returns the previous value.\n            ///\n            /// `fetch_or` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(0b101101);\")]\n            /// assert_eq!(foo.fetch_or(0b110011, Ordering::SeqCst), 0b101101);\n            /// assert_eq!(foo.load(Ordering::SeqCst), 0b111111);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_or(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_or(self.v.get(), val, order) }\n            }\n\n            /// Bitwise \"xor\" with the current value.\n            ///\n            /// Performs a bitwise \"xor\" operation on the current value and the argument `val`, and\n            /// sets the new value to the result.\n            ///\n            /// Returns the previous value.\n            ///\n            /// `fetch_xor` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(0b101101);\")]\n            /// assert_eq!(foo.fetch_xor(0b110011, Ordering::SeqCst), 0b101101);\n            /// assert_eq!(foo.load(Ordering::SeqCst), 0b011110);\n            /// ```\n            #[inline]\n            #[$stable]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_xor(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { atomic_xor(self.v.get(), val, order) }\n            }\n\n            /// Fetches the value, and applies a function to it that returns an optional\n            /// new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else\n            /// `Err(previous_value)`.\n            ///\n            /// Note: This may call the function multiple times if the value has been changed from other threads in\n            /// the meantime, as long as the function returns `Some(_)`, but the function will have been applied\n            /// only once to the stored value.\n            ///\n            /// `fetch_update` takes two [`Ordering`] arguments to describe the memory ordering of this operation.\n            /// The first describes the required ordering for when the operation finally succeeds while the second\n            /// describes the required ordering for loads. These correspond to the success and failure orderings of\n            #[doc = concat!(\"[`\", stringify!($atomic_type), \"::compare_exchange`]\")]\n            /// respectively.\n            ///\n            /// Using [`Acquire`] as success ordering makes the store part\n            /// of this operation [`Relaxed`], and using [`Release`] makes the final successful load\n            /// [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Considerations\n            ///\n            /// This method is not magic; it is not provided by the hardware, and does not act like a\n            /// critical section or mutex.\n            ///\n            /// It is implemented on top of an atomic [compare-and-swap operation], and thus is subject to\n            /// the usual drawbacks of CAS operations. In particular, be careful of the [ABA problem]\n            /// if this atomic integer is an index or more generally if knowledge of only the *bitwise value*\n            /// of the atomic is not in and of itself sufficient to ensure any required preconditions.\n            ///\n            /// [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem\n            /// [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap\n            ///\n            /// # Examples\n            ///\n            /// ```rust\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let x = \", stringify!($atomic_type), \"::new(7);\")]\n            /// assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7));\n            /// assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7));\n            /// assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8));\n            /// assert_eq!(x.load(Ordering::SeqCst), 9);\n            /// ```\n            #[inline]\n            #[stable(feature = \"no_more_cas\", since = \"1.45.0\")]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_update<F>(&self,\n                                   set_order: Ordering,\n                                   fetch_order: Ordering,\n                                   mut f: F) -> Result<$int_type, $int_type>\n            where F: FnMut($int_type) -> Option<$int_type> {\n                let mut prev = self.load(fetch_order);\n                while let Some(next) = f(prev) {\n                    match self.compare_exchange_weak(prev, next, set_order, fetch_order) {\n                        x @ Ok(_) => return x,\n                        Err(next_prev) => prev = next_prev\n                    }\n                }\n                Err(prev)\n            }\n\n            /// Fetches the value, and applies a function to it that returns an optional\n            /// new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else\n            /// `Err(previous_value)`.\n            ///\n            #[doc = concat!(\"See also: [`update`](`\", stringify!($atomic_type), \"::update`).\")]\n            ///\n            /// Note: This may call the function multiple times if the value has been changed from other threads in\n            /// the meantime, as long as the function returns `Some(_)`, but the function will have been applied\n            /// only once to the stored value.\n            ///\n            /// `try_update` takes two [`Ordering`] arguments to describe the memory ordering of this operation.\n            /// The first describes the required ordering for when the operation finally succeeds while the second\n            /// describes the required ordering for loads. These correspond to the success and failure orderings of\n            #[doc = concat!(\"[`\", stringify!($atomic_type), \"::compare_exchange`]\")]\n            /// respectively.\n            ///\n            /// Using [`Acquire`] as success ordering makes the store part\n            /// of this operation [`Relaxed`], and using [`Release`] makes the final successful load\n            /// [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Considerations\n            ///\n            /// This method is not magic; it is not provided by the hardware, and does not act like a\n            /// critical section or mutex.\n            ///\n            /// It is implemented on top of an atomic [compare-and-swap operation], and thus is subject to\n            /// the usual drawbacks of CAS operations. In particular, be careful of the [ABA problem]\n            /// if this atomic integer is an index or more generally if knowledge of only the *bitwise value*\n            /// of the atomic is not in and of itself sufficient to ensure any required preconditions.\n            ///\n            /// [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem\n            /// [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap\n            ///\n            /// # Examples\n            ///\n            /// ```rust\n            /// #![feature(atomic_try_update)]\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let x = \", stringify!($atomic_type), \"::new(7);\")]\n            /// assert_eq!(x.try_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7));\n            /// assert_eq!(x.try_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7));\n            /// assert_eq!(x.try_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8));\n            /// assert_eq!(x.load(Ordering::SeqCst), 9);\n            /// ```\n            #[inline]\n            #[unstable(feature = \"atomic_try_update\", issue = \"135894\")]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn try_update(\n                &self,\n                set_order: Ordering,\n                fetch_order: Ordering,\n                f: impl FnMut($int_type) -> Option<$int_type>,\n            ) -> Result<$int_type, $int_type> {\n                // FIXME(atomic_try_update): this is currently an unstable alias to `fetch_update`;\n                //      when stabilizing, turn `fetch_update` into a deprecated alias to `try_update`.\n                self.fetch_update(set_order, fetch_order, f)\n            }\n\n            /// Fetches the value, applies a function to it that it return a new value.\n            /// The new value is stored and the old value is returned.\n            ///\n            #[doc = concat!(\"See also: [`try_update`](`\", stringify!($atomic_type), \"::try_update`).\")]\n            ///\n            /// Note: This may call the function multiple times if the value has been changed from other threads in\n            /// the meantime, but the function will have been applied only once to the stored value.\n            ///\n            /// `update` takes two [`Ordering`] arguments to describe the memory ordering of this operation.\n            /// The first describes the required ordering for when the operation finally succeeds while the second\n            /// describes the required ordering for loads. These correspond to the success and failure orderings of\n            #[doc = concat!(\"[`\", stringify!($atomic_type), \"::compare_exchange`]\")]\n            /// respectively.\n            ///\n            /// Using [`Acquire`] as success ordering makes the store part\n            /// of this operation [`Relaxed`], and using [`Release`] makes the final successful load\n            /// [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Considerations\n            ///\n            /// [CAS operation]: https://en.wikipedia.org/wiki/Compare-and-swap\n            /// This method is not magic; it is not provided by the hardware, and does not act like a\n            /// critical section or mutex.\n            ///\n            /// It is implemented on top of an atomic [compare-and-swap operation], and thus is subject to\n            /// the usual drawbacks of CAS operations. In particular, be careful of the [ABA problem]\n            /// if this atomic integer is an index or more generally if knowledge of only the *bitwise value*\n            /// of the atomic is not in and of itself sufficient to ensure any required preconditions.\n            ///\n            /// [ABA Problem]: https://en.wikipedia.org/wiki/ABA_problem\n            /// [compare-and-swap operation]: https://en.wikipedia.org/wiki/Compare-and-swap\n            ///\n            /// # Examples\n            ///\n            /// ```rust\n            /// #![feature(atomic_try_update)]\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let x = \", stringify!($atomic_type), \"::new(7);\")]\n            /// assert_eq!(x.update(Ordering::SeqCst, Ordering::SeqCst, |x| x + 1), 7);\n            /// assert_eq!(x.update(Ordering::SeqCst, Ordering::SeqCst, |x| x + 1), 8);\n            /// assert_eq!(x.load(Ordering::SeqCst), 9);\n            /// ```\n            #[inline]\n            #[unstable(feature = \"atomic_try_update\", issue = \"135894\")]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn update(\n                &self,\n                set_order: Ordering,\n                fetch_order: Ordering,\n                mut f: impl FnMut($int_type) -> $int_type,\n            ) -> $int_type {\n                let mut prev = self.load(fetch_order);\n                loop {\n                    match self.compare_exchange_weak(prev, f(prev), set_order, fetch_order) {\n                        Ok(x) => break x,\n                        Err(next_prev) => prev = next_prev,\n                    }\n                }\n            }\n\n            /// Maximum with the current value.\n            ///\n            /// Finds the maximum of the current value and the argument `val`, and\n            /// sets the new value to the result.\n            ///\n            /// Returns the previous value.\n            ///\n            /// `fetch_max` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(23);\")]\n            /// assert_eq!(foo.fetch_max(42, Ordering::SeqCst), 23);\n            /// assert_eq!(foo.load(Ordering::SeqCst), 42);\n            /// ```\n            ///\n            /// If you want to obtain the maximum value in one step, you can use the following:\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(23);\")]\n            /// let bar = 42;\n            /// let max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar);\n            /// assert!(max_foo == 42);\n            /// ```\n            #[inline]\n            #[stable(feature = \"atomic_min_max\", since = \"1.45.0\")]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_max(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { $max_fn(self.v.get(), val, order) }\n            }\n\n            /// Minimum with the current value.\n            ///\n            /// Finds the minimum of the current value and the argument `val`, and\n            /// sets the new value to the result.\n            ///\n            /// Returns the previous value.\n            ///\n            /// `fetch_min` takes an [`Ordering`] argument which describes the memory ordering\n            /// of this operation. All ordering modes are possible. Note that using\n            /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n            /// using [`Release`] makes the load part [`Relaxed`].\n            ///\n            /// **Note**: This method is only available on platforms that support atomic operations on\n            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(23);\")]\n            /// assert_eq!(foo.fetch_min(42, Ordering::Relaxed), 23);\n            /// assert_eq!(foo.load(Ordering::Relaxed), 23);\n            /// assert_eq!(foo.fetch_min(22, Ordering::Relaxed), 23);\n            /// assert_eq!(foo.load(Ordering::Relaxed), 22);\n            /// ```\n            ///\n            /// If you want to obtain the minimum value in one step, you can use the following:\n            ///\n            /// ```\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n            ///\n            #[doc = concat!(\"let foo = \", stringify!($atomic_type), \"::new(23);\")]\n            /// let bar = 12;\n            /// let min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar);\n            /// assert_eq!(min_foo, 12);\n            /// ```\n            #[inline]\n            #[stable(feature = \"atomic_min_max\", since = \"1.45.0\")]\n            #[$cfg_cas]\n            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n            pub fn fetch_min(&self, val: $int_type, order: Ordering) -> $int_type {\n                // SAFETY: data races are prevented by atomic intrinsics.\n                unsafe { $min_fn(self.v.get(), val, order) }\n            }\n\n            /// Returns a mutable pointer to the underlying integer.\n            ///\n            /// Doing non-atomic reads and writes on the resulting integer can be a data race.\n            /// This method is mostly useful for FFI, where the function signature may use\n            #[doc = concat!(\"`*mut \", stringify!($int_type), \"` instead of `&\", stringify!($atomic_type), \"`.\")]\n            ///\n            /// Returning an `*mut` pointer from a shared reference to this atomic is safe because the\n            /// atomic types work with interior mutability. All modifications of an atomic change the value\n            /// through a shared reference, and can do so safely as long as they use atomic operations. Any\n            /// use of the returned raw pointer requires an `unsafe` block and still has to uphold the\n            /// requirements of the [memory model].\n            ///\n            /// # Examples\n            ///\n            /// ```ignore (extern-declaration)\n            /// # fn main() {\n            #[doc = concat!($extra_feature, \"use std::sync::atomic::\", stringify!($atomic_type), \";\")]\n            ///\n            /// extern \"C\" {\n            #[doc = concat!(\"    fn my_atomic_op(arg: *mut \", stringify!($int_type), \");\")]\n            /// }\n            ///\n            #[doc = concat!(\"let atomic = \", stringify!($atomic_type), \"::new(1);\")]\n            ///\n            /// // SAFETY: Safe as long as `my_atomic_op` is atomic.\n            /// unsafe {\n            ///     my_atomic_op(atomic.as_ptr());\n            /// }\n            /// # }\n            /// ```\n            ///\n            /// [memory model]: self#memory-model-for-atomic-accesses\n            #[inline]\n            #[stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n            #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n            #[rustc_never_returns_null_ptr]\n            pub const fn as_ptr(&self) -> *mut $int_type {\n                self.v.get()\n            }\n        }\n    }\n}"
    }
  ],
  "callees": [
    "21711908612579563914872185813592704681",
    "1363736816890242968813291297505934676086",
    "13787789957696665786443917461728594111",
    "1096154568935207292118411765173724766739",
    "1615780015787215128316594883786605832883",
    "1363736816890242968813291297505934676086",
    "40063093336585792095766602796070126518",
    "1363736816890242968813291297505934676086",
    "32379270059602019354235921731882813982",
    "56302926392345337717408510197239954979",
    "162904158373319495369070442937212273978",
    "11879697526668758218117833999951598353",
    "145493908791982296621902181110000221268",
    "1450824968137209211015779136914157765236",
    "569006077262986796812405551728371512007",
    "1531529736665207119716166291560277808459",
    "73527523988569783602102024796077831883",
    "589599466487462365011430963401962118509",
    "173804791060645997939431648088044898019",
    "345779094652510990013028497657958621628",
    "633647834542374266612707027049512022895",
    "697460064680243425913637757097126534899",
    "491501190642785328215657853710567654624",
    "963445940455787412316298237032570014032",
    "45755338440053891812429711640309937578",
    "117083133034458006019709376097028492273",
    "116838725589658364762125035485285727797",
    "543262562578205611814193723889232631679",
    "52447312959119204751725989402363811285",
    "178740761294011342347851287405474276941",
    "1363736816890242968813291297505934676086",
    "133438993749786418975081779688101424321",
    "1363736816890242968813291297505934676086",
    "1399429456846979953611102041165781521260",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "124505100155499374672517322928734740357",
    "17564752812027543017921499519819593186",
    "415843772060095450495024404503354748",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "141734674420942826793676645643806909910",
    "1449958889715960797216832526184590351740",
    "1405688574831102906613841440741292834949",
    "1363736816890242968813291297505934676086",
    "102681047625715816715891697912487007516",
    "1456038200519160613311076457066716778749",
    "1363736816890242968813291297505934676086",
    "3631011255984099811723442155502233758",
    "107434598387902432754329628792529310410",
    "126856515018227567717268281677679773089",
    "1541892164474739153210412766107034883087",
    "17071058974145005632186640793723653443",
    "1363736816890242968813291297505934676086",
    "160497103329191699902136713012782731632",
    "114307678585105788705826351831663929507",
    "36516702880102455035412356603021119879",
    "66230658810213716923364242359817003494",
    "758521721130535942311471025828986597656",
    "1061164724759219763815645675397447440252",
    "87403439848434419247064420115731773013",
    "1363736816890242968813291297505934676086",
    "1557257459089412723814481849913677699848",
    "1252490680533338683910412060151507734433",
    "1749354356376422432110307264409629560948",
    "1258466857914554525112404871973680747085",
    "44257266364374505814542935723980878695",
    "483065282508714011512484774123351954088",
    "14903543624694794243644002717478558678",
    "110497420964184345517185892364398759782",
    "967906768493376431218217451737112282259",
    "120545667060787152649831833770488558658",
    "35398161789749681612681774609204698030",
    "1179015178765463762414234671921766134145",
    "174685213766893048749650677724114385749",
    "10509237598131848814549591882127413984",
    "1281165520107319810917700592201822377588",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "49018304109011208404210549037180765167",
    "85954746138896127215759194079554738885",
    "147140364761497764245859604611097836389",
    "1596895408968513533410088921895846228595",
    "1614155235129332897612781648493212048372",
    "810779466093592108212241617885987307171",
    "1176244076798003428316453342148484779703",
    "109944259722044341265095459316229967027",
    "172638385678426328067795128614522456834",
    "1363736816890242968813291297505934676086",
    "5896833350048700781336146197257269119",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1316970106710505483515384541553369764410",
    "47323665595455568617290020941376774286",
    "115294443576414182704230118141076863162",
    "117180827392012273508876188211897901",
    "33648701090774792381476499826703911309",
    "17059090463224209834835470382370244130",
    "1390948765080590250516343632946970173132",
    "302040922402546323014383629325615453738",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "11139495935450220752286966752445431093",
    "25768524018977866517055903022448790318",
    "1363736816890242968813291297505934676086",
    "111425599901702694743874629435682172347",
    "10411882274122721321347434438360460579",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "47278574192031232971799194590021398469",
    "84909938954906103112758184730426842057",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "43065787078031739421302414489234141137",
    "141422989953676177975345808590037882245",
    "599811874247088556214270119820779031432",
    "116307730265010107496063883445928110555",
    "51249814573059736397300350198312706573",
    "14314158248731667467224830801301140817",
    "20556606504130694934441291267858631687",
    "63343181121905511768887728585050322379",
    "1740349853341161241318022375811744789656",
    "163420631485670102514812722236596958075",
    "117866791398837999916729913240660212602",
    "78937725557049865865312472258624739921",
    "24965143184079381448082111781766640478",
    "120187458746217755377061356638344375303",
    "979929479181667570414120095459269589167",
    "26018933144073124403117386256735640375",
    "146047412284994450699670763407526667493",
    "370986840755973263713704597144407313708",
    "1269044022939676954011330908751210391833",
    "1814608415178812336916584953075633412492",
    "5155095549190106808117025562379125071",
    "231144133455543717611650225582136294816",
    "658338601979133096511997313224278252199",
    "279139698799614514916515091634607686006",
    "1386932868725969591817741044941664680589",
    "1614019611353877008011078295776030189782",
    "122529376138248236262181364630884265848",
    "168808893922624482353144964771536079081",
    "1373954867253511233510412862011267463900",
    "118312983481738621787939326110261417317",
    "1443801087974407715313972555121628268092",
    "55549683683119533987529308576431567352",
    "353836335514715551415901371272464802770",
    "1259853796123792531010116020849677170944",
    "11663475863125548442297136621169599847",
    "694680042487375838617016048567631445241",
    "1469238626115971997416556324389651615960",
    "772065526016577495817057948738175729677",
    "164222581612569613775862371766786294469",
    "168545836479171427075036933182194130275",
    "1245138925531671967011772485621443291799",
    "84531025305994381986874028925223812083",
    "1767855557361537621413279623076098939355",
    "1737790711272917069411654923375177111580",
    "1712898201300478840215074793236064467963",
    "1067675883129992420314174327751912045205",
    "7832507060962758874697651425918563686",
    "1363736816890242968813291297505934676086",
    "59784951958023534311340742558790816074",
    "161003650625398914518944455314788757627",
    "375485108047544468212954122974188100514",
    "1259350752486802697010822022220260946961",
    "173105439367020071767957153438588951894",
    "164769300933020566656262923669273525158",
    "841346702487865802717731804342903065853",
    "290360310864386898714327273451929980463",
    "1617054938297627622011998382328717871744",
    "1187394330470290540315609612625104918416",
    "643349473068727846115780678007450923004",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "94922797404227066110182963288288755980",
    "1290129509806421189411347835193128335421",
    "1440950763975467621710982502069073665218",
    "115914492802736206513942422914514650180",
    "10472345935978673833158369420689244465",
    "4022676547935835625613219446488568037",
    "1469338120271152053915440029281232848110",
    "1404301623446508076324800636591061021",
    "590329942313453995443993872612632776",
    "124585850382406476533630795656715220155",
    "58004076551979108867624014250612795185",
    "315331140686166457616644577557668814534",
    "392414261785278668815725499572289607221",
    "57879252225118024599041161508222342189",
    "13877762789521041542129457574643169972",
    "39733537437022171613682062970386769295",
    "116482898840396402477616122367703643717",
    "126012008154782159615214827713093461635",
    "176742512093848468045239021356424772729",
    "1332220011502853693912113825838893369096",
    "489491009154422080613291037190739219235",
    "172988202723925134796567682468931265149",
    "161899346824042420066809545955353317373",
    "142848115973206406239372863350872744477",
    "121437425240318612285099463628436266366",
    "862746525473562901814208597568406058076",
    "18807870376557811914137072961455205803",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "14289085791843058303972699274315536239",
    "772849497340941696512651691449279859789",
    "172651811582921907362991207281968133556",
    "55767955768979135724569809046456107380",
    "138498210655847367337117318085891081738",
    "602553655434272852810568520159081802816",
    "118399811559831053152713406198401957826",
    "37177017281071971897146112828522083495",
    "12843798981703387312528981449504705678",
    "258383674090471065712097594685693339627",
    "16219137135012567795854520876341648395",
    "1110994844594451591212495732224461740413",
    "102887121523905452179262747329207775596",
    "703663108277374327010040438608357482834",
    "18025038300022165797237903038339257643",
    "1100495660517602822510660091708953776518",
    "261114641164087560416314538374841383619",
    "104831405656903467145249333363974848645",
    "166731958795390711014401438738375660172",
    "170643549057433678244294044399486155477",
    "45778466392467191607407869613497036936",
    "928576257219350686410540489380463230637",
    "316650073974070898314677646691025099244",
    "699677282037119441912902108102153124040",
    "82172937758979852922952239791072303378",
    "440548634769728996212603275541854349848",
    "58610947851065178096877308904752748129",
    "11646453575295718315251820797250120902",
    "180824515799235861855048294605620195261",
    "6920580184232348336779953785783275216",
    "10280076113730517359836576566793155285",
    "1341558659220454468114614057400541737257",
    "134444069993780397564703136863158148716",
    "1281311138712451019216655529596617870816",
    "1694562113052794749410144451898650894237",
    "4869154787378134257815739629728386905",
    "1265976456585539210516529077192093398642",
    "115773568660767031455181763448941131845",
    "136032794974893814259994759472454752644",
    "432839679267479096014829068154253700423",
    "1794599000442827535116488920139961158750",
    "2986389593417097136138451070897405411",
    "120554772527146371477803731781472626688",
    "1575180643816959680013764123585909653935",
    "39498763786986515562043840216548811868",
    "1301552843662473815815562437677364454669",
    "25269069644916694782526525713115896132",
    "705720955307329014517734924079983333105",
    "106194760576608812086033306050055808545",
    "26709420718515964610399689521027368728",
    "647229011481470722711384925118784833376",
    "195916256607314082811658914690236691420",
    "781603672758780177711142029625885084089",
    "491291023697495753013211284803811616795",
    "184353680265586730536158755300629755859",
    "150805697079257168915708122934999652421",
    "19032683183423540915807324370118535654",
    "843102896095261732816452208300794916411",
    "183304351666724829317590170706630038849",
    "169017152061146820209827866672499117723",
    "148575031114542006631514846264054548534",
    "1775677520341811851814469906126811626471",
    "116738536460889801267781784641205834958",
    "335215210776670050614472036033464965023",
    "63316748377020640678862326185202615069",
    "31390187068039156922254347795038548724",
    "1365351597739011160412231277592213691479",
    "62964906474134410292844024784991518817",
    "591163883570913488917341250007887670228",
    "1191898201809378325315295870108407566549",
    "1180283320154936987317687023111507811148",
    "1313672206338891747615103280559224089796",
    "96372891677808677613400092139271508855",
    "28615990301751085456623670194523588843",
    "934375696446284627516563118665690549226",
    "90717827950038266317724794688744091509",
    "374600997420842104113073418159306638921",
    "676158778818239148118032927577101369525",
    "20465072737965727702865968861132587689",
    "164270848150013505114031889181489753537",
    "15152045824856044406894168005740738415",
    "1619664696269114311311148142649633607940",
    "132338405727806576551962422346647404382",
    "148942728659230088417108897615339309934",
    "39540448515855064678826919862848152559",
    "1138206188600112614014052369198511966956",
    "1444520060167597438013590316361883534441",
    "840327692597851529715494429944416660710",
    "110592357029254507637069415658458618835",
    "659668705778703132618263658943022009102",
    "104042909831277084814695630352375939457",
    "151694591507088409946921766244030956793",
    "199204638009217392510037902431469110881",
    "145447226859878511083700582225257315850",
    "50060506762358864813111719587773515328",
    "183861757727510342134448172129871973284",
    "105672144727691370147417363250736312873",
    "484471573878144096018004521534736974390",
    "1709809215670154039418099455961948399924",
    "96916315473583579836508686922498622791",
    "565703400213878621116612569146298479102",
    "28736061727494506023412962124683958890",
    "33266587737904114784644542366524180286",
    "334303462732756290216309246141683003630",
    "21719508563266996657990482115758623513",
    "66698550878882944999797753749781566130",
    "1060448573230263915014803683681339895296",
    "58110682308819786796654183007581184910",
    "1454902756454700245417169407534621781519",
    "1302514623760732210917631482165556335973",
    "1028023859496283824714006082102994000183",
    "1375602339865304183616456573312626826122",
    "1107283495849277278117296354366898453379",
    "277270871561828570218406540162843059579",
    "13445532662779670761228880372488293329",
    "1262939944460148277811000139254508406606",
    "139679375284959323487025069545409596711",
    "18715316072765276746430930647862132791",
    "111607676992080912514849326215626188409",
    "156699801464166307163042354284108788791",
    "22866183673949532009302817089247357249",
    "481760318323362098310716245514364463126",
    "64610587145495125376527745759424960225",
    "1224955055955126069915106408301904372143",
    "1363736816890242968813291297505934676086",
    "126141077251671387694770399036796691982",
    "182972684513709302288440602073677891408",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "757582883714685463901852637522961818",
    "126692834448097932228994692025940173998",
    "25558485697757400065874176408609551720",
    "3070792398821344367711524405851230424",
    "1309835973007280609915569531429584049128",
    "1168250850099297564614674330731516573335",
    "1363736816890242968813291297505934676086",
    "258015149311769650815595893692783623165",
    "511478505957911151817582639665615596786",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "72206699492837620961391515713423967445",
    "13755615706890703333392644145431563331",
    "159756182951594195141958974558316251741",
    "125503965774672678587505966790704230026",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "66706820410345849277836174571153878427",
    "56280834011826648107990160430231866711",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "410539056495057654816027084297333494253",
    "77174816795140902716242581103966137591",
    "2789128693349703173502163395333061757",
    "166633686087748340273888470960266707358",
    "803349082160475719615953068480273372134",
    "94056652019881819791956374760214426656",
    "754759722796109215815456571656250183671",
    "1759901199729611034616971071765351824769",
    "1713539753654745329215868145254478021527",
    "617092763968904127517665973127834451336",
    "127855099164131056444917757662188434041",
    "949395388449823663510769715854278378985",
    "1104235390298522963816456402510698856634",
    "911776701760282171617604846768629435744",
    "1775737194777331674985764993211109601",
    "182534260348495718753381397354609581701",
    "4934620328571622263466073158373293264",
    "12648906865206745938310425055021489000",
    "146974890213594219449252497930155406314",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "174687280503843252966785365579092840489",
    "175571384913906199332529456767936114324",
    "30538736193800974802435154402903504258",
    "114738990432469285116290634385075634137",
    "15983849791221256564812498585385603744",
    "1079004244994411241413554978492739965599",
    "82091519569599138729539588385833891722",
    "1043753670404697738110369474677413471996",
    "13319693877906475969745999911508592033",
    "1803080631077045177915667721738419071984",
    "1840089712819150440011289622865836852783",
    "156130332443363785142369276941490088427",
    "1363736816890242968813291297505934676086",
    "69113001718728000933280786850497169271",
    "685067228267738706816520200651034208821",
    "27923647172126753103299190047630517613",
    "101529499612274583310256215612263406146",
    "1530284227476743347713341144208972169947",
    "47867114697845434864733977363775125036",
    "690191742356000119711662071594594489591",
    "2359618996072093344825228041002286558",
    "1809343474275607681211888501461793289939",
    "28165847745982066288778377828776142451",
    "88493681086475254713711651785051145947",
    "191955226679272286116324456769319086740",
    "82869399406577355236900753945207284521",
    "1312337259679107324810632236067710137987",
    "1281491428722655105812293039240564558174",
    "1003330821210552932912035065246129125121",
    "179654496502614639316000517910785552386",
    "81865490382594657408046274180724905068",
    "166919050687909314661017061178177074704",
    "121719316555113793862003739913395039268",
    "1378841877187097314016728178981803040846",
    "143855658971075482716496001174473796264",
    "774656650382130508918215221937405910597",
    "87921322259985553812333634501742816676",
    "49735939736064522815836904066037473747",
    "1371444395219499039416884212293696836317",
    "137858276920179648721963909130383298377",
    "600212582708984139817168672437512081975",
    "179055790507985182579992344567348443326",
    "995177949111625568612353687436321299644",
    "5310558452957964718858737086270628046",
    "1363736816890242968813291297505934676086",
    "1791498998900760371016093261305107956284",
    "3564196776402835410996067600986058440",
    "15167305530142968353259369112121275803",
    "1363736816890242968813291297505934676086",
    "45819503778375231969038300244556098990",
    "11275800218733998915358478622531324152",
    "1875738746069546053588724721861696954",
    "1363736816890242968813291297505934676086",
    "1425886142144039943111129160147777313265",
    "20475840513559464912888937342908332014",
    "103529232425067372948580977297303381856",
    "500039049531792023414807911624995133090",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "999550419794171197017667664885549974755",
    "1363736816890242968813291297505934676086",
    "106681772045087936513629764546266919219",
    "638878529771811441416671099064984594214",
    "4939948683197044415599526564423792146",
    "135531080111925582411467416475571761960",
    "802603331907130014710293248879007229107",
    "1793199026846464691616255721034512928348",
    "121973516639670562835557836045994389718",
    "1326036702193383983618005858878913638361",
    "1835483843934752894214970695834598510263",
    "113814366055626271438047374284421353461",
    "138774632689772549819578629668035245923",
    "158338167874674576194838212405987326951",
    "90175179397242369455372712796954544135",
    "550150895960312460312176584159342455723",
    "3060735069095531695579360726350017976",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "7839859953712079114640771271960005865",
    "1137271765924114987514947403158445640283",
    "393974833682574441515290398983271504453",
    "182908810388331326478630133303460182053",
    "180126912453652104473132457509626900161",
    "1149265318701628438811160570489210589004",
    "1624379938933529147317881339677401093926",
    "1473335491240830543017777776437787647078",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
