{
  "file": "core/src/escape.rs",
  "name": "escape::escape_ascii::<10>",
  "hash": "90560719827645173863973025411534139639",
  "hash_direct": "629557949664120126110423678751283460363",
  "src": "const fn escape_ascii<const N: usize>(byte: u8) -> ([ascii::Char; N], Range<u8>) {\n    const { assert!(N >= 4) };\n\n    #[cfg(feature = \"optimize_for_size\")]\n    {\n        match byte {\n            b'\\t' => backslash(ascii::Char::SmallT),\n            b'\\r' => backslash(ascii::Char::SmallR),\n            b'\\n' => backslash(ascii::Char::SmallN),\n            b'\\\\' => backslash(ascii::Char::ReverseSolidus),\n            b'\\'' => backslash(ascii::Char::Apostrophe),\n            b'\"' => backslash(ascii::Char::QuotationMark),\n            0x00..=0x1F | 0x7F => hex_escape(byte),\n            _ => match ascii::Char::from_u8(byte) {\n                Some(a) => verbatim(a),\n                None => hex_escape(byte),\n            },\n        }\n    }\n\n    #[cfg(not(feature = \"optimize_for_size\"))]\n    {\n        /// Lookup table helps us determine how to display character.\n        ///\n        /// Since ASCII characters will always be 7 bits, we can exploit this to store the 8th bit to\n        /// indicate whether the result is escaped or unescaped.\n        ///\n        /// We additionally use 0x80 (escaped NUL character) to indicate hex-escaped bytes, since\n        /// escaped NUL will not occur.\n        const LOOKUP: [u8; 256] = {\n            let mut arr = [0; 256];\n            let mut idx = 0;\n            while idx <= 255 {\n                arr[idx] = match idx as u8 {\n                    // use 8th bit to indicate escaped\n                    b'\\t' => 0x80 | b't',\n                    b'\\r' => 0x80 | b'r',\n                    b'\\n' => 0x80 | b'n',\n                    b'\\\\' => 0x80 | b'\\\\',\n                    b'\\'' => 0x80 | b'\\'',\n                    b'\"' => 0x80 | b'\"',\n\n                    // use NUL to indicate hex-escaped\n                    0x00..=0x1F | 0x7F..=0xFF => 0x80 | b'\\0',\n\n                    idx => idx,\n                };\n                idx += 1;\n            }\n            arr\n        };\n\n        let lookup = LOOKUP[byte as usize];\n\n        // 8th bit indicates escape\n        let lookup_escaped = lookup & 0x80 != 0;\n\n        // SAFETY: We explicitly mask out the eighth bit to get a 7-bit ASCII character.\n        let lookup_ascii = unsafe { ascii::Char::from_u8_unchecked(lookup & 0x7F) };\n\n        if lookup_escaped {\n            // NUL indicates hex-escaped\n            if matches!(lookup_ascii, ascii::Char::Null) {\n                hex_escape(byte)\n            } else {\n                backslash(lookup_ascii)\n            }\n        } else {\n            verbatim(lookup_ascii)\n        }\n    }\n}",
  "callees": [
    "652182000514958061713215128671564018150",
    "39437333748502814549799659117940154402",
    "14416948434991562229105356152318384944",
    "1040339599326832618111461915909975396456"
  ]
}
