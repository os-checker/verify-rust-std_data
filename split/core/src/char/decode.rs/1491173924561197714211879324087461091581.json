{
  "file": "core/src/char/decode.rs",
  "name": "<core::char::DecodeUtf16<core::iter::Cloned<core::slice::Iter<'_, u16>>> as core::iter::Iterator>::size_hint",
  "hash": "1491173924561197714211879324087461091581",
  "hash_direct": "142024308744323431531770079918035543827",
  "src": "fn size_hint(&self) -> (usize, Option<usize>) {\n        let (low, high) = self.iter.size_hint();\n\n        let (low_buf, high_buf) = match self.buf {\n            // buf is empty, no additional elements from it.\n            None => (0, 0),\n            // `u` is a non surrogate, so it's always an additional character.\n            Some(u) if !u.is_utf16_surrogate() => (1, 1),\n            // `u` is a leading surrogate (it can never be a trailing surrogate and\n            // it's a surrogate due to the previous branch) and `self.iter` is empty.\n            //\n            // `u` can't be paired, since the `self.iter` is empty,\n            // so it will always become an additional element (error).\n            Some(_u) if high == Some(0) => (1, 1),\n            // `u` is a leading surrogate and `iter` may be non-empty.\n            //\n            // `u` can either pair with a trailing surrogate, in which case no additional elements\n            // are produced, or it can become an error, in which case it's an additional character (error).\n            Some(_u) => (0, 1),\n        };\n\n        // `self.iter` could contain entirely valid surrogates (2 elements per\n        // char), or entirely non-surrogates (1 element per char).\n        //\n        // On odd lower bound, at least one element must stay unpaired\n        // (with other elements from `self.iter`), so we round up.\n        let low = low.div_ceil(2) + low_buf;\n        let high = high.and_then(|h| h.checked_add(high_buf));\n\n        (low, high)\n    }",
  "callees": [
    "73056805467263745878847238367826713817",
    "11563104784935977822392899470914495442",
    "12281449246394340237926324936375242532",
    "99835071136844477394667148890151411684",
    "73694171442177138896992135977130617471",
    "181267529910573756716102767087485333561",
    "310476737258981539215905981644988688429",
    "1824545319189397521315695847785602896178",
    "69136089152058448946692926024539354259",
    "917596525785715091311548338319238057837",
    "136794585590173197801964910136148613895",
    "122007648122754002943023341031948475816",
    "464292734462897319515676690223531177128",
    "138823648129421339412755970406599427122",
    "1412944136669746958917320356615227431324",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "170281423934441608902372914597711355436",
    "146612017564224181584303574960223420416",
    "63085389524472853348886374617170044294",
    "262831349882779883815480941076479924039",
    "52852232494086589254808970441149119915",
    "204624291790703846113326965436639007818",
    "164881415094924038612191414195822958089",
    "180854266570654101902487315098997002465",
    "892440326903209194616901577591483793108",
    "99638573080118899796741131711167013859",
    "696057742965113774914554126468362018796",
    "126847719772216171144583602840059197118",
    "747156457449598790816736684951635660145",
    "112989397975222255532054380452996322405"
  ]
}
