{
  "file": "core/src/char/decode.rs",
  "name": "<core::char::DecodeUtf16<core::iter::Cloned<core::slice::Iter<'_, u16>>> as core::iter::Iterator>::next",
  "hash": "150838050839107316529487855666011532141",
  "hash_direct": "8913406642141907826677669096758108410",
  "src": "fn next(&mut self) -> Option<Result<char, DecodeUtf16Error>> {\n        let u = match self.buf.take() {\n            Some(buf) => buf,\n            None => self.iter.next()?,\n        };\n\n        if !u.is_utf16_surrogate() {\n            // SAFETY: not a surrogate\n            Some(Ok(unsafe { char::from_u32_unchecked(u as u32) }))\n        } else if u >= 0xDC00 {\n            // a trailing surrogate\n            Some(Err(DecodeUtf16Error { code: u }))\n        } else {\n            let u2 = match self.iter.next() {\n                Some(u2) => u2,\n                // eof\n                None => return Some(Err(DecodeUtf16Error { code: u })),\n            };\n            if u2 < 0xDC00 || u2 > 0xDFFF {\n                // not a trailing surrogate so we're not a valid\n                // surrogate pair, so rewind to redecode u2 next time.\n                self.buf = Some(u2);\n                return Some(Err(DecodeUtf16Error { code: u }));\n            }\n\n            // all ok, so lets decode it.\n            let c = (((u & 0x3ff) as u32) << 10 | (u2 & 0x3ff) as u32) + 0x1_0000;\n            // SAFETY: we checked that it's a legal unicode value\n            Some(Ok(unsafe { char::from_u32_unchecked(c) }))\n        }\n    }",
  "callees": [
    "104550528282774795524117016372908034501",
    "146994998949606397634275197795948319731",
    "1664835611994150133815177247542444862856",
    "28485763676394485985065853745300782169",
    "12281449246394340237926324936375242532",
    "181267529910573756716102767087485333561",
    "1824545319189397521315695847785602896178",
    "679500168121404242113714730939438588711",
    "155954784201796491474491810208151633466",
    "136794585590173197801964910136148613895",
    "596717226459156418513221677816795970108",
    "167720725353303677441984078993999087147",
    "349732893336648829317640041454262824981",
    "773664058596078741114308388533927035965",
    "115553803619679159048380303171788048607",
    "34210679594512111485916678964974480997",
    "59381380145263198599196460478579534630",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "63085389524472853348886374617170044294",
    "52852232494086589254808970441149119915",
    "204624291790703846113326965436639007818",
    "1714572297711485051014974876863843391438",
    "3803036002523653477810960401443935619",
    "118459717968966630969830635953538483218",
    "147126715082587070211603531314293101537",
    "99638573080118899796741131711167013859",
    "126542467810608230577524819651549070632",
    "841344188694266590295617675180068548",
    "1354927612204440028015057409771891773909",
    "879543598591726583811363902326698267760",
    "1396369027985523187512983890317312644464",
    "112989397975222255532054380452996322405"
  ]
}
