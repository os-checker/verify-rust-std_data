{
  "file": "core/src/char/mod.rs",
  "name": "<char::ToUppercase as clone::Clone>::clone",
  "hash": "12200735727065521502702320990680046010",
  "hash_direct": "714521836873061411916330648572456853662",
  "src": "Clone",
  "macro_backtrace": [
    {
      "callsite": "Clone",
      "defsite": "pub macro Clone($item:item) {\n    /* compiler built-in */\n}"
    },
    {
      "callsite": "casemappingiter_impls! {\n    /// Returns an iterator that yields the uppercase equivalent of a `char`.\n    ///\n    /// This `struct` is created by the [`to_uppercase`] method on [`char`]. See\n    /// its documentation for more.\n    ///\n    /// [`to_uppercase`]: char::to_uppercase\n    ToUppercase\n}",
      "defsite": "macro_rules! casemappingiter_impls {\n    ($(#[$attr:meta])* $ITER_NAME:ident) => {\n        $(#[$attr])*\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[derive(Debug, Clone)]\n        pub struct $ITER_NAME(CaseMappingIter);\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl Iterator for $ITER_NAME {\n            type Item = char;\n            fn next(&mut self) -> Option<char> {\n                self.0.next()\n            }\n\n            fn size_hint(&self) -> (usize, Option<usize>) {\n                self.0.size_hint()\n            }\n\n            fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n            where\n                Fold: FnMut(Acc, Self::Item) -> Acc,\n            {\n                self.0.fold(init, fold)\n            }\n\n            fn count(self) -> usize {\n                self.0.count()\n            }\n\n            fn last(self) -> Option<Self::Item> {\n                self.0.last()\n            }\n\n            fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                self.0.advance_by(n)\n            }\n\n            #[requires(idx < self.0.len())]\n            unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n                // SAFETY: just forwarding requirements to caller\n                unsafe { self.0.__iterator_get_unchecked(idx) }\n            }\n        }\n\n        #[stable(feature = \"case_mapping_double_ended\", since = \"1.59.0\")]\n        impl DoubleEndedIterator for $ITER_NAME {\n            fn next_back(&mut self) -> Option<char> {\n                self.0.next_back()\n            }\n\n            fn rfold<Acc, Fold>(self, init: Acc, rfold: Fold) -> Acc\n            where\n                Fold: FnMut(Acc, Self::Item) -> Acc,\n            {\n                self.0.rfold(init, rfold)\n            }\n\n            fn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                self.0.advance_back_by(n)\n            }\n        }\n\n        #[stable(feature = \"fused\", since = \"1.26.0\")]\n        impl FusedIterator for $ITER_NAME {}\n\n        #[stable(feature = \"exact_size_case_mapping_iter\", since = \"1.35.0\")]\n        impl ExactSizeIterator for $ITER_NAME {\n            fn len(&self) -> usize {\n                self.0.len()\n            }\n\n            fn is_empty(&self) -> bool {\n                self.0.is_empty()\n            }\n        }\n\n        // SAFETY: forwards to inner `array::IntoIter`\n        #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n        unsafe impl TrustedLen for $ITER_NAME {}\n\n        // SAFETY: forwards to inner `array::IntoIter`\n        #[doc(hidden)]\n        #[unstable(feature = \"std_internals\", issue = \"none\")]\n        unsafe impl TrustedRandomAccessNoCoerce for $ITER_NAME {\n            const MAY_HAVE_SIDE_EFFECT: bool = false;\n        }\n\n        // SAFETY: this iter has no subtypes/supertypes\n        #[doc(hidden)]\n        #[unstable(feature = \"std_internals\", issue = \"none\")]\n        unsafe impl TrustedRandomAccess for $ITER_NAME {}\n\n        #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n        impl fmt::Display for $ITER_NAME {\n            #[inline]\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                fmt::Display::fmt(&self.0, f)\n            }\n        }\n    }\n}"
    }
  ],
  "callees": [
    "720802451589687113816301824036942890496",
    "23071911981727052859303957889119214363",
    "896473035177025973416367184800578777710",
    "83700512418223119455979853263832275630",
    "93286102809244890633413000560528828163",
    "114377603865385847629770219237755177236",
    "131312470926044644438109007101277589116",
    "162904158373319495369070442937212273978",
    "589599466487462365011430963401962118509",
    "173804791060645997939431648088044898019",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "47278574192031232971799194590021398469",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "485330747721684854516811813475370713730",
    "324164795341886156210341743630682664684",
    "127480550190977320783880139772188390780",
    "1097707101539637178210734849358938339531",
    "461191546831745583115527792134488937301",
    "96302116647028938810745455983342126930",
    "13684367920880908976937151656962984174",
    "125065710042150760177641152650413019605",
    "22938633379151566455214931156859629578",
    "4249270117622984566931842268357705104",
    "122093415844689854765911140337945845455",
    "196149482166459167012039780361098372060",
    "138096622584095633546793020763262159221",
    "1156543629781806943613236490158137181630",
    "76745137169644122255209617000358748065",
    "841346702487865802717731804342903065853",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "18400546828195575794503699709479215337",
    "426660444221673690915890253082845174214",
    "305374531381368603518383057774771282949",
    "312782805013495487013101185366708248332",
    "807459588385208510417001782946551009910",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "14289085791843058303972699274315536239",
    "458772757546716953716903379393680122094",
    "19175242352379257894524511946426654035",
    "157419191093478936518787831921895095700",
    "1195934742954190154118432795911407274332",
    "267797364184975508110072607667876287564",
    "146310777876303217386736888105300639452",
    "136032794974893814259994759472454752644",
    "79864552017977064554718232825118263405",
    "35533776158220467232372629384472754561",
    "1557321461075645187711936516059816743993",
    "169017152061146820209827866672499117723",
    "183084010255680729445495992945602528853",
    "7252890572114370307317666805867717317",
    "48809033505769405763377671333504179378",
    "431442820142619186515414098105483374450",
    "18136738016345921590656448296597700388",
    "45656793177740256155675771181400814826",
    "60398301833937082456673431992872147767",
    "1256347874659859794517657351340104146603",
    "29573527650795721644159815627231359192",
    "111579181119163154092786763467006320007",
    "144487851679409818182441559908132198532",
    "1566537176599058683618062203254520584119",
    "542107969656591403611120475955569064682",
    "52407632342254686257204761749902704057",
    "179819862235991913013359594974388521164",
    "162844450702333103777617035442858972123",
    "513296827392420605515770864250650246827",
    "113435353397430141395214826138088664817",
    "485603261632969349013187994303553210079",
    "161788327871977099153316256552224694947",
    "451773334865780391313917419124282258084",
    "141445885626755121111673275791665644973",
    "276021001949917057011231031782131251252",
    "10164950691499830410112771214934484594",
    "591094529696286006714165933143879456455",
    "115903863567073371641794759931860188119",
    "684451011680717484712301707546685075738",
    "4489626532091630616863209749579112362",
    "511996741682036996311172598055216774625",
    "87905215503079520955941831883612079868",
    "1137271765924114987514947403158445640283",
    "393974833682574441515290398983271504453",
    "399232661239117480517401994520839366833"
  ]
}
