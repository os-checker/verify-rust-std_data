{
  "file": "core/src/char/mod.rs",
  "name": "<char::ToLowercase as iter::traits::double_ended::DoubleEndedIterator>::advance_back_by",
  "hash": "124764133926940794629391028174019694926",
  "hash_direct": "2634595647763082294819559682218514850",
  "src": "fn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                self.0.advance_back_by(n)\n            }",
  "macro_backtrace": [
    {
      "callsite": "casemappingiter_impls! {\n    /// Returns an iterator that yields the lowercase equivalent of a `char`.\n    ///\n    /// This `struct` is created by the [`to_lowercase`] method on [`char`]. See\n    /// its documentation for more.\n    ///\n    /// [`to_lowercase`]: char::to_lowercase\n    ToLowercase\n}",
      "defsite": "macro_rules! casemappingiter_impls {\n    ($(#[$attr:meta])* $ITER_NAME:ident) => {\n        $(#[$attr])*\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[derive(Debug, Clone)]\n        pub struct $ITER_NAME(CaseMappingIter);\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl Iterator for $ITER_NAME {\n            type Item = char;\n            fn next(&mut self) -> Option<char> {\n                self.0.next()\n            }\n\n            fn size_hint(&self) -> (usize, Option<usize>) {\n                self.0.size_hint()\n            }\n\n            fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n            where\n                Fold: FnMut(Acc, Self::Item) -> Acc,\n            {\n                self.0.fold(init, fold)\n            }\n\n            fn count(self) -> usize {\n                self.0.count()\n            }\n\n            fn last(self) -> Option<Self::Item> {\n                self.0.last()\n            }\n\n            fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                self.0.advance_by(n)\n            }\n\n            #[requires(idx < self.0.len())]\n            unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n                // SAFETY: just forwarding requirements to caller\n                unsafe { self.0.__iterator_get_unchecked(idx) }\n            }\n        }\n\n        #[stable(feature = \"case_mapping_double_ended\", since = \"1.59.0\")]\n        impl DoubleEndedIterator for $ITER_NAME {\n            fn next_back(&mut self) -> Option<char> {\n                self.0.next_back()\n            }\n\n            fn rfold<Acc, Fold>(self, init: Acc, rfold: Fold) -> Acc\n            where\n                Fold: FnMut(Acc, Self::Item) -> Acc,\n            {\n                self.0.rfold(init, rfold)\n            }\n\n            fn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                self.0.advance_back_by(n)\n            }\n        }\n\n        #[stable(feature = \"fused\", since = \"1.26.0\")]\n        impl FusedIterator for $ITER_NAME {}\n\n        #[stable(feature = \"exact_size_case_mapping_iter\", since = \"1.35.0\")]\n        impl ExactSizeIterator for $ITER_NAME {\n            fn len(&self) -> usize {\n                self.0.len()\n            }\n\n            fn is_empty(&self) -> bool {\n                self.0.is_empty()\n            }\n        }\n\n        // SAFETY: forwards to inner `array::IntoIter`\n        #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n        unsafe impl TrustedLen for $ITER_NAME {}\n\n        // SAFETY: forwards to inner `array::IntoIter`\n        #[doc(hidden)]\n        #[unstable(feature = \"std_internals\", issue = \"none\")]\n        unsafe impl TrustedRandomAccessNoCoerce for $ITER_NAME {\n            const MAY_HAVE_SIDE_EFFECT: bool = false;\n        }\n\n        // SAFETY: this iter has no subtypes/supertypes\n        #[doc(hidden)]\n        #[unstable(feature = \"std_internals\", issue = \"none\")]\n        unsafe impl TrustedRandomAccess for $ITER_NAME {}\n\n        #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n        impl fmt::Display for $ITER_NAME {\n            #[inline]\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                fmt::Display::fmt(&self.0, f)\n            }\n        }\n    }\n}"
    }
  ],
  "callees": [
    "132550181894567367182547797322752805197",
    "3948461731655908288644158783762252298",
    "1817162639438881711910847304624560968621",
    "423143763371051276513910599279439871828",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "1016151615303375525414352124901147872489",
    "55351421860830136644925253581212012132",
    "375485108047544468212954122974188100514",
    "61243377896084322717777372197237784668",
    "190326012008036553110818298591983434539",
    "426660444221673690915890253082845174214",
    "305374531381368603518383057774771282949",
    "312782805013495487013101185366708248332",
    "174795744676247664659930821608166811301",
    "164068019671410046984473820423655882669",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "146310777876303217386736888105300639452",
    "886129854627109679913291327164155727857",
    "1345903579787689058715689038732564730769",
    "379994518897277131216528315043767400790",
    "177478443247045809459991316947153830226",
    "151921782545986132711095630321482724997",
    "56835273449349560221636717489589691169",
    "202138944626815357413799005241025326766",
    "29307246504301170394033086320295611173",
    "92658601706765119113826203574018840813",
    "949577173055195931617693703270529612693"
  ]
}
