{
  "file": "core/src/char/mod.rs",
  "name": "<char::ToLowercase as iter::traits::iterator::Iterator>::__iterator_get_unchecked",
  "hash": "766477361293927828612945280554548045047",
  "hash_direct": "164386560244962152343484022036194736077",
  "src": "unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n                // SAFETY: just forwarding requirements to caller\n                unsafe { self.0.__iterator_get_unchecked(idx) }\n            }",
  "macro_backtrace": [
    {
      "callsite": "casemappingiter_impls! {\n    /// Returns an iterator that yields the lowercase equivalent of a `char`.\n    ///\n    /// This `struct` is created by the [`to_lowercase`] method on [`char`]. See\n    /// its documentation for more.\n    ///\n    /// [`to_lowercase`]: char::to_lowercase\n    ToLowercase\n}",
      "defsite": "macro_rules! casemappingiter_impls {\n    ($(#[$attr:meta])* $ITER_NAME:ident) => {\n        $(#[$attr])*\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[derive(Debug, Clone)]\n        pub struct $ITER_NAME(CaseMappingIter);\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl Iterator for $ITER_NAME {\n            type Item = char;\n            fn next(&mut self) -> Option<char> {\n                self.0.next()\n            }\n\n            fn size_hint(&self) -> (usize, Option<usize>) {\n                self.0.size_hint()\n            }\n\n            fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n            where\n                Fold: FnMut(Acc, Self::Item) -> Acc,\n            {\n                self.0.fold(init, fold)\n            }\n\n            fn count(self) -> usize {\n                self.0.count()\n            }\n\n            fn last(self) -> Option<Self::Item> {\n                self.0.last()\n            }\n\n            fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                self.0.advance_by(n)\n            }\n\n            #[requires(idx < self.0.len())]\n            unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n                // SAFETY: just forwarding requirements to caller\n                unsafe { self.0.__iterator_get_unchecked(idx) }\n            }\n        }\n\n        #[stable(feature = \"case_mapping_double_ended\", since = \"1.59.0\")]\n        impl DoubleEndedIterator for $ITER_NAME {\n            fn next_back(&mut self) -> Option<char> {\n                self.0.next_back()\n            }\n\n            fn rfold<Acc, Fold>(self, init: Acc, rfold: Fold) -> Acc\n            where\n                Fold: FnMut(Acc, Self::Item) -> Acc,\n            {\n                self.0.rfold(init, rfold)\n            }\n\n            fn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                self.0.advance_back_by(n)\n            }\n        }\n\n        #[stable(feature = \"fused\", since = \"1.26.0\")]\n        impl FusedIterator for $ITER_NAME {}\n\n        #[stable(feature = \"exact_size_case_mapping_iter\", since = \"1.35.0\")]\n        impl ExactSizeIterator for $ITER_NAME {\n            fn len(&self) -> usize {\n                self.0.len()\n            }\n\n            fn is_empty(&self) -> bool {\n                self.0.is_empty()\n            }\n        }\n\n        // SAFETY: forwards to inner `array::IntoIter`\n        #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n        unsafe impl TrustedLen for $ITER_NAME {}\n\n        // SAFETY: forwards to inner `array::IntoIter`\n        #[doc(hidden)]\n        #[unstable(feature = \"std_internals\", issue = \"none\")]\n        unsafe impl TrustedRandomAccessNoCoerce for $ITER_NAME {\n            const MAY_HAVE_SIDE_EFFECT: bool = false;\n        }\n\n        // SAFETY: this iter has no subtypes/supertypes\n        #[doc(hidden)]\n        #[unstable(feature = \"std_internals\", issue = \"none\")]\n        unsafe impl TrustedRandomAccess for $ITER_NAME {}\n\n        #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n        impl fmt::Display for $ITER_NAME {\n            #[inline]\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                fmt::Display::fmt(&self.0, f)\n            }\n        }\n    }\n}"
    }
  ],
  "callees": [
    "326887394053852198210069891144979344090",
    "178951894982467308219324402616083450883",
    "178951894982467308219324402616083450883",
    "178951894982467308219324402616083450883",
    "178951894982467308219324402616083450883",
    "31347390413526789042148220960067405131",
    "31347390413526789042148220960067405131",
    "31347390413526789042148220960067405131",
    "31347390413526789042148220960067405131",
    "57176712091754406011965110738479554439",
    "1005435935907558690416850542241005097513",
    "3948461731655908288644158783762252298",
    "28480750766324973914065427992267473130",
    "109839497938698571024260545817388710626",
    "28909768260930873645541180878919131734",
    "97262162954339477759957939066176098228",
    "97262162954339477759957939066176098228",
    "97262162954339477759957939066176098228",
    "97262162954339477759957939066176098228",
    "117087658360572651908118387633564442135",
    "117087658360572651908118387633564442135",
    "117087658360572651908118387633564442135",
    "117087658360572651908118387633564442135",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "28405977425355945984798880905827523456",
    "179027492598291092807980692871672984191",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "18400546828195575794503699709479215337",
    "426660444221673690915890253082845174214",
    "305374531381368603518383057774771282949",
    "312782805013495487013101185366708248332",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "44451747498583488497435470008347535217",
    "146310777876303217386736888105300639452",
    "85745738098516205298821114628904872594",
    "381493256874689232417961155191493240250",
    "177478443247045809459991316947153830226",
    "56835273449349560221636717489589691169",
    "77219244105823958465490561069154456707",
    "202138944626815357413799005241025326766",
    "455080882066045713511072984234289468508",
    "29307246504301170394033086320295611173",
    "949577173055195931617693703270529612693",
    "331526003538137488213486206162083846398",
    "48548664629730829953422984265893277498",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
