{
  "file": "core/src/char/mod.rs",
  "name": "<char::ToLowercase as iter::traits::iterator::Iterator>::__iterator_get_unchecked",
  "hash": "169461752388621164842822206058426452127",
  "hash_direct": "164386560244962152343484022036194736077",
  "src": "unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n                // SAFETY: just forwarding requirements to caller\n                unsafe { self.0.__iterator_get_unchecked(idx) }\n            }",
  "macro_backtrace": [
    {
      "callsite": "casemappingiter_impls! {\n    /// Returns an iterator that yields the lowercase equivalent of a `char`.\n    ///\n    /// This `struct` is created by the [`to_lowercase`] method on [`char`]. See\n    /// its documentation for more.\n    ///\n    /// [`to_lowercase`]: char::to_lowercase\n    ToLowercase\n}",
      "defsite": "macro_rules! casemappingiter_impls {\n    ($(#[$attr:meta])* $ITER_NAME:ident) => {\n        $(#[$attr])*\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[derive(Debug, Clone)]\n        pub struct $ITER_NAME(CaseMappingIter);\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl Iterator for $ITER_NAME {\n            type Item = char;\n            fn next(&mut self) -> Option<char> {\n                self.0.next()\n            }\n\n            fn size_hint(&self) -> (usize, Option<usize>) {\n                self.0.size_hint()\n            }\n\n            fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n            where\n                Fold: FnMut(Acc, Self::Item) -> Acc,\n            {\n                self.0.fold(init, fold)\n            }\n\n            fn count(self) -> usize {\n                self.0.count()\n            }\n\n            fn last(self) -> Option<Self::Item> {\n                self.0.last()\n            }\n\n            fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                self.0.advance_by(n)\n            }\n\n            #[requires(idx < self.0.len())]\n            unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n                // SAFETY: just forwarding requirements to caller\n                unsafe { self.0.__iterator_get_unchecked(idx) }\n            }\n        }\n\n        #[stable(feature = \"case_mapping_double_ended\", since = \"1.59.0\")]\n        impl DoubleEndedIterator for $ITER_NAME {\n            fn next_back(&mut self) -> Option<char> {\n                self.0.next_back()\n            }\n\n            fn rfold<Acc, Fold>(self, init: Acc, rfold: Fold) -> Acc\n            where\n                Fold: FnMut(Acc, Self::Item) -> Acc,\n            {\n                self.0.rfold(init, rfold)\n            }\n\n            fn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n                self.0.advance_back_by(n)\n            }\n        }\n\n        #[stable(feature = \"fused\", since = \"1.26.0\")]\n        impl FusedIterator for $ITER_NAME {}\n\n        #[stable(feature = \"exact_size_case_mapping_iter\", since = \"1.35.0\")]\n        impl ExactSizeIterator for $ITER_NAME {\n            fn len(&self) -> usize {\n                self.0.len()\n            }\n\n            fn is_empty(&self) -> bool {\n                self.0.is_empty()\n            }\n        }\n\n        // SAFETY: forwards to inner `array::IntoIter`\n        #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n        unsafe impl TrustedLen for $ITER_NAME {}\n\n        // SAFETY: forwards to inner `array::IntoIter`\n        #[doc(hidden)]\n        #[unstable(feature = \"std_internals\", issue = \"none\")]\n        unsafe impl TrustedRandomAccessNoCoerce for $ITER_NAME {\n            const MAY_HAVE_SIDE_EFFECT: bool = false;\n        }\n\n        // SAFETY: this iter has no subtypes/supertypes\n        #[doc(hidden)]\n        #[unstable(feature = \"std_internals\", issue = \"none\")]\n        unsafe impl TrustedRandomAccess for $ITER_NAME {}\n\n        #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n        impl fmt::Display for $ITER_NAME {\n            #[inline]\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                fmt::Display::fmt(&self.0, f)\n            }\n        }\n    }\n}"
    }
  ],
  "callees": [
    "1649035861029188536210714923971842394342",
    "176639708910926909717269614684697163002",
    "176639708910926909717269614684697163002",
    "176639708910926909717269614684697163002",
    "176639708910926909717269614684697163002",
    "19930765793371735415393292754546909568",
    "19930765793371735415393292754546909568",
    "19930765793371735415393292754546909568",
    "19930765793371735415393292754546909568",
    "104032009937140925402023420676746490496",
    "1494109773814821011412380527016853719153",
    "1736785034867077145910956581112481142969",
    "77051930423777902504832746391357142792",
    "949792096248023971711514731404863324947",
    "1190103595858719074015798602325817434085",
    "47190155581226211972616483579008596622",
    "47190155581226211972616483579008596622",
    "47190155581226211972616483579008596622",
    "47190155581226211972616483579008596622",
    "938222325264939516168699978474773581",
    "938222325264939516168699978474773581",
    "938222325264939516168699978474773581",
    "938222325264939516168699978474773581",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "36351954201021777159854470931730324821",
    "154632036321720824021555629139300729764",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "366974912920839386515801963218903644372",
    "884246074448727927914595282961940941192",
    "975615807404907599012293873143289411403",
    "27547235193633795771352944920978011050",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "8041641127837343459962315531916125606",
    "17885338024940159556008007307872397104",
    "36807589465354481963152241317569641721",
    "1238801585062675627812977055992276014577",
    "73605271436615433592782990893848785911",
    "643776580154816945711014088420858857492",
    "93033282099912286081652200904873681617",
    "32193535572390591639577511843833454884",
    "780322346340294418311007502699187794819",
    "65529622751361832374440681269696012118",
    "98672616218528724113768882390038008401",
    "1504286091581735299715570781132246701377",
    "74111286315405054421392461884745781298",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
