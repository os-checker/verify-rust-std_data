{
  "file": "core/src/internal_macros.rs",
  "name": "<num::wrapping::Wrapping<u32> as ops::arith::AddAssign<&num::wrapping::Wrapping<u32>>>::add_assign",
  "hash": "271647121094354104714587393580461314538",
  "hash_direct": "1449026430288647744818202812153149952200",
  "src": "fn $method(&mut self, other: &$u) {\n                $imp::$method(self, *other);\n            }",
  "macro_backtrace": [
    {
      "callsite": "forward_ref_op_assign! { impl AddAssign, add_assign for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }",
      "defsite": "macro_rules! forward_ref_op_assign {\n    (impl $imp:ident, $method:ident for $t:ty, $u:ty, $(#[$attr:meta])+) => {\n        $(#[$attr])+\n        impl const $imp<&$u> for $t {\n            #[inline]\n            #[track_caller]\n            fn $method(&mut self, other: &$u) {\n                $imp::$method(self, *other);\n            }\n        }\n    }\n}"
    },
    {
      "callsite": "wrapping_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }",
      "defsite": "macro_rules! wrapping_impl {\n    ($($t:ty)*) => ($(\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const Add for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn add(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_add(other.0))\n            }\n        }\n        forward_ref_binop! { impl Add, add for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const AddAssign for Wrapping<$t> {\n            #[inline]\n            fn add_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self + other;\n            }\n        }\n        forward_ref_op_assign! { impl AddAssign, add_assign for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const AddAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn add_assign(&mut self, other: $t) {\n                *self = *self + Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl AddAssign, add_assign for Wrapping<$t>, $t,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const Sub for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn sub(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_sub(other.0))\n            }\n        }\n        forward_ref_binop! { impl Sub, sub for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const SubAssign for Wrapping<$t> {\n            #[inline]\n            fn sub_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self - other;\n            }\n        }\n        forward_ref_op_assign! { impl SubAssign, sub_assign for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const SubAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn sub_assign(&mut self, other: $t) {\n                *self = *self - Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl SubAssign, sub_assign for Wrapping<$t>, $t,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const Mul for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn mul(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_mul(other.0))\n            }\n        }\n        forward_ref_binop! { impl Mul, mul for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const MulAssign for Wrapping<$t> {\n            #[inline]\n            fn mul_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self * other;\n            }\n        }\n        forward_ref_op_assign! { impl MulAssign, mul_assign for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const MulAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn mul_assign(&mut self, other: $t) {\n                *self = *self * Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl MulAssign, mul_assign for Wrapping<$t>, $t,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"wrapping_div\", since = \"1.3.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const Div for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn div(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_div(other.0))\n            }\n        }\n        forward_ref_binop! { impl Div, div for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const DivAssign for Wrapping<$t> {\n            #[inline]\n            fn div_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self / other;\n            }\n        }\n        forward_ref_op_assign! { impl DivAssign, div_assign for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const DivAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn div_assign(&mut self, other: $t) {\n                *self = *self / Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl DivAssign, div_assign for Wrapping<$t>, $t,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const Rem for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn rem(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_rem(other.0))\n            }\n        }\n        forward_ref_binop! { impl Rem, rem for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const RemAssign for Wrapping<$t> {\n            #[inline]\n            fn rem_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self % other;\n            }\n        }\n        forward_ref_op_assign! { impl RemAssign, rem_assign for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const RemAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn rem_assign(&mut self, other: $t) {\n                *self = *self % Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl RemAssign, rem_assign for Wrapping<$t>, $t,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const Not for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn not(self) -> Wrapping<$t> {\n                Wrapping(!self.0)\n            }\n        }\n        forward_ref_unop! { impl Not, not for Wrapping<$t>,\n        #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const BitXor for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn bitxor(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0 ^ other.0)\n            }\n        }\n        forward_ref_binop! { impl BitXor, bitxor for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const BitXorAssign for Wrapping<$t> {\n            #[inline]\n            fn bitxor_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self ^ other;\n            }\n        }\n        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const BitXorAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn bitxor_assign(&mut self, other: $t) {\n                *self = *self ^ Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Wrapping<$t>, $t,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const BitOr for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn bitor(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0 | other.0)\n            }\n        }\n        forward_ref_binop! { impl BitOr, bitor for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const BitOrAssign for Wrapping<$t> {\n            #[inline]\n            fn bitor_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self | other;\n            }\n        }\n        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const BitOrAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn bitor_assign(&mut self, other: $t) {\n                *self = *self | Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Wrapping<$t>, $t,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const BitAnd for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn bitand(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0 & other.0)\n            }\n        }\n        forward_ref_binop! { impl BitAnd, bitand for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const BitAndAssign for Wrapping<$t> {\n            #[inline]\n            fn bitand_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self & other;\n            }\n        }\n        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Wrapping<$t>, Wrapping<$t>,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const BitAndAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn bitand_assign(&mut self, other: $t) {\n                *self = *self & Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Wrapping<$t>, $t,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"wrapping_neg\", since = \"1.10.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const Neg for Wrapping<$t> {\n            type Output = Self;\n            #[inline]\n            fn neg(self) -> Self {\n                Wrapping(0) - self\n            }\n        }\n        forward_ref_unop! { impl Neg, neg for Wrapping<$t>,\n        #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n    )*)\n}"
    }
  ],
  "callees": [
    "8204181366844938535028948998470945185",
    "1508002918650167476617698786259205954463",
    "178666805334246076727519774624871887900"
  ]
}
