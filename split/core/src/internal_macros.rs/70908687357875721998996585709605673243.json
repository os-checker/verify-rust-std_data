{
  "file": "core/src/internal_macros.rs",
  "name": "<str::CharEscapeDefault as ops::function::Fn<(char,)>>::call",
  "hash": "70908687357875721998996585709605673243",
  "hash_direct": "43413062960263825405712310389158974251",
  "src": "extern \"rust-call\" fn call(&self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n                    $body\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_fn_for_zst! {\n    /// A nameable, cloneable fn type\n    #[derive(Clone)]\n    struct LinesMap impl<'a> Fn = |line: &'a str| -> &'a str {\n        let Some(line) = line.strip_suffix('\\n') else { return line };\n        let Some(line) = line.strip_suffix('\\r') else { return line };\n        line\n    };\n\n    #[derive(Clone)]\n    struct CharEscapeDebugContinue impl Fn = |c: char| -> char::EscapeDebug {\n        c.escape_debug_ext(EscapeDebugExtArgs {\n            escape_grapheme_extended: false,\n            escape_single_quote: true,\n            escape_double_quote: true\n        })\n    };\n\n    #[derive(Clone)]\n    struct CharEscapeUnicode impl Fn = |c: char| -> char::EscapeUnicode {\n        c.escape_unicode()\n    };\n    #[derive(Clone)]\n    struct CharEscapeDefault impl Fn = |c: char| -> char::EscapeDefault {\n        c.escape_default()\n    };\n\n    #[derive(Clone)]\n    struct IsWhitespace impl Fn = |c: char| -> bool {\n        c.is_whitespace()\n    };\n\n    #[derive(Clone)]\n    struct IsAsciiWhitespace impl Fn = |byte: &u8| -> bool {\n        byte.is_ascii_whitespace()\n    };\n\n    #[derive(Clone)]\n    struct IsNotEmpty impl<'a, 'b> Fn = |s: &'a &'b str| -> bool {\n        !s.is_empty()\n    };\n\n    #[derive(Clone)]\n    struct BytesIsNotEmpty impl<'a, 'b> Fn = |s: &'a &'b [u8]| -> bool {\n        !s.is_empty()\n    };\n\n    #[derive(Clone)]\n    struct UnsafeBytesToStr impl<'a> Fn = |bytes: &'a [u8]| -> &'a str {\n        // SAFETY: not safe\n        unsafe { from_utf8_unchecked(bytes) }\n    };\n}",
      "defsite": "macro_rules! impl_fn_for_zst {\n    ($(\n        $( #[$attr: meta] )*\n        struct $Name: ident impl$( <$( $lifetime : lifetime ),+> )? Fn =\n            |$( $arg: ident: $ArgTy: ty ),*| -> $ReturnTy: ty\n            $body: block;\n    )+) => {\n        $(\n            $( #[$attr] )*\n            struct $Name;\n\n            impl $( <$( $lifetime ),+> )? Fn<($( $ArgTy, )*)> for $Name {\n                #[inline]\n                extern \"rust-call\" fn call(&self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n                    $body\n                }\n            }\n\n            impl $( <$( $lifetime ),+> )? FnMut<($( $ArgTy, )*)> for $Name {\n                #[inline]\n                extern \"rust-call\" fn call_mut(\n                    &mut self,\n                    ($( $arg, )*): ($( $ArgTy, )*)\n                ) -> $ReturnTy {\n                    Fn::call(&*self, ($( $arg, )*))\n                }\n            }\n\n            impl $( <$( $lifetime ),+> )? FnOnce<($( $ArgTy, )*)> for $Name {\n                type Output = $ReturnTy;\n\n                #[inline]\n                extern \"rust-call\" fn call_once(self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n                    Fn::call(&self, ($( $arg, )*))\n                }\n            }\n        )+\n    }\n}"
    }
  ],
  "callees": [
    "15551977551413036531158252289522839939",
    "211389067699639933614636457746408448112",
    "171978863025298498526653523685058692868",
    "156024025025714879372729938876459179075",
    "121872163624966698483225952656434249831",
    "167318693743665471496388970833021607658",
    "95001581818926480997273063874299368335",
    "1217668811729325338414337733949387649941",
    "35370028365746769644492928375701759092",
    "68493401920310626249402833581244911390",
    "924792046670332786817944240588622075467",
    "8321248065256844210936699426845051202",
    "2153815559673747084871476722621538969",
    "34033821343796496721583911312683496924",
    "1389159447303023223311095015010125212110",
    "443997961579727925018215293937479203837",
    "94867568266683552417585213232011858888",
    "258820287469578611817448591488600041899",
    "913423096705529582812295291280909896630",
    "1468417527326346925111930517869733796072",
    "1262555611173615611410428101371636009066",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960"
  ]
}
