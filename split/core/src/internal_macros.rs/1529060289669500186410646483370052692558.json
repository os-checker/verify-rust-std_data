{
  "file": "core/src/internal_macros.rs",
  "name": "<u32 as ops::arith::Div<&u32>>::div",
  "hash": "1529060289669500186410646483370052692558",
  "hash_direct": "1193832270397410159892885765740126708",
  "src": "fn $method(self, other: &$u) -> <$t as $imp<$u>>::Output {\n                $imp::$method(self, *other)\n            }",
  "macro_backtrace": [
    {
      "callsite": "forward_ref_binop! { impl Div, div for $t, $t,\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }",
      "defsite": "macro_rules! forward_ref_binop {\n    (impl $imp:ident, $method:ident for $t:ty, $u:ty, $(#[$attr:meta])+) => {\n        $(#[$attr])+\n        impl const $imp<$u> for &$t {\n            type Output = <$t as $imp<$u>>::Output;\n\n            #[inline]\n            #[track_caller]\n            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {\n                $imp::$method(*self, other)\n            }\n        }\n\n        $(#[$attr])+\n        impl const $imp<&$u> for $t {\n            type Output = <$t as $imp<$u>>::Output;\n\n            #[inline]\n            #[track_caller]\n            fn $method(self, other: &$u) -> <$t as $imp<$u>>::Output {\n                $imp::$method(self, *other)\n            }\n        }\n\n        $(#[$attr])+\n        impl const $imp<&$u> for &$t {\n            type Output = <$t as $imp<$u>>::Output;\n\n            #[inline]\n            #[track_caller]\n            fn $method(self, other: &$u) -> <$t as $imp<$u>>::Output {\n                $imp::$method(*self, *other)\n            }\n        }\n    }\n}"
    },
    {
      "callsite": "div_impl_integer! {\n    (usize u8 u16 u32 u64 u128) => \"This operation will panic if `other == 0`.\",\n    (isize i8 i16 i32 i64 i128) => \"This operation will panic if `other == 0` or the division results in overflow.\"\n}",
      "defsite": "macro_rules! div_impl_integer {\n    ($(($($t:ty)*) => $panic:expr),*) => ($($(\n        /// This operation rounds towards zero, truncating any\n        /// fractional part of the exact result.\n        ///\n        /// # Panics\n        ///\n        #[doc = $panic]\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const Div for $t {\n            type Output = $t;\n\n            #[inline]\n            #[track_caller]\n            fn div(self, other: $t) -> $t { self / other }\n        }\n\n        forward_ref_binop! { impl Div, div for $t, $t,\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n    )*)*)\n}"
    }
  ],
  "callees": [
    "65203605087481216765956782074874375619"
  ]
}
