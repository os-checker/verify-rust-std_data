{
  "file": "core/src/internal_macros.rs",
  "name": "<str::CharEscapeUnicode as ops::function::FnOnce<(char,)>>::call_once",
  "hash": "59338340582749136074697026298218251840",
  "hash_direct": "1023675996341951413810077047224496734096",
  "src": "extern \"rust-call\" fn call_once(self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n                    Fn::call(&self, ($( $arg, )*))\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_fn_for_zst! {\n    /// A nameable, cloneable fn type\n    #[derive(Clone)]\n    struct LinesMap impl<'a> Fn = |line: &'a str| -> &'a str {\n        let Some(line) = line.strip_suffix('\\n') else { return line };\n        let Some(line) = line.strip_suffix('\\r') else { return line };\n        line\n    };\n\n    #[derive(Clone)]\n    struct CharEscapeDebugContinue impl Fn = |c: char| -> char::EscapeDebug {\n        c.escape_debug_ext(EscapeDebugExtArgs {\n            escape_grapheme_extended: false,\n            escape_single_quote: true,\n            escape_double_quote: true\n        })\n    };\n\n    #[derive(Clone)]\n    struct CharEscapeUnicode impl Fn = |c: char| -> char::EscapeUnicode {\n        c.escape_unicode()\n    };\n    #[derive(Clone)]\n    struct CharEscapeDefault impl Fn = |c: char| -> char::EscapeDefault {\n        c.escape_default()\n    };\n\n    #[derive(Clone)]\n    struct IsWhitespace impl Fn = |c: char| -> bool {\n        c.is_whitespace()\n    };\n\n    #[derive(Clone)]\n    struct IsAsciiWhitespace impl Fn = |byte: &u8| -> bool {\n        byte.is_ascii_whitespace()\n    };\n\n    #[derive(Clone)]\n    struct IsNotEmpty impl<'a, 'b> Fn = |s: &'a &'b str| -> bool {\n        !s.is_empty()\n    };\n\n    #[derive(Clone)]\n    struct BytesIsNotEmpty impl<'a, 'b> Fn = |s: &'a &'b [u8]| -> bool {\n        !s.is_empty()\n    };\n\n    #[derive(Clone)]\n    struct UnsafeBytesToStr impl<'a> Fn = |bytes: &'a [u8]| -> &'a str {\n        // SAFETY: not safe\n        unsafe { from_utf8_unchecked(bytes) }\n    };\n}",
      "defsite": "macro_rules! impl_fn_for_zst {\n    ($(\n        $( #[$attr: meta] )*\n        struct $Name: ident impl$( <$( $lifetime : lifetime ),+> )? Fn =\n            |$( $arg: ident: $ArgTy: ty ),*| -> $ReturnTy: ty\n            $body: block;\n    )+) => {\n        $(\n            $( #[$attr] )*\n            struct $Name;\n\n            impl $( <$( $lifetime ),+> )? Fn<($( $ArgTy, )*)> for $Name {\n                #[inline]\n                extern \"rust-call\" fn call(&self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n                    $body\n                }\n            }\n\n            impl $( <$( $lifetime ),+> )? FnMut<($( $ArgTy, )*)> for $Name {\n                #[inline]\n                extern \"rust-call\" fn call_mut(\n                    &mut self,\n                    ($( $arg, )*): ($( $ArgTy, )*)\n                ) -> $ReturnTy {\n                    Fn::call(&*self, ($( $arg, )*))\n                }\n            }\n\n            impl $( <$( $lifetime ),+> )? FnOnce<($( $ArgTy, )*)> for $Name {\n                type Output = $ReturnTy;\n\n                #[inline]\n                extern \"rust-call\" fn call_once(self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n                    Fn::call(&self, ($( $arg, )*))\n                }\n            }\n        )+\n    }\n}"
    }
  ],
  "callees": [
    "256336037942266645110042284662531777506",
    "71442954758490355815817278309752170314",
    "1049269644659338826513279302519967805708",
    "135077949306041206191099932416552917349",
    "802059967958499159511222978781090659237",
    "47323665595455568617290020941376774286",
    "512689943550103824514379043064606059583",
    "14336217352403889789696607974386324455",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810"
  ]
}
