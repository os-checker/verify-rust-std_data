{
  "file": "core/src/internal_macros.rs",
  "name": "<str::UnsafeBytesToStr as ops::function::FnMut<(&[u8],)>>::call_mut",
  "hash": "1244391557760613465014931379420161211685",
  "hash_direct": "1696636083169248439518218938599386773832",
  "src": "extern \"rust-call\" fn call_mut(\n                    &mut self,\n                    ($( $arg, )*): ($( $ArgTy, )*)\n                ) -> $ReturnTy {\n                    Fn::call(&*self, ($( $arg, )*))\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_fn_for_zst! {\n    /// A nameable, cloneable fn type\n    #[derive(Clone)]\n    struct LinesMap impl<'a> Fn = |line: &'a str| -> &'a str {\n        let Some(line) = line.strip_suffix('\\n') else { return line };\n        let Some(line) = line.strip_suffix('\\r') else { return line };\n        line\n    };\n\n    #[derive(Clone)]\n    struct CharEscapeDebugContinue impl Fn = |c: char| -> char::EscapeDebug {\n        c.escape_debug_ext(EscapeDebugExtArgs {\n            escape_grapheme_extended: false,\n            escape_single_quote: true,\n            escape_double_quote: true\n        })\n    };\n\n    #[derive(Clone)]\n    struct CharEscapeUnicode impl Fn = |c: char| -> char::EscapeUnicode {\n        c.escape_unicode()\n    };\n    #[derive(Clone)]\n    struct CharEscapeDefault impl Fn = |c: char| -> char::EscapeDefault {\n        c.escape_default()\n    };\n\n    #[derive(Clone)]\n    struct IsWhitespace impl Fn = |c: char| -> bool {\n        c.is_whitespace()\n    };\n\n    #[derive(Clone)]\n    struct IsAsciiWhitespace impl Fn = |byte: &u8| -> bool {\n        byte.is_ascii_whitespace()\n    };\n\n    #[derive(Clone)]\n    struct IsNotEmpty impl<'a, 'b> Fn = |s: &'a &'b str| -> bool {\n        !s.is_empty()\n    };\n\n    #[derive(Clone)]\n    struct BytesIsNotEmpty impl<'a, 'b> Fn = |s: &'a &'b [u8]| -> bool {\n        !s.is_empty()\n    };\n\n    #[derive(Clone)]\n    struct UnsafeBytesToStr impl<'a> Fn = |bytes: &'a [u8]| -> &'a str {\n        // SAFETY: not safe\n        unsafe { from_utf8_unchecked(bytes) }\n    };\n}",
      "defsite": "macro_rules! impl_fn_for_zst {\n    ($(\n        $( #[$attr: meta] )*\n        struct $Name: ident impl$( <$( $lifetime : lifetime ),+> )? Fn =\n            |$( $arg: ident: $ArgTy: ty ),*| -> $ReturnTy: ty\n            $body: block;\n    )+) => {\n        $(\n            $( #[$attr] )*\n            struct $Name;\n\n            impl $( <$( $lifetime ),+> )? Fn<($( $ArgTy, )*)> for $Name {\n                #[inline]\n                extern \"rust-call\" fn call(&self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n                    $body\n                }\n            }\n\n            impl $( <$( $lifetime ),+> )? FnMut<($( $ArgTy, )*)> for $Name {\n                #[inline]\n                extern \"rust-call\" fn call_mut(\n                    &mut self,\n                    ($( $arg, )*): ($( $ArgTy, )*)\n                ) -> $ReturnTy {\n                    Fn::call(&*self, ($( $arg, )*))\n                }\n            }\n\n            impl $( <$( $lifetime ),+> )? FnOnce<($( $ArgTy, )*)> for $Name {\n                type Output = $ReturnTy;\n\n                #[inline]\n                extern \"rust-call\" fn call_once(self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n                    Fn::call(&self, ($( $arg, )*))\n                }\n            }\n        )+\n    }\n}"
    }
  ],
  "callees": [
    "160779374654958949827148199871176786358",
    "121719316555113793862003739913395039268"
  ]
}
