{
  "file": "core/src/ops/index_range.rs",
  "name": "<ops::index_range::IndexRange as iter::traits::iterator::Iterator>::try_fold::<u8, {closure@/home/runner/work/distributed-verification/distributed-verification/verify-rust-std/library/core/src/array/iter/iter_inner.rs:215:35: 215:52}, ops::try_trait::NeverShortCircuit<u8>>",
  "hash": "58091080677819579967152220040182388954",
  "hash_direct": "1777828441004021846511354432581481243859",
  "src": "fn try_fold<B, F, R>(&mut self, mut accum: B, mut f: F) -> R\n    where\n        Self: Sized,\n        F: FnMut(B, Self::Item) -> R,\n        R: Try<Output = B>,\n    {\n        // `Range` needs to check `start < end`, but thanks to our type invariant\n        // we can loop on the stricter `start != end`.\n\n        self.assume_range();\n        while self.start != self.end {\n            // SAFETY: We just checked that the range is non-empty\n            let i = unsafe { self.next_unchecked() };\n            accum = f(accum, i)?;\n        }\n        try { accum }\n    }",
  "callees": [
    "121930174238491760166491470540554497891",
    "258820287469578611817448591488600041899",
    "6962362284417680556415378392413733050",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "123282905749082481871021511695537222033",
    "95615634588530129754325239223227478335",
    "54724029972380287997312107304386063911",
    "348284449366837360014422050266803763917",
    "31905993340822523516642016646258431532",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "5667765796385169624800112337147502292",
    "212928144464252219117278275833446446061",
    "76512364011266228718507200393334295670",
    "465974363902275324511601404467167577535",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "65680860371852405207943199749567864237",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "1479836840482223412412738961846764176164",
    "54104130289664392713771502668382599922",
    "83041036538342381393304603444628700948",
    "182029328991862475774353496657393119545",
    "98548455107584176526138467604576685276",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "179957548386362372047399332626891628586",
    "526258967998825072612351468190457449767",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "482242367082080498048410775885053189",
    "825444994840224825916566360789797426862",
    "176583191989635225759688632826309381941",
    "110436030872880631446977172233166094945",
    "6562418950143853582399054255015499128",
    "789169877560704355517210231802019779543",
    "154911443990380340341563367924870465980",
    "36990817497430174858508344623774643994",
    "1737046666080539081914974966237099365643",
    "76610361547970390014041401956375253519",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312"
  ]
}
