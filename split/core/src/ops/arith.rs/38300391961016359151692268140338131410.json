{
  "file": "core/src/ops/arith.rs",
  "name": "<i32 as ops::arith::Div>::div",
  "hash": "38300391961016359151692268140338131410",
  "hash_direct": "673009328349132455313227487330728062876",
  "src": "fn div(self, other: $t) -> $t { self / other }",
  "macro_backtrace": [
    {
      "callsite": "div_impl_integer! {\n    (usize u8 u16 u32 u64 u128) => \"This operation will panic if `other == 0`.\",\n    (isize i8 i16 i32 i64 i128) => \"This operation will panic if `other == 0` or the division results in overflow.\"\n}",
      "defsite": "macro_rules! div_impl_integer {\n    ($(($($t:ty)*) => $panic:expr),*) => ($($(\n        /// This operation rounds towards zero, truncating any\n        /// fractional part of the exact result.\n        ///\n        /// # Panics\n        ///\n        #[doc = $panic]\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const Div for $t {\n            type Output = $t;\n\n            #[inline]\n            #[track_caller]\n            fn div(self, other: $t) -> $t { self / other }\n        }\n\n        forward_ref_binop! { impl Div, div for $t, $t }\n    )*)*)\n}"
    }
  ]
}
