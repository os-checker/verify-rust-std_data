{
  "file": "core/src/ops/arith.rs",
  "name": "<f32 as ops::arith::Rem>::rem",
  "hash": "891445238330051988710934806695302119890",
  "hash_direct": "1247513200194268133313633610170801377445",
  "src": "fn rem(self, other: $t) -> $t { self % other }",
  "macro_backtrace": [
    {
      "callsite": "rem_impl_float! { f16 f32 f64 f128 }",
      "defsite": "macro_rules! rem_impl_float {\n    ($($t:ty)*) => ($(\n\n        /// The remainder from the division of two floats.\n        ///\n        /// The remainder has the same sign as the dividend and is computed as:\n        /// `x - (x / y).trunc() * y`.\n        ///\n        /// # Examples\n        /// ```\n        /// let x: f32 = 50.50;\n        /// let y: f32 = 8.125;\n        /// let remainder = x - (x / y).trunc() * y;\n        ///\n        /// // The answer to both operations is 1.75\n        /// assert_eq!(x % y, remainder);\n        /// ```\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const Rem for $t {\n            type Output = $t;\n\n            #[inline]\n            fn rem(self, other: $t) -> $t { self % other }\n        }\n\n        forward_ref_binop! { impl Rem, rem for $t, $t }\n    )*)\n}"
    }
  ]
}
