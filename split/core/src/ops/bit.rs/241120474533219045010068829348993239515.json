{
  "file": "core/src/ops/bit.rs",
  "name": "<isize as ops::bit::BitXor>::bitxor",
  "hash": "241120474533219045010068829348993239515",
  "hash_direct": "1234663326424751102818433171943390752096",
  "src": "fn bitxor(self, other: $t) -> $t { self ^ other }",
  "macro_backtrace": [
    {
      "callsite": "bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }",
      "defsite": "macro_rules! bitxor_impl {\n    ($($t:ty)*) => ($(\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const BitXor for $t {\n            type Output = $t;\n\n            #[inline]\n            fn bitxor(self, other: $t) -> $t { self ^ other }\n        }\n\n        forward_ref_binop! { impl BitXor, bitxor for $t, $t,\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n    )*)\n}"
    }
  ]
}
