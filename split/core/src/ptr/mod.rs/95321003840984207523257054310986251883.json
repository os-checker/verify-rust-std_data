{
  "file": "core/src/ptr/mod.rs",
  "name": "core::ptr::copy::<i32>",
  "hash": "95321003840984207523257054310986251883",
  "hash_direct": "391986261873464206011957864341353343339",
  "src": "pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n    // SAFETY: the safety contract for `copy` must be upheld by the caller.\n    unsafe {\n        ub_checks::assert_unsafe_precondition!(\n            check_language_ub,\n            \"ptr::copy requires that both pointer arguments are aligned and non-null\",\n            (\n                src: *const () = src as *const (),\n                dst: *mut () = dst as *mut (),\n                align: usize = align_of::<T>(),\n                zero_size: bool = T::IS_ZST || count == 0,\n            ) =>\n            ub_checks::maybe_is_aligned_and_not_null(src, align, zero_size)\n                && ub_checks::maybe_is_aligned_and_not_null(dst, align, zero_size)\n        );\n        crate::intrinsics::copy(src, dst, count)\n    }\n}",
  "callees": [
    "12281449246394340237926324936375242532",
    "181267529910573756716102767087485333561",
    "79817071675776388295206212610749591701",
    "1824545319189397521315695847785602896178",
    "141051090481435808783715316343782561731",
    "41874569531604093678887498573591730498",
    "51372523453683089364244340980133861262",
    "169382045895387326079929663684999712557",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "146612017564224181584303574960223420416",
    "63085389524472853348886374617170044294",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "139907086782363519768211215911218405340",
    "181953690662554297912505335505865467275",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "165380149996314481317656005322948978193",
    "112989397975222255532054380452996322405",
    "56586361413793673417653620039252553370",
    "192903257417349624310389255189038584608"
  ]
}
