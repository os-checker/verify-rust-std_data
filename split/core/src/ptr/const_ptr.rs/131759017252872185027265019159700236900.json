{
  "file": "core/src/ptr/const_ptr.rs",
  "name": "ptr::const_ptr::verify::check_const_offset_from_i8_arr",
  "hash": "131759017252872185027265019159700236900",
  "hash_direct": "683814784548904053816274479571378607747",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * const i8 > :: offset_from\"]\n"
  ],
  "src": "pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_offset_from_harness!(i8, check_const_offset_from_i8, check_const_offset_from_i8_arr)",
      "defsite": "macro_rules! generate_offset_from_harness {\n        ($type: ty, $proof_name1: ident, $proof_name2: ident) => {\n            // Proof for a single element\n            #[kani::proof_for_contract(<*const $type>::offset_from)]\n            pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n\n            // Proof for large arrays\n            #[kani::proof_for_contract(<*const $type>::offset_from)]\n            pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "136794527676578436722081681479013612912",
    "28791198012686662548792962938594084249",
    "49618956978873163995324086899806194018",
    "175920677112080751315464247289376690681",
    "76761090215908344506703874042953626591",
    "79814521157062014985693017672222855954",
    "1483996580220821400715304868956589047764",
    "1322384604467493912213489035833182809606",
    "13997805620941613807466577716588813587",
    "341764181082445833314800748457298937351",
    "58690847616934710625179648634168591441",
    "145967406244676150758513008071068158995",
    "44147050663077389586755270347648595840",
    "1484961265477034772011017782876778998231",
    "135929855001212425903524067534552737362",
    "587614036368004806912260160478559155026",
    "88064788030471862653474358113542072094",
    "1640570854584499983913922181933773581422",
    "1265364704673487667316330420117594786451",
    "223423045988591996014060300689406774665",
    "113491588365793266817891648718126780380",
    "179669095727392675457001382090810284652",
    "125277921322113449508798707465544651276",
    "129384448114184712212615089461891361189",
    "826776783017468101310579743103719137160",
    "488987972088792283610314403177822042317",
    "250229918741873525211520609294782868524",
    "101011224207619498613027149465193244202",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "12842158263471368155984318495457181408",
    "31406905208446239141563463070273293022",
    "134563002825040056909315119755976987940",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "1829615888109704203312678583584024477278",
    "38217196742947992835679479997123307043",
    "133322087102037941012489659958908875840",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "34410515695185066949979771014252260096",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "201181288689639124415825169679319142024",
    "117000938673995872673167304505204365434",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "85430892890389169984576448039743231162",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "1700285756577944511015133825943653578308",
    "39667799822193410508007861328948464447",
    "2650873733956893593121535658983754120",
    "11574481611794205576737164765685277892",
    "1650058441616758168517390368908736867159",
    "5149988702892797298383433462430069015",
    "556153363518293807114111356773440475476",
    "718527577746930130113555380608803198533",
    "449637264080571459055009589071427003",
    "1205245170101734159116985770693248972102",
    "126321729762679224065102911188848695764",
    "1238609663939100372515080941817842863373",
    "58480844886996188714196265131261175939",
    "517677393533873257913496382980636264447",
    "94670298690270305673960580402871657188",
    "575659870602083843313663777558027740832",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
