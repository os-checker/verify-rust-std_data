{
  "file": "core/src/ptr/const_ptr.rs",
  "name": "ptr::const_ptr::verify::check_const_sub_unit",
  "hash": "205931659909415899511211077298998020578",
  "hash_direct": "863787128667532597612741845655597684038",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * const () > :: sub\"]\n"
  ],
  "src": "pub fn $proof_name() {\n                // 200 bytes are large enough to cover all pointee types used for testing\n                const BUF_SIZE: usize = 200;\n                let mut generator = kani::PointerGenerator::<BUF_SIZE>::new();\n                let test_ptr: *const $ty = generator.any_in_bounds().ptr;\n                let count: $count_ty = kani::any();\n                unsafe {\n                    test_ptr.$fn_name(count);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_single_arithmetic_harness!($ty, $sub_fn_name, sub, usize)",
      "defsite": "macro_rules! generate_single_arithmetic_harness {\n        ($ty:ty, $proof_name:ident, $fn_name:ident, $count_ty:ty) => {\n            #[kani::proof_for_contract(<*const $ty>::$fn_name)]\n            pub fn $proof_name() {\n                // 200 bytes are large enough to cover all pointee types used for testing\n                const BUF_SIZE: usize = 200;\n                let mut generator = kani::PointerGenerator::<BUF_SIZE>::new();\n                let test_ptr: *const $ty = generator.any_in_bounds().ptr;\n                let count: $count_ty = kani::any();\n                unsafe {\n                    test_ptr.$fn_name(count);\n                }\n            }\n        };\n    }"
    },
    {
      "callsite": "generate_arithmetic_harnesses!(\n        (),\n        check_const_add_unit,\n        check_const_sub_unit,\n        check_const_offset_unit\n    )",
      "defsite": "macro_rules! generate_arithmetic_harnesses {\n        ($ty:ty, $add_fn_name:ident, $sub_fn_name:ident, $offset_fn_name:ident) => {\n            generate_single_arithmetic_harness!($ty, $add_fn_name, add, usize);\n            generate_single_arithmetic_harness!($ty, $sub_fn_name, sub, usize);\n            generate_single_arithmetic_harness!($ty, $offset_fn_name, offset, isize);\n        };\n    }"
    }
  ],
  "callees": [
    "20173474311817634955465907923764055535",
    "136794527676578436722081681479013612912",
    "175920677112080751315464247289376690681",
    "76761090215908344506703874042953626591",
    "62036844142927655886751673193896478768",
    "563781809407042294010625187831111136650",
    "934838753037787265711629291172660282034",
    "688842349556190100811041595524753252306",
    "2242637941973237810908603450935821700",
    "1484961265477034772011017782876778998231",
    "1194204153753465304412874113805257013333",
    "48374640077869102384170963512094157145",
    "223423045988591996014060300689406774665",
    "113491588365793266817891648718126780380",
    "6378999045580093081805041366495309769",
    "129384448114184712212615089461891361189",
    "826776783017468101310579743103719137160",
    "1094829179493699236815182608873058807474",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "117428381423975957805089895478716013652",
    "134563002825040056909315119755976987940",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "73685995251532589082698759907019379874",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "56575629121392302122534067050542050074",
    "38217196742947992835679479997123307043",
    "274291830502248510811445962002553983266",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "819099480657562069318310545449781173976",
    "166901239221020232696015236914857439299",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "39667799822193410508007861328948464447",
    "28290177107460797757575634650143638640",
    "1793169857334120608214919615879701148435",
    "449637264080571459055009589071427003",
    "58480844886996188714196265131261175939",
    "130438849078875335232950424650572535146",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
