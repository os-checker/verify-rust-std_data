{
  "file": "core/src/ptr/const_ptr.rs",
  "name": "ptr::const_ptr::verify::check_const_offset_from_u8_arr",
  "hash": "145140180865982848445368548142355447222",
  "hash_direct": "8111885529757817114762405008374944608",
  "proof_kind": "Contract",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * const u8 > :: offset_from\"]\n"
  ],
  "src": "pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_offset_from_harness!(u8, check_const_offset_from_u8, check_const_offset_from_u8_arr)",
      "defsite": "macro_rules! generate_offset_from_harness {\n        ($type: ty, $proof_name1: ident, $proof_name2: ident) => {\n            // Proof for a single element\n            #[kani::proof_for_contract(<*const $type>::offset_from)]\n            pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n\n            // Proof for large arrays\n            #[kani::proof_for_contract(<*const $type>::offset_from)]\n            pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "136794527676578436722081681479013612912",
    "28791198012686662548792962938594084249",
    "175920677112080751315464247289376690681",
    "76761090215908344506703874042953626591",
    "79814521157062014985693017672222855954",
    "86075005752695697784767191757674076389",
    "35393637539435005632865465948991731738",
    "403295507049506333215344371936679598016",
    "144426422201002807127662370826637121627",
    "1759801001641582216814846940507899968848",
    "1573787399964619648410424723661626507699",
    "44147050663077389586755270347648595840",
    "1484961265477034772011017782876778998231",
    "135929855001212425903524067534552737362",
    "88064788030471862653474358113542072094",
    "42938380487287233808576660475073668669",
    "1640570854584499983913922181933773581422",
    "223423045988591996014060300689406774665",
    "113491588365793266817891648718126780380",
    "179669095727392675457001382090810284652",
    "129384448114184712212615089461891361189",
    "826776783017468101310579743103719137160",
    "830518124237908078717003008672977863463",
    "830898645550170419613857533804246250011",
    "244044949806809751915185028501306920517",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "12842158263471368155984318495457181408",
    "134563002825040056909315119755976987940",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "1829615888109704203312678583584024477278",
    "38217196742947992835679479997123307043",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "34410515695185066949979771014252260096",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "201181288689639124415825169679319142024",
    "116952061568255470809247347723600285778",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "64092050490533150296194988908965955580",
    "1163942228701060528314476404382786524304",
    "31656414362767519921773019768940498677",
    "88732405038833504516786169729211538271",
    "99438242294582221548013233680201224334",
    "136250958068228316938199731614362970959",
    "5149988702892797298383433462430069015",
    "139997011880036619526085207717010799176",
    "107139137904026291875150439084021705602",
    "293645540748671545017999185713660079650",
    "68961250522390204303039500197253848819",
    "95833143949527862342301651250424936271",
    "833553174169562286714471950209380562777",
    "98477662685921491113425946329276031335",
    "53569486981529370344752868158650318763",
    "1091478321388090666413882360364866630013",
    "173086335176137333153494927967115152735",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
