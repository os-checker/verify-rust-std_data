{
  "file": "core/src/ptr/const_ptr.rs",
  "name": "ptr::const_ptr::verify::check_const_offset_from_u8",
  "hash": "87149598604153595337772422247969145042",
  "hash_direct": "498175169855492637310048337374139246753",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * const u8 > :: offset_from\"]\n"
  ],
  "src": "pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_offset_from_harness!(u8, check_const_offset_from_u8, check_const_offset_from_u8_arr)",
      "defsite": "macro_rules! generate_offset_from_harness {\n        ($type: ty, $proof_name1: ident, $proof_name2: ident) => {\n            // Proof for a single element\n            #[kani::proof_for_contract(<*const $type>::offset_from)]\n            pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n\n            // Proof for large arrays\n            #[kani::proof_for_contract(<*const $type>::offset_from)]\n            pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "39029338530780942852875415034457908204",
    "110286732951253459166416707375649721039",
    "162491259761257566482601707483467907610",
    "306459423763459115515352307666540674473",
    "1072407133286824212215056299035613318842",
    "139527027103518424082202333619610072898",
    "165524319731899414041335382023903552654",
    "402223263446411445918422448086486697097",
    "345838141665422419215532103290826018019",
    "147951305795765735615837405321920931623",
    "10746813043711277078787627268540892387",
    "1712768923005740480113887522485302185120",
    "136621478802095730972375589055034460573",
    "1050757777987272307317753801956772021235",
    "549764276642186339010013043347128614685",
    "765632163473343149313388288187706299654",
    "28733051149244335398155852330546270084",
    "1662070016694227139911860440277225290916",
    "12523065385450334584774763099255662860",
    "42990063052958904976718600653175958912",
    "868708452713984376310801203349667993765",
    "940250525962090252914117803890597989072",
    "1043840434567309297417587459422009005641",
    "1615268179294816785415176876855158694532",
    "501429398132286861987270860258720068",
    "162562988142812920362309614379838072419",
    "55268624181377464941500382738073713012",
    "769871191376860825616640549555308478966",
    "147326571724930681683605250526187624864",
    "22860541058604836916644685381819606237",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "161225022469363908823200354701136905531",
    "10270416055756718686359313553617669517",
    "168545836479171427075036933182194130275",
    "1712898201300478840215074793236064467963",
    "1067675883129992420314174327751912045205",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "161003650625398914518944455314788757627",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "380262551218047276514654482281297551654",
    "105125143701458073564296455695110349394",
    "117289807451759479686051841781914570332",
    "135454822285744624434355676540837993520",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "211049603591822245112071234743940214616",
    "203017589421771621011657376845598239146",
    "94774452442185535288317545443977520870",
    "176215937714928582254709899264658457842",
    "1532833034644287549912193664713611303373",
    "781603672758780177711142029625885084089",
    "965561441075058674214372158914955250568",
    "843102896095261732816452208300794916411",
    "99395518406472793292734436101426044734",
    "169017152061146820209827866672499117723",
    "1365351597739011160412231277592213691479",
    "1835203901779115148812879347370863368659",
    "55877309556757442307404205786412250797",
    "879879600651707225011946614657623761804",
    "1028023859496283824714006082102994000183",
    "132171383300556751889379408136916000413",
    "54871301183743626877218691444164354946",
    "153999075255816246604435272140943255557",
    "393974833682574441515290398983271504453",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "15859584444614920947579563356650829639"
  ]
}
