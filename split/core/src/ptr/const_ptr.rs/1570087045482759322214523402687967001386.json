{
  "file": "core/src/ptr/const_ptr.rs",
  "name": "ptr::const_ptr::verify::check_const_offset_usize",
  "hash": "1570087045482759322214523402687967001386",
  "hash_direct": "303188771978483862817803253802990099985",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * const usize > :: offset\"]\n"
  ],
  "src": "pub fn $proof_name() {\n                // 200 bytes are large enough to cover all pointee types used for testing\n                const BUF_SIZE: usize = 200;\n                let mut generator = kani::PointerGenerator::<BUF_SIZE>::new();\n                let test_ptr: *const $ty = generator.any_in_bounds().ptr;\n                let count: $count_ty = kani::any();\n                unsafe {\n                    test_ptr.$fn_name(count);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_single_arithmetic_harness!($ty, $offset_fn_name, offset, isize)",
      "defsite": "macro_rules! generate_single_arithmetic_harness {\n        ($ty:ty, $proof_name:ident, $fn_name:ident, $count_ty:ty) => {\n            #[kani::proof_for_contract(<*const $ty>::$fn_name)]\n            pub fn $proof_name() {\n                // 200 bytes are large enough to cover all pointee types used for testing\n                const BUF_SIZE: usize = 200;\n                let mut generator = kani::PointerGenerator::<BUF_SIZE>::new();\n                let test_ptr: *const $ty = generator.any_in_bounds().ptr;\n                let count: $count_ty = kani::any();\n                unsafe {\n                    test_ptr.$fn_name(count);\n                }\n            }\n        };\n    }"
    },
    {
      "callsite": "generate_arithmetic_harnesses!(\n        usize,\n        check_const_add_usize,\n        check_const_sub_usize,\n        check_const_offset_usize\n    )",
      "defsite": "macro_rules! generate_arithmetic_harnesses {\n        ($ty:ty, $add_fn_name:ident, $sub_fn_name:ident, $offset_fn_name:ident) => {\n            generate_single_arithmetic_harness!($ty, $add_fn_name, add, usize);\n            generate_single_arithmetic_harness!($ty, $sub_fn_name, sub, usize);\n            generate_single_arithmetic_harness!($ty, $offset_fn_name, offset, isize);\n        };\n    }"
    }
  ],
  "callees": [
    "39029338530780942852875415034457908204",
    "1531009987700713627114841153360395264198",
    "162491259761257566482601707483467907610",
    "306459423763459115515352307666540674473",
    "374116649232392926113667624836758850755",
    "171537321023678640654703622847063757177",
    "1637562243751429813010505775643921018508",
    "118448865188983432366975619875571567640",
    "136621478802095730972375589055034460573",
    "1230748672991072180016692955695644415710",
    "1221265949630586294716386477749978237909",
    "64428221957133332357265093654334493",
    "1662070016694227139911860440277225290916",
    "12523065385450334584774763099255662860",
    "24614872288685298643967355800714012655",
    "868708452713984376310801203349667993765",
    "940250525962090252914117803890597989072",
    "17116311825751954647814897592924757105",
    "162562988142812920362309614379838072419",
    "55268624181377464941500382738073713012",
    "128103941581933882561095523931319593650",
    "147326571724930681683605250526187624864",
    "22860541058604836916644685381819606237",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "128917387769525037544677199914196994932",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "161225022469363908823200354701136905531",
    "1123212290123780578418036684149097439516",
    "168545836479171427075036933182194130275",
    "1712898201300478840215074793236064467963",
    "1067675883129992420314174327751912045205",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "5799168648008231539489194599709139249",
    "167551103293259876125260225730930841946",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "10420533920630692833318814471402444097",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "380262551218047276514654482281297551654",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "1168797547608280959511174552498263599258",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "68499035943028915222320540153698061002",
    "94774452442185535288317545443977520870",
    "1704054972873484890814589374248872553820",
    "169017152061146820209827866672499117723",
    "1365351597739011160412231277592213691479",
    "846134356408019823717952789480783361052",
    "7860355387381212779506594191023960444",
    "153999075255816246604435272140943255557",
    "393974833682574441515290398983271504453",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "15859584444614920947579563356650829639"
  ]
}
