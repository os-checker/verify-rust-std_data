{
  "file": "core/src/ptr/const_ptr.rs",
  "name": "ptr::const_ptr::verify::check_const_offset_from_i64",
  "hash": "23270057857568318818714349251220413068",
  "hash_direct": "23631286710118107879856974820108350367",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * const i64 > :: offset_from\"]\n"
  ],
  "src": "pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_offset_from_harness!(\n        i64,\n        check_const_offset_from_i64,\n        check_const_offset_from_i64_arr\n    )",
      "defsite": "macro_rules! generate_offset_from_harness {\n        ($type: ty, $proof_name1: ident, $proof_name2: ident) => {\n            // Proof for a single element\n            #[kani::proof_for_contract(<*const $type>::offset_from)]\n            pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n\n            // Proof for large arrays\n            #[kani::proof_for_contract(<*const $type>::offset_from)]\n            pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "39029338530780942852875415034457908204",
    "110286732951253459166416707375649721039",
    "20764881003415525917678483578325949255",
    "162491259761257566482601707483467907610",
    "306459423763459115515352307666540674473",
    "1072407133286824212215056299035613318842",
    "19361405669048604904835684754257361045",
    "52647518266950099078294620575941726179",
    "674530231229483611311151341596682377505",
    "164041365705985742279898106696895194519",
    "985979165188664442310915199674360419170",
    "612585834691148964117725980795347554357",
    "34020267894664712536180493097569711990",
    "136621478802095730972375589055034460573",
    "1050757777987272307317753801956772021235",
    "147679260057690976339023598564057646442",
    "549764276642186339010013043347128614685",
    "28733051149244335398155852330546270084",
    "91135116531165958908997621750933815702",
    "1662070016694227139911860440277225290916",
    "12523065385450334584774763099255662860",
    "42990063052958904976718600653175958912",
    "1707350114664415705912018169157381460741",
    "868708452713984376310801203349667993765",
    "940250525962090252914117803890597989072",
    "48605573295934979818096446457178185661",
    "1499386053075623796515832230377445286491",
    "1837606246876674196918024897695167567152",
    "162562988142812920362309614379838072419",
    "55268624181377464941500382738073713012",
    "769871191376860825616640549555308478966",
    "9745278047109817941957780214339587305",
    "147326571724930681683605250526187624864",
    "22860541058604836916644685381819606237",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "161225022469363908823200354701136905531",
    "1325047382497852788815006062303769001645",
    "168545836479171427075036933182194130275",
    "151648183144342744342921226948666492037",
    "1712898201300478840215074793236064467963",
    "1067675883129992420314174327751912045205",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "161003650625398914518944455314788757627",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "380262551218047276514654482281297551654",
    "105125143701458073564296455695110349394",
    "117289807451759479686051841781914570332",
    "640834441107309946212150429809685207726",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "165061501222590925515450157097141656057",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "489134983135625479411158543950873805667",
    "94774452442185535288317545443977520870",
    "1624549416078244174716803805432047547724",
    "562350264841159184416868808049117312092",
    "12777244984139077067090081518820596267",
    "965561441075058674214372158914955250568",
    "170473093001769744084416700117787022245",
    "102520724987982428046018768233239777875",
    "169017152061146820209827866672499117723",
    "58990973588062054646989260624532077709",
    "13453842212631628424821833072962213604",
    "1363657236206861753712013271547447677203",
    "1365351597739011160412231277592213691479",
    "158374245847212308478760082524356378107",
    "182214823708219502628175829991425702221",
    "305973706604906189117608785438380199160",
    "153999075255816246604435272140943255557",
    "393974833682574441515290398983271504453",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "15859584444614920947579563356650829639"
  ]
}
