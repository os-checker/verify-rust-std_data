{
  "file": "core/src/ptr/const_ptr.rs",
  "name": "ptr::const_ptr::<impl *const (u16, u16)>::is_null",
  "hash": "136341802646181109634644776075191187676",
  "hash_direct": "45832413883004769024676809535411872096",
  "src": "pub const fn is_null(self) -> bool {\n        // Compare via a cast to a thin pointer, so fat pointers are only\n        // considering their \"data\" part for null-ness.\n        let ptr = self as *const u8;\n        const_eval_select!(\n            @capture { ptr: *const u8 } -> bool:\n            // This use of `const_raw_ptr_comparison` has been explicitly blessed by t-lang.\n            if const #[rustc_allow_const_fn_unstable(const_raw_ptr_comparison)] {\n                match (ptr).guaranteed_eq(null_mut()) {\n                    Some(res) => res,\n                    // To remain maximally conservative, we stop execution when we don't\n                    // know whether the pointer is null or not.\n                    // We can *not* return `false` here, that would be unsound in `NonNull::new`!\n                    None => panic!(\"null-ness of this pointer cannot be determined in const context\"),\n                }\n            } else {\n                ptr.addr() == 0\n            }\n        )\n    }",
  "callees": [
    "27480086118489678191003877857780025576",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336"
  ]
}
