{
  "file": "core/src/ptr/const_ptr.rs",
  "name": "core::ptr::const_ptr::<impl *const u8>::sub",
  "hash": "225608129742117835010790221320830076578",
  "hash_direct": "12684492597394163042147614923916815374",
  "src": "pub const unsafe fn sub(self, count: usize) -> Self\n    where\n        T: Sized,\n    {\n        #[cfg(debug_assertions)]\n        #[inline]\n        #[rustc_allow_const_fn_unstable(const_eval_select)]\n        const fn runtime_sub_nowrap(this: *const (), count: usize, size: usize) -> bool {\n            const_eval_select!(\n                @capture { this: *const (), count: usize, size: usize } -> bool:\n                if const {\n                    true\n                } else {\n                    let Some(byte_offset) = count.checked_mul(size) else {\n                        return false;\n                    };\n                    byte_offset <= (isize::MAX as usize) && this.addr() >= byte_offset\n                }\n            )\n        }\n\n        #[cfg(debug_assertions)] // Expensive, and doesn't catch much in the wild.\n        ub_checks::assert_unsafe_precondition!(\n            check_language_ub,\n            \"ptr::sub requires that the address calculation does not overflow\",\n            (\n                this: *const () = self as *const (),\n                count: usize = count,\n                size: usize = size_of::<T>(),\n            ) => runtime_sub_nowrap(this, count, size)\n        );\n\n        if T::IS_ZST {\n            // Pointer arithmetic does nothing when the pointee is a ZST.\n            self\n        } else {\n            // SAFETY: the caller must uphold the safety contract for `offset`.\n            // Because the pointee is *not* a ZST, that means that `count` is\n            // at most `isize::MAX`, and thus the negation cannot overflow.\n            unsafe { intrinsics::offset(self, intrinsics::unchecked_sub(0, count as isize)) }\n        }\n    }",
  "callees": [
    "12281449246394340237926324936375242532",
    "99835071136844477394667148890151411684",
    "73694171442177138896992135977130617471",
    "181267529910573756716102767087485333561",
    "13740028426770601435895918059667558678",
    "1824545319189397521315695847785602896178",
    "1055043272310861592713228670863657256034",
    "17976542625295060605041426324269334020",
    "8010637041282557608011263416999007001",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "63085389524472853348886374617170044294",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "9430541097712255988945508949289602405",
    "729174083888525815715773228218468180484",
    "112989397975222255532054380452996322405"
  ]
}
