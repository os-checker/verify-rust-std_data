{
  "file": "core/src/ptr/const_ptr.rs",
  "name": "ptr::const_ptr::verify::check_const_offset_from_tuple_4_arr",
  "hash": "40030313877980185486524724568939057747",
  "hash_direct": "24115035479251734678795922271522912201",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract =\n\"< * const ((), bool, u8, u16, i32, f64, i128, usize) > :: offset_from\"]\n"
  ],
  "src": "pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_offset_from_harness!(\n        ((), bool, u8, u16, i32, f64, i128, usize),\n        check_const_offset_from_tuple_4,\n        check_const_offset_from_tuple_4_arr\n    )",
      "defsite": "macro_rules! generate_offset_from_harness {\n        ($type: ty, $proof_name1: ident, $proof_name2: ident) => {\n            // Proof for a single element\n            #[kani::proof_for_contract(<*const $type>::offset_from)]\n            pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n\n            // Proof for large arrays\n            #[kani::proof_for_contract(<*const $type>::offset_from)]\n            pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "906863366444467638412699458543116813025",
    "20173474311817634955465907923764055535",
    "136794527676578436722081681479013612912",
    "164988427466999834427091756050845488613",
    "594919401536571522615480450466187035121",
    "28791198012686662548792962938594084249",
    "143726197981643453893461249933266823707",
    "175920677112080751315464247289376690681",
    "76761090215908344506703874042953626591",
    "79814521157062014985693017672222855954",
    "590936929288960930115388883664325866508",
    "679901033518328365615194245093940059963",
    "784343052932710959015709842334979356386",
    "29216522590264689825537589495151553056",
    "129189215568894841109586121953726492594",
    "413405101049017280815689368210665417517",
    "994312603005570146217148756527137934735",
    "48732975470537517566985425505311128239",
    "2242637941973237810908603450935821700",
    "1484961265477034772011017782876778998231",
    "412602277353290488616141499985847560834",
    "1774577850103686295213747642312224614939",
    "135929855001212425903524067534552737362",
    "88064788030471862653474358113542072094",
    "42153855204546547414570418707522136672",
    "42938380487287233808576660475073668669",
    "1194204153753465304412874113805257013333",
    "48374640077869102384170963512094157145",
    "13484760267811787927199082304302981780",
    "11974439592418411337991488073329648630",
    "1640570854584499983913922181933773581422",
    "1419806043324098633610885506646551614339",
    "223423045988591996014060300689406774665",
    "113491588365793266817891648718126780380",
    "6378999045580093081805041366495309769",
    "21296591240459879805887758611123105569",
    "1509178577580225630314952032068341177156",
    "179669095727392675457001382090810284652",
    "224421708621728886510660857524843864821",
    "129384448114184712212615089461891361189",
    "826776783017468101310579743103719137160",
    "157108602974039972837818543338586081612",
    "1624393584368859016011530423126033866216",
    "40759380024909586241218718953216039244",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "117428381423975957805089895478716013652",
    "1625555940341004859711655274240604484941",
    "1074642887290195615815410518986611750061",
    "12842158263471368155984318495457181408",
    "1358195540631505257811156843112809955860",
    "134563002825040056909315119755976987940",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "240027249103060093012378567474096862629",
    "38217196742947992835679479997123307043",
    "3952599748989666071437605825502642407",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "34410515695185066949979771014252260096",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "201181288689639124415825169679319142024",
    "64511102424851401606847983989929642999",
    "80225486008684562528209174531298149920",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "633164661757099070414359206897184947486",
    "31656414362767519921773019768940498677",
    "63455379249057906535818755456160766545",
    "29179504303034057599971814683969929864",
    "1244718298426079333213362948854539364968",
    "678364148716561430815562835646150018724",
    "5149988702892797298383433462430069015",
    "117261849806284248203713054779692700202",
    "377106583301050990312434101905106014245",
    "1710230988780094649714598325620509969215",
    "177946699832002805414840877624885732887",
    "293645540748671545017999185713660079650",
    "68961250522390204303039500197253848819",
    "28549812560184383735709003112023576045",
    "73046986322241202213892454167391060482",
    "393149706557414330911850083420294508584",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
