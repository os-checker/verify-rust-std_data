{
  "file": "core/src/ptr/const_ptr.rs",
  "name": "ptr::const_ptr::verify::check_const_offset_from_tuple_3",
  "hash": "1023949317761684342710799361908200711977",
  "hash_direct": "973178725481489169914926213828390340043",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * const (u32, i16, f32) > :: offset_from\"]\n"
  ],
  "src": "pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_offset_from_harness!(\n        (u32, i16, f32),\n        check_const_offset_from_tuple_3,\n        check_const_offset_from_tuple_3_arr\n    )",
      "defsite": "macro_rules! generate_offset_from_harness {\n        ($type: ty, $proof_name1: ident, $proof_name2: ident) => {\n            // Proof for a single element\n            #[kani::proof_for_contract(<*const $type>::offset_from)]\n            pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n\n            // Proof for large arrays\n            #[kani::proof_for_contract(<*const $type>::offset_from)]\n            pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *const $type = generator1.any_in_bounds().ptr;\n                let ptr2: *const $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "118627546002841538119269356639976232711",
    "136794527676578436722081681479013612912",
    "670113478247484310210240607638878845290",
    "1174108037031273868511352222846801856920",
    "28791198012686662548792962938594084249",
    "155147252462344397972186713557771794079",
    "175920677112080751315464247289376690681",
    "76761090215908344506703874042953626591",
    "79814521157062014985693017672222855954",
    "29564931419494931544422078621035875046",
    "1003711360985837930312302380480621326588",
    "65420030489946242179714316980118457812",
    "12330039095664866532454791188041718824",
    "40221585566095046764197398962427101618",
    "51257289777763011497663947637339780674",
    "533694992190453720615015548381171646304",
    "25746368048794845883835942225852138883",
    "1484961265477034772011017782876778998231",
    "9331289314120761348765241576052441043",
    "123782648205275262099084086381657810307",
    "135929855001212425903524067534552737362",
    "88064788030471862653474358113542072094",
    "67856573892425641751006143352028813823",
    "74825136526453919664219528636088885642",
    "1628912776924159617112582784448173192751",
    "1640570854584499983913922181933773581422",
    "10057127580410476606272092343920277620",
    "223423045988591996014060300689406774665",
    "113491588365793266817891648718126780380",
    "329435249764941756315607754667978236634",
    "78412107181969352786913268612518026243",
    "179669095727392675457001382090810284652",
    "178053629462286824685283611690204389326",
    "129384448114184712212615089461891361189",
    "826776783017468101310579743103719137160",
    "1253873830582910674917432542968748405492",
    "1750024714630195660915987641707289538036",
    "98351092230522367739002934485510517390",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "130812896255483315711214574947641504756",
    "216823265290610455816017612927656741434",
    "12842158263471368155984318495457181408",
    "1245364030286753365515911599133870323814",
    "134563002825040056909315119755976987940",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "7818863481939416599294549222145592245",
    "38217196742947992835679479997123307043",
    "627645583140275250012633360066379231959",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "34410515695185066949979771014252260096",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "201181288689639124415825169679319142024",
    "173012038807402113257619740249774268346",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "172576276344215977856775301853117299891",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "652653652781134665515684277872301561467",
    "39667799822193410508007861328948464447",
    "156052788792076448927895917143821649538",
    "3993299139120619864480002721231457396",
    "795610351861222391516358063950746435330",
    "5149988702892797298383433462430069015",
    "110725042661495447906407527209757293242",
    "67865316741929028312583516282319950423",
    "87115042487919993407337542962837057096",
    "79226035559392855564775491969132848488",
    "17073272495818977210666863493321937254",
    "449637264080571459055009589071427003",
    "58480844886996188714196265131261175939",
    "3477679680314290516450292592412213353",
    "14495431617551082847444260316213068736",
    "42484976486242598507038538029525346796",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
