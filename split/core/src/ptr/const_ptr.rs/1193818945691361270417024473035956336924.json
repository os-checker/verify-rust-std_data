{
  "file": "core/src/ptr/const_ptr.rs",
  "name": "ptr::const_ptr::verify::check_const_offset_unit",
  "hash": "1193818945691361270417024473035956336924",
  "hash_direct": "56461642831538274046563181827882866110",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * const () > :: offset\"]\n"
  ],
  "src": "pub fn $proof_name() {\n                // 200 bytes are large enough to cover all pointee types used for testing\n                const BUF_SIZE: usize = 200;\n                let mut generator = kani::PointerGenerator::<BUF_SIZE>::new();\n                let test_ptr: *const $ty = generator.any_in_bounds().ptr;\n                let count: $count_ty = kani::any();\n                unsafe {\n                    test_ptr.$fn_name(count);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_single_arithmetic_harness!($ty, $offset_fn_name, offset, isize)",
      "defsite": "macro_rules! generate_single_arithmetic_harness {\n        ($ty:ty, $proof_name:ident, $fn_name:ident, $count_ty:ty) => {\n            #[kani::proof_for_contract(<*const $ty>::$fn_name)]\n            pub fn $proof_name() {\n                // 200 bytes are large enough to cover all pointee types used for testing\n                const BUF_SIZE: usize = 200;\n                let mut generator = kani::PointerGenerator::<BUF_SIZE>::new();\n                let test_ptr: *const $ty = generator.any_in_bounds().ptr;\n                let count: $count_ty = kani::any();\n                unsafe {\n                    test_ptr.$fn_name(count);\n                }\n            }\n        };\n    }"
    },
    {
      "callsite": "generate_arithmetic_harnesses!(\n        (),\n        check_const_add_unit,\n        check_const_sub_unit,\n        check_const_offset_unit\n    )",
      "defsite": "macro_rules! generate_arithmetic_harnesses {\n        ($ty:ty, $add_fn_name:ident, $sub_fn_name:ident, $offset_fn_name:ident) => {\n            generate_single_arithmetic_harness!($ty, $add_fn_name, add, usize);\n            generate_single_arithmetic_harness!($ty, $sub_fn_name, sub, usize);\n            generate_single_arithmetic_harness!($ty, $offset_fn_name, offset, isize);\n        };\n    }"
    }
  ],
  "callees": [
    "20173474311817634955465907923764055535",
    "136794527676578436722081681479013612912",
    "657233684967198358216702776602192178354",
    "175920677112080751315464247289376690681",
    "76761090215908344506703874042953626591",
    "12791943107602836266354739776308174542",
    "143622550226715952095409457516370950913",
    "934838753037787265711629291172660282034",
    "688842349556190100811041595524753252306",
    "2242637941973237810908603450935821700",
    "1484961265477034772011017782876778998231",
    "33771070424635483588856444226591787667",
    "48374640077869102384170963512094157145",
    "553011341845714869315790910594223124816",
    "223423045988591996014060300689406774665",
    "113491588365793266817891648718126780380",
    "6378999045580093081805041366495309769",
    "358620174323338396611603643182787424802",
    "129384448114184712212615089461891361189",
    "826776783017468101310579743103719137160",
    "1094829179493699236815182608873058807474",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "117428381423975957805089895478716013652",
    "94914104760281050619309015460405350950",
    "134563002825040056909315119755976987940",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1261609262118869363696008609445118136",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "56575629121392302122534067050542050074",
    "38217196742947992835679479997123307043",
    "274291830502248510811445962002553983266",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "1705507034440987590414221204201048619104",
    "562078349825457206615187653496907215669",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "908006034650321841016116341488994455335",
    "761861023504359043615820998596748928032",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "1058288241901528409315663746344506172978",
    "175540353207858181597396628150462820644",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "31656414362767519921773019768940498677",
    "17851049134590460466811969854922588545",
    "1078836558652330394914759059552054205839",
    "293645540748671545017999185713660079650",
    "68961250522390204303039500197253848819",
    "161027392695653881705122271406142541104",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
