{
  "file": "core/src/ptr/non_null.rs",
  "name": "ptr::non_null::verify::non_null_check_to_raw_parts",
  "hash": "59001928871156347381729593260535652043",
  "hash_direct": "151238798848658387804838805824966819217",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"NonNull::to_raw_parts\"]\n"
  ],
  "src": "pub fn non_null_check_to_raw_parts() {\n        // Create a SampleTrait object from SampleStruct\n        let sample_struct = SampleStruct { value: kani::any() };\n        let trait_object: &dyn SampleTrait = &sample_struct;\n\n        // Get the raw data pointer and metadata for the trait object\n        let trait_ptr = NonNull::from(trait_object).cast::<()>(); //both have eq failure\n        //let trait_ptr = NonNull::new(trait_object as *const dyn SampleTrait as *mut ()).unwrap(); //Question: what's the difference\n        // Safety: For trait objects, the metadata must come from a pointer to the same underlying erased type\n        let metadata = core::ptr::metadata(trait_object);\n\n        // Create NonNull<dyn MyTrait> from the data pointer and metadata\n        let nonnull_trait_object: NonNull<dyn SampleTrait> =\n            NonNull::from_raw_parts(trait_ptr, metadata);\n        let (decomposed_data_ptr, decomposed_metadata) =\n            NonNull::to_raw_parts(nonnull_trait_object);\n    }",
  "callees": [
    "110286732951253459166416707375649721039",
    "1050757777987272307317753801956772021235",
    "28733051149244335398155852330546270084",
    "42990063052958904976718600653175958912",
    "55268624181377464941500382738073713012",
    "769871191376860825616640549555308478966",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "109763229663154342343123224747831634619",
    "16824420916691935049705640393259467449",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "849628185942532211610194183090257053256",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "70483247417604022266928302940036488328",
    "13650001970381976125002632963211194859",
    "108883727345217680363420087311139580835",
    "107084634605751337355226681115384506900",
    "163590473908140416509402266632539412951",
    "1438655611682378057910712149811762384437",
    "591699405320758359141447911141790709",
    "124586139718338474718261279442774237855",
    "153937916900710049834629952149367040279",
    "892958883336362037110511878009017178255",
    "887141999743130768317141464330300972855",
    "72694828074626606376936687014945691104",
    "56903551552292337068301738030639823357",
    "1031633752045533411310611450970811348051",
    "1203205301171982234518130695831495293328",
    "399232661239117480517401994520839366833"
  ]
}
