{
  "file": "core/src/ptr/non_null.rs",
  "name": "ptr::non_null::verify::non_null_check_write_unaligned_u64::ARR_SIZE",
  "hash": "54300700892965058804098246878371915527",
  "hash_direct": "132229838059086447733544575278229235182",
  "src": "const ARR_SIZE: usize = mem::size_of::<$type>() * 100;",
  "macro_backtrace": [
    {
      "callsite": "generate_write_unaligned_harness!(u64, non_null_check_write_unaligned_u64)",
      "defsite": "macro_rules! generate_write_unaligned_harness {\n        ($type:ty, $harness_name:ident) => {\n            #[kani::proof_for_contract(NonNull::write_unaligned)]\n            pub fn $harness_name() {\n                // Create a pointer generator for the given type with appropriate byte size\n                const ARR_SIZE: usize = mem::size_of::<$type>() * 100;\n                let mut generator = kani::PointerGenerator::<ARR_SIZE>::new();\n\n                // Get a raw pointer from the generator\n                let raw_ptr: *mut $type = generator.any_in_bounds().ptr;\n\n                // Create a non-null pointer from the raw pointer\n                let ptr = NonNull::new(raw_ptr).unwrap();\n\n                // Create a non-deterministic value to write\n                let new_value: $type = kani::any();\n\n                unsafe {\n                    // Perform the volatile write operation\n                    ptr.write_unaligned(new_value);\n\n                    // Read back the value and assert it's correct\n                    assert_eq!(ptr.as_ptr().read_unaligned(), new_value);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "97524482424029537145306757146156791937"
  ]
}
