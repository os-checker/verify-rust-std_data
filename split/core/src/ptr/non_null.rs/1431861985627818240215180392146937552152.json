{
  "file": "core/src/ptr/non_null.rs",
  "name": "ptr::non_null::verify::non_null_check_from_raw_part_trait",
  "hash": "1431861985627818240215180392146937552152",
  "hash_direct": "155071452294939639326427468220332651941",
  "proof_kind": "Contract",
  "attrs": [
    "#[kanitool::proof_for_contract = \"NonNull::from_raw_parts\"]\n"
  ],
  "src": "pub fn non_null_check_from_raw_part_trait() {\n        // Create a SampleTrait object from SampleStruct\n        let sample_struct = SampleStruct { value: kani::any() };\n        let trait_object: &dyn SampleTrait = &sample_struct;\n\n        // Get the raw data pointer and metadata for the trait object\n        let trait_ptr = NonNull::new(trait_object as *const dyn SampleTrait as *mut ()).unwrap();\n        // Safety: For trait objects, the metadata must come from a pointer to the same underlying erased type\n        let metadata = core::ptr::metadata(trait_object);\n\n        // Create NonNull<dyn MyTrait> from the data pointer and metadata\n        let nonnull_trait_object: NonNull<dyn SampleTrait> =\n            NonNull::from_raw_parts(trait_ptr, metadata);\n\n        unsafe {\n            // Ensure trait method and member is preserved\n            kani::assert(\n                trait_object.get_value() == nonnull_trait_object.as_ref().get_value(),\n                \"trait method and member must correctly preserve\",\n            );\n        }\n    }",
  "callees": [
    "28791198012686662548792962938594084249",
    "135929855001212425903524067534552737362",
    "1640570854584499983913922181933773581422",
    "179669095727392675457001382090810284652",
    "96381225063020746367072217221403980848",
    "7526082995824335814466973137466280467",
    "12842158263471368155984318495457181408",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "82708936520457713010514998117220851007",
    "1262555611173615611410428101371636009066",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "1566168013061370513711054548557151263674",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "141837658239120055577256723972352168620",
    "885028438954938404016141759290799750237",
    "151258005089071275263376004431372363949",
    "930685400600698255811455844132428815046",
    "743780844851774567415985775291262958279",
    "154893355661761779479226428043525002108",
    "1019146490540347874218323195995021106427",
    "229928786779365060416476958219270538056",
    "110663236171397711022415139284763867487",
    "23744988444515688363224411875471219172",
    "1421586360994945200613621895681246859380",
    "807328900143224129217449632204642957017",
    "138612605314132519548773735726906085941",
    "114771858115733756846587568271471718150",
    "167939604866748006313525850626472801917",
    "739520556846959085018120036998133255835"
  ]
}
