{
  "file": "core/src/ptr/mut_ptr.rs",
  "name": "ptr::mut_ptr::verify::check_mut_offset_from_tuple_2",
  "hash": "562803483949000767710141001651911413854",
  "hash_direct": "73889387862949902112343678977643677239",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * mut (f64, bool) > :: offset_from\"]\n"
  ],
  "src": "pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_offset_from_harness!(\n        (f64, bool),\n        check_mut_offset_from_tuple_2,\n        check_mut_offset_from_tuple_2_array\n    )",
      "defsite": "macro_rules! generate_offset_from_harness {\n        ($type: ty, $proof_name1: ident, $proof_name2: ident) => {\n            #[kani::proof_for_contract(<*mut $type>::offset_from)]\n            // Below function is for a single element.\n            pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n\n            // Below function is for large arrays\n            #[kani::proof_for_contract(<*mut $type>::offset_from)]\n            pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "1776400014247716663813277479291907169007",
    "136794527676578436722081681479013612912",
    "164988427466999834427091756050845488613",
    "28791198012686662548792962938594084249",
    "175920677112080751315464247289376690681",
    "76761090215908344506703874042953626591",
    "79814521157062014985693017672222855954",
    "540000120143026387812631634480518507182",
    "912713817129810125614188964167726450748",
    "930406189355583438012364172951576427846",
    "84695133724608442493795468913481458324",
    "1228392316922382743916416411995596084718",
    "1223943752803285292812461285853061814848",
    "55854152520961325883622485870345021143",
    "470173788811155896411961308567288437071",
    "1484961265477034772011017782876778998231",
    "412602277353290488616141499985847560834",
    "135929855001212425903524067534552737362",
    "88064788030471862653474358113542072094",
    "13484760267811787927199082304302981780",
    "1640570854584499983913922181933773581422",
    "223423045988591996014060300689406774665",
    "113491588365793266817891648718126780380",
    "21296591240459879805887758611123105569",
    "179669095727392675457001382090810284652",
    "129384448114184712212615089461891361189",
    "826776783017468101310579743103719137160",
    "499314408407163352118231493801255598615",
    "68138549772875169766620634176483944396",
    "12720819340068588970740734207433904279",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "1625555940341004859711655274240604484941",
    "12842158263471368155984318495457181408",
    "134563002825040056909315119755976987940",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "63546811487483518856049412027790921507",
    "38217196742947992835679479997123307043",
    "1517673960285161304313203173608870797874",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "34410515695185066949979771014252260096",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "201181288689639124415825169679319142024",
    "414721349954101148910578355062285771785",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "26201291463775738111312013591520216220",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "74148961176450039932384709605566303125",
    "31656414362767519921773019768940498677",
    "61511817833728292652328692119536427222",
    "620206481348219565110846441991566996733",
    "1408021529306272798717690036689824368479",
    "5149988702892797298383433462430069015",
    "154058834446756144375286072482738413674",
    "74107295996497251292415966350753534823",
    "240923296427865745814951286464114679168",
    "77090576663969102362508094506119532551",
    "130124017192007656258617404019080103701",
    "992785362593301664412347559610448571337",
    "293645540748671545017999185713660079650",
    "68961250522390204303039500197253848819",
    "1591373242514996387714226986914789767730",
    "143280054723711640734769112291080514587",
    "7561258427547861816629625862171043385",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
