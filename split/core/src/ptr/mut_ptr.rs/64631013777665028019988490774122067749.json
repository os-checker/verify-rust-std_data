{
  "file": "core/src/ptr/mut_ptr.rs",
  "name": "ptr::mut_ptr::verify::check_mut_offset_from_i128",
  "hash": "64631013777665028019988490774122067749",
  "hash_direct": "1420514838791057304179379768605446829",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * mut i128 > :: offset_from\"]\n"
  ],
  "src": "pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_offset_from_harness!(\n        i128,\n        check_mut_offset_from_i128,\n        check_mut_offset_from_i128_array\n    )",
      "defsite": "macro_rules! generate_offset_from_harness {\n        ($type: ty, $proof_name1: ident, $proof_name2: ident) => {\n            #[kani::proof_for_contract(<*mut $type>::offset_from)]\n            // Below function is for a single element.\n            pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n\n            // Below function is for large arrays\n            #[kani::proof_for_contract(<*mut $type>::offset_from)]\n            pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "136794527676578436722081681479013612912",
    "594919401536571522615480450466187035121",
    "28791198012686662548792962938594084249",
    "175920677112080751315464247289376690681",
    "76761090215908344506703874042953626591",
    "79814521157062014985693017672222855954",
    "1148627307839145283918023578316688440729",
    "1095364722104585612816197610053444723497",
    "1235348679237863750112903858161149653733",
    "104239852139892936294489509274562000083",
    "374698443852426431364106244005479966",
    "49315244337773865826399595619493856523",
    "55854152520961325883622485870345021143",
    "1484961265477034772011017782876778998231",
    "1774577850103686295213747642312224614939",
    "135929855001212425903524067534552737362",
    "88064788030471862653474358113542072094",
    "11974439592418411337991488073329648630",
    "1640570854584499983913922181933773581422",
    "223423045988591996014060300689406774665",
    "113491588365793266817891648718126780380",
    "1509178577580225630314952032068341177156",
    "179669095727392675457001382090810284652",
    "129384448114184712212615089461891361189",
    "826776783017468101310579743103719137160",
    "147168395324875137603978621195468862919",
    "1653440868931925635810757223341579491910",
    "33764354885285342089298896306657005390",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "1074642887290195615815410518986611750061",
    "12842158263471368155984318495457181408",
    "134563002825040056909315119755976987940",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "63546811487483518856049412027790921507",
    "38217196742947992835679479997123307043",
    "41136059634732553559456711023560843037",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "34410515695185066949979771014252260096",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "201181288689639124415825169679319142024",
    "1198404500915244233718309442622788037075",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "1644354681589855038811486995563584229572",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "11936137592932553624777577260328500762",
    "39667799822193410508007861328948464447",
    "70169661585199192944243399322578046565",
    "889747636042647613517360145612618136771",
    "130943420517885993214818623955434644504",
    "5149988702892797298383433462430069015",
    "133894085361913922365721966768813296955",
    "41685644107588303476090897483666209135",
    "449637264080571459055009589071427003",
    "169446438052605414658769703004191990931",
    "141350016231867540051729769701958059456",
    "638277286648771091814795559499484052649",
    "27677656178699633612205503308553311349",
    "58480844886996188714196265131261175939",
    "435275954882525582710297717590518088765",
    "686910820947947827517103853035094702675",
    "1120443447598922478714607400371734453484",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
