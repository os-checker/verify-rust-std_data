{
  "file": "core/src/ptr/mut_ptr.rs",
  "name": "ptr::mut_ptr::verify::check_mut_offset_from_i16_array",
  "hash": "1344190577814798050012503785091462312524",
  "hash_direct": "353976445769752093610687279821134670969",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * mut i16 > :: offset_from\"]\n"
  ],
  "src": "pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_offset_from_harness!(i16, check_mut_offset_from_i16, check_mut_offset_from_i16_array)",
      "defsite": "macro_rules! generate_offset_from_harness {\n        ($type: ty, $proof_name1: ident, $proof_name2: ident) => {\n            #[kani::proof_for_contract(<*mut $type>::offset_from)]\n            // Below function is for a single element.\n            pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n\n            // Below function is for large arrays\n            #[kani::proof_for_contract(<*mut $type>::offset_from)]\n            pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "136794527676578436722081681479013612912",
    "1174108037031273868511352222846801856920",
    "28791198012686662548792962938594084249",
    "175920677112080751315464247289376690681",
    "76761090215908344506703874042953626591",
    "79814521157062014985693017672222855954",
    "164034300901862143565567262997372156834",
    "164984955827600716535266614370777611799",
    "11973934852318564523444780236134852737",
    "1331254341654653433215550579851988735243",
    "1354076780452404928615755368828422402030",
    "124815810142302413635295427451837660497",
    "100493299280835850107519165770133541690",
    "1484961265477034772011017782876778998231",
    "123782648205275262099084086381657810307",
    "135929855001212425903524067534552737362",
    "88064788030471862653474358113542072094",
    "1628912776924159617112582784448173192751",
    "1640570854584499983913922181933773581422",
    "223423045988591996014060300689406774665",
    "113491588365793266817891648718126780380",
    "78412107181969352786913268612518026243",
    "179669095727392675457001382090810284652",
    "129384448114184712212615089461891361189",
    "826776783017468101310579743103719137160",
    "966698670225507888114563292158263051401",
    "175401366186148214206008930197406553831",
    "824804815054617558673596779049909112",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "216823265290610455816017612927656741434",
    "12842158263471368155984318495457181408",
    "134563002825040056909315119755976987940",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "1719132257882442289310340129402016076207",
    "38217196742947992835679479997123307043",
    "101522080141485307182836483156899478704",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "34410515695185066949979771014252260096",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "201181288689639124415825169679319142024",
    "9037597504611572670565269313178589393",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "46610646831843120536769450669928710666",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "88333820881445890387630530149066219584",
    "39667799822193410508007861328948464447",
    "171065814796238796568955372392708569300",
    "87421828402323675608184189303738275490",
    "101433886987886537208878901714780700634",
    "5149988702892797298383433462430069015",
    "705049929631834990711610963601089422946",
    "135524717720068403873137378963709162397",
    "449637264080571459055009589071427003",
    "559343072341746007015271502320625884489",
    "1292742125126675514015773417176381028932",
    "1628206434702977059816764122748856307837",
    "127447591548990989207985309405395538425",
    "58480844886996188714196265131261175939",
    "1837042076776133743112882701714612475740",
    "1462641004308724101710810386125343964016",
    "1082708792659121481412742723275795041497",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
