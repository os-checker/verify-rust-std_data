{
  "file": "core/src/ptr/mut_ptr.rs",
  "name": "ptr::mut_ptr::<impl *mut T>::offset::runtime_offset_nowrap",
  "hash": "1196818748413488714617327481547726400252",
  "hash_direct": "511704218711236954015767588268628804279",
  "src": "const fn runtime_offset_nowrap(this: *const (), count: isize, size: usize) -> bool {\n            // We can use const_eval_select here because this is only for UB checks.\n            const_eval_select!(\n                @capture { this: *const (), count: isize, size: usize } -> bool:\n                if const {\n                    true\n                } else {\n                    // `size` is the size of a Rust type, so we know that\n                    // `size <= isize::MAX` and thus `as` cast here is not lossy.\n                    let Some(byte_offset) = count.checked_mul(size as isize) else {\n                        return false;\n                    };\n                    let (_, overflow) = this.addr().overflowing_add_signed(byte_offset);\n                    !overflow\n                }\n            )\n        }",
  "callees": [
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "54154472898647204275063978094886352344",
    "23965720822326553157987339842804223213",
    "100741573661083166254739259634530598920",
    "125312877505429677902664359715729802479",
    "134048071163561259015400767089042556532",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942"
  ]
}
