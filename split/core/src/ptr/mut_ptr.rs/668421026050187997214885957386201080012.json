{
  "file": "core/src/ptr/mut_ptr.rs",
  "name": "ptr::mut_ptr::verify::check_mut_offset_slice_usize",
  "hash": "668421026050187997214885957386201080012",
  "hash_direct": "292927705517824079811888059579731431290",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * mut usize > :: offset\"]\n"
  ],
  "src": "fn $offset_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: isize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.offset(count);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_mut_slice_harnesses!(\n        usize,\n        check_mut_offset_slice_usize,\n        check_mut_add_slice_usize,\n        check_mut_sub_slice_usize\n    )",
      "defsite": "macro_rules! generate_mut_slice_harnesses {\n        ($ty:ty, $offset_fn:ident, $add_fn:ident, $sub_fn:ident) => {\n            // Generates a harness for the `offset` operation\n            #[kani::proof_for_contract(<*mut $ty>::offset)]\n            fn $offset_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: isize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.offset(count);\n                }\n            }\n\n            // Generates a harness for the `add` operation\n            #[kani::proof_for_contract(<*mut $ty>::add)]\n            fn $add_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: usize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.add(count);\n                }\n            }\n\n            // Generates a harness for the `sub` operation\n            #[kani::proof_for_contract(<*mut $ty>::sub)]\n            fn $sub_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: usize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.sub(count);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "1531009987700713627114841153360395264198",
    "306459423763459115515352307666540674473",
    "115875024902560781845283418619545004433",
    "1230748672991072180016692955695644415710",
    "1221265949630586294716386477749978237909",
    "125668371251998407573525970671331798348",
    "64428221957133332357265093654334493",
    "12523065385450334584774763099255662860",
    "17153754857054939517470825019637308992",
    "24614872288685298643967355800714012655",
    "940250525962090252914117803890597989072",
    "162562988142812920362309614379838072419",
    "55268624181377464941500382738073713012",
    "1367540701080028155715813334226639914382",
    "128103941581933882561095523931319593650",
    "22860541058604836916644685381819606237",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "84036482349477941418118718092243335116",
    "16824420916691935049705640393259467449",
    "1067675883129992420314174327751912045205",
    "5799168648008231539489194599709139249",
    "167551103293259876125260225730930841946",
    "1182371843420022111010336901757313084440",
    "10420533920630692833318814471402444097",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "649481881936703732314120686274571807698",
    "143494476354928505847543722068638974639",
    "87346173512203244491291086887683032948",
    "1142665801935146236715095738969057208428",
    "1835203901779115148812879347370863368659",
    "55877309556757442307404205786412250797",
    "68731529012457644446442822064640686957",
    "98201198447127039731781752285175138917",
    "1016881286107282470912447461083623133762",
    "863798378905051645017401008390767903816",
    "126250807508553968234457853298948733348",
    "399232661239117480517401994520839366833"
  ]
}
