{
  "file": "core/src/ptr/mut_ptr.rs",
  "name": "ptr::mut_ptr::verify::check_mut_offset_from_u64",
  "hash": "5305009504779048284032190088227843288",
  "hash_direct": "152941218193970551668131385302859894745",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * mut u64 > :: offset_from\"]\n"
  ],
  "src": "pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_offset_from_harness!(u64, check_mut_offset_from_u64, check_mut_offset_from_u64_array)",
      "defsite": "macro_rules! generate_offset_from_harness {\n        ($type: ty, $proof_name1: ident, $proof_name2: ident) => {\n            #[kani::proof_for_contract(<*mut $type>::offset_from)]\n            // Below function is for a single element.\n            pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n\n            // Below function is for large arrays\n            #[kani::proof_for_contract(<*mut $type>::offset_from)]\n            pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "136794527676578436722081681479013612912",
    "28791198012686662548792962938594084249",
    "173456776752791686561409570653074085",
    "175920677112080751315464247289376690681",
    "76761090215908344506703874042953626591",
    "79814521157062014985693017672222855954",
    "47551426387129035447789422890819200317",
    "821002107867754446515716170239703500161",
    "46171904013795414415746828013751733212",
    "1394547588395414303116026630476915285709",
    "6517039821169072865653802434193252473",
    "203475491791590352315669019552845732418",
    "130362557771046901992305728595280277971",
    "1484961265477034772011017782876778998231",
    "135929855001212425903524067534552737362",
    "88064788030471862653474358113542072094",
    "1795800258758546744112665996393728061596",
    "1640570854584499983913922181933773581422",
    "54742968945796623344611399041438109385",
    "223423045988591996014060300689406774665",
    "113491588365793266817891648718126780380",
    "179669095727392675457001382090810284652",
    "1208955528702686560712085551422443389193",
    "129384448114184712212615089461891361189",
    "826776783017468101310579743103719137160",
    "580421906185198514210531402163436186539",
    "92079966309840856469647139853791580249",
    "1355591562701418743611429069850251751837",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "12842158263471368155984318495457181408",
    "149406203697599390761498802948984239894",
    "134563002825040056909315119755976987940",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "1726840297236173523918404201140262431881",
    "38217196742947992835679479997123307043",
    "97524482424029537145306757146156791937",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "34410515695185066949979771014252260096",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "201181288689639124415825169679319142024",
    "1486721048962826100718135565849212106523",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "1793873058582366563815859245867528057571",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "1762124002401821845514861032232430017330",
    "39667799822193410508007861328948464447",
    "902074812877845364717876535337658202322",
    "88064982269818241279417349572384076960",
    "226334709450360186712556313237333335606",
    "5149988702892797298383433462430069015",
    "45809227081074457045673793151690499738",
    "25601592610679806722917144132285596968",
    "449637264080571459055009589071427003",
    "161820861243586747814974245989451740719",
    "848248690387090240511504159260229440029",
    "1559609046634059210612871615744305622955",
    "64221766245242567667178982046041322238",
    "58480844886996188714196265131261175939",
    "181022635354629047665173518644138996933",
    "71921158915592229831655897944917707224",
    "15983293453164361016608882289580463510",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
