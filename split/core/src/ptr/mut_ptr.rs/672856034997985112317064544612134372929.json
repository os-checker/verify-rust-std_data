{
  "file": "core/src/ptr/mut_ptr.rs",
  "name": "ptr::mut_ptr::verify::check_mut_sub_slice_i16",
  "hash": "672856034997985112317064544612134372929",
  "hash_direct": "718891133118896435211498904806110705420",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * mut i16 > :: sub\"]\n"
  ],
  "src": "fn $sub_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: usize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.sub(count);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_mut_slice_harnesses!(\n        i16,\n        check_mut_offset_slice_i16,\n        check_mut_add_slice_i16,\n        check_mut_sub_slice_i16\n    )",
      "defsite": "macro_rules! generate_mut_slice_harnesses {\n        ($ty:ty, $offset_fn:ident, $add_fn:ident, $sub_fn:ident) => {\n            // Generates a harness for the `offset` operation\n            #[kani::proof_for_contract(<*mut $ty>::offset)]\n            fn $offset_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: isize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.offset(count);\n                }\n            }\n\n            // Generates a harness for the `add` operation\n            #[kani::proof_for_contract(<*mut $ty>::add)]\n            fn $add_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: usize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.add(count);\n                }\n            }\n\n            // Generates a harness for the `sub` operation\n            #[kani::proof_for_contract(<*mut $ty>::sub)]\n            fn $sub_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: usize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.sub(count);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "146543774918217984829590933888836092674",
    "306459423763459115515352307666540674473",
    "1221265949630586294716386477749978237909",
    "737668627125484674291744588316176536",
    "12523065385450334584774763099255662860",
    "498502538971597893115674171862161812246",
    "940250525962090252914117803890597989072",
    "162562988142812920362309614379838072419",
    "55268624181377464941500382738073713012",
    "76403006356564134737826708965624568061",
    "22860541058604836916644685381819606237",
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "104310221742716516106825842456563485195",
    "16824420916691935049705640393259467449",
    "113650418919752038108198011283961594786",
    "841346702487865802717731804342903065853",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "185724103687942854011779056827215758636",
    "1647335839312600844312734162993970013353",
    "174277204108153543316058831477041384365",
    "634401098589386367516258189145831813592",
    "58142547751512998057620659377025145902",
    "480305718057978050817688123698960525340",
    "1175193146752510956312155211461453823645",
    "1835203901779115148812879347370863368659",
    "55877309556757442307404205786412250797",
    "129091644984006039778958016008941845670",
    "1564004178496337119316507105125054707476",
    "399232661239117480517401994520839366833"
  ]
}
