{
  "file": "core/src/ptr/mut_ptr.rs",
  "name": "ptr::mut_ptr::verify::check_mut_sub_slice_i16",
  "hash": "5661064816675953750345177645105896787",
  "hash_direct": "718891133118896435211498904806110705420",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * mut i16 > :: sub\"]\n"
  ],
  "src": "fn $sub_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: usize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.sub(count);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_mut_slice_harnesses!(\n        i16,\n        check_mut_offset_slice_i16,\n        check_mut_add_slice_i16,\n        check_mut_sub_slice_i16\n    )",
      "defsite": "macro_rules! generate_mut_slice_harnesses {\n        ($ty:ty, $offset_fn:ident, $add_fn:ident, $sub_fn:ident) => {\n            // Generates a harness for the `offset` operation\n            #[kani::proof_for_contract(<*mut $ty>::offset)]\n            fn $offset_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: isize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.offset(count);\n                }\n            }\n\n            // Generates a harness for the `add` operation\n            #[kani::proof_for_contract(<*mut $ty>::add)]\n            fn $add_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: usize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.add(count);\n                }\n            }\n\n            // Generates a harness for the `sub` operation\n            #[kani::proof_for_contract(<*mut $ty>::sub)]\n            fn $sub_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: usize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.sub(count);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "154291598878395838606490411723932442804",
    "76761090215908344506703874042953626591",
    "1194204153753465304412874113805257013333",
    "7225769113791813546290860835000746261",
    "113491588365793266817891648718126780380",
    "1175524704131155789312792205562151902142",
    "826776783017468101310579743103719137160",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "1085181433003164922014724360758546603055",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "844874268796424553916489422294626291889",
    "23815256893174302637797703719499456373",
    "101522080141485307182836483156899478704",
    "97892229237199250718782565098232937194",
    "632379827537218859118037651046044448068",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "88333820881445890387630530149066219584",
    "119240913873927136825314340299692232439",
    "14793593705814998347416339440269146414",
    "699261890207543875715298416815792867325",
    "71661212382111220044141911711882391046",
    "130001040586631649091727258989284626275",
    "424138802330512485417897120937077242844",
    "95833143949527862342301651250424936271",
    "833553174169562286714471950209380562777",
    "1362209641209497658810880479680284114807",
    "38941281761602438632163576978956991022",
    "739520556846959085018120036998133255835"
  ]
}
