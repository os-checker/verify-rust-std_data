{
  "file": "core/src/ptr/mut_ptr.rs",
  "name": "ptr::mut_ptr::verify::check_mut_offset_slice_i64",
  "hash": "967128966563954218211459679644113395094",
  "hash_direct": "1005656354989712520817923023616105361072",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * mut i64 > :: offset\"]\n"
  ],
  "src": "fn $offset_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: isize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.offset(count);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_mut_slice_harnesses!(\n        i64,\n        check_mut_offset_slice_i64,\n        check_mut_add_slice_i64,\n        check_mut_sub_slice_i64\n    )",
      "defsite": "macro_rules! generate_mut_slice_harnesses {\n        ($ty:ty, $offset_fn:ident, $add_fn:ident, $sub_fn:ident) => {\n            // Generates a harness for the `offset` operation\n            #[kani::proof_for_contract(<*mut $ty>::offset)]\n            fn $offset_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: isize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.offset(count);\n                }\n            }\n\n            // Generates a harness for the `add` operation\n            #[kani::proof_for_contract(<*mut $ty>::add)]\n            fn $add_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: usize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.add(count);\n                }\n            }\n\n            // Generates a harness for the `sub` operation\n            #[kani::proof_for_contract(<*mut $ty>::sub)]\n            fn $sub_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: usize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.sub(count);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "678189717551262389614376981317523753500",
    "657233684967198358216702776602192178354",
    "76761090215908344506703874042953626591",
    "33771070424635483588856444226591787667",
    "1194204153753465304412874113805257013333",
    "15259771934090893357858335156163734693",
    "553011341845714869315790910594223124816",
    "113491588365793266817891648718126780380",
    "96324645896709027806779562002866162991",
    "358620174323338396611603643182787424802",
    "826776783017468101310579743103719137160",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "1766051386498942411410962933936104212235",
    "94914104760281050619309015460405350950",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "54154472898647204275063978094886352344",
    "23815256893174302637797703719499456373",
    "7294383037529148129694068087461345583",
    "23965720822326553157987339842804223213",
    "100741573661083166254739259634530598920",
    "125312877505429677902664359715729802479",
    "134048071163561259015400767089042556532",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "137815866337370437854642442138739727233",
    "74182890320582312072411608097838709214",
    "1196818748413488714617327481547726400252",
    "847828966450064993116160223927792885936",
    "82079633736569526802330739756525876854",
    "37450168372966116312945835162429621496",
    "110566647714603590236579057329801293095",
    "95833143949527862342301651250424936271",
    "833553174169562286714471950209380562777",
    "7063428665951860529259656119100735783",
    "102984949158583100726881210630296696920",
    "739520556846959085018120036998133255835"
  ]
}
