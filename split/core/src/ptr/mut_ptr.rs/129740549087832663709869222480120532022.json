{
  "file": "core/src/ptr/mut_ptr.rs",
  "name": "ptr::mut_ptr::verify::check_mut_offset_from_i64_array",
  "hash": "129740549087832663709869222480120532022",
  "hash_direct": "154351157628243807079374901538448735062",
  "proof_kind": "Contract",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * mut i64 > :: offset_from\"]\n"
  ],
  "src": "pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_offset_from_harness!(i64, check_mut_offset_from_i64, check_mut_offset_from_i64_array)",
      "defsite": "macro_rules! generate_offset_from_harness {\n        ($type: ty, $proof_name1: ident, $proof_name2: ident) => {\n            #[kani::proof_for_contract(<*mut $type>::offset_from)]\n            // Below function is for a single element.\n            pub fn $proof_name1() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<gen_size>::new();\n                let mut generator2 = PointerGenerator::<gen_size>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n\n            // Below function is for large arrays\n            #[kani::proof_for_contract(<*mut $type>::offset_from)]\n            pub fn $proof_name2() {\n                const gen_size: usize = mem::size_of::<$type>();\n                let mut generator1 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let mut generator2 = PointerGenerator::<{ gen_size * ARRAY_LEN }>::new();\n                let ptr1: *mut $type = generator1.any_in_bounds().ptr;\n                let ptr2: *mut $type = if kani::any() {\n                    generator1.any_alloc_status().ptr\n                } else {\n                    generator2.any_alloc_status().ptr\n                };\n\n                unsafe {\n                    ptr1.offset_from(ptr2);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "136794527676578436722081681479013612912",
    "28791198012686662548792962938594084249",
    "146908235034638159208859868167946843838",
    "175920677112080751315464247289376690681",
    "76761090215908344506703874042953626591",
    "79814521157062014985693017672222855954",
    "89413240025720456182696472912371457926",
    "176176881463587059718922812238372183236",
    "54537233250958801206036890207235391262",
    "83258936054216677614833805502356922768",
    "102643369458778954209264098805611552809",
    "117561577411253861428573166988632328700",
    "1444130331446461313110395460102567721281",
    "1484961265477034772011017782876778998231",
    "135929855001212425903524067534552737362",
    "35050014685987376637211669421649221857",
    "88064788030471862653474358113542072094",
    "1640570854584499983913922181933773581422",
    "455266664225907363718433531888791329661",
    "223423045988591996014060300689406774665",
    "113491588365793266817891648718126780380",
    "179669095727392675457001382090810284652",
    "809857513675347729512830832735828419618",
    "129384448114184712212615089461891361189",
    "826776783017468101310579743103719137160",
    "38280226865800395943121831194558817516",
    "1376897323044154177918070998478852266835",
    "1072831003823949791714561853795037020238",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "12842158263471368155984318495457181408",
    "630599663716183336214125635728089623874",
    "134563002825040056909315119755976987940",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "127875788109033885817872022760105595383",
    "38217196742947992835679479997123307043",
    "7294383037529148129694068087461345583",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "34410515695185066949979771014252260096",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "201181288689639124415825169679319142024",
    "63082436745306137404090266236193815917",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "294833496670328108911425103142373810795",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "137815866337370437854642442138739727233",
    "31656414362767519921773019768940498677",
    "30633526991898913602165644297366184353",
    "119233178225025883559974494346564079533",
    "599120885609691624310534648287277436227",
    "5149988702892797298383433462430069015",
    "151047629242057232943425166912898676867",
    "38154696648635849349304472489852344326",
    "293645540748671545017999185713660079650",
    "16908449883779036157140599497148475458",
    "467020058947986898915767890658751587183",
    "125962363432794628228176986569693763300",
    "408647012780704498111830460666238625403",
    "68961250522390204303039500197253848819",
    "1805799030285775268310633464516686030076",
    "690894096123110542715774058571202212223",
    "18630231208813707461207773188570451111",
    "48269828393251912102754553129094534608",
    "982812517398244847818134688650878457542",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
