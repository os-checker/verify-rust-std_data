{
  "file": "core/src/ptr/mut_ptr.rs",
  "name": "ptr::mut_ptr::verify::check_mut_add_u128",
  "hash": "96608070197661280471174187672760674989",
  "hash_direct": "32155278651692706366060061882916290407",
  "proof_kind": "\"Contract\"",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * mut u128 > :: add\"]\n"
  ],
  "src": "pub fn $proof_name() {\n                // 200 bytes are large enough to cover all pointee types used for testing\n                const BUF_SIZE: usize = 200;\n                let mut generator = kani::PointerGenerator::<BUF_SIZE>::new();\n                let test_ptr: *mut $ty = generator.any_in_bounds().ptr;\n                let count: $count_ty = kani::any();\n                unsafe {\n                    test_ptr.$fn_name(count);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_single_arithmetic_harness!($ty, $add_fn_name, add, usize)",
      "defsite": "macro_rules! generate_single_arithmetic_harness {\n        ($ty:ty, $proof_name:ident, $fn_name:ident, $count_ty:ty) => {\n            #[kani::proof_for_contract(<*mut $ty>::$fn_name)]\n            pub fn $proof_name() {\n                // 200 bytes are large enough to cover all pointee types used for testing\n                const BUF_SIZE: usize = 200;\n                let mut generator = kani::PointerGenerator::<BUF_SIZE>::new();\n                let test_ptr: *mut $ty = generator.any_in_bounds().ptr;\n                let count: $count_ty = kani::any();\n                unsafe {\n                    test_ptr.$fn_name(count);\n                }\n            }\n        };\n    }"
    },
    {
      "callsite": "generate_arithmetic_harnesses!(\n        u128,\n        check_mut_add_u128,\n        check_mut_sub_u128,\n        check_mut_offset_u128\n    )",
      "defsite": "macro_rules! generate_arithmetic_harnesses {\n        ($ty:ty, $add_fn_name:ident, $sub_fn_name:ident, $offset_fn_name:ident) => {\n            generate_single_arithmetic_harness!($ty, $add_fn_name, add, usize);\n            generate_single_arithmetic_harness!($ty, $sub_fn_name, sub, usize);\n            generate_single_arithmetic_harness!($ty, $offset_fn_name, offset, isize);\n        };\n    }"
    }
  ],
  "callees": [
    "136794527676578436722081681479013612912",
    "10881692741086924054939752946121276089",
    "175920677112080751315464247289376690681",
    "76761090215908344506703874042953626591",
    "11323777372751407421397972305033054604",
    "774592334781182902915623431869459232226",
    "101025135220296385399912486604639162172",
    "688842349556190100811041595524753252306",
    "1484961265477034772011017782876778998231",
    "1560508215569658459217992416008307059233",
    "1194204153753465304412874113805257013333",
    "1181176447433360643710524604875175168805",
    "223423045988591996014060300689406774665",
    "113491588365793266817891648718126780380",
    "56629061495133648541932577274744419848",
    "129384448114184712212615089461891361189",
    "826776783017468101310579743103719137160",
    "19375752261678379457269646249371095434",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "565391940194052820910706318123251165594",
    "134563002825040056909315119755976987940",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "27480086118489678191003877857780025576",
    "1293607388739574242111226698004271448354",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "56575629121392302122534067050542050074",
    "38217196742947992835679479997123307043",
    "643230467485784801514457338296833761965",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "39667799822193410508007861328948464447",
    "337537862187130472414741922276875055606",
    "449637264080571459055009589071427003",
    "1636134839988558784111358518820649749695",
    "159020649367935455433796678264049082640",
    "58480844886996188714196265131261175939",
    "92293406756414262231157972400238103749",
    "606608081756831098117273329568996374994",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
