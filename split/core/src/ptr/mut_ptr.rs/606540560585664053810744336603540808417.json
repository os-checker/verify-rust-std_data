{
  "file": "core/src/ptr/mut_ptr.rs",
  "name": "ptr::mut_ptr::verify::check_mut_sub_slice_u64",
  "hash": "606540560585664053810744336603540808417",
  "hash_direct": "123124772003574311396168417197394100390",
  "proof_kind": "Contract",
  "attrs": [
    "#[kanitool::proof_for_contract = \"< * mut u64 > :: sub\"]\n"
  ],
  "src": "fn $sub_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: usize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.sub(count);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_mut_slice_harnesses!(\n        u64,\n        check_mut_offset_slice_u64,\n        check_mut_add_slice_u64,\n        check_mut_sub_slice_u64\n    )",
      "defsite": "macro_rules! generate_mut_slice_harnesses {\n        ($ty:ty, $offset_fn:ident, $add_fn:ident, $sub_fn:ident) => {\n            // Generates a harness for the `offset` operation\n            #[kani::proof_for_contract(<*mut $ty>::offset)]\n            fn $offset_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: isize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.offset(count);\n                }\n            }\n\n            // Generates a harness for the `add` operation\n            #[kani::proof_for_contract(<*mut $ty>::add)]\n            fn $add_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: usize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.add(count);\n                }\n            }\n\n            // Generates a harness for the `sub` operation\n            #[kani::proof_for_contract(<*mut $ty>::sub)]\n            fn $sub_fn() {\n                let mut arr: [$ty; ARRAY_SIZE] = kani::Arbitrary::any_array();\n                let test_ptr: *mut $ty = arr.as_mut_ptr();\n                let offset: usize = kani::any();\n                let count: usize = kani::any();\n                kani::assume(offset <= ARRAY_SIZE * mem::size_of::<$ty>());\n                let ptr_with_offset: *mut $ty = test_ptr.wrapping_byte_add(offset);\n                unsafe {\n                    ptr_with_offset.sub(count);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "69295075737609566061108776665545376791",
    "76761090215908344506703874042953626591",
    "1194204153753465304412874113805257013333",
    "95629802441098677209893367669876337666",
    "113491588365793266817891648718126780380",
    "58868017904587438857431689539175255469",
    "826776783017468101310579743103719137160",
    "139704976908753389291209564980972955015",
    "7526082995824335814466973137466280467",
    "41258662346982657166624146552985353254",
    "108393381985250317406898676759665844160",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "118969608371033492241203013207235849818",
    "23815256893174302637797703719499456373",
    "97524482424029537145306757146156791937",
    "143572956432032064744447501745832117320",
    "761861023504359043615820998596748928032",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "1762124002401821845514861032232430017330",
    "1541249736944875618911621379220443407967",
    "170477930193487407342654832140393402043",
    "1210530984690723885412879242630644158609",
    "414328117559642247715789288821417618234",
    "1124723541607293760917479239176138067555",
    "53871209653967271641477882156556611535",
    "95833143949527862342301651250424936271",
    "833553174169562286714471950209380562777",
    "1524503919708685464516305666418844827971",
    "935658007883373388218268314737148286081",
    "739520556846959085018120036998133255835"
  ]
}
