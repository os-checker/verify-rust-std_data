{
  "file": "core/src/marker/variance.rs",
  "name": "<marker::variance::PhantomInvariantLifetime<'_> as cmp::Ord>::cmp",
  "hash": "10713449303925327256966977743824071070",
  "hash_direct": "74127507953489720126571058263893580244",
  "src": "Ord",
  "macro_backtrace": [
    {
      "callsite": "Ord",
      "defsite": "pub macro Ord($item:item) {\n    /* compiler built-in */\n}"
    },
    {
      "callsite": "phantom_lifetime! {\n    /// Zero-sized type used to mark a lifetime as covariant.\n    ///\n    /// Covariant lifetimes must live at least as long as declared. See [the reference][1] for more\n    /// information.\n    ///\n    /// [1]: https://doc.rust-lang.org/stable/reference/subtyping.html#variance\n    ///\n    /// Note: If `'a` is otherwise contravariant or invariant, the resulting type is invariant.\n    ///\n    /// ## Layout\n    ///\n    /// For all `'a`, the following are guaranteed:\n    /// * `size_of::<PhantomCovariantLifetime<'a>>() == 0`\n    /// * `align_of::<PhantomCovariantLifetime<'a>>() == 1`\n    #[rustc_pub_transparent]\n    #[repr(transparent)]\n    pub struct PhantomCovariantLifetime<'a>(PhantomCovariant<&'a ()>);\n    /// Zero-sized type used to mark a lifetime as contravariant.\n    ///\n    /// Contravariant lifetimes must live at most as long as declared. See [the reference][1] for\n    /// more information.\n    ///\n    /// [1]: https://doc.rust-lang.org/stable/reference/subtyping.html#variance\n    ///\n    /// Note: If `'a` is otherwise covariant or invariant, the resulting type is invariant.\n    ///\n    /// ## Layout\n    ///\n    /// For all `'a`, the following are guaranteed:\n    /// * `size_of::<PhantomContravariantLifetime<'a>>() == 0`\n    /// * `align_of::<PhantomContravariantLifetime<'a>>() == 1`\n    #[rustc_pub_transparent]\n    #[repr(transparent)]\n    pub struct PhantomContravariantLifetime<'a>(PhantomContravariant<&'a ()>);\n    /// Zero-sized type used to mark a lifetime as invariant.\n    ///\n    /// Invariant lifetimes must be live for the exact length declared, neither shorter nor longer.\n    /// See [the reference][1] for more information.\n    ///\n    /// [1]: https://doc.rust-lang.org/stable/reference/subtyping.html#variance\n    ///\n    /// ## Layout\n    ///\n    /// For all `'a`, the following are guaranteed:\n    /// * `size_of::<PhantomInvariantLifetime<'a>>() == 0`\n    /// * `align_of::<PhantomInvariantLifetime<'a>>() == 1`\n    #[rustc_pub_transparent]\n    #[repr(transparent)]\n    pub struct PhantomInvariantLifetime<'a>(PhantomInvariant<&'a ()>);\n}",
      "defsite": "macro_rules! phantom_lifetime {\n    ($(\n        $(#[$attr:meta])*\n        pub struct $name:ident <$lt:lifetime> ($($inner:tt)*);\n    )*) => {$(\n        $(#[$attr])*\n        #[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n        pub struct $name<$lt>($($inner)*);\n\n        impl $name<'_> {\n            /// Constructs a new instance of the variance marker.\n            pub const fn new() -> Self {\n                Self(first_token!($($inner)*)(PhantomData))\n            }\n        }\n\n        impl self::sealed::Sealed for $name<'_> {\n            const VALUE: Self = Self::new();\n        }\n        impl Variance for $name<'_> {}\n\n        impl fmt::Debug for $name<'_> {\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                write!(f, \"{}\", stringify!($name))\n            }\n        }\n    )*};\n}"
    }
  ],
  "callees": [
    "1798530910178626012517198983846132845965"
  ]
}
