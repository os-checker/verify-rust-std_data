{
  "file": "core/src/unicode/unicode_data.rs",
  "name": "core::unicode::unicode_data::skip_search::<37, 905>",
  "hash": "364946515915837522213803216036181469885",
  "hash_direct": "165706481343586899603155617696009565154",
  "src": "unsafe fn skip_search<const SOR: usize, const OFFSETS: usize>(\n    needle: char,\n    short_offset_runs: &[ShortOffsetRunHeader; SOR],\n    offsets: &[u8; OFFSETS],\n) -> bool {\n    let needle = needle as u32;\n\n    let last_idx =\n        match short_offset_runs.binary_search_by_key(&(needle << 11), |header| header.0 << 11) {\n            Ok(idx) => idx + 1,\n            Err(idx) => idx,\n        };\n    // SAFETY: `last_idx` *cannot* be past the end of the array, as the last\n    // element is greater than `std::char::MAX` (the largest possible needle)\n    // as guaranteed by the caller.\n    //\n    // So, we cannot have found it (i.e. `Ok(idx) => idx + 1 != length`) and the\n    // correct location cannot be past it, so `Err(idx) => idx != length` either.\n    //\n    // This means that we can avoid bounds checking for the accesses below, too.\n    //\n    // We need to use `intrinsics::assume` since the `panic_nounwind` contained\n    // in `hint::assert_unchecked` may not be optimized out.\n    unsafe { crate::intrinsics::assume(last_idx < SOR) };\n\n    let mut offset_idx = short_offset_runs[last_idx].start_index();\n    let length = if let Some(next) = short_offset_runs.get(last_idx + 1) {\n        (*next).start_index() - offset_idx\n    } else {\n        offsets.len() - offset_idx\n    };\n\n    let prev =\n        last_idx.checked_sub(1).map(|prev| short_offset_runs[prev].prefix_sum()).unwrap_or(0);\n\n    let total = needle - prev;\n    let mut prefix_sum = 0;\n    for _ in 0..(length - 1) {\n        // SAFETY: It is guaranteed that `length <= OFFSETS - offset_idx`,\n        // so it follows that `length - 1 + offset_idx < OFFSETS`, therefore\n        // `offset_idx < OFFSETS` is always true in this loop.\n        //\n        // We need to use `intrinsics::assume` since the `panic_nounwind` contained\n        // in `hint::assert_unchecked` may not be optimized out.\n        unsafe { crate::intrinsics::assume(offset_idx < OFFSETS) };\n        let offset = offsets[offset_idx];\n        prefix_sum += offset as u32;\n        if prefix_sum > total {\n            break;\n        }\n        offset_idx += 1;\n    }\n    offset_idx % 2 == 1\n}",
  "callees": [
    "141364671331973869778270942055776551817",
    "38033425202961758733378719026903933598",
    "1760151968317278624513482005825546212798",
    "12281449246394340237926324936375242532",
    "1511275866077199755612412536318849312657",
    "109777261735956977828864330544561630572",
    "213976084203050181513038939684188374657",
    "1263945855766849354510334944065532128780",
    "181267529910573756716102767087485333561",
    "79817071675776388295206212610749591701",
    "1824545319189397521315695847785602896178",
    "1022803319099694746713266409355997953681",
    "806608401546285073416583488309030248740",
    "1390917187629079949812427169424512137623",
    "4833310887722852675564040932252536797",
    "4985460341548456644715340132601722906",
    "700121798421844638112954362982616513440",
    "3426408591059629602792909874372843773",
    "132656586283717246419120116467473299819",
    "135467273534976011077632682255406986070",
    "139483837448589163674758035261080447269",
    "439022777647632696517945103495108037392",
    "34519564174861224012422426839487145969",
    "897265533945643607115272871669854221703",
    "89502211078669479795623704974378882516",
    "170846580729842163074659927269266210653",
    "89553991991390806369608823483879896538",
    "45320022097344468766723726317823118416",
    "22560638825399651583052560290002591528",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "146612017564224181584303574960223420416",
    "63085389524472853348886374617170044294",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "20743252454400330067347997888777335224",
    "181953690662554297912505335505865467275",
    "154716117204139621346903708735117238315",
    "10435104334233940885347855730897394048",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "68484638068549756813527774561016858731",
    "1328599216671135015714776194882339466358",
    "76687630660750854831132439645386232409",
    "1102707990469809545812015399289882219301",
    "8161099640543304955344124854131248786",
    "19058764743854314419670517218317949449",
    "559760545702983105117253089067799164676",
    "1348042039745062014015951941297754895913",
    "263357706812436091214144260807374604368",
    "1176805568875757844412601215105379417272",
    "112179773871628927303876335612651688990",
    "70542180169395563810324335690772955151",
    "558667141726945299514936523234334465282",
    "184037955874578898824598900951006729231",
    "85839112874226958765684869690353996738",
    "83849535035327804979354663630505665277",
    "1753166894143510804112784709663712737672",
    "42640861811413251621458178080920148489",
    "8787952082428538504365079471726452107",
    "116953387026626631555337908913709999943",
    "3209455355414418345596547327370884836",
    "112989397975222255532054380452996322405",
    "597683522621928614711119364722938279780",
    "17341452779707394601695269753709495351",
    "26987256806444037714655035545793307687",
    "27026375606464682699539692727856734723",
    "76473105542440629998935855571615310589",
    "137892143508211511511631870990493490784"
  ]
}
