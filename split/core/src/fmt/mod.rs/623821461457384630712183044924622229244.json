{
  "file": "core/src/fmt/mod.rs",
  "name": "fmt::Arguments::<'_>::estimated_capacity",
  "hash": "623821461457384630712183044924622229244",
  "hash_direct": "1834800825800702762712015344298180455647",
  "src": "pub fn estimated_capacity(&self) -> usize {\n        let pieces_length: usize = self.pieces.iter().map(|x| x.len()).sum();\n\n        if self.args.is_empty() {\n            pieces_length\n        } else if !self.pieces.is_empty() && self.pieces[0].is_empty() && pieces_length < 16 {\n            // If the format string starts with an argument,\n            // don't preallocate anything, unless length\n            // of pieces is significant.\n            0\n        } else {\n            // There are some arguments, so any additional push\n            // will reallocate the string. To avoid that,\n            // we're \"pre-doubling\" the capacity here.\n            pieces_length.checked_mul(2).unwrap_or(0)\n        }\n    }",
  "callees": [
    "164778841179090148997496143618317560864",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "1529875730411415803517587657844377161231",
    "1547564489779508118311471276601353146868",
    "23815256893174302637797703719499456373",
    "52299133982155327055945448625764172846",
    "855556410617860801013180162414999481301",
    "933782629632363978016923293360945870524",
    "292956816852712202313709358761556424939",
    "292102146770030600213373760847150875506",
    "346884065872099449813606067639081773692",
    "835907751957229064017098223788077770935",
    "1774525234489917655010266298047402483170",
    "66856707878438928083141618219221839560",
    "143572956432032064744447501745832117320",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "174107661030119018973646362480685393050",
    "1072447301577107643817352323900751606380",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "160114839749160009649997357385797498707",
    "148496320273866592853849228378244875819",
    "1627069775235942912863332172645795237",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "1214574077763705187516383491048990527345",
    "18924474281332607947427114014473837479",
    "2314453704286586957141741655351484658",
    "77373845881990751064843367268502432800",
    "1662820343583962880217534009993542126132",
    "113596404367831677763624470172880692934",
    "15803802287269659801793914209267737300",
    "293645540748671545017999185713660079650",
    "68360069525807963372051074298584883273",
    "188623835719674209415780858243202701697",
    "158669007246384560107761733536387868399",
    "77318210815910282202805838864011256618",
    "101649067997146130054703855099872423581",
    "140508745530224598611987045675628116028",
    "1835603625253963741615161963089665984572",
    "79671071743950882431011926290304162986",
    "1027744816569446259312071760249268068387",
    "988514181131418236611453487985288399813",
    "114841874549894360247077156067660898404",
    "23017796867479276506566864030200502384",
    "137147026445318887422604340055542353314",
    "30819441612753718577366232250007643490",
    "852298530973108873212161851321200820382",
    "126048648882406442003602795325732745334",
    "92658835324565758495130762072978604201",
    "982812517398244847818134688650878457542",
    "739520556846959085018120036998133255835"
  ]
}
