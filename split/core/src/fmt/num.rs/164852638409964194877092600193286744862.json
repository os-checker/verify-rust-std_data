{
  "file": "core/src/fmt/num.rs",
  "name": "core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt",
  "hash": "164852638409964194877092600193286744862",
  "hash_direct": "176497160866651877246412546988533300378",
  "src": "fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                // Check macro arguments at compile time.\n                const {\n                    assert!($Unsigned::MIN == 0, \"need unsigned\");\n                    assert!($dig_tab.is_ascii(), \"need single-byte entries\");\n                }\n\n                // ASCII digits in ascending order are used as a lookup table.\n                const DIG_TAB: &[u8] = $dig_tab;\n                const BASE: $Unsigned = DIG_TAB.len() as $Unsigned;\n                const MAX_DIG_N: usize = $Unsigned::MAX.ilog(BASE) as usize + 1;\n\n                // Buffer digits of self with right alignment.\n                let mut buf = [MaybeUninit::<u8>::uninit(); MAX_DIG_N];\n                // Count the number of bytes in buf that are not initialized.\n                let mut offset = buf.len();\n\n                // Accumulate each digit of the number from the least\n                // significant to the most significant figure.\n                let mut remain = *self;\n                loop {\n                    let digit = remain % BASE;\n                    remain /= BASE;\n\n                    offset -= 1;\n                    // SAFETY: `remain` will reach 0 and we will break before `offset` wraps\n                    unsafe { core::hint::assert_unchecked(offset < buf.len()) }\n                    buf[offset].write(DIG_TAB[digit as usize]);\n                    if remain == 0 {\n                        break;\n                    }\n                }\n\n                // SAFETY: Starting from `offset`, all elements of the slice have been set.\n                let digits = unsafe { slice_buffer_to_str(&buf, offset) };\n                f.pad_integral(true, $prefix, digits)\n            }",
  "macro_backtrace": [
    {
      "callsite": "radix_integer! { fmt::UpperHex for $Signed and $Unsigned, \"0x\", b\"0123456789ABCDEF\" }",
      "defsite": "macro_rules! radix_integer {\n    (fmt::$Trait:ident for $Signed:ident and $Unsigned:ident, $prefix:literal, $dig_tab:literal) => {\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl fmt::$Trait for $Unsigned {\n            /// Format unsigned integers in the radix.\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                // Check macro arguments at compile time.\n                const {\n                    assert!($Unsigned::MIN == 0, \"need unsigned\");\n                    assert!($dig_tab.is_ascii(), \"need single-byte entries\");\n                }\n\n                // ASCII digits in ascending order are used as a lookup table.\n                const DIG_TAB: &[u8] = $dig_tab;\n                const BASE: $Unsigned = DIG_TAB.len() as $Unsigned;\n                const MAX_DIG_N: usize = $Unsigned::MAX.ilog(BASE) as usize + 1;\n\n                // Buffer digits of self with right alignment.\n                let mut buf = [MaybeUninit::<u8>::uninit(); MAX_DIG_N];\n                // Count the number of bytes in buf that are not initialized.\n                let mut offset = buf.len();\n\n                // Accumulate each digit of the number from the least\n                // significant to the most significant figure.\n                let mut remain = *self;\n                loop {\n                    let digit = remain % BASE;\n                    remain /= BASE;\n\n                    offset -= 1;\n                    // SAFETY: `remain` will reach 0 and we will break before `offset` wraps\n                    unsafe { core::hint::assert_unchecked(offset < buf.len()) }\n                    buf[offset].write(DIG_TAB[digit as usize]);\n                    if remain == 0 {\n                        break;\n                    }\n                }\n\n                // SAFETY: Starting from `offset`, all elements of the slice have been set.\n                let digits = unsafe { slice_buffer_to_str(&buf, offset) };\n                f.pad_integral(true, $prefix, digits)\n            }\n        }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl fmt::$Trait for $Signed {\n            /// Format signed integers in the twoâ€™s-complement form.\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                fmt::$Trait::fmt(&self.cast_unsigned(), f)\n            }\n        }\n    };\n}"
    },
    {
      "callsite": "radix_integers! { i8, u8 }",
      "defsite": "macro_rules! radix_integers {\n    ($Signed:ident, $Unsigned:ident) => {\n        radix_integer! { fmt::Binary   for $Signed and $Unsigned, \"0b\", b\"01\" }\n        radix_integer! { fmt::Octal    for $Signed and $Unsigned, \"0o\", b\"01234567\" }\n        radix_integer! { fmt::LowerHex for $Signed and $Unsigned, \"0x\", b\"0123456789abcdef\" }\n        radix_integer! { fmt::UpperHex for $Signed and $Unsigned, \"0x\", b\"0123456789ABCDEF\" }\n    };\n}"
    }
  ],
  "callees": [
    "430595135714292255616999593149607556937",
    "104550528282774795524117016372908034501",
    "146994998949606397634275197795948319731",
    "1664835611994150133815177247542444862856",
    "8679423476558499076515906490330422276",
    "1663203004015319569313148455365666569464",
    "1760151968317278624513482005825546212798",
    "174818429325978511985964480597107110138",
    "271581865380915142716623206153391998575",
    "1610132049278786268317165013209976119474",
    "33079549740955926448092455435525766202",
    "14819506220153714869578342718970344438",
    "1263762787603576940114938997779197232126",
    "155573843345597301482960119425698594610",
    "172862119183583856229745200852578234443",
    "44164091052374709332977011088938471599",
    "92916369038658722504713519134028906093",
    "1707830736431008481013750273495807653389",
    "146657666860167611142330680524882016325",
    "81469956439897741759340752850869094495",
    "147423519526199107556432799298611042905",
    "232640487278837467918300065031491470506",
    "72140664861463029815543561642300778915",
    "12281449246394340237926324936375242532",
    "1511275866077199755612412536318849312657",
    "99835071136844477394667148890151411684",
    "73694171442177138896992135977130617471",
    "181267529910573756716102767087485333561",
    "1565020019114964267317960250432518071469",
    "79817071675776388295206212610749591701",
    "310476737258981539215905981644988688429",
    "1317496639393946813212918050983619520041",
    "1824545319189397521315695847785602896178",
    "141051090481435808783715316343782561731",
    "10298594175948646293213754607989049950",
    "176037956622827736297417539670966810023",
    "132419500724943648244788984807305935568",
    "166218815611410939995580178073009504662",
    "96085804324659007306694651199530528204",
    "36474222372541034209414042900904704500",
    "15804635088801066627112286658528667863",
    "47900773653897532975424573841801950868",
    "61903495162840495413297841182224357302",
    "64965230448715138255436868736676957080",
    "140437624268579098892402619211385108102",
    "385138074324659930515764032090156988894",
    "68080471267160563549994905019891821935",
    "70843878096991246617298166383384985260",
    "37139736270746236208925022708250694896",
    "164638079624435307218178149277287414744",
    "176469829037000462856427940411428891864",
    "129111082249586758919710074718019647384",
    "1783063548588688153116995795572290282049",
    "1298341323926017126016259159128563624969",
    "150383753068814596569264868079480481094",
    "3714502462799217998678305421388049861",
    "128930257668633610949042071217647527954",
    "175545273167557629394653323801740030909",
    "1837487256702924366516621837105674076094",
    "1230671766775894976814489394344850389276",
    "97566299569839892074656028861613377837",
    "439022777647632696517945103495108037392",
    "53547560154313219454241083854661939141",
    "1055043272310861592713228670863657256034",
    "149201007125728463455320865149411692001",
    "61369440296427755426944493111244664876",
    "471677212117387738613976123950738790112",
    "596717226459156418513221677816795970108",
    "5731834383683152134719350346688847365",
    "51372523453683089364244340980133861262",
    "1515577191057560326117093121389230252184",
    "169382045895387326079929663684999712557",
    "105784042461548404615622384875082564775",
    "8896238559920380735332622633484699245",
    "167720725353303677441984078993999087147",
    "104367634591107546717821077127163354051",
    "349732893336648829317640041454262824981",
    "1625106790552262850118170050050630060723",
    "29034509350936080502926021963169411596",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "170281423934441608902372914597711355436",
    "146612017564224181584303574960223420416",
    "63085389524472853348886374617170044294",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "139907086782363519768211215911218405340",
    "181953690662554297912505335505865467275",
    "11698000759949897711048017399610553732",
    "262831349882779883815480941076479924039",
    "60834884350724321561045859704602865782",
    "128727327572675264427725351568831831402",
    "917723456268176447214599000684131241193",
    "112050202507687194710833208384567936327",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "124048927270173258543682139801948377007",
    "124028620612631852385986353149566562751",
    "16456396425023151945832698110530633855",
    "372191053885424303516575121587358574657",
    "64281686231455321691234880453326149333",
    "73764690079530187374092637895495043999",
    "121866230926415018332270093276707107239",
    "52131524192159307112338547729152425310",
    "30660665300176827444815792715306828317",
    "1436162929177886985111617736217739715982",
    "1670871865166106544517920089333181878250",
    "1161957769894127133012856511664916235439",
    "40565821135538727633031342089339166917",
    "19058764743854314419670517218317949449",
    "11944952013146774396880202319781194001",
    "440237838308738068717567069559718132006",
    "1427536526616347568511859223439081842037",
    "49486676450572692257520937044805320286",
    "82476936044483954104206241715140576745",
    "1627504595542798394711855078209690330045",
    "72256147068189123283044405215657222200",
    "124533073252305886797587827163267673576",
    "717317897984632901316617723476110950437",
    "36009038076239325528693182062306376233",
    "78265179659726465801678498072513002580",
    "44449201588339284438313402603788182389",
    "626044300636020285716536939610324726326",
    "733930768589517194912584879959743825090",
    "298884710962780778440604835530166814",
    "158236945417711760527078314662372348005",
    "1615785131695012781118107359759195982252",
    "1586936556493674667414681031916303119989",
    "1213241336815109722310271468032047462595",
    "518009338602374027910045087480564196389",
    "62757778936193616749016275922984220939",
    "144722220464990860279609151218431391570",
    "50268153562745199453444152232770393421",
    "86050674789736003825945519059478190170",
    "21899365262288413956629574192061165528",
    "147283009579998274218441518976402707224",
    "1728267306359390427710231557880587514071",
    "1155141442639584907211131897442555977117",
    "114860260178010826953126759960801723911",
    "125110441404295646173762618084122400301",
    "397678808048682830112841158286283402519",
    "165478318172635347186816907894802281263",
    "92005998086269722606437028357039395831",
    "181717373102152254895109628399379607332",
    "131565587963228383647279312131403441535",
    "1122964125348576637710752481624411592658",
    "1194961097562517860814664517081079458376",
    "32191265167754005348834888065032124489",
    "74117228064460308068477844042643886972",
    "253493680033796300410226743660802047383",
    "37278888682874586393748159596402247128",
    "258488004462981027810914919623471753455",
    "841344188694266590295617675180068548",
    "1259255667284971216911268326179082176166",
    "14791822738996556685435081871741680568",
    "23782049134231445886069829896450922209",
    "1529601798418681179016117865804679001492",
    "128398765141298140265495969286974493347",
    "1113225791885504624914429203804781783631",
    "67542121463528660637995622189688945747",
    "58894773764047579664056944414902475817",
    "4094636781019429345213520509980650251",
    "172734195572272454832813431093281159421",
    "126999623586445427412043568247277180098",
    "109371385280216630279483830461997447481",
    "1289744995046131004416691583044404676433",
    "948721434413566816513898708318431178539",
    "483033416222488130812077344515455104840",
    "16361609281132673814874098594146277797",
    "1402215960415350580613873974123448676537",
    "1054699114304908737011830985850819465296",
    "87939428955807673686027838603829456410",
    "47672539441842164771342608976601968881",
    "92436778868497791869763989121693788683",
    "22088878678923505746012913266394000328",
    "1312830356245743083712904935176137025355",
    "68527355879072987775488394988812200583",
    "1838094812346234465213272256766219193411",
    "1323699815779499288715137390922254560703",
    "374116998021920174116516072157904631672",
    "440816482485945841515447314887867562352",
    "57235346905361744817523966505024352511",
    "955869866233889986612522526881953993556",
    "6394088499522107434645856527569138231",
    "8812506527240650636772459687020015275",
    "1405863854914756547011645529786789245547",
    "105878805298064251281328267006715572416",
    "907377439821672286413857727237844849140",
    "1088232294858530192217029531727323979822",
    "683320997578289266616454728852356232270",
    "1202798695890932359116777118940617270373",
    "139970225734540393165428755631045813492",
    "13172899060955009117915176678682699075",
    "15039907262061880968972611654924237607",
    "228944993810112880013842486360111011110",
    "1476252183450068137110899093096789302765",
    "105398363169778652761894252871663363766",
    "63497200211831703554274553120847517023",
    "280133775636475637812335811211808216208",
    "129978819603546619493466437822444149370",
    "1508773653512704694540919786852289740",
    "254750187630407980110034678645695049576",
    "834078073126798639810226440806880283117",
    "879543598591726583811363902326698267760",
    "8787952082428538504365079471726452107",
    "646860655895371373715152403626083294930",
    "1751182092721409607066971085433427634",
    "1396369027985523187512983890317312644464",
    "82217186331112526329158372954156056404",
    "747156457449598790816736684951635660145",
    "177033107771472364374293399575552552454",
    "149438402777962170494779460137827600437",
    "116003191352895236935716644142521429105",
    "45381972001922168241039115176097203457",
    "112989397975222255532054380452996322405",
    "734748700356449319315300238482033757944",
    "56586361413793673417653620039252553370",
    "192903257417349624310389255189038584608"
  ]
}
