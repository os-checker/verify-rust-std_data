{
  "file": "core/src/fmt/num.rs",
  "name": "core::fmt::num::div_rem_1e16",
  "hash": "880347923830951464018056501778113268352",
  "hash_direct": "487432705397011645212139904199176432941",
  "src": "fn div_rem_1e16(n: u128) -> (u128, u64) {\n    const D: u128 = 1_0000_0000_0000_0000;\n    // The check inlines well with the caller flow.\n    if n < D {\n        return (0, n as u64);\n    }\n\n    // These constant values are computed with the CHOOSE_MULTIPLIER procedure\n    // from the Granlund & Montgomery paper, using N=128, prec=128 and d=1E16.\n    const M_HIGH: u128 = 76624777043294442917917351357515459181;\n    const SH_POST: u8 = 51;\n\n    let quot = n.widening_mul(M_HIGH).1 >> SH_POST;\n    let rem = n - quot * D;\n    (quot, rem as u64)\n}",
  "callees": [
    "515486415817055195118014195310921268556",
    "865650104295848903112749528189008460635",
    "56234286929832465845177810217708365466",
    "1680344847910503610811390711953062113319",
    "920980127064672019717947646353794366525",
    "237214894484340491810317590408953069357",
    "1280882188983045088011313959657552301821",
    "833383471550491847117525988933795166554",
    "167910853247077084511525459714317297900"
  ]
}
