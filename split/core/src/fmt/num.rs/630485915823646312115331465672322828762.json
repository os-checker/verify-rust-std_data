{
  "file": "core/src/fmt/num.rs",
  "name": "fmt::num::<impl u128>::format_into",
  "hash": "630485915823646312115331465672322828762",
  "hash_direct": "1316905172148810386414277123700161961386",
  "src": "pub fn format_into(self, buf: &mut NumBuffer<Self>) -> &str {\n        let diff = buf.capacity() - U128_MAX_DEC_N;\n        // FIXME: Once const generics are better, use `NumberBufferTrait::BUF_SIZE` as generic const\n        // for `fmt_u128_inner`.\n        //\n        // In the meantime, we have to use a slice starting at index 1 and add 1 to the returned\n        // offset to ensure the number is correctly generated at the end of the buffer.\n        // SAFETY: `diff` will always be between 0 and its initial value.\n        unsafe { self._fmt(buf.buf.get_unchecked_mut(diff..)) }\n    }",
  "callees": [
    "155146884437592745449279657258619050520",
    "165024729298027564035886293471449912605",
    "10939414106970862677193360346841567293",
    "1145650138279489223315575448589768813471",
    "1089602605458391005111614324673674570849",
    "171437284090069912846961494507797244676",
    "1122845743808954568315839891299563834211",
    "150822612462113642246381061213257675178",
    "258820287469578611817448591488600041899",
    "6962362284417680556415378392413733050",
    "28588117351228037033816481701749562121",
    "56064935532181582357217772644767711324",
    "1215867595331634964412092261842216784704",
    "96480950455274538863936471544432656148",
    "1424635015723676172711879731863681352571",
    "410853844061970365417688031527941106762",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "681465720115474298817558361040200202189",
    "111893148674317480745590608994062193214",
    "66864498598691340555271615596370346896",
    "174583527470119019351759393122367854049",
    "15281129090904038428498981268854200284",
    "24502394795559680767584204508227377419",
    "90771261734924938883465308637020449641",
    "507116607738930391111587036035165972673",
    "540564128152414607516220637571452425273",
    "1605633131122579720611961448336401474874",
    "899089149104620122910782754756910095497",
    "564177479688813429716564910718645657356",
    "126601631307930206616972114137702790273",
    "1142640662076761305948383857328923618",
    "28458177317181383215572604684214577331",
    "1710632016629987162711636985148461086855",
    "157526224548632931644224402393760490185",
    "366503061556370158810229951695642705038",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "429511501966379024610548772418614005336",
    "18036140156580546806629269073307822465",
    "155057288402083389555553266758858464823",
    "11119406790923360834756731176691512413",
    "1422107853223743167214810862639095078481",
    "794694008638894565610503689879218203131",
    "61711664538219620431974670811893739375",
    "98253406515198135092164211014980363661",
    "343942489170785946313945651402980657563",
    "21639280041443497202806099100564393988",
    "1589848299034012140817795713052852460003",
    "1153959874226978119913857890632071810994",
    "87977286206191110206643684053945734595",
    "84580457401506839910573102725714505987",
    "36990817497430174858508344623774643994",
    "60020754642282354823285669083003912494",
    "739520556846959085018120036998133255835"
  ]
}
