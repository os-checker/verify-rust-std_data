{
  "file": "core/src/fmt/num.rs",
  "name": "fmt::num::div_rem_1e16",
  "hash": "174302085048697978214413762393835295720",
  "hash_direct": "110844276951143460382804816396186920916",
  "src": "fn div_rem_1e16(n: u128) -> (u128, u64) {\n    const D: u128 = 1_0000_0000_0000_0000;\n    // The check inlines well with the caller flow.\n    if n < D {\n        return (0, n as u64);\n    }\n\n    // These constant values are computed with the CHOOSE_MULTIPLIER procedure\n    // from the Granlund & Montgomery paper, using N=128, prec=128 and d=1E16.\n    const M_HIGH: u128 = 76624777043294442917917351357515459181;\n    const SH_POST: u8 = 51;\n\n    let quot = n.widening_mul(M_HIGH).1 >> SH_POST;\n    let rem = n - quot * D;\n    (quot, rem as u64)\n}",
  "callees": [
    "1049863653024822663415096848776233585763",
    "56064935532181582357217772644767711324",
    "1215867595331634964412092261842216784704",
    "96480950455274538863936471544432656148",
    "1424635015723676172711879731863681352571",
    "241158160377170312612713914729750498491",
    "17848087583919573713734014073660267158",
    "137225128760155526151671631170232111377",
    "25753467031478257716949736687562054564"
  ]
}
