{
  "file": "core/src/fmt/num.rs",
  "name": "fmt::num::<impl fmt::LowerHex for u128>::fmt::MAX_DIG_N",
  "hash": "142479913486847000299727266853138398398",
  "hash_direct": "51780560701625828897458118768331090294",
  "src": "const MAX_DIG_N: usize = $Unsigned::MAX.ilog(BASE) as usize + 1;",
  "macro_backtrace": [
    {
      "callsite": "radix_integer! { fmt::LowerHex for $Signed and $Unsigned, \"0x\", b\"0123456789abcdef\" }",
      "defsite": "macro_rules! radix_integer {\n    (fmt::$Trait:ident for $Signed:ident and $Unsigned:ident, $prefix:literal, $dig_tab:literal) => {\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl fmt::$Trait for $Unsigned {\n            /// Format unsigned integers in the radix.\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                // Check macro arguments at compile time.\n                const {\n                    assert!($Unsigned::MIN == 0, \"need unsigned\");\n                    assert!($dig_tab.is_ascii(), \"need single-byte entries\");\n                }\n\n                // ASCII digits in ascending order are used as a lookup table.\n                const DIG_TAB: &[u8] = $dig_tab;\n                const BASE: $Unsigned = DIG_TAB.len() as $Unsigned;\n                const MAX_DIG_N: usize = $Unsigned::MAX.ilog(BASE) as usize + 1;\n\n                // Buffer digits of self with right alignment.\n                let mut buf = [MaybeUninit::<u8>::uninit(); MAX_DIG_N];\n                // Count the number of bytes in buf that are not initialized.\n                let mut offset = buf.len();\n\n                // Accumulate each digit of the number from the least\n                // significant to the most significant figure.\n                let mut remain = *self;\n                loop {\n                    let digit = remain % BASE;\n                    remain /= BASE;\n\n                    offset -= 1;\n                    // SAFETY: `remain` will reach 0 and we will break before `offset` wraps\n                    unsafe { core::hint::assert_unchecked(offset < buf.len()) }\n                    buf[offset].write(DIG_TAB[digit as usize]);\n                    if remain == 0 {\n                        break;\n                    }\n                }\n\n                // SAFETY: Starting from `offset`, all elements of the slice have been set.\n                let digits = unsafe { slice_buffer_to_str(&buf, offset) };\n                f.pad_integral(true, $prefix, digits)\n            }\n        }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl fmt::$Trait for $Signed {\n            /// Format signed integers in the twoâ€™s-complement form.\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                fmt::$Trait::fmt(&self.cast_unsigned(), f)\n            }\n        }\n    };\n}"
    },
    {
      "callsite": "radix_integers! { i128, u128 }",
      "defsite": "macro_rules! radix_integers {\n    ($Signed:ident, $Unsigned:ident) => {\n        radix_integer! { fmt::Binary   for $Signed and $Unsigned, \"0b\", b\"01\" }\n        radix_integer! { fmt::Octal    for $Signed and $Unsigned, \"0o\", b\"01234567\" }\n        radix_integer! { fmt::LowerHex for $Signed and $Unsigned, \"0x\", b\"0123456789abcdef\" }\n        radix_integer! { fmt::UpperHex for $Signed and $Unsigned, \"0x\", b\"0123456789ABCDEF\" }\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "84552087836053954516093661060681195275",
    "161471355705627237862978749312689296849",
    "177450053108937244256024058949791559633",
    "50186211171463953727684864518369695334",
    "1268824783546043517015463399488275120996",
    "66990443953145658003996624341340406115",
    "113105628410323550903289764020827107190",
    "8413912721582228778835144920444015828",
    "304534819715815640710284249928759909406",
    "135604424792153684877188191997980443406",
    "373307632430390614718200683597725388687",
    "174948389658366639395461437428986350606",
    "1416860906964928852111231115468699847647",
    "460070152440720581113986535049791602111",
    "1448563383508806316217204433235266829439",
    "420586265984200183116001123201858397241",
    "142595290955389571022680567355423000431",
    "172379679931082981411560325726856523363",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960"
  ]
}
