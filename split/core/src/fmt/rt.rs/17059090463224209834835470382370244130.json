{
  "file": "core/src/fmt/rt.rs",
  "name": "fmt::rt::Argument::<'_>::fmt",
  "hash": "17059090463224209834835470382370244130",
  "hash_direct": "91652476204110300088740715084767959741",
  "src": "pub(super) unsafe fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        match self.ty {\n            // SAFETY:\n            // Because of the invariant that if `formatter` had the type\n            // `fn(&T, _) -> _` then `value` has type `&'b T` where `'b` is\n            // the lifetime of the `ArgumentType`, and because references\n            // and `NonNull` are ABI-compatible, this is completely equivalent\n            // to calling the original function passed to `new` with the\n            // original reference, which is sound.\n            ArgumentType::Placeholder { formatter, value, .. } => unsafe { formatter(value, f) },\n            // SAFETY: the caller promised this.\n            ArgumentType::Count(_) => unsafe { unreachable_unchecked() },\n        }\n    }",
  "callees": [
    "47323665595455568617290020941376774286",
    "25768524018977866517055903022448790318",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "550150895960312460312176584159342455723",
    "399232661239117480517401994520839366833"
  ]
}
