{
  "file": "core/src/intrinsics/mod.rs",
  "name": "panicking::panic_nounwind_fmt::compiletime",
  "hash": "250173051179597568513390131412708745286",
  "hash_direct": "180741248426734728344400673454694833637",
  "src": "const fn compiletime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            // Don't warn if one of the arguments is unused.\n            $(let _ = $arg;)*\n\n            $compiletime\n        }",
  "macro_backtrace": [
    {
      "callsite": "$crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $val),* } $(-> $ret)? :\n            #[noinline]\n            if const\n                #[inline] // prevent codegen on this function\n                $(#[$compiletime_attr])*\n                $compiletime\n            else\n                #[inline] // avoid the overhead of an extra fn call\n                $(#[$runtime_attr])*\n                $runtime\n        )",
      "defsite": "pub(crate) macro const_eval_select {\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        // Use the `noinline` arm, after adding explicit `inline` attributes\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $val),* } $(-> $ret)? :\n            #[noinline]\n            if const\n                #[inline] // prevent codegen on this function\n                $(#[$compiletime_attr])*\n                $compiletime\n            else\n                #[inline] // avoid the overhead of an extra fn call\n                $(#[$runtime_attr])*\n                $runtime\n        )\n    },\n    // With a leading #[noinline], we don't add inline attributes\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        #[noinline]\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {{\n        $(#[$runtime_attr])*\n        fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            $runtime\n        }\n\n        $(#[$compiletime_attr])*\n        const fn compiletime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            // Don't warn if one of the arguments is unused.\n            $(let _ = $arg;)*\n\n            $compiletime\n        }\n\n        const_eval_select(($($val,)*), compiletime, runtime)\n    }},\n    // We support leaving away the `val` expressions for *all* arguments\n    // (but not for *some* arguments, that's too tricky).\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $arg),* } $(-> $ret)? :\n            if const\n                $(#[$compiletime_attr])* $compiletime\n            else\n                $(#[$runtime_attr])* $runtime\n        )\n    },\n}"
    },
    {
      "callsite": "$crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $arg),* } $(-> $ret)? :\n            if const\n                $(#[$compiletime_attr])* $compiletime\n            else\n                $(#[$runtime_attr])* $runtime\n        )",
      "defsite": "pub(crate) macro const_eval_select {\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        // Use the `noinline` arm, after adding explicit `inline` attributes\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $val),* } $(-> $ret)? :\n            #[noinline]\n            if const\n                #[inline] // prevent codegen on this function\n                $(#[$compiletime_attr])*\n                $compiletime\n            else\n                #[inline] // avoid the overhead of an extra fn call\n                $(#[$runtime_attr])*\n                $runtime\n        )\n    },\n    // With a leading #[noinline], we don't add inline attributes\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        #[noinline]\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {{\n        $(#[$runtime_attr])*\n        fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            $runtime\n        }\n\n        $(#[$compiletime_attr])*\n        const fn compiletime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            // Don't warn if one of the arguments is unused.\n            $(let _ = $arg;)*\n\n            $compiletime\n        }\n\n        const_eval_select(($($val,)*), compiletime, runtime)\n    }},\n    // We support leaving away the `val` expressions for *all* arguments\n    // (but not for *some* arguments, that's too tricky).\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $arg),* } $(-> $ret)? :\n            if const\n                $(#[$compiletime_attr])* $compiletime\n            else\n                $(#[$runtime_attr])* $runtime\n        )\n    },\n}"
    },
    {
      "callsite": "const_eval_select!(\n        @capture { fmt: fmt::Arguments<'_>, force_no_backtrace: bool } -> !:\n        if const #[track_caller] {\n            // We don't unwind anyway at compile-time so we can call the regular `panic_fmt`.\n            panic_fmt(fmt)\n        } else #[track_caller] {\n            if cfg!(feature = \"panic_immediate_abort\") {\n                super::intrinsics::abort()\n            }\n\n            // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n            // that gets resolved to the `#[panic_handler]` function.\n            unsafe extern \"Rust\" {\n                #[lang = \"panic_impl\"]\n                fn panic_impl(pi: &PanicInfo<'_>) -> !;\n            }\n\n            // PanicInfo with the `can_unwind` flag set to false forces an abort.\n            let pi = PanicInfo::new(\n                &fmt,\n                Location::caller(),\n                /* can_unwind */ false,\n                force_no_backtrace,\n            );\n\n            // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n            unsafe { panic_impl(&pi) }\n        }\n    )",
      "defsite": "pub(crate) macro const_eval_select {\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        // Use the `noinline` arm, after adding explicit `inline` attributes\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $val),* } $(-> $ret)? :\n            #[noinline]\n            if const\n                #[inline] // prevent codegen on this function\n                $(#[$compiletime_attr])*\n                $compiletime\n            else\n                #[inline] // avoid the overhead of an extra fn call\n                $(#[$runtime_attr])*\n                $runtime\n        )\n    },\n    // With a leading #[noinline], we don't add inline attributes\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        #[noinline]\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {{\n        $(#[$runtime_attr])*\n        fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            $runtime\n        }\n\n        $(#[$compiletime_attr])*\n        const fn compiletime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            // Don't warn if one of the arguments is unused.\n            $(let _ = $arg;)*\n\n            $compiletime\n        }\n\n        const_eval_select(($($val,)*), compiletime, runtime)\n    }},\n    // We support leaving away the `val` expressions for *all* arguments\n    // (but not for *some* arguments, that's too tricky).\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $arg),* } $(-> $ret)? :\n            if const\n                $(#[$compiletime_attr])* $compiletime\n            else\n                $(#[$runtime_attr])* $runtime\n        )\n    },\n}"
    }
  ],
  "callees": [
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810"
  ]
}
