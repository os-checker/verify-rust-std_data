{
  "file": "core/src/intrinsics/mod.rs",
  "name": "char::methods::encode_utf16_raw::do_panic::compiletime",
  "hash": "159049704386964953973249616754098926853",
  "hash_direct": "1590750046818532747414508558922718161514",
  "src": "const fn compiletime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            // Don't warn if one of the arguments is unused.\n            $(let _ = $arg;)*\n\n            $compiletime\n        }",
  "macro_backtrace": [
    {
      "callsite": "$crate::intrinsics::const_eval_select!(\n                @capture { $($arg: $ty = $arg),* } -> !:\n                #[noinline]\n                if const #[track_caller] #[inline] { // Inline this, to prevent codegen\n                    $crate::panic!($const_msg)\n                } else #[track_caller] { // Do not inline this, it makes perf worse\n                    $crate::panic!($runtime_msg)\n                }\n            )",
      "defsite": "pub(crate) macro const_eval_select {\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        // Use the `noinline` arm, after adding explicit `inline` attributes\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $val),* } $(-> $ret)? :\n            #[noinline]\n            if const\n                #[inline] // prevent codegen on this function\n                $(#[$compiletime_attr])*\n                $compiletime\n            else\n                #[inline] // avoid the overhead of an extra fn call\n                $(#[$runtime_attr])*\n                $runtime\n        )\n    },\n    // With a leading #[noinline], we don't add inline attributes\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        #[noinline]\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {{\n        $(#[$runtime_attr])*\n        fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            $runtime\n        }\n\n        $(#[$compiletime_attr])*\n        const fn compiletime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            // Don't warn if one of the arguments is unused.\n            $(let _ = $arg;)*\n\n            $compiletime\n        }\n\n        const_eval_select(($($val,)*), compiletime, runtime)\n    }},\n    // We support leaving away the `val` expressions for *all* arguments\n    // (but not for *some* arguments, that's too tricky).\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $arg),* } $(-> $ret)? :\n            if const\n                $(#[$compiletime_attr])* $compiletime\n            else\n                $(#[$runtime_attr])* $runtime\n        )\n    },\n}"
    },
    {
      "callsite": "const_panic!(\n                \"encode_utf16: buffer does not have enough bytes to encode code point\",\n                \"encode_utf16: need {len} bytes to encode U+{code:04X} but buffer has just {dst_len}\",\n                code: u32 = code,\n                len: usize = len,\n                dst_len: usize = dst.len(),\n            )",
      "defsite": "pub macro const_panic {\n    ($const_msg:literal, $runtime_msg:literal, $($arg:ident : $ty:ty = $val:expr),* $(,)?) => {{\n        // Wrap call to `const_eval_select` in a function so that we can\n        // add the `rustc_allow_const_fn_unstable`. This is okay to do\n        // because both variants will panic, just with different messages.\n        #[rustc_allow_const_fn_unstable(const_eval_select)]\n        #[inline(always)] // inline the wrapper\n        #[track_caller]\n        const fn do_panic($($arg: $ty),*) -> ! {\n            $crate::intrinsics::const_eval_select!(\n                @capture { $($arg: $ty = $arg),* } -> !:\n                #[noinline]\n                if const #[track_caller] #[inline] { // Inline this, to prevent codegen\n                    $crate::panic!($const_msg)\n                } else #[track_caller] { // Do not inline this, it makes perf worse\n                    $crate::panic!($runtime_msg)\n                }\n            )\n        }\n\n        do_panic($($val),*)\n    }},\n    // We support leaving away the `val` expressions for *all* arguments\n    // (but not for *some* arguments, that's too tricky).\n    ($const_msg:literal, $runtime_msg:literal, $($arg:ident : $ty:ty),* $(,)?) => {\n        $crate::panic::const_panic!(\n            $const_msg,\n            $runtime_msg,\n            $($arg: $ty = $arg),*\n        )\n    },\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810"
  ]
}
