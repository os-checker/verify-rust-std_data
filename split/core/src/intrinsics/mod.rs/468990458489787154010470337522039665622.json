{
  "file": "core/src/intrinsics/mod.rs",
  "name": "slice::ascii::is_ascii::runtime",
  "hash": "468990458489787154010470337522039665622",
  "hash_direct": "156763409165013230219986796798804740014",
  "src": "fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            $runtime\n        }",
  "macro_backtrace": [
    {
      "callsite": "$crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $val),* } $(-> $ret)? :\n            #[noinline]\n            if const\n                #[inline] // prevent codegen on this function\n                $(#[$compiletime_attr])*\n                $compiletime\n            else\n                #[inline] // avoid the overhead of an extra fn call\n                $(#[$runtime_attr])*\n                $runtime\n        )",
      "defsite": "pub(crate) macro const_eval_select {\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        // Use the `noinline` arm, after adding explicit `inline` attributes\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $val),* } $(-> $ret)? :\n            #[noinline]\n            if const\n                #[inline] // prevent codegen on this function\n                $(#[$compiletime_attr])*\n                $compiletime\n            else\n                #[inline] // avoid the overhead of an extra fn call\n                $(#[$runtime_attr])*\n                $runtime\n        )\n    },\n    // With a leading #[noinline], we don't add inline attributes\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        #[noinline]\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {{\n        $(#[$runtime_attr])*\n        fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            $runtime\n        }\n\n        $(#[$compiletime_attr])*\n        const fn compiletime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            // Don't warn if one of the arguments is unused.\n            $(let _ = $arg;)*\n\n            $compiletime\n        }\n\n        const_eval_select(($($val,)*), compiletime, runtime)\n    }},\n    // We support leaving away the `val` expressions for *all* arguments\n    // (but not for *some* arguments, that's too tricky).\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $arg),* } $(-> $ret)? :\n            if const\n                $(#[$compiletime_attr])* $compiletime\n            else\n                $(#[$runtime_attr])* $runtime\n        )\n    },\n}"
    },
    {
      "callsite": "$crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $arg),* } $(-> $ret)? :\n            if const\n                $(#[$compiletime_attr])* $compiletime\n            else\n                $(#[$runtime_attr])* $runtime\n        )",
      "defsite": "pub(crate) macro const_eval_select {\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        // Use the `noinline` arm, after adding explicit `inline` attributes\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $val),* } $(-> $ret)? :\n            #[noinline]\n            if const\n                #[inline] // prevent codegen on this function\n                $(#[$compiletime_attr])*\n                $compiletime\n            else\n                #[inline] // avoid the overhead of an extra fn call\n                $(#[$runtime_attr])*\n                $runtime\n        )\n    },\n    // With a leading #[noinline], we don't add inline attributes\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        #[noinline]\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {{\n        $(#[$runtime_attr])*\n        fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            $runtime\n        }\n\n        $(#[$compiletime_attr])*\n        const fn compiletime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            // Don't warn if one of the arguments is unused.\n            $(let _ = $arg;)*\n\n            $compiletime\n        }\n\n        const_eval_select(($($val,)*), compiletime, runtime)\n    }},\n    // We support leaving away the `val` expressions for *all* arguments\n    // (but not for *some* arguments, that's too tricky).\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $arg),* } $(-> $ret)? :\n            if const\n                $(#[$compiletime_attr])* $compiletime\n            else\n                $(#[$runtime_attr])* $runtime\n        )\n    },\n}"
    },
    {
      "callsite": "const_eval_select!(\n        @capture { s: &[u8] } -> bool:\n        if const {\n            is_ascii_simple(s)\n        } else {\n            /// Returns `true` if any byte in the word `v` is nonascii (>= 128). Snarfed\n            /// from `../str/mod.rs`, which does something similar for utf8 validation.\n            const fn contains_nonascii(v: usize) -> bool {\n                const NONASCII_MASK: usize = usize::repeat_u8(0x80);\n                (NONASCII_MASK & v) != 0\n            }\n\n            const USIZE_SIZE: usize = size_of::<usize>();\n\n            let len = s.len();\n            let align_offset = s.as_ptr().align_offset(USIZE_SIZE);\n\n            // If we wouldn't gain anything from the word-at-a-time implementation, fall\n            // back to a scalar loop.\n            //\n            // We also do this for architectures where `size_of::<usize>()` isn't\n            // sufficient alignment for `usize`, because it's a weird edge case.\n            if len < USIZE_SIZE || len < align_offset || USIZE_SIZE < align_of::<usize>() {\n                return is_ascii_simple(s);\n            }\n\n            // We always read the first word unaligned, which means `align_offset` is\n            // 0, we'd read the same value again for the aligned read.\n            let offset_to_aligned = if align_offset == 0 { USIZE_SIZE } else { align_offset };\n\n            let start = s.as_ptr();\n            // SAFETY: We verify `len < USIZE_SIZE` above.\n            let first_word = unsafe { (start as *const usize).read_unaligned() };\n\n            if contains_nonascii(first_word) {\n                return false;\n            }\n            // We checked this above, somewhat implicitly. Note that `offset_to_aligned`\n            // is either `align_offset` or `USIZE_SIZE`, both of are explicitly checked\n            // above.\n            debug_assert!(offset_to_aligned <= len);\n\n            // SAFETY: word_ptr is the (properly aligned) usize ptr we use to read the\n            // middle chunk of the slice.\n            let mut word_ptr = unsafe { start.add(offset_to_aligned) as *const usize };\n\n            // `byte_pos` is the byte index of `word_ptr`, used for loop end checks.\n            let mut byte_pos = offset_to_aligned;\n\n            // Paranoia check about alignment, since we're about to do a bunch of\n            // unaligned loads. In practice this should be impossible barring a bug in\n            // `align_offset` though.\n            // While this method is allowed to spuriously fail in CTFE, if it doesn't\n            // have alignment information it should have given a `usize::MAX` for\n            // `align_offset` earlier, sending things through the scalar path instead of\n            // this one, so this check should pass if it's reachable.\n            debug_assert!(word_ptr.is_aligned_to(align_of::<usize>()));\n\n            // Read subsequent words until the last aligned word, excluding the last\n            // aligned word by itself to be done in tail check later, to ensure that\n            // tail is always one `usize` at most to extra branch `byte_pos == len`.\n            #[safety::loop_invariant(byte_pos <= len\n                                    && byte_pos >= offset_to_aligned\n                                    && word_ptr.addr() >= start.addr() + offset_to_aligned\n                                    && byte_pos == word_ptr.addr() - start.addr())]\n            while byte_pos < len - USIZE_SIZE {\n                // Sanity check that the read is in bounds\n                debug_assert!(byte_pos + USIZE_SIZE <= len);\n                // And that our assumptions about `byte_pos` hold.\n                debug_assert!(word_ptr.cast::<u8>() == start.wrapping_add(byte_pos));\n\n                // SAFETY: We know `word_ptr` is properly aligned (because of\n                // `align_offset`), and we know that we have enough bytes between `word_ptr` and the end\n                let word = unsafe { word_ptr.read() };\n                if contains_nonascii(word) {\n                    return false;\n                }\n\n                byte_pos += USIZE_SIZE;\n                // SAFETY: We know that `byte_pos <= len - USIZE_SIZE`, which means that\n                // after this `add`, `word_ptr` will be at most one-past-the-end.\n                word_ptr = unsafe { word_ptr.add(1) };\n            }\n\n            // Sanity check to ensure there really is only one `usize` left. This should\n            // be guaranteed by our loop condition.\n            debug_assert!(byte_pos <= len && len - byte_pos <= USIZE_SIZE);\n\n            // SAFETY: This relies on `len >= USIZE_SIZE`, which we check at the start.\n            let last_word = unsafe { (start.add(len - USIZE_SIZE) as *const usize).read_unaligned() };\n\n            !contains_nonascii(last_word)\n        }\n    )",
      "defsite": "pub(crate) macro const_eval_select {\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        // Use the `noinline` arm, after adding explicit `inline` attributes\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $val),* } $(-> $ret)? :\n            #[noinline]\n            if const\n                #[inline] // prevent codegen on this function\n                $(#[$compiletime_attr])*\n                $compiletime\n            else\n                #[inline] // avoid the overhead of an extra fn call\n                $(#[$runtime_attr])*\n                $runtime\n        )\n    },\n    // With a leading #[noinline], we don't add inline attributes\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        #[noinline]\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {{\n        $(#[$runtime_attr])*\n        fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            $runtime\n        }\n\n        $(#[$compiletime_attr])*\n        const fn compiletime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            // Don't warn if one of the arguments is unused.\n            $(let _ = $arg;)*\n\n            $compiletime\n        }\n\n        const_eval_select(($($val,)*), compiletime, runtime)\n    }},\n    // We support leaving away the `val` expressions for *all* arguments\n    // (but not for *some* arguments, that's too tricky).\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $arg),* } $(-> $ret)? :\n            if const\n                $(#[$compiletime_attr])* $compiletime\n            else\n                $(#[$runtime_attr])* $runtime\n        )\n    },\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "154868915780749051023790251584872206921",
    "1819947172139969375117075366088933977903",
    "74237070139572734645919793489994849435",
    "131222986955785330327440861924041509492",
    "38217196742947992835679479997123307043",
    "1342521228831833354715461413551686205925",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "824698057860634039216667043292814384158",
    "145260583857546744352679364306705014963",
    "141489593237085181002614656531811257408",
    "1173385422516551927711311891490318803699",
    "62587016874313131693329047355057219344",
    "758800371710587469314073968176229651883",
    "124679516092357812428249133337169351543",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1068637569658805762318411432081459704427",
    "153492746833767641913665382585991399102",
    "187482952606822645712460029589708661523",
    "1523707018797761236613836373921741997156",
    "126818845945534382313624863669169238336",
    "813578382545998277312366744418950688761",
    "3158087186225067104207623212949621094",
    "57678861643322857944194165102718529863",
    "594398967705273052918318531949127567864",
    "172590953658237452717460291587113135731",
    "72831492073099224595472311669935434925",
    "154114519110800937159065915265401633592",
    "1618241054506692736412506772334197899706",
    "161782132043980572125825408843369828524",
    "167934086960411180903985257275635548275",
    "108552149900633290919250115311635650035",
    "31656414362767519921773019768940498677",
    "148582739576724500918539485428619977857",
    "135682418179342932077291083091001581439",
    "159833986241638017215846691414292743759",
    "781231686659779181411439904165139827836",
    "47822370175813177448723454097252028703",
    "497499364745128359314402117207900903418",
    "1006928117247909106515604664996585110540",
    "48269828393251912102754553129094534608",
    "74111286315405054421392461884745781298",
    "739520556846959085018120036998133255835",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934",
    "430944441469681173516867222861439884233"
  ]
}
