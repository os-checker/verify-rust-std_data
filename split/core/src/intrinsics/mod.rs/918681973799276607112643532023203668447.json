{
  "file": "core/src/intrinsics/mod.rs",
  "name": "slice::ascii::is_ascii::runtime",
  "hash": "918681973799276607112643532023203668447",
  "hash_direct": "156763409165013230219986796798804740014",
  "src": "fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            $runtime\n        }",
  "macro_backtrace": [
    {
      "callsite": "$crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $val),* } $(-> $ret)? :\n            #[noinline]\n            if const\n                #[inline] // prevent codegen on this function\n                $(#[$compiletime_attr])*\n                $compiletime\n            else\n                #[inline] // avoid the overhead of an extra fn call\n                $(#[$runtime_attr])*\n                $runtime\n        )",
      "defsite": "pub(crate) macro const_eval_select {\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        // Use the `noinline` arm, after adding explicit `inline` attributes\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $val),* } $(-> $ret)? :\n            #[noinline]\n            if const\n                #[inline] // prevent codegen on this function\n                $(#[$compiletime_attr])*\n                $compiletime\n            else\n                #[inline] // avoid the overhead of an extra fn call\n                $(#[$runtime_attr])*\n                $runtime\n        )\n    },\n    // With a leading #[noinline], we don't add inline attributes\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        #[noinline]\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {{\n        $(#[$runtime_attr])*\n        fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            $runtime\n        }\n\n        $(#[$compiletime_attr])*\n        const fn compiletime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            // Don't warn if one of the arguments is unused.\n            $(let _ = $arg;)*\n\n            $compiletime\n        }\n\n        const_eval_select(($($val,)*), compiletime, runtime)\n    }},\n    // We support leaving away the `val` expressions for *all* arguments\n    // (but not for *some* arguments, that's too tricky).\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $arg),* } $(-> $ret)? :\n            if const\n                $(#[$compiletime_attr])* $compiletime\n            else\n                $(#[$runtime_attr])* $runtime\n        )\n    },\n}"
    },
    {
      "callsite": "$crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $arg),* } $(-> $ret)? :\n            if const\n                $(#[$compiletime_attr])* $compiletime\n            else\n                $(#[$runtime_attr])* $runtime\n        )",
      "defsite": "pub(crate) macro const_eval_select {\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        // Use the `noinline` arm, after adding explicit `inline` attributes\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $val),* } $(-> $ret)? :\n            #[noinline]\n            if const\n                #[inline] // prevent codegen on this function\n                $(#[$compiletime_attr])*\n                $compiletime\n            else\n                #[inline] // avoid the overhead of an extra fn call\n                $(#[$runtime_attr])*\n                $runtime\n        )\n    },\n    // With a leading #[noinline], we don't add inline attributes\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        #[noinline]\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {{\n        $(#[$runtime_attr])*\n        fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            $runtime\n        }\n\n        $(#[$compiletime_attr])*\n        const fn compiletime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            // Don't warn if one of the arguments is unused.\n            $(let _ = $arg;)*\n\n            $compiletime\n        }\n\n        const_eval_select(($($val,)*), compiletime, runtime)\n    }},\n    // We support leaving away the `val` expressions for *all* arguments\n    // (but not for *some* arguments, that's too tricky).\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $arg),* } $(-> $ret)? :\n            if const\n                $(#[$compiletime_attr])* $compiletime\n            else\n                $(#[$runtime_attr])* $runtime\n        )\n    },\n}"
    },
    {
      "callsite": "const_eval_select!(\n        @capture { s: &[u8] } -> bool:\n        if const {\n            is_ascii_simple(s)\n        } else {\n            /// Returns `true` if any byte in the word `v` is nonascii (>= 128). Snarfed\n            /// from `../str/mod.rs`, which does something similar for utf8 validation.\n            const fn contains_nonascii(v: usize) -> bool {\n                const NONASCII_MASK: usize = usize::repeat_u8(0x80);\n                (NONASCII_MASK & v) != 0\n            }\n\n            const USIZE_SIZE: usize = size_of::<usize>();\n\n            let len = s.len();\n            let align_offset = s.as_ptr().align_offset(USIZE_SIZE);\n\n            // If we wouldn't gain anything from the word-at-a-time implementation, fall\n            // back to a scalar loop.\n            //\n            // We also do this for architectures where `size_of::<usize>()` isn't\n            // sufficient alignment for `usize`, because it's a weird edge case.\n            if len < USIZE_SIZE || len < align_offset || USIZE_SIZE < align_of::<usize>() {\n                return is_ascii_simple(s);\n            }\n\n            // We always read the first word unaligned, which means `align_offset` is\n            // 0, we'd read the same value again for the aligned read.\n            let offset_to_aligned = if align_offset == 0 { USIZE_SIZE } else { align_offset };\n\n            let start = s.as_ptr();\n            // SAFETY: We verify `len < USIZE_SIZE` above.\n            let first_word = unsafe { (start as *const usize).read_unaligned() };\n\n            if contains_nonascii(first_word) {\n                return false;\n            }\n            // We checked this above, somewhat implicitly. Note that `offset_to_aligned`\n            // is either `align_offset` or `USIZE_SIZE`, both of are explicitly checked\n            // above.\n            debug_assert!(offset_to_aligned <= len);\n\n            // SAFETY: word_ptr is the (properly aligned) usize ptr we use to read the\n            // middle chunk of the slice.\n            let mut word_ptr = unsafe { start.add(offset_to_aligned) as *const usize };\n\n            // `byte_pos` is the byte index of `word_ptr`, used for loop end checks.\n            let mut byte_pos = offset_to_aligned;\n\n            // Paranoia check about alignment, since we're about to do a bunch of\n            // unaligned loads. In practice this should be impossible barring a bug in\n            // `align_offset` though.\n            // While this method is allowed to spuriously fail in CTFE, if it doesn't\n            // have alignment information it should have given a `usize::MAX` for\n            // `align_offset` earlier, sending things through the scalar path instead of\n            // this one, so this check should pass if it's reachable.\n            debug_assert!(word_ptr.is_aligned_to(align_of::<usize>()));\n\n            // Read subsequent words until the last aligned word, excluding the last\n            // aligned word by itself to be done in tail check later, to ensure that\n            // tail is always one `usize` at most to extra branch `byte_pos == len`.\n            #[safety::loop_invariant(byte_pos <= len\n                                    && byte_pos >= offset_to_aligned\n                                    && word_ptr.addr() >= start.addr() + offset_to_aligned\n                                    && byte_pos == word_ptr.addr() - start.addr())]\n            while byte_pos < len - USIZE_SIZE {\n                // Sanity check that the read is in bounds\n                debug_assert!(byte_pos + USIZE_SIZE <= len);\n                // And that our assumptions about `byte_pos` hold.\n                debug_assert!(word_ptr.cast::<u8>() == start.wrapping_add(byte_pos));\n\n                // SAFETY: We know `word_ptr` is properly aligned (because of\n                // `align_offset`), and we know that we have enough bytes between `word_ptr` and the end\n                let word = unsafe { word_ptr.read() };\n                if contains_nonascii(word) {\n                    return false;\n                }\n\n                byte_pos += USIZE_SIZE;\n                // SAFETY: We know that `byte_pos <= len - USIZE_SIZE`, which means that\n                // after this `add`, `word_ptr` will be at most one-past-the-end.\n                word_ptr = unsafe { word_ptr.add(1) };\n            }\n\n            // Sanity check to ensure there really is only one `usize` left. This should\n            // be guaranteed by our loop condition.\n            debug_assert!(byte_pos <= len && len - byte_pos <= USIZE_SIZE);\n\n            // SAFETY: This relies on `len >= USIZE_SIZE`, which we check at the start.\n            let last_word = unsafe { (start.add(len - USIZE_SIZE) as *const usize).read_unaligned() };\n\n            !contains_nonascii(last_word)\n        }\n    )",
      "defsite": "pub(crate) macro const_eval_select {\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        // Use the `noinline` arm, after adding explicit `inline` attributes\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $val),* } $(-> $ret)? :\n            #[noinline]\n            if const\n                #[inline] // prevent codegen on this function\n                $(#[$compiletime_attr])*\n                $compiletime\n            else\n                #[inline] // avoid the overhead of an extra fn call\n                $(#[$runtime_attr])*\n                $runtime\n        )\n    },\n    // With a leading #[noinline], we don't add inline attributes\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty = $val:expr),* $(,)? } $( -> $ret:ty )? :\n        #[noinline]\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {{\n        $(#[$runtime_attr])*\n        fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            $runtime\n        }\n\n        $(#[$compiletime_attr])*\n        const fn compiletime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {\n            // Don't warn if one of the arguments is unused.\n            $(let _ = $arg;)*\n\n            $compiletime\n        }\n\n        const_eval_select(($($val,)*), compiletime, runtime)\n    }},\n    // We support leaving away the `val` expressions for *all* arguments\n    // (but not for *some* arguments, that's too tricky).\n    (\n        @capture$([$($binders:tt)*])? { $($arg:ident : $ty:ty),* $(,)? } $( -> $ret:ty )? :\n        if const\n            $(#[$compiletime_attr:meta])* $compiletime:block\n        else\n            $(#[$runtime_attr:meta])* $runtime:block\n    ) => {\n        $crate::intrinsics::const_eval_select!(\n            @capture$([$($binders)*])? { $($arg : $ty = $arg),* } $(-> $ret)? :\n            if const\n                $(#[$compiletime_attr])* $compiletime\n            else\n                $(#[$runtime_attr])* $runtime\n        )\n    },\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "161225022469363908823200354701136905531",
    "102189070583536888521073139681085973390",
    "164434928084716863346001339216522172725",
    "18074365359782007351559840591148593421",
    "168545836479171427075036933182194130275",
    "1245138925531671967011772485621443291799",
    "1712898201300478840215074793236064467963",
    "1067675883129992420314174327751912045205",
    "79307503347131170578315604022567527135",
    "1160150031813070275716801291559951969968",
    "45465200458951020712268855471874148461",
    "10276831356989197177291225683156882265",
    "145583995108105043133401862026582368143",
    "54605058554859736136630060697047510881",
    "8850644696306119287964523545649044939",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "380262551218047276514654482281297551654",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "53398805961609338523376489634073401615",
    "102887121523905452179262747329207775596",
    "703663108277374327010040438608357482834",
    "18025038300022165797237903038339257643",
    "1100495660517602822510660091708953776518",
    "135504866322984926684773548751465922974",
    "9967240457479057389968263901254034335",
    "104831405656903467145249333363974848645",
    "166731958795390711014401438738375660172",
    "170643549057433678244294044399486155477",
    "1788767429805974375811922794362527318527",
    "438698456639375485410384937823100076053",
    "92880896475004770282622108900229659760",
    "52547000031721925195102398144411137140",
    "6920580184232348336779953785783275216",
    "10280076113730517359836576566793155285",
    "94774452442185535288317545443977520870",
    "1412396542820481544111291621418681240082",
    "694208858462206890312360984825840920336",
    "94487055153087372816397002785466438610",
    "33019420696780007252062060185713614901",
    "156130332443363785142369276941490088427",
    "806886716273422490012922041462466388021",
    "7839859953712079114640771271960005865",
    "153999075255816246604435272140943255557",
    "48548664629730829953422984265893277498",
    "399232661239117480517401994520839366833",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723",
    "15859584444614920947579563356650829639"
  ]
}
