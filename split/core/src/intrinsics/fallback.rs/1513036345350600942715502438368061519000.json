{
  "file": "core/src/intrinsics/fallback.rs",
  "name": "<u16 as intrinsics::fallback::CarryingMulAdd>::carrying_mul_add",
  "hash": "1513036345350600942715502438368061519000",
  "hash_direct": "44477614628947108435931815340164057901",
  "src": "fn carrying_mul_add(self, a: Self, b: Self, c: Self) -> ($u, $t) {\n                let wide = (self as $w) * (a as $w) + (b as $w) + (c as $w);\n                (wide as _, (wide >> Self::BITS) as _)\n            }",
  "macro_backtrace": [
    {
      "callsite": "impl_carrying_mul_add_by_widening! {\n    u8 u8 u16,\n    u16 u16 u32,\n    u32 u32 u64,\n    u64 u64 u128,\n    usize usize UDoubleSize,\n    i8 u8 i16,\n    i16 u16 i32,\n    i32 u32 i64,\n    i64 u64 i128,\n    isize usize UDoubleSize,\n}",
      "defsite": "macro_rules! impl_carrying_mul_add_by_widening {\n    ($($t:ident $u:ident $w:ident,)+) => {$(\n        #[rustc_const_unstable(feature = \"core_intrinsics_fallbacks\", issue = \"none\")]\n        impl const CarryingMulAdd for $t {\n            type Unsigned = $u;\n            #[inline]\n            fn carrying_mul_add(self, a: Self, b: Self, c: Self) -> ($u, $t) {\n                let wide = (self as $w) * (a as $w) + (b as $w) + (c as $w);\n                (wide as _, (wide >> Self::BITS) as _)\n            }\n        }\n    )+};\n}"
    }
  ]
}
