{
  "file": "core/src/num/int_sqrt.rs",
  "name": "num::int_sqrt::i128",
  "hash": "341299086912803247616346511615443151625",
  "hash_direct": "81363439436772424198722922862136970999",
  "src": "pub(super) const unsafe fn $SignedT(n: $SignedT) -> $SignedT {\n            debug_assert!(n >= 0, \"Negative input inside `isqrt`.\");\n            $UnsignedT(n as $UnsignedT) as $SignedT\n        }",
  "macro_backtrace": [
    {
      "callsite": "signed_fn!(i128, u128)",
      "defsite": "macro_rules! signed_fn {\n    ($SignedT:ident, $UnsignedT:ident) => {\n        /// Returns the [integer square root](\n        /// https://en.wikipedia.org/wiki/Integer_square_root) of any\n        /// **nonnegative**\n        #[doc = concat!(\"[`\", stringify!($SignedT), \"`](prim@\", stringify!($SignedT), \")\")]\n        /// input.\n        ///\n        /// # Safety\n        ///\n        /// This results in undefined behavior when the input is negative.\n        #[must_use = \"this returns the result of the operation, \\\n                      without modifying the original\"]\n        #[inline]\n        pub(super) const unsafe fn $SignedT(n: $SignedT) -> $SignedT {\n            debug_assert!(n >= 0, \"Negative input inside `isqrt`.\");\n            $UnsignedT(n as $UnsignedT) as $SignedT\n        }\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "6962362284417680556415378392413733050",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "34285557725766075041694403907652556376",
    "66739728497054990116484168794270847198",
    "148131587498236735283254898947308266416",
    "159501640769214524245042016289694267677",
    "458202149282102677113803150571638205450",
    "955186324838588195716147025325337593981",
    "24758902444378642523526003927453574051",
    "1305301557924694183912301541987188563060",
    "60960868849511503248088905502240646288",
    "395594666358430567015149996812996702097",
    "1414134969732480211013570371936244676927",
    "671874059102009783417338587524839501010",
    "1508557820869042035017329617948728186885",
    "230043199525005021015126493782242955113",
    "126995290523701752392306498242602668054",
    "913423096705529582812295291280909896630",
    "1745451321050495194918138817064128180120",
    "5450955403464874012556190186318098803",
    "46095478919112651485037565198280203652",
    "592548824112144282714422772314322109198",
    "17322629881004843585167794697912072088",
    "6008126155551471401650957747163895110",
    "118531085298240041968493098956998850",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "36990817497430174858508344623774643994",
    "739520556846959085018120036998133255835"
  ]
}
