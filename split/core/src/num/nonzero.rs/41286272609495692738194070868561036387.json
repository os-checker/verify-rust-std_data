{
  "file": "core/src/num/nonzero.rs",
  "name": "<num::nonzero::NonZero<i128> as str::traits::FromStr>::from_str",
  "hash": "41286272609495692738194070868561036387",
  "hash_direct": "62351526085025491754455446596261980700",
  "src": "fn from_str(src: &str) -> Result<Self, Self::Err> {\n                Self::new(<$Int>::from_str_radix(src, 10)?)\n                    .ok_or(ParseIntError {\n                        kind: IntErrorKind::Zero\n                    })\n            }",
  "macro_backtrace": [
    {
      "callsite": "nonzero_integer! {\n            #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")]\n            Self = $Ty,\n            Primitive = signed $Int,\n            SignedPrimitive = $Int,\n            UnsignedPrimitive = $Uint,\n            rot = $rot,\n            rot_op = $rot_op,\n            rot_result = $rot_result,\n            swap_op = $swap_op,\n            swapped = $swapped,\n            reversed = $reversed,\n            leading_zeros_test = concat!(\"-1\", stringify!($Int)),\n        }",
      "defsite": "macro_rules! nonzero_integer {\n    (\n        #[$stability:meta]\n        Self = $Ty:ident,\n        Primitive = $signedness:ident $Int:ident,\n        SignedPrimitive = $Sint:ty,\n        UnsignedPrimitive = $Uint:ty,\n\n        // Used in doc comments.\n        rot = $rot:literal,\n        rot_op = $rot_op:literal,\n        rot_result = $rot_result:literal,\n        swap_op = $swap_op:literal,\n        swapped = $swapped:literal,\n        reversed = $reversed:literal,\n        leading_zeros_test = $leading_zeros_test:expr,\n    ) => {\n        #[doc = sign_dependent_expr!{\n            $signedness ?\n            if signed {\n                concat!(\"An [`\", stringify!($Int), \"`] that is known not to equal zero.\")\n            }\n            if unsigned {\n                concat!(\"A [`\", stringify!($Int), \"`] that is known not to equal zero.\")\n            }\n        }]\n        ///\n        /// This enables some memory layout optimization.\n        #[doc = concat!(\"For example, `Option<\", stringify!($Ty), \">` is the same size as `\", stringify!($Int), \"`:\")]\n        ///\n        /// ```rust\n        #[doc = concat!(\"assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", stringify!($Int), \">());\")]\n        /// ```\n        ///\n        /// # Layout\n        ///\n        #[doc = concat!(\"`\", stringify!($Ty), \"` is guaranteed to have the same layout and bit validity as `\", stringify!($Int), \"`\")]\n        /// with the exception that `0` is not a valid instance.\n        #[doc = concat!(\"`Option<\", stringify!($Ty), \">` is guaranteed to be compatible with `\", stringify!($Int), \"`,\")]\n        /// including in FFI.\n        ///\n        /// Thanks to the [null pointer optimization],\n        #[doc = concat!(\"`\", stringify!($Ty), \"` and `Option<\", stringify!($Ty), \">`\")]\n        /// are guaranteed to have the same size and alignment:\n        ///\n        /// ```\n        #[doc = concat!(\"use std::num::\", stringify!($Ty), \";\")]\n        ///\n        #[doc = concat!(\"assert_eq!(size_of::<\", stringify!($Ty), \">(), size_of::<Option<\", stringify!($Ty), \">>());\")]\n        #[doc = concat!(\"assert_eq!(align_of::<\", stringify!($Ty), \">(), align_of::<Option<\", stringify!($Ty), \">>());\")]\n        /// ```\n        ///\n        /// [null pointer optimization]: crate::option#representation\n        #[$stability]\n        pub type $Ty = NonZero<$Int>;\n\n        impl NonZero<$Int> {\n            /// The size of this non-zero integer type in bits.\n            ///\n            #[doc = concat!(\"This value is equal to [`\", stringify!($Int), \"::BITS`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::BITS, \", stringify!($Int), \"::BITS);\")]\n            /// ```\n            #[stable(feature = \"nonzero_bits\", since = \"1.67.0\")]\n            pub const BITS: u32 = <$Int>::BITS;\n\n            /// Returns the number of leading zeros in the binary representation of `self`.\n            ///\n            /// On many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::<\", stringify!($Int), \">::new(\", $leading_zeros_test, \")?;\")]\n            ///\n            /// assert_eq!(n.leading_zeros(), 0);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn leading_zeros(self) -> u32 {\n                // SAFETY: since `self` cannot be zero, it is safe to call `ctlz_nonzero`.\n                unsafe {\n                    intrinsics::ctlz_nonzero(self.get() as $Uint)\n                }\n            }\n\n            /// Returns the number of trailing zeros in the binary representation\n            /// of `self`.\n            ///\n            /// On many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::<\", stringify!($Int), \">::new(0b0101000)?;\")]\n            ///\n            /// assert_eq!(n.trailing_zeros(), 3);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn trailing_zeros(self) -> u32 {\n                // SAFETY: since `self` cannot be zero, it is safe to call `cttz_nonzero`.\n                unsafe {\n                    intrinsics::cttz_nonzero(self.get() as $Uint)\n                }\n            }\n\n            /// Returns `self` with only the most significant bit set.\n            ///\n            /// # Example\n            ///\n            /// ```\n            /// #![feature(isolate_most_least_significant_one)]\n            ///\n            /// # use core::num::NonZero;\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let a = NonZero::<\", stringify!($Int), \">::new(0b_01100100)?;\")]\n            #[doc = concat!(\"let b = NonZero::<\", stringify!($Int), \">::new(0b_01000000)?;\")]\n            ///\n            /// assert_eq!(a.isolate_highest_one(), b);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"isolate_most_least_significant_one\", issue = \"136909\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn isolate_highest_one(self) -> Self {\n                let n = self.get() & (((1 as $Int) << (<$Int>::BITS - 1)).wrapping_shr(self.leading_zeros()));\n\n                // SAFETY:\n                // `self` is non-zero, so masking to preserve only the most\n                // significant set bit will result in a non-zero `n`.\n                unsafe { NonZero::new_unchecked(n) }\n            }\n\n            /// Returns `self` with only the least significant bit set.\n            ///\n            /// # Example\n            ///\n            /// ```\n            /// #![feature(isolate_most_least_significant_one)]\n            ///\n            /// # use core::num::NonZero;\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let a = NonZero::<\", stringify!($Int), \">::new(0b_01100100)?;\")]\n            #[doc = concat!(\"let b = NonZero::<\", stringify!($Int), \">::new(0b_00000100)?;\")]\n            ///\n            /// assert_eq!(a.isolate_lowest_one(), b);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"isolate_most_least_significant_one\", issue = \"136909\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn isolate_lowest_one(self) -> Self {\n                let n = self.get();\n                let n = n & n.wrapping_neg();\n\n                // SAFETY: `self` is non-zero, so `self` with only its least\n                // significant set bit will remain non-zero.\n                unsafe { NonZero::new_unchecked(n) }\n            }\n\n            /// Returns the index of the highest bit set to one in `self`.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(int_lowest_highest_one)]\n            ///\n            /// # use core::num::NonZero;\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::new(0x1)?.highest_one(), 0);\")]\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::new(0x10)?.highest_one(), 4);\")]\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::new(0x1f)?.highest_one(), 4);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"int_lowest_highest_one\", issue = \"145203\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline(always)]\n            pub const fn highest_one(self) -> u32 {\n                Self::BITS - 1 - self.leading_zeros()\n            }\n\n            /// Returns the index of the lowest bit set to one in `self`.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(int_lowest_highest_one)]\n            ///\n            /// # use core::num::NonZero;\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::new(0x1)?.lowest_one(), 0);\")]\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::new(0x10)?.lowest_one(), 4);\")]\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::new(0x1f)?.lowest_one(), 0);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"int_lowest_highest_one\", issue = \"145203\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline(always)]\n            pub const fn lowest_one(self) -> u32 {\n                self.trailing_zeros()\n            }\n\n            /// Returns the number of ones in the binary representation of `self`.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let a = NonZero::<\", stringify!($Int), \">::new(0b100_0000)?;\")]\n            #[doc = concat!(\"let b = NonZero::<\", stringify!($Int), \">::new(0b100_0011)?;\")]\n            ///\n            /// assert_eq!(a.count_ones(), NonZero::new(1)?);\n            /// assert_eq!(b.count_ones(), NonZero::new(3)?);\n            /// # Some(())\n            /// # }\n            /// ```\n            ///\n            #[stable(feature = \"non_zero_count_ones\", since = \"1.86.0\")]\n            #[rustc_const_stable(feature = \"non_zero_count_ones\", since = \"1.86.0\")]\n            #[doc(alias = \"popcount\")]\n            #[doc(alias = \"popcnt\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            #[ensures(|result| result.get() > 0)]\n            pub const fn count_ones(self) -> NonZero<u32> {\n                // SAFETY:\n                // `self` is non-zero, which means it has at least one bit set, which means\n                // that the result of `count_ones` is non-zero.\n                unsafe { NonZero::new_unchecked(self.get().count_ones()) }\n            }\n\n            /// Shifts the bits to the left by a specified amount, `n`,\n            /// wrapping the truncated bits to the end of the resulting integer.\n            ///\n            /// Please note this isn't the same operation as the `<<` shifting operator!\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $rot_op, stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let m = NonZero::new(\", $rot_result, \")?;\")]\n            ///\n            #[doc = concat!(\"assert_eq!(n.rotate_left(\", $rot, \"), m);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            #[ensures(|result| result.get() != 0)]\n            #[ensures(|result| result.rotate_right(n).get() == old(self).get())]\n            pub const fn rotate_left(self, n: u32) -> Self {\n                let result = self.get().rotate_left(n);\n                // SAFETY: Rotating bits preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Shifts the bits to the right by a specified amount, `n`,\n            /// wrapping the truncated bits to the beginning of the resulting\n            /// integer.\n            ///\n            /// Please note this isn't the same operation as the `>>` shifting operator!\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $rot_result, stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let m = NonZero::new(\", $rot_op, \")?;\")]\n            ///\n            #[doc = concat!(\"assert_eq!(n.rotate_right(\", $rot, \"), m);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            #[ensures(|result| result.get() != 0)]\n            #[ensures(|result| result.rotate_left(n).get() == old(self).get())]\n            pub const fn rotate_right(self, n: u32) -> Self {\n                let result = self.get().rotate_right(n);\n                // SAFETY: Rotating bits preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Reverses the byte order of the integer.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $swap_op, stringify!($Int), \")?;\")]\n            /// let m = n.swap_bytes();\n            ///\n            #[doc = concat!(\"assert_eq!(m, NonZero::new(\", $swapped, \")?);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn swap_bytes(self) -> Self {\n                let result = self.get().swap_bytes();\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\n            /// second least-significant bit becomes second most-significant bit, etc.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $swap_op, stringify!($Int), \")?;\")]\n            /// let m = n.reverse_bits();\n            ///\n            #[doc = concat!(\"assert_eq!(m, NonZero::new(\", $reversed, \")?);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn reverse_bits(self) -> Self {\n                let result = self.get().reverse_bits();\n                // SAFETY: Reversing bits preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts an integer from big endian to the target's endianness.\n            ///\n            /// On big endian this is a no-op. On little endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            #[doc = concat!(\"use std::num::\", stringify!($Ty), \";\")]\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"big\") {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_be(n), n)\")]\n            /// } else {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_be(n), n.swap_bytes())\")]\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use]\n            #[inline(always)]\n            pub const fn from_be(x: Self) -> Self {\n                let result = $Int::from_be(x.get());\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts an integer from little endian to the target's endianness.\n            ///\n            /// On little endian this is a no-op. On big endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            #[doc = concat!(\"use std::num::\", stringify!($Ty), \";\")]\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"little\") {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_le(n), n)\")]\n            /// } else {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_le(n), n.swap_bytes())\")]\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use]\n            #[inline(always)]\n            pub const fn from_le(x: Self) -> Self {\n                let result = $Int::from_le(x.get());\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts `self` to big endian from the target's endianness.\n            ///\n            /// On big endian this is a no-op. On little endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"big\") {\n            ///     assert_eq!(n.to_be(), n)\n            /// } else {\n            ///     assert_eq!(n.to_be(), n.swap_bytes())\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn to_be(self) -> Self {\n                let result = self.get().to_be();\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts `self` to little endian from the target's endianness.\n            ///\n            /// On little endian this is a no-op. On big endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"little\") {\n            ///     assert_eq!(n.to_le(), n)\n            /// } else {\n            ///     assert_eq!(n.to_le(), n.swap_bytes())\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn to_le(self) -> Self {\n                let result = self.get().to_le();\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            nonzero_integer_signedness_dependent_methods! {\n                Primitive = $signedness $Int,\n                SignedPrimitive = $Sint,\n                UnsignedPrimitive = $Uint,\n            }\n\n            /// Multiplies two non-zero integers together.\n            /// Checks for overflow and returns [`None`] on overflow.\n            /// As a consequence, the result cannot wrap to zero.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let two = NonZero::new(2\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let four = NonZero::new(4\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let max = NonZero::new(\", stringify!($Int), \"::MAX)?;\")]\n            ///\n            /// assert_eq!(Some(four), two.checked_mul(two));\n            /// assert_eq!(None, max.checked_mul(two));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn checked_mul(self, other: Self) -> Option<Self> {\n                if let Some(result) = self.get().checked_mul(other.get()) {\n                    // SAFETY:\n                    // - `checked_mul` returns `None` on overflow\n                    // - `self` and `other` are non-zero\n                    // - the only way to get zero from a multiplication without overflow is for one\n                    //   of the sides to be zero\n                    //\n                    // So the result cannot be zero.\n                    Some(unsafe { Self::new_unchecked(result) })\n                } else {\n                    None\n                }\n            }\n\n            /// Multiplies two non-zero integers together.\n            #[doc = concat!(\"Return [`NonZero::<\", stringify!($Int), \">::MAX`] on overflow.\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let two = NonZero::new(2\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let four = NonZero::new(4\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let max = NonZero::new(\", stringify!($Int), \"::MAX)?;\")]\n            ///\n            /// assert_eq!(four, two.saturating_mul(two));\n            /// assert_eq!(max, four.saturating_mul(max));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn saturating_mul(self, other: Self) -> Self {\n                // SAFETY:\n                // - `saturating_mul` returns `u*::MAX`/`i*::MAX`/`i*::MIN` on overflow/underflow,\n                //   all of which are non-zero\n                // - `self` and `other` are non-zero\n                // - the only way to get zero from a multiplication without overflow is for one\n                //   of the sides to be zero\n                //\n                // So the result cannot be zero.\n                unsafe { Self::new_unchecked(self.get().saturating_mul(other.get())) }\n            }\n\n            /// Multiplies two non-zero integers together,\n            /// assuming overflow cannot occur.\n            /// Overflow is unchecked, and it is undefined behavior to overflow\n            /// *even if the result would wrap to a non-zero value*.\n            /// The behavior is undefined as soon as\n            #[doc = sign_dependent_expr!{\n                $signedness ?\n                if signed {\n                    concat!(\"`self * rhs > \", stringify!($Int), \"::MAX`, \",\n                            \"or `self * rhs < \", stringify!($Int), \"::MIN`.\")\n                }\n                if unsigned {\n                    concat!(\"`self * rhs > \", stringify!($Int), \"::MAX`.\")\n                }\n            }]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_ops)]\n            ///\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let two = NonZero::new(2\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let four = NonZero::new(4\", stringify!($Int), \")?;\")]\n            ///\n            /// assert_eq!(four, unsafe { two.unchecked_mul(two) });\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            #[requires({\n                self.get().checked_mul(other.get()).is_some()\n            })]\n            #[ensures(|result: &Self| {\n                self.get().checked_mul(other.get()).is_some_and(|product| product == result.get())\n            })]\n            pub const unsafe fn unchecked_mul(self, other: Self) -> Self {\n                // SAFETY: The caller ensures there is no overflow.\n                unsafe { Self::new_unchecked(self.get().unchecked_mul(other.get())) }\n            }\n\n            /// Raises non-zero value to an integer power.\n            /// Checks for overflow and returns [`None`] on overflow.\n            /// As a consequence, the result cannot wrap to zero.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let three = NonZero::new(3\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let twenty_seven = NonZero::new(27\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let half_max = NonZero::new(\", stringify!($Int), \"::MAX / 2)?;\")]\n            ///\n            /// assert_eq!(Some(twenty_seven), three.checked_pow(3));\n            /// assert_eq!(None, half_max.checked_pow(3));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn checked_pow(self, other: u32) -> Option<Self> {\n                if let Some(result) = self.get().checked_pow(other) {\n                    // SAFETY:\n                    // - `checked_pow` returns `None` on overflow/underflow\n                    // - `self` is non-zero\n                    // - the only way to get zero from an exponentiation without overflow is\n                    //   for base to be zero\n                    //\n                    // So the result cannot be zero.\n                    Some(unsafe { Self::new_unchecked(result) })\n                } else {\n                    None\n                }\n            }\n\n            /// Raise non-zero value to an integer power.\n            #[doc = sign_dependent_expr!{\n                $signedness ?\n                if signed {\n                    concat!(\"Return [`NonZero::<\", stringify!($Int), \">::MIN`] \",\n                                \"or [`NonZero::<\", stringify!($Int), \">::MAX`] on overflow.\")\n                }\n                if unsigned {\n                    concat!(\"Return [`NonZero::<\", stringify!($Int), \">::MAX`] on overflow.\")\n                }\n            }]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let three = NonZero::new(3\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let twenty_seven = NonZero::new(27\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let max = NonZero::new(\", stringify!($Int), \"::MAX)?;\")]\n            ///\n            /// assert_eq!(twenty_seven, three.saturating_pow(3));\n            /// assert_eq!(max, max.saturating_pow(3));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn saturating_pow(self, other: u32) -> Self {\n                // SAFETY:\n                // - `saturating_pow` returns `u*::MAX`/`i*::MAX`/`i*::MIN` on overflow/underflow,\n                //   all of which are non-zero\n                // - `self` is non-zero\n                // - the only way to get zero from an exponentiation without overflow is\n                //   for base to be zero\n                //\n                // So the result cannot be zero.\n                unsafe { Self::new_unchecked(self.get().saturating_pow(other)) }\n            }\n        }\n\n        #[stable(feature = \"nonzero_parse\", since = \"1.35.0\")]\n        impl FromStr for NonZero<$Int> {\n            type Err = ParseIntError;\n            fn from_str(src: &str) -> Result<Self, Self::Err> {\n                Self::new(<$Int>::from_str_radix(src, 10)?)\n                    .ok_or(ParseIntError {\n                        kind: IntErrorKind::Zero\n                    })\n            }\n        }\n\n        nonzero_integer_signedness_dependent_impls!($signedness $Int);\n    };\n\n    (\n        Self = $Ty:ident,\n        Primitive = unsigned $Int:ident,\n        SignedPrimitive = $Sint:ident,\n        rot = $rot:literal,\n        rot_op = $rot_op:literal,\n        rot_result = $rot_result:literal,\n        swap_op = $swap_op:literal,\n        swapped = $swapped:literal,\n        reversed = $reversed:literal,\n        $(,)?\n    ) => {\n        nonzero_integer! {\n            #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n            Self = $Ty,\n            Primitive = unsigned $Int,\n            SignedPrimitive = $Sint,\n            UnsignedPrimitive = $Int,\n            rot = $rot,\n            rot_op = $rot_op,\n            rot_result = $rot_result,\n            swap_op = $swap_op,\n            swapped = $swapped,\n            reversed = $reversed,\n            leading_zeros_test = concat!(stringify!($Int), \"::MAX\"),\n        }\n    };\n\n    (\n        Self = $Ty:ident,\n        Primitive = signed $Int:ident,\n        UnsignedPrimitive = $Uint:ident,\n        rot = $rot:literal,\n        rot_op = $rot_op:literal,\n        rot_result = $rot_result:literal,\n        swap_op = $swap_op:literal,\n        swapped = $swapped:literal,\n        reversed = $reversed:literal,\n    ) => {\n        nonzero_integer! {\n            #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")]\n            Self = $Ty,\n            Primitive = signed $Int,\n            SignedPrimitive = $Int,\n            UnsignedPrimitive = $Uint,\n            rot = $rot,\n            rot_op = $rot_op,\n            rot_result = $rot_result,\n            swap_op = $swap_op,\n            swapped = $swapped,\n            reversed = $reversed,\n            leading_zeros_test = concat!(\"-1\", stringify!($Int)),\n        }\n    };\n}"
    },
    {
      "callsite": "nonzero_integer! {\n    Self = NonZeroI128,\n    Primitive = signed i128,\n    UnsignedPrimitive = u128,\n    rot = 16,\n    rot_op = \"0x13f40000000000000000000000004f76\",\n    rot_result = \"0x4f7613f4\",\n    swap_op = \"0x12345678901234567890123456789012\",\n    swapped = \"0x12907856341290785634129078563412\",\n    reversed = \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n}",
      "defsite": "macro_rules! nonzero_integer {\n    (\n        #[$stability:meta]\n        Self = $Ty:ident,\n        Primitive = $signedness:ident $Int:ident,\n        SignedPrimitive = $Sint:ty,\n        UnsignedPrimitive = $Uint:ty,\n\n        // Used in doc comments.\n        rot = $rot:literal,\n        rot_op = $rot_op:literal,\n        rot_result = $rot_result:literal,\n        swap_op = $swap_op:literal,\n        swapped = $swapped:literal,\n        reversed = $reversed:literal,\n        leading_zeros_test = $leading_zeros_test:expr,\n    ) => {\n        #[doc = sign_dependent_expr!{\n            $signedness ?\n            if signed {\n                concat!(\"An [`\", stringify!($Int), \"`] that is known not to equal zero.\")\n            }\n            if unsigned {\n                concat!(\"A [`\", stringify!($Int), \"`] that is known not to equal zero.\")\n            }\n        }]\n        ///\n        /// This enables some memory layout optimization.\n        #[doc = concat!(\"For example, `Option<\", stringify!($Ty), \">` is the same size as `\", stringify!($Int), \"`:\")]\n        ///\n        /// ```rust\n        #[doc = concat!(\"assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", stringify!($Int), \">());\")]\n        /// ```\n        ///\n        /// # Layout\n        ///\n        #[doc = concat!(\"`\", stringify!($Ty), \"` is guaranteed to have the same layout and bit validity as `\", stringify!($Int), \"`\")]\n        /// with the exception that `0` is not a valid instance.\n        #[doc = concat!(\"`Option<\", stringify!($Ty), \">` is guaranteed to be compatible with `\", stringify!($Int), \"`,\")]\n        /// including in FFI.\n        ///\n        /// Thanks to the [null pointer optimization],\n        #[doc = concat!(\"`\", stringify!($Ty), \"` and `Option<\", stringify!($Ty), \">`\")]\n        /// are guaranteed to have the same size and alignment:\n        ///\n        /// ```\n        #[doc = concat!(\"use std::num::\", stringify!($Ty), \";\")]\n        ///\n        #[doc = concat!(\"assert_eq!(size_of::<\", stringify!($Ty), \">(), size_of::<Option<\", stringify!($Ty), \">>());\")]\n        #[doc = concat!(\"assert_eq!(align_of::<\", stringify!($Ty), \">(), align_of::<Option<\", stringify!($Ty), \">>());\")]\n        /// ```\n        ///\n        /// [null pointer optimization]: crate::option#representation\n        #[$stability]\n        pub type $Ty = NonZero<$Int>;\n\n        impl NonZero<$Int> {\n            /// The size of this non-zero integer type in bits.\n            ///\n            #[doc = concat!(\"This value is equal to [`\", stringify!($Int), \"::BITS`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::BITS, \", stringify!($Int), \"::BITS);\")]\n            /// ```\n            #[stable(feature = \"nonzero_bits\", since = \"1.67.0\")]\n            pub const BITS: u32 = <$Int>::BITS;\n\n            /// Returns the number of leading zeros in the binary representation of `self`.\n            ///\n            /// On many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::<\", stringify!($Int), \">::new(\", $leading_zeros_test, \")?;\")]\n            ///\n            /// assert_eq!(n.leading_zeros(), 0);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn leading_zeros(self) -> u32 {\n                // SAFETY: since `self` cannot be zero, it is safe to call `ctlz_nonzero`.\n                unsafe {\n                    intrinsics::ctlz_nonzero(self.get() as $Uint)\n                }\n            }\n\n            /// Returns the number of trailing zeros in the binary representation\n            /// of `self`.\n            ///\n            /// On many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::<\", stringify!($Int), \">::new(0b0101000)?;\")]\n            ///\n            /// assert_eq!(n.trailing_zeros(), 3);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn trailing_zeros(self) -> u32 {\n                // SAFETY: since `self` cannot be zero, it is safe to call `cttz_nonzero`.\n                unsafe {\n                    intrinsics::cttz_nonzero(self.get() as $Uint)\n                }\n            }\n\n            /// Returns `self` with only the most significant bit set.\n            ///\n            /// # Example\n            ///\n            /// ```\n            /// #![feature(isolate_most_least_significant_one)]\n            ///\n            /// # use core::num::NonZero;\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let a = NonZero::<\", stringify!($Int), \">::new(0b_01100100)?;\")]\n            #[doc = concat!(\"let b = NonZero::<\", stringify!($Int), \">::new(0b_01000000)?;\")]\n            ///\n            /// assert_eq!(a.isolate_highest_one(), b);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"isolate_most_least_significant_one\", issue = \"136909\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn isolate_highest_one(self) -> Self {\n                let n = self.get() & (((1 as $Int) << (<$Int>::BITS - 1)).wrapping_shr(self.leading_zeros()));\n\n                // SAFETY:\n                // `self` is non-zero, so masking to preserve only the most\n                // significant set bit will result in a non-zero `n`.\n                unsafe { NonZero::new_unchecked(n) }\n            }\n\n            /// Returns `self` with only the least significant bit set.\n            ///\n            /// # Example\n            ///\n            /// ```\n            /// #![feature(isolate_most_least_significant_one)]\n            ///\n            /// # use core::num::NonZero;\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let a = NonZero::<\", stringify!($Int), \">::new(0b_01100100)?;\")]\n            #[doc = concat!(\"let b = NonZero::<\", stringify!($Int), \">::new(0b_00000100)?;\")]\n            ///\n            /// assert_eq!(a.isolate_lowest_one(), b);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"isolate_most_least_significant_one\", issue = \"136909\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn isolate_lowest_one(self) -> Self {\n                let n = self.get();\n                let n = n & n.wrapping_neg();\n\n                // SAFETY: `self` is non-zero, so `self` with only its least\n                // significant set bit will remain non-zero.\n                unsafe { NonZero::new_unchecked(n) }\n            }\n\n            /// Returns the index of the highest bit set to one in `self`.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(int_lowest_highest_one)]\n            ///\n            /// # use core::num::NonZero;\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::new(0x1)?.highest_one(), 0);\")]\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::new(0x10)?.highest_one(), 4);\")]\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::new(0x1f)?.highest_one(), 4);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"int_lowest_highest_one\", issue = \"145203\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline(always)]\n            pub const fn highest_one(self) -> u32 {\n                Self::BITS - 1 - self.leading_zeros()\n            }\n\n            /// Returns the index of the lowest bit set to one in `self`.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(int_lowest_highest_one)]\n            ///\n            /// # use core::num::NonZero;\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::new(0x1)?.lowest_one(), 0);\")]\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::new(0x10)?.lowest_one(), 4);\")]\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::new(0x1f)?.lowest_one(), 0);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"int_lowest_highest_one\", issue = \"145203\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline(always)]\n            pub const fn lowest_one(self) -> u32 {\n                self.trailing_zeros()\n            }\n\n            /// Returns the number of ones in the binary representation of `self`.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let a = NonZero::<\", stringify!($Int), \">::new(0b100_0000)?;\")]\n            #[doc = concat!(\"let b = NonZero::<\", stringify!($Int), \">::new(0b100_0011)?;\")]\n            ///\n            /// assert_eq!(a.count_ones(), NonZero::new(1)?);\n            /// assert_eq!(b.count_ones(), NonZero::new(3)?);\n            /// # Some(())\n            /// # }\n            /// ```\n            ///\n            #[stable(feature = \"non_zero_count_ones\", since = \"1.86.0\")]\n            #[rustc_const_stable(feature = \"non_zero_count_ones\", since = \"1.86.0\")]\n            #[doc(alias = \"popcount\")]\n            #[doc(alias = \"popcnt\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            #[ensures(|result| result.get() > 0)]\n            pub const fn count_ones(self) -> NonZero<u32> {\n                // SAFETY:\n                // `self` is non-zero, which means it has at least one bit set, which means\n                // that the result of `count_ones` is non-zero.\n                unsafe { NonZero::new_unchecked(self.get().count_ones()) }\n            }\n\n            /// Shifts the bits to the left by a specified amount, `n`,\n            /// wrapping the truncated bits to the end of the resulting integer.\n            ///\n            /// Please note this isn't the same operation as the `<<` shifting operator!\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $rot_op, stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let m = NonZero::new(\", $rot_result, \")?;\")]\n            ///\n            #[doc = concat!(\"assert_eq!(n.rotate_left(\", $rot, \"), m);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            #[ensures(|result| result.get() != 0)]\n            #[ensures(|result| result.rotate_right(n).get() == old(self).get())]\n            pub const fn rotate_left(self, n: u32) -> Self {\n                let result = self.get().rotate_left(n);\n                // SAFETY: Rotating bits preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Shifts the bits to the right by a specified amount, `n`,\n            /// wrapping the truncated bits to the beginning of the resulting\n            /// integer.\n            ///\n            /// Please note this isn't the same operation as the `>>` shifting operator!\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $rot_result, stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let m = NonZero::new(\", $rot_op, \")?;\")]\n            ///\n            #[doc = concat!(\"assert_eq!(n.rotate_right(\", $rot, \"), m);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            #[ensures(|result| result.get() != 0)]\n            #[ensures(|result| result.rotate_left(n).get() == old(self).get())]\n            pub const fn rotate_right(self, n: u32) -> Self {\n                let result = self.get().rotate_right(n);\n                // SAFETY: Rotating bits preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Reverses the byte order of the integer.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $swap_op, stringify!($Int), \")?;\")]\n            /// let m = n.swap_bytes();\n            ///\n            #[doc = concat!(\"assert_eq!(m, NonZero::new(\", $swapped, \")?);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn swap_bytes(self) -> Self {\n                let result = self.get().swap_bytes();\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\n            /// second least-significant bit becomes second most-significant bit, etc.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $swap_op, stringify!($Int), \")?;\")]\n            /// let m = n.reverse_bits();\n            ///\n            #[doc = concat!(\"assert_eq!(m, NonZero::new(\", $reversed, \")?);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn reverse_bits(self) -> Self {\n                let result = self.get().reverse_bits();\n                // SAFETY: Reversing bits preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts an integer from big endian to the target's endianness.\n            ///\n            /// On big endian this is a no-op. On little endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            #[doc = concat!(\"use std::num::\", stringify!($Ty), \";\")]\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"big\") {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_be(n), n)\")]\n            /// } else {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_be(n), n.swap_bytes())\")]\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use]\n            #[inline(always)]\n            pub const fn from_be(x: Self) -> Self {\n                let result = $Int::from_be(x.get());\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts an integer from little endian to the target's endianness.\n            ///\n            /// On little endian this is a no-op. On big endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            #[doc = concat!(\"use std::num::\", stringify!($Ty), \";\")]\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"little\") {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_le(n), n)\")]\n            /// } else {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_le(n), n.swap_bytes())\")]\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use]\n            #[inline(always)]\n            pub const fn from_le(x: Self) -> Self {\n                let result = $Int::from_le(x.get());\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts `self` to big endian from the target's endianness.\n            ///\n            /// On big endian this is a no-op. On little endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"big\") {\n            ///     assert_eq!(n.to_be(), n)\n            /// } else {\n            ///     assert_eq!(n.to_be(), n.swap_bytes())\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn to_be(self) -> Self {\n                let result = self.get().to_be();\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts `self` to little endian from the target's endianness.\n            ///\n            /// On little endian this is a no-op. On big endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"little\") {\n            ///     assert_eq!(n.to_le(), n)\n            /// } else {\n            ///     assert_eq!(n.to_le(), n.swap_bytes())\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn to_le(self) -> Self {\n                let result = self.get().to_le();\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            nonzero_integer_signedness_dependent_methods! {\n                Primitive = $signedness $Int,\n                SignedPrimitive = $Sint,\n                UnsignedPrimitive = $Uint,\n            }\n\n            /// Multiplies two non-zero integers together.\n            /// Checks for overflow and returns [`None`] on overflow.\n            /// As a consequence, the result cannot wrap to zero.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let two = NonZero::new(2\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let four = NonZero::new(4\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let max = NonZero::new(\", stringify!($Int), \"::MAX)?;\")]\n            ///\n            /// assert_eq!(Some(four), two.checked_mul(two));\n            /// assert_eq!(None, max.checked_mul(two));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn checked_mul(self, other: Self) -> Option<Self> {\n                if let Some(result) = self.get().checked_mul(other.get()) {\n                    // SAFETY:\n                    // - `checked_mul` returns `None` on overflow\n                    // - `self` and `other` are non-zero\n                    // - the only way to get zero from a multiplication without overflow is for one\n                    //   of the sides to be zero\n                    //\n                    // So the result cannot be zero.\n                    Some(unsafe { Self::new_unchecked(result) })\n                } else {\n                    None\n                }\n            }\n\n            /// Multiplies two non-zero integers together.\n            #[doc = concat!(\"Return [`NonZero::<\", stringify!($Int), \">::MAX`] on overflow.\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let two = NonZero::new(2\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let four = NonZero::new(4\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let max = NonZero::new(\", stringify!($Int), \"::MAX)?;\")]\n            ///\n            /// assert_eq!(four, two.saturating_mul(two));\n            /// assert_eq!(max, four.saturating_mul(max));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn saturating_mul(self, other: Self) -> Self {\n                // SAFETY:\n                // - `saturating_mul` returns `u*::MAX`/`i*::MAX`/`i*::MIN` on overflow/underflow,\n                //   all of which are non-zero\n                // - `self` and `other` are non-zero\n                // - the only way to get zero from a multiplication without overflow is for one\n                //   of the sides to be zero\n                //\n                // So the result cannot be zero.\n                unsafe { Self::new_unchecked(self.get().saturating_mul(other.get())) }\n            }\n\n            /// Multiplies two non-zero integers together,\n            /// assuming overflow cannot occur.\n            /// Overflow is unchecked, and it is undefined behavior to overflow\n            /// *even if the result would wrap to a non-zero value*.\n            /// The behavior is undefined as soon as\n            #[doc = sign_dependent_expr!{\n                $signedness ?\n                if signed {\n                    concat!(\"`self * rhs > \", stringify!($Int), \"::MAX`, \",\n                            \"or `self * rhs < \", stringify!($Int), \"::MIN`.\")\n                }\n                if unsigned {\n                    concat!(\"`self * rhs > \", stringify!($Int), \"::MAX`.\")\n                }\n            }]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_ops)]\n            ///\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let two = NonZero::new(2\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let four = NonZero::new(4\", stringify!($Int), \")?;\")]\n            ///\n            /// assert_eq!(four, unsafe { two.unchecked_mul(two) });\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            #[requires({\n                self.get().checked_mul(other.get()).is_some()\n            })]\n            #[ensures(|result: &Self| {\n                self.get().checked_mul(other.get()).is_some_and(|product| product == result.get())\n            })]\n            pub const unsafe fn unchecked_mul(self, other: Self) -> Self {\n                // SAFETY: The caller ensures there is no overflow.\n                unsafe { Self::new_unchecked(self.get().unchecked_mul(other.get())) }\n            }\n\n            /// Raises non-zero value to an integer power.\n            /// Checks for overflow and returns [`None`] on overflow.\n            /// As a consequence, the result cannot wrap to zero.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let three = NonZero::new(3\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let twenty_seven = NonZero::new(27\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let half_max = NonZero::new(\", stringify!($Int), \"::MAX / 2)?;\")]\n            ///\n            /// assert_eq!(Some(twenty_seven), three.checked_pow(3));\n            /// assert_eq!(None, half_max.checked_pow(3));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn checked_pow(self, other: u32) -> Option<Self> {\n                if let Some(result) = self.get().checked_pow(other) {\n                    // SAFETY:\n                    // - `checked_pow` returns `None` on overflow/underflow\n                    // - `self` is non-zero\n                    // - the only way to get zero from an exponentiation without overflow is\n                    //   for base to be zero\n                    //\n                    // So the result cannot be zero.\n                    Some(unsafe { Self::new_unchecked(result) })\n                } else {\n                    None\n                }\n            }\n\n            /// Raise non-zero value to an integer power.\n            #[doc = sign_dependent_expr!{\n                $signedness ?\n                if signed {\n                    concat!(\"Return [`NonZero::<\", stringify!($Int), \">::MIN`] \",\n                                \"or [`NonZero::<\", stringify!($Int), \">::MAX`] on overflow.\")\n                }\n                if unsigned {\n                    concat!(\"Return [`NonZero::<\", stringify!($Int), \">::MAX`] on overflow.\")\n                }\n            }]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let three = NonZero::new(3\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let twenty_seven = NonZero::new(27\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let max = NonZero::new(\", stringify!($Int), \"::MAX)?;\")]\n            ///\n            /// assert_eq!(twenty_seven, three.saturating_pow(3));\n            /// assert_eq!(max, max.saturating_pow(3));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn saturating_pow(self, other: u32) -> Self {\n                // SAFETY:\n                // - `saturating_pow` returns `u*::MAX`/`i*::MAX`/`i*::MIN` on overflow/underflow,\n                //   all of which are non-zero\n                // - `self` is non-zero\n                // - the only way to get zero from an exponentiation without overflow is\n                //   for base to be zero\n                //\n                // So the result cannot be zero.\n                unsafe { Self::new_unchecked(self.get().saturating_pow(other)) }\n            }\n        }\n\n        #[stable(feature = \"nonzero_parse\", since = \"1.35.0\")]\n        impl FromStr for NonZero<$Int> {\n            type Err = ParseIntError;\n            fn from_str(src: &str) -> Result<Self, Self::Err> {\n                Self::new(<$Int>::from_str_radix(src, 10)?)\n                    .ok_or(ParseIntError {\n                        kind: IntErrorKind::Zero\n                    })\n            }\n        }\n\n        nonzero_integer_signedness_dependent_impls!($signedness $Int);\n    };\n\n    (\n        Self = $Ty:ident,\n        Primitive = unsigned $Int:ident,\n        SignedPrimitive = $Sint:ident,\n        rot = $rot:literal,\n        rot_op = $rot_op:literal,\n        rot_result = $rot_result:literal,\n        swap_op = $swap_op:literal,\n        swapped = $swapped:literal,\n        reversed = $reversed:literal,\n        $(,)?\n    ) => {\n        nonzero_integer! {\n            #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n            Self = $Ty,\n            Primitive = unsigned $Int,\n            SignedPrimitive = $Sint,\n            UnsignedPrimitive = $Int,\n            rot = $rot,\n            rot_op = $rot_op,\n            rot_result = $rot_result,\n            swap_op = $swap_op,\n            swapped = $swapped,\n            reversed = $reversed,\n            leading_zeros_test = concat!(stringify!($Int), \"::MAX\"),\n        }\n    };\n\n    (\n        Self = $Ty:ident,\n        Primitive = signed $Int:ident,\n        UnsignedPrimitive = $Uint:ident,\n        rot = $rot:literal,\n        rot_op = $rot_op:literal,\n        rot_result = $rot_result:literal,\n        swap_op = $swap_op:literal,\n        swapped = $swapped:literal,\n        reversed = $reversed:literal,\n    ) => {\n        nonzero_integer! {\n            #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")]\n            Self = $Ty,\n            Primitive = signed $Int,\n            SignedPrimitive = $Int,\n            UnsignedPrimitive = $Uint,\n            rot = $rot,\n            rot_op = $rot_op,\n            rot_result = $rot_result,\n            swap_op = $swap_op,\n            swapped = $swapped,\n            reversed = $reversed,\n            leading_zeros_test = concat!(\"-1\", stringify!($Int)),\n        }\n    };\n}"
    }
  ],
  "callees": [
    "80887250879108148015413891736608607220",
    "135085831257420105511932492454364625470",
    "125895754419976834712369234308535121418",
    "97974469250681533633362941246048906040",
    "135085831257420105511932492454364625470",
    "56316359647357795184792913202425867352",
    "85573708867003773503727706164971877350",
    "135085831257420105511932492454364625470",
    "152665689769213460446211199163606995684",
    "1026760530544148215311440132616070242899",
    "7482589000750884340327816351015335759",
    "114515349818180266375604241642404432663",
    "82654341932789732147751919849221457004",
    "155146884437592745449279657258619050520",
    "111948483962809339883106353795926089322",
    "1449318134079626371011274072562212788848",
    "1112587344707468276411885224945392270388",
    "122106569399457767686979530207080663367",
    "231286566750998298014304482555354449751",
    "1216621066653889995610546046327140038790",
    "29334395663381870005864057719351039300",
    "59819684876446801767075723074766688892",
    "9122690305665940051388962439719640221",
    "1310216450780391402111897335122167690877",
    "686432449587531607917658283569998762685",
    "2290980464301696929957012594850492860",
    "446641282099743021915035641877345940088",
    "135085831257420105511932492454364625470",
    "81986060615313457313520860313503674379",
    "135085831257420105511932492454364625470",
    "529131735890807885813791093312023364462",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1093476100484343819814987720024391953916",
    "5727355925197697878453733593054842709",
    "885597861861001000511516117324052716088",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1501989787004212717414978504657860592208",
    "1402338422273675223217390840337962552209",
    "262655926825162372615996610610206939850",
    "135085831257420105511932492454364625470",
    "158665653291221107015613368590037312897",
    "96074532700052856493158655578097167059",
    "135085831257420105511932492454364625470",
    "190359819262014031015892687675081007498",
    "1501621636175779253314402450532242777846",
    "150203716713484807054381945197290135428",
    "36380162371624727521206603407905192105",
    "135085831257420105511932492454364625470",
    "158834747702222751563622469325806071500",
    "1257449939458569527717077158366407697777",
    "170014296805062216835073969549821561637",
    "55398000924899280461156178934673388121",
    "1286040984527793700010408138982195338134",
    "55374350330118105413720390969416525719",
    "135085831257420105511932492454364625470",
    "243839084150888952911908111539685994713",
    "5816187767072888251886714194878390885",
    "70678707815974353129270849643470718392",
    "7159367661129856143545653945965765610",
    "9007521356456792533806907033713747580",
    "1130219753616140084010892038682713793809",
    "172140117843934269071100695499597161982",
    "4960461046229976118108876182482238045",
    "398351056859449483913563186545567727466",
    "603228037714317177115336914651536545892",
    "880399244184648853615132446538621153208",
    "91308972039969540988091890815065278470",
    "174967394945862090364279848592208296953",
    "45271875752689560147947427477084707436",
    "1318795693586417117412091773506303238138",
    "135085831257420105511932492454364625470",
    "1028032724039154942912173433838393851681",
    "282486779280113170118123062714608667876",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1122845743808954568315839891299563834211",
    "258820287469578611817448591488600041899",
    "173274967666296717555745442266002200738",
    "6267750356639735281119899207213949232",
    "173333575624628564314365600339262332595",
    "4954363668049433906791255335906210806",
    "462518227198375540612885370480640396222",
    "263160489966033609311803218267093119168",
    "179430670899218703853981330836130826858",
    "173604287901550226514569259360924219111",
    "135085831257420105511932492454364625470",
    "985633247147444923214630796199850707375",
    "6962362284417680556415378392413733050",
    "1415106497522421883676194742336801697",
    "135085831257420105511932492454364625470",
    "588974892899239543415856878986124229421",
    "83296569981337185257777514719755004891",
    "690438059002452523915046149102377829082",
    "102030789931982425033754462629844682694",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1547564489779508118311471276601353146868",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "573750095347314675218420517967106720291",
    "19127809293168330713198522102322069120",
    "146302972784592707345017558525924565358",
    "110489938845591258695432360905480776739",
    "838579135528120850312965158638687856356",
    "8388353940802646364767634772864445262",
    "73108691610225733116596031659328766854",
    "822269050661504501817822006377694013491",
    "247634727651802426813530679984485687857",
    "72993026513347610222044009578620103685",
    "83277592815980822158438974019698900871",
    "53212576593787280828984978559612536749",
    "1266136833068978554216667149679620774580",
    "170263472120930945276863179915420040056",
    "11156965278025928998185987370340964956",
    "110422491957938577782318652431088408899",
    "138705491366165238634028278563846115067",
    "65069040306676020898444859464496431715",
    "1823645488622937895012673111274870809755",
    "6781225442344569542394668875873020156",
    "457879323132651244210037964476759098996",
    "387263740474341501715316744261930101340",
    "402612920088428423016977109980304822932",
    "1820316365630756497411082775870133134724",
    "713596427418837315916034622167448792635",
    "12790910907938237822370326571745403935",
    "61539750939002654969594741517578054227",
    "121917327455978701744454773261590352887",
    "102272585106179812897836035233672297670",
    "69064157634746261873063654620308320827",
    "135928888564588691565994405694153794425",
    "507116607738930391111587036035165972673",
    "540564128152414607516220637571452425273",
    "1605633131122579720611961448336401474874",
    "899089149104620122910782754756910095497",
    "564177479688813429716564910718645657356",
    "132979495079251483717565906717834352219",
    "126601631307930206616972114137702790273",
    "1651044975265797863616721065106597564241",
    "38217196742947992835679479997123307043",
    "1342521228831833354715461413551686205925",
    "97895937838022620309026790508679003629",
    "749080744560555709814769272248719962971",
    "146686842676245753349689708687358184876",
    "41136059634732553559456711023560843037",
    "99603598099498707762068107842012164044",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "618708256121172115917225444658205159680",
    "135085831257420105511932492454364625470",
    "482596419477582560013813183248195477781",
    "179351740495315864195098113762983106282",
    "734917329505459768611992150788570820360",
    "73062099527698320407073030075131046008",
    "1333991354301368522512196064899493880564",
    "99573204806805497962082422441702041656",
    "173021080420505498356550887431156343261",
    "702306984720510813815199294935857017845",
    "113976926829195441887553509461786022633",
    "136283286754761729876789635714351641538",
    "1764182603656772982812317864128667365325",
    "932845973401736304917643144105724113264",
    "34410515695185066949979771014252260096",
    "1676806814539779643518083197252466559589",
    "73532313635074392944974785695838172453",
    "1530195770348625061718410767804951205478",
    "303127917241666984113380325134893912788",
    "143572956432032064744447501745832117320",
    "979090888644938360611991061608854301815",
    "137368381448604167703416046205455599816",
    "44865517427538800504241740979033245306",
    "80466408942777512049363027701449327301",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "157526224548632931644224402393760490185",
    "174107661030119018973646362480685393050",
    "366503061556370158810229951695642705038",
    "136731688598983939127472435238823692605",
    "172853077466930782957249088533345327364",
    "816589233988491856113892611160007340113",
    "1706241664392483122616630414095325426767",
    "1336395986670888604714795400021301436124",
    "180942759258101506955182199119065053589",
    "1779425227385014865413763254225852997980",
    "949119772679999304913254775119628944156",
    "143264002039824653101582016475268727293",
    "821053300062536159115601448644934990736",
    "68648213460155011086108492708709849999",
    "2922976863402117239063671147549004081",
    "1424839172046310268011085042199237354602",
    "601536179585149681911167127175566351660",
    "1292179497977935596813342509875710327204",
    "79338743477724285898920606540258882171",
    "28815764710943890042111735716087760171",
    "135562536653374708711117709628363219721",
    "180490860656218517844535655690783186403",
    "86597172461905980666665117306009535643",
    "61762885803371722481695307475049719440",
    "171487306867941110771102297001636865950",
    "135085831257420105511932492454364625470",
    "93649413116036234455532399336081095145",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1214574077763705187516383491048990527345",
    "58556264066334599336424357434445237777",
    "960898925801407232312924333468692865726",
    "429511501966379024610548772418614005336",
    "53013231170464020982930967155682389250",
    "157452307909752828034879955455996353017",
    "130453669725098768871634540984100509610",
    "1264448150763745905618356639115650703943",
    "141110666132885552924669202659075536526",
    "56252927251435970978636410777602608721",
    "70189786848693324615028118901413603891",
    "1758079100556217157185991271441314538",
    "153492746833767641913665382585991399102",
    "187482952606822645712460029589708661523",
    "1523707018797761236613836373921741997156",
    "126818845945534382313624863669169238336",
    "144119928408074986676617008060073758280",
    "57678861643322857944194165102718529863",
    "594398967705273052918318531949127567864",
    "172590953658237452717460291587113135731",
    "974238557182874992112444884018478807048",
    "949723518165874883315854372086659764362",
    "94456838198084845861692920132229050794",
    "91930047381741681611917147084398403736",
    "89121182156207114064839032294436231789",
    "1585972590187889070117028601346813813214",
    "1606202552653889608810199512646967422438",
    "18036140156580546806629269073307822465",
    "100566549119408744214400768677206684395",
    "167934086960411180903985257275635548275",
    "108552149900633290919250115311635650035",
    "211665252660455842616535517088582326351",
    "156761099224162496521554063647246510953",
    "93629764868847211533386885481792043",
    "87962768316051763542817110666100781851",
    "979905345926612536015630663886892108940",
    "130901246165120824748367805826666659537",
    "177028096127130855141974597834504714571",
    "790336683030703749616005572184538464784",
    "18924474281332607947427114014473837479",
    "1468091910298810725816359353565305732045",
    "364484297899500769415938702538049619119",
    "64933755017346766828885993644262595169",
    "2314453704286586957141741655351484658",
    "14202615834488052409859027248238516218",
    "1584226519763055173017297680793969390949",
    "30908084982265817655199528001939896756",
    "696031761158559988717156830525069362848",
    "1448899345559094949112654453072162878043",
    "1641862387002446068116192096070757843303",
    "1292203662441252026118372580930599634835",
    "137858457737126721339050743717226009000",
    "1094251261101801847513288225556855042079",
    "136250958068228316938199731614362970959",
    "677493057230061463812906195098240769208",
    "146722828362882336003877423755490060119",
    "133190003003759925793667076679125824144",
    "119410572960049574203441365705573330364",
    "139997011880036619526085207717010799176",
    "805684210294475109813538994712986997895",
    "293645540748671545017999185713660079650",
    "618087864432337385915594869955572671241",
    "1705039637729676748415488890044718082160",
    "5607578020819944315970194945020012681",
    "510531638386111881910053340190058988939",
    "40886540288475765763037402450466686093",
    "118320558337677119769123625739060418786",
    "68961250522390204303039500197253848819",
    "671334365265236941113753063318744059957",
    "1762126293480126793916319187708925702531",
    "110982975251410379469752288802819811268",
    "700543147431208495615048645222424964691",
    "11172017460127122262247192747398001865",
    "999894065589869448612231539797228218231",
    "86952898111294821451658113502791201350",
    "115305965424151250157684815253829770404",
    "1255593489441337196411111792584951488284",
    "772090384102639362198216457510496193",
    "5918423063880594543047647226827857654",
    "1660358534197915130918065586581585625625",
    "158669007246384560107761733536387868399",
    "1008627084322143835013959721941971697897",
    "3959983230967520511574185766120518907",
    "131951491516562017324429114881873478958",
    "147353619306145463894433932701739289836",
    "73934633302749851638600744339908206828",
    "141296000771128581945497538145890845343",
    "124743396873944380901919017967253874067",
    "150243093200272651816225092713556841110",
    "777454966023882485213336970821447203461",
    "798871996884082421610081782312663349463",
    "13863098581405631524288807864350146405",
    "613513255856977139911489735802844904928",
    "322749754952635112812467217236515710998",
    "97310642151613347726349452651452877766",
    "126337418415726794399520714079003318010",
    "173488751360057668935869030627777552292",
    "124798334296612191009914873740072641817",
    "4874888224965231630903852514116604247",
    "1113702662891479336314686028484409217895",
    "1014498806628630430116225554036073706840",
    "105155837525522083449912883665304934776",
    "1404731032427000255717859115232501530921",
    "1513333453617937806712878309090792611957",
    "63824875704704228052884797545106788461",
    "37611015082660603716849267229566955360",
    "1006965550971568470513339634703718564510",
    "33331637534491476913440505814675408305",
    "1821553421238437798512207917672639540169",
    "14031239273799417297806782851617180873",
    "103695068283875105018623992302427237269",
    "53569486981529370344752868158650318763",
    "33020214437710035965402411197660679021",
    "3297309995462571210361513208440932689",
    "99505528804453027457861451108826778638",
    "404530585981013310415620289049541730647",
    "719049603193869984913180724586595888983",
    "556160511185732132213865142485227929702",
    "54338610666023313538785988934735143030",
    "813368619794702869414005756234477751011",
    "1359933470730887149416155830775469624234",
    "133941792012963290912121566695757883799",
    "179782706227535055097755371789106436416",
    "96545038404121770533176160782770704216",
    "25091942262871963774451168345255052810",
    "135085831257420105511932492454364625470",
    "28753697929221812287482212449517425755",
    "1676603290518039711418379565247484306913",
    "109942998688311418033066856034581260283",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1491305867414706213015161036740010050407",
    "180418702711060811601049271977599275130",
    "169890989984787760587841791387523712921",
    "11119406790923360834756731176691512413",
    "182905984608557862932815513141399110877",
    "87610347679382204374849514063484826969",
    "135085831257420105511932492454364625470",
    "794694008638894565610503689879218203131",
    "171204665790647804337468407324534125555",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "180175623099158380248987811409809941831",
    "123489981763517494699775008546456061720",
    "115883727412415935571812162924229901730",
    "138902882366249903201239198490399945031",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "343942489170785946313945651402980657563",
    "1574076206413902276617103312132801420117",
    "135085831257420105511932492454364625470",
    "85588869322922048345445133830972928954",
    "46392132837367044793605408606640691738",
    "1100378328373936882818045327951760769678",
    "1366933002792501403514034768478701870222",
    "57544741910791006372460750620625338790",
    "93823778961912885171861814854836367565",
    "321688735089620358916457935724896313889",
    "83221429070676654997276869294717336401",
    "15659711577820632603287999978545437062",
    "19470982920213640634975089122141652435",
    "471019930735214455010790195510470539657",
    "943048867924649835013779616421314460758",
    "208257619197928444113832208997346155109",
    "90550453206581869791970009265946291996",
    "553913370659958613617397748244320672206",
    "1681045938191596506412316969696714615302",
    "178193152802508385064568305969678402720",
    "42824507231917785589406404051488242365",
    "95696153499528458313901596214115751145",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "136315757471550957542716891555713129836",
    "1637911438640321783717995568863978104742",
    "6070603776637052609765524141950388493",
    "67912827598195659661304478068192403362",
    "1094842765693892546910520378412041552806",
    "1246549294390316174211520358684701550573",
    "1528987468365251607818125127476060370393",
    "21639280041443497202806099100564393988",
    "827100470220406160910650394273344518714",
    "144160729758818962774870203617558065261",
    "100623443557313280538751593615269684508",
    "47822370175813177448723454097252028703",
    "135085831257420105511932492454364625470",
    "38246831695363040158059248428708217203",
    "136304994639276996811277527976407166479",
    "497499364745128359314402117207900903418",
    "118573796773268922105256773661754746281",
    "1679207499139484451917512311688469788867",
    "40265862868123904401909777138035216629",
    "411805792864265543417403918021470104007",
    "33537404157592852811592413282780955689",
    "5646439217058838061875000808900958241",
    "358571424882708899413310170471965259775",
    "94991374756337164216687314359149512939",
    "183942889134990626643214750014121392010",
    "945408849728034117516202938996026270345",
    "75004213001905193955715579484657661560",
    "98114927019826253102817332717172441868",
    "979605271246805204117717884328990531057",
    "180168108041645642368736335759857072520",
    "119668517586734080878390935967434516036",
    "978973849962745378212641441183594156354",
    "579087111844842619511528504666396934533",
    "1153959874226978119913857890632071810994",
    "1290872813666562319511413746722512367019",
    "39117030210078960345467688189971296476",
    "42675708704912587986905307549981316387",
    "133774208422544204712385208594916672852",
    "1076664590807474698013860243586089992698",
    "53744828640510478502430396508799097231",
    "58675320035953499899532680283682396280",
    "596564398432010081814808260562835248359",
    "296491127499601218917065895757213605938",
    "90933695478604663001573090783200358337",
    "20689955926650303163515534893265746746",
    "135085831257420105511932492454364625470",
    "1743153353454633366017320764647572977881",
    "683289855890887679216359651262730033383",
    "115468292258839821343722232521061340376",
    "135085831257420105511932492454364625470",
    "137147026445318887422604340055542353314",
    "1443519380077829511910627264749460202598",
    "664501847647250298311149032319303144827",
    "135085831257420105511932492454364625470",
    "46590510295835804303049911055833441641",
    "106663972824342135956571018803816649195",
    "30819441612753718577366232250007643490",
    "852298530973108873212161851321200820382",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "317131734443709433116505601136930857147",
    "135085831257420105511932492454364625470",
    "1030984695525452447715424858409070299032",
    "19621519501541880893262169693639313799",
    "535312728641325414318433154446926392210",
    "79957517381934331374505463763239679871",
    "109849097723912452994088294171860151303",
    "486164287917427656918200146926298480057",
    "947833919457653120214810965083035955432",
    "87977286206191110206643684053945734595",
    "154911443990380340341563367924870465980",
    "611027897215340775410757839603478111815",
    "36990817497430174858508344623774643994",
    "819756211280848030917202637728825520633",
    "112954101278082009685742498530365011169",
    "126048648882406442003602795325732745334",
    "60020754642282354823285669083003912494",
    "1006928117247909106515604664996585110540",
    "92658835324565758495130762072978604201",
    "982812517398244847818134688650878457542",
    "147417290197272725234607004164769047407",
    "56448737519681294968960799914289695112",
    "51920321377442756437204742573348251158",
    "1320801548407176755117757300189063729311",
    "151177604553563121726407199103432119959",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
