{
  "file": "core/src/num/nonzero.rs",
  "name": "num::nonzero::NonZero::<u128>::to_be",
  "hash": "151787991146863148909407337029188370587",
  "hash_direct": "140310498667642057834215366612336182217",
  "src": "pub const fn to_be(self) -> Self {\n                let result = self.get().to_be();\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }",
  "macro_backtrace": [
    {
      "callsite": "nonzero_integer! {\n            #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n            Self = $Ty,\n            Primitive = unsigned $Int,\n            SignedPrimitive = $Sint,\n            UnsignedPrimitive = $Int,\n            rot = $rot,\n            rot_op = $rot_op,\n            rot_result = $rot_result,\n            swap_op = $swap_op,\n            swapped = $swapped,\n            reversed = $reversed,\n            leading_zeros_test = concat!(stringify!($Int), \"::MAX\"),\n        }",
      "defsite": "macro_rules! nonzero_integer {\n    (\n        #[$stability:meta]\n        Self = $Ty:ident,\n        Primitive = $signedness:ident $Int:ident,\n        SignedPrimitive = $Sint:ty,\n        UnsignedPrimitive = $Uint:ty,\n\n        // Used in doc comments.\n        rot = $rot:literal,\n        rot_op = $rot_op:literal,\n        rot_result = $rot_result:literal,\n        swap_op = $swap_op:literal,\n        swapped = $swapped:literal,\n        reversed = $reversed:literal,\n        leading_zeros_test = $leading_zeros_test:expr,\n    ) => {\n        #[doc = sign_dependent_expr!{\n            $signedness ?\n            if signed {\n                concat!(\"An [`\", stringify!($Int), \"`] that is known not to equal zero.\")\n            }\n            if unsigned {\n                concat!(\"A [`\", stringify!($Int), \"`] that is known not to equal zero.\")\n            }\n        }]\n        ///\n        /// This enables some memory layout optimization.\n        #[doc = concat!(\"For example, `Option<\", stringify!($Ty), \">` is the same size as `\", stringify!($Int), \"`:\")]\n        ///\n        /// ```rust\n        #[doc = concat!(\"assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", stringify!($Int), \">());\")]\n        /// ```\n        ///\n        /// # Layout\n        ///\n        #[doc = concat!(\"`\", stringify!($Ty), \"` is guaranteed to have the same layout and bit validity as `\", stringify!($Int), \"`\")]\n        /// with the exception that `0` is not a valid instance.\n        #[doc = concat!(\"`Option<\", stringify!($Ty), \">` is guaranteed to be compatible with `\", stringify!($Int), \"`,\")]\n        /// including in FFI.\n        ///\n        /// Thanks to the [null pointer optimization],\n        #[doc = concat!(\"`\", stringify!($Ty), \"` and `Option<\", stringify!($Ty), \">`\")]\n        /// are guaranteed to have the same size and alignment:\n        ///\n        /// ```\n        #[doc = concat!(\"use std::num::\", stringify!($Ty), \";\")]\n        ///\n        #[doc = concat!(\"assert_eq!(size_of::<\", stringify!($Ty), \">(), size_of::<Option<\", stringify!($Ty), \">>());\")]\n        #[doc = concat!(\"assert_eq!(align_of::<\", stringify!($Ty), \">(), align_of::<Option<\", stringify!($Ty), \">>());\")]\n        /// ```\n        ///\n        /// [null pointer optimization]: crate::option#representation\n        #[$stability]\n        pub type $Ty = NonZero<$Int>;\n\n        impl NonZero<$Int> {\n            /// The size of this non-zero integer type in bits.\n            ///\n            #[doc = concat!(\"This value is equal to [`\", stringify!($Int), \"::BITS`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::BITS, \", stringify!($Int), \"::BITS);\")]\n            /// ```\n            #[stable(feature = \"nonzero_bits\", since = \"1.67.0\")]\n            pub const BITS: u32 = <$Int>::BITS;\n\n            /// Returns the number of leading zeros in the binary representation of `self`.\n            ///\n            /// On many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::<\", stringify!($Int), \">::new(\", $leading_zeros_test, \")?;\")]\n            ///\n            /// assert_eq!(n.leading_zeros(), 0);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn leading_zeros(self) -> u32 {\n                // SAFETY: since `self` cannot be zero, it is safe to call `ctlz_nonzero`.\n                unsafe {\n                    intrinsics::ctlz_nonzero(self.get() as $Uint)\n                }\n            }\n\n            /// Returns the number of trailing zeros in the binary representation\n            /// of `self`.\n            ///\n            /// On many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::<\", stringify!($Int), \">::new(0b0101000)?;\")]\n            ///\n            /// assert_eq!(n.trailing_zeros(), 3);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn trailing_zeros(self) -> u32 {\n                // SAFETY: since `self` cannot be zero, it is safe to call `cttz_nonzero`.\n                unsafe {\n                    intrinsics::cttz_nonzero(self.get() as $Uint)\n                }\n            }\n\n            /// Returns `self` with only the most significant bit set.\n            ///\n            /// # Example\n            ///\n            /// ```\n            /// #![feature(isolate_most_least_significant_one)]\n            ///\n            /// # use core::num::NonZero;\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let a = NonZero::<\", stringify!($Int), \">::new(0b_01100100)?;\")]\n            #[doc = concat!(\"let b = NonZero::<\", stringify!($Int), \">::new(0b_01000000)?;\")]\n            ///\n            /// assert_eq!(a.isolate_highest_one(), b);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"isolate_most_least_significant_one\", issue = \"136909\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn isolate_highest_one(self) -> Self {\n                let n = self.get() & (((1 as $Int) << (<$Int>::BITS - 1)).wrapping_shr(self.leading_zeros()));\n\n                // SAFETY:\n                // `self` is non-zero, so masking to preserve only the most\n                // significant set bit will result in a non-zero `n`.\n                unsafe { NonZero::new_unchecked(n) }\n            }\n\n            /// Returns `self` with only the least significant bit set.\n            ///\n            /// # Example\n            ///\n            /// ```\n            /// #![feature(isolate_most_least_significant_one)]\n            ///\n            /// # use core::num::NonZero;\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let a = NonZero::<\", stringify!($Int), \">::new(0b_01100100)?;\")]\n            #[doc = concat!(\"let b = NonZero::<\", stringify!($Int), \">::new(0b_00000100)?;\")]\n            ///\n            /// assert_eq!(a.isolate_lowest_one(), b);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"isolate_most_least_significant_one\", issue = \"136909\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn isolate_lowest_one(self) -> Self {\n                let n = self.get();\n                let n = n & n.wrapping_neg();\n\n                // SAFETY: `self` is non-zero, so `self` with only its least\n                // significant set bit will remain non-zero.\n                unsafe { NonZero::new_unchecked(n) }\n            }\n\n            /// Returns the number of ones in the binary representation of `self`.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let a = NonZero::<\", stringify!($Int), \">::new(0b100_0000)?;\")]\n            #[doc = concat!(\"let b = NonZero::<\", stringify!($Int), \">::new(0b100_0011)?;\")]\n            ///\n            /// assert_eq!(a.count_ones(), NonZero::new(1)?);\n            /// assert_eq!(b.count_ones(), NonZero::new(3)?);\n            /// # Some(())\n            /// # }\n            /// ```\n            ///\n            #[stable(feature = \"non_zero_count_ones\", since = \"1.86.0\")]\n            #[rustc_const_stable(feature = \"non_zero_count_ones\", since = \"1.86.0\")]\n            #[doc(alias = \"popcount\")]\n            #[doc(alias = \"popcnt\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            #[ensures(|result| result.get() > 0)]\n            pub const fn count_ones(self) -> NonZero<u32> {\n                // SAFETY:\n                // `self` is non-zero, which means it has at least one bit set, which means\n                // that the result of `count_ones` is non-zero.\n                unsafe { NonZero::new_unchecked(self.get().count_ones()) }\n            }\n\n            /// Shifts the bits to the left by a specified amount, `n`,\n            /// wrapping the truncated bits to the end of the resulting integer.\n            ///\n            /// Please note this isn't the same operation as the `<<` shifting operator!\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $rot_op, stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let m = NonZero::new(\", $rot_result, \")?;\")]\n            ///\n            #[doc = concat!(\"assert_eq!(n.rotate_left(\", $rot, \"), m);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            #[ensures(|result| result.get() != 0)]\n            #[ensures(|result| result.rotate_right(n).get() == old(self).get())]\n            pub const fn rotate_left(self, n: u32) -> Self {\n                let result = self.get().rotate_left(n);\n                // SAFETY: Rotating bits preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Shifts the bits to the right by a specified amount, `n`,\n            /// wrapping the truncated bits to the beginning of the resulting\n            /// integer.\n            ///\n            /// Please note this isn't the same operation as the `>>` shifting operator!\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $rot_result, stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let m = NonZero::new(\", $rot_op, \")?;\")]\n            ///\n            #[doc = concat!(\"assert_eq!(n.rotate_right(\", $rot, \"), m);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            #[ensures(|result| result.get() != 0)]\n            #[ensures(|result| result.rotate_left(n).get() == old(self).get())]\n            pub const fn rotate_right(self, n: u32) -> Self {\n                let result = self.get().rotate_right(n);\n                // SAFETY: Rotating bits preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Reverses the byte order of the integer.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $swap_op, stringify!($Int), \")?;\")]\n            /// let m = n.swap_bytes();\n            ///\n            #[doc = concat!(\"assert_eq!(m, NonZero::new(\", $swapped, \")?);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn swap_bytes(self) -> Self {\n                let result = self.get().swap_bytes();\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\n            /// second least-significant bit becomes second most-significant bit, etc.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $swap_op, stringify!($Int), \")?;\")]\n            /// let m = n.reverse_bits();\n            ///\n            #[doc = concat!(\"assert_eq!(m, NonZero::new(\", $reversed, \")?);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn reverse_bits(self) -> Self {\n                let result = self.get().reverse_bits();\n                // SAFETY: Reversing bits preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts an integer from big endian to the target's endianness.\n            ///\n            /// On big endian this is a no-op. On little endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            #[doc = concat!(\"use std::num::\", stringify!($Ty), \";\")]\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"big\") {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_be(n), n)\")]\n            /// } else {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_be(n), n.swap_bytes())\")]\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use]\n            #[inline(always)]\n            pub const fn from_be(x: Self) -> Self {\n                let result = $Int::from_be(x.get());\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts an integer from little endian to the target's endianness.\n            ///\n            /// On little endian this is a no-op. On big endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            #[doc = concat!(\"use std::num::\", stringify!($Ty), \";\")]\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"little\") {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_le(n), n)\")]\n            /// } else {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_le(n), n.swap_bytes())\")]\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use]\n            #[inline(always)]\n            pub const fn from_le(x: Self) -> Self {\n                let result = $Int::from_le(x.get());\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts `self` to big endian from the target's endianness.\n            ///\n            /// On big endian this is a no-op. On little endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"big\") {\n            ///     assert_eq!(n.to_be(), n)\n            /// } else {\n            ///     assert_eq!(n.to_be(), n.swap_bytes())\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn to_be(self) -> Self {\n                let result = self.get().to_be();\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts `self` to little endian from the target's endianness.\n            ///\n            /// On little endian this is a no-op. On big endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"little\") {\n            ///     assert_eq!(n.to_le(), n)\n            /// } else {\n            ///     assert_eq!(n.to_le(), n.swap_bytes())\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn to_le(self) -> Self {\n                let result = self.get().to_le();\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            nonzero_integer_signedness_dependent_methods! {\n                Primitive = $signedness $Int,\n                SignedPrimitive = $Sint,\n                UnsignedPrimitive = $Uint,\n            }\n\n            /// Multiplies two non-zero integers together.\n            /// Checks for overflow and returns [`None`] on overflow.\n            /// As a consequence, the result cannot wrap to zero.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let two = NonZero::new(2\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let four = NonZero::new(4\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let max = NonZero::new(\", stringify!($Int), \"::MAX)?;\")]\n            ///\n            /// assert_eq!(Some(four), two.checked_mul(two));\n            /// assert_eq!(None, max.checked_mul(two));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn checked_mul(self, other: Self) -> Option<Self> {\n                if let Some(result) = self.get().checked_mul(other.get()) {\n                    // SAFETY:\n                    // - `checked_mul` returns `None` on overflow\n                    // - `self` and `other` are non-zero\n                    // - the only way to get zero from a multiplication without overflow is for one\n                    //   of the sides to be zero\n                    //\n                    // So the result cannot be zero.\n                    Some(unsafe { Self::new_unchecked(result) })\n                } else {\n                    None\n                }\n            }\n\n            /// Multiplies two non-zero integers together.\n            #[doc = concat!(\"Return [`NonZero::<\", stringify!($Int), \">::MAX`] on overflow.\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let two = NonZero::new(2\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let four = NonZero::new(4\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let max = NonZero::new(\", stringify!($Int), \"::MAX)?;\")]\n            ///\n            /// assert_eq!(four, two.saturating_mul(two));\n            /// assert_eq!(max, four.saturating_mul(max));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn saturating_mul(self, other: Self) -> Self {\n                // SAFETY:\n                // - `saturating_mul` returns `u*::MAX`/`i*::MAX`/`i*::MIN` on overflow/underflow,\n                //   all of which are non-zero\n                // - `self` and `other` are non-zero\n                // - the only way to get zero from a multiplication without overflow is for one\n                //   of the sides to be zero\n                //\n                // So the result cannot be zero.\n                unsafe { Self::new_unchecked(self.get().saturating_mul(other.get())) }\n            }\n\n            /// Multiplies two non-zero integers together,\n            /// assuming overflow cannot occur.\n            /// Overflow is unchecked, and it is undefined behavior to overflow\n            /// *even if the result would wrap to a non-zero value*.\n            /// The behavior is undefined as soon as\n            #[doc = sign_dependent_expr!{\n                $signedness ?\n                if signed {\n                    concat!(\"`self * rhs > \", stringify!($Int), \"::MAX`, \",\n                            \"or `self * rhs < \", stringify!($Int), \"::MIN`.\")\n                }\n                if unsigned {\n                    concat!(\"`self * rhs > \", stringify!($Int), \"::MAX`.\")\n                }\n            }]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_ops)]\n            ///\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let two = NonZero::new(2\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let four = NonZero::new(4\", stringify!($Int), \")?;\")]\n            ///\n            /// assert_eq!(four, unsafe { two.unchecked_mul(two) });\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            #[requires({\n                self.get().checked_mul(other.get()).is_some()\n            })]\n            #[ensures(|result: &Self| {\n                self.get().checked_mul(other.get()).is_some_and(|product| product == result.get())\n            })]\n            pub const unsafe fn unchecked_mul(self, other: Self) -> Self {\n                // SAFETY: The caller ensures there is no overflow.\n                unsafe { Self::new_unchecked(self.get().unchecked_mul(other.get())) }\n            }\n\n            /// Raises non-zero value to an integer power.\n            /// Checks for overflow and returns [`None`] on overflow.\n            /// As a consequence, the result cannot wrap to zero.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let three = NonZero::new(3\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let twenty_seven = NonZero::new(27\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let half_max = NonZero::new(\", stringify!($Int), \"::MAX / 2)?;\")]\n            ///\n            /// assert_eq!(Some(twenty_seven), three.checked_pow(3));\n            /// assert_eq!(None, half_max.checked_pow(3));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn checked_pow(self, other: u32) -> Option<Self> {\n                if let Some(result) = self.get().checked_pow(other) {\n                    // SAFETY:\n                    // - `checked_pow` returns `None` on overflow/underflow\n                    // - `self` is non-zero\n                    // - the only way to get zero from an exponentiation without overflow is\n                    //   for base to be zero\n                    //\n                    // So the result cannot be zero.\n                    Some(unsafe { Self::new_unchecked(result) })\n                } else {\n                    None\n                }\n            }\n\n            /// Raise non-zero value to an integer power.\n            #[doc = sign_dependent_expr!{\n                $signedness ?\n                if signed {\n                    concat!(\"Return [`NonZero::<\", stringify!($Int), \">::MIN`] \",\n                                \"or [`NonZero::<\", stringify!($Int), \">::MAX`] on overflow.\")\n                }\n                if unsigned {\n                    concat!(\"Return [`NonZero::<\", stringify!($Int), \">::MAX`] on overflow.\")\n                }\n            }]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let three = NonZero::new(3\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let twenty_seven = NonZero::new(27\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let max = NonZero::new(\", stringify!($Int), \"::MAX)?;\")]\n            ///\n            /// assert_eq!(twenty_seven, three.saturating_pow(3));\n            /// assert_eq!(max, max.saturating_pow(3));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn saturating_pow(self, other: u32) -> Self {\n                // SAFETY:\n                // - `saturating_pow` returns `u*::MAX`/`i*::MAX`/`i*::MIN` on overflow/underflow,\n                //   all of which are non-zero\n                // - `self` is non-zero\n                // - the only way to get zero from an exponentiation without overflow is\n                //   for base to be zero\n                //\n                // So the result cannot be zero.\n                unsafe { Self::new_unchecked(self.get().saturating_pow(other)) }\n            }\n        }\n\n        #[stable(feature = \"nonzero_parse\", since = \"1.35.0\")]\n        impl FromStr for NonZero<$Int> {\n            type Err = ParseIntError;\n            fn from_str(src: &str) -> Result<Self, Self::Err> {\n                Self::new(<$Int>::from_str_radix(src, 10)?)\n                    .ok_or(ParseIntError {\n                        kind: IntErrorKind::Zero\n                    })\n            }\n        }\n\n        nonzero_integer_signedness_dependent_impls!($signedness $Int);\n    };\n\n    (\n        Self = $Ty:ident,\n        Primitive = unsigned $Int:ident,\n        SignedPrimitive = $Sint:ident,\n        rot = $rot:literal,\n        rot_op = $rot_op:literal,\n        rot_result = $rot_result:literal,\n        swap_op = $swap_op:literal,\n        swapped = $swapped:literal,\n        reversed = $reversed:literal,\n        $(,)?\n    ) => {\n        nonzero_integer! {\n            #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n            Self = $Ty,\n            Primitive = unsigned $Int,\n            SignedPrimitive = $Sint,\n            UnsignedPrimitive = $Int,\n            rot = $rot,\n            rot_op = $rot_op,\n            rot_result = $rot_result,\n            swap_op = $swap_op,\n            swapped = $swapped,\n            reversed = $reversed,\n            leading_zeros_test = concat!(stringify!($Int), \"::MAX\"),\n        }\n    };\n\n    (\n        Self = $Ty:ident,\n        Primitive = signed $Int:ident,\n        UnsignedPrimitive = $Uint:ident,\n        rot = $rot:literal,\n        rot_op = $rot_op:literal,\n        rot_result = $rot_result:literal,\n        swap_op = $swap_op:literal,\n        swapped = $swapped:literal,\n        reversed = $reversed:literal,\n    ) => {\n        nonzero_integer! {\n            #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")]\n            Self = $Ty,\n            Primitive = signed $Int,\n            SignedPrimitive = $Int,\n            UnsignedPrimitive = $Uint,\n            rot = $rot,\n            rot_op = $rot_op,\n            rot_result = $rot_result,\n            swap_op = $swap_op,\n            swapped = $swapped,\n            reversed = $reversed,\n            leading_zeros_test = concat!(\"-1\", stringify!($Int)),\n        }\n    };\n}"
    },
    {
      "callsite": "nonzero_integer! {\n    Self = NonZeroU128,\n    Primitive = unsigned u128,\n    SignedPrimitive = i128,\n    rot = 16,\n    rot_op = \"0x13f40000000000000000000000004f76\",\n    rot_result = \"0x4f7613f4\",\n    swap_op = \"0x12345678901234567890123456789012\",\n    swapped = \"0x12907856341290785634129078563412\",\n    reversed = \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n}",
      "defsite": "macro_rules! nonzero_integer {\n    (\n        #[$stability:meta]\n        Self = $Ty:ident,\n        Primitive = $signedness:ident $Int:ident,\n        SignedPrimitive = $Sint:ty,\n        UnsignedPrimitive = $Uint:ty,\n\n        // Used in doc comments.\n        rot = $rot:literal,\n        rot_op = $rot_op:literal,\n        rot_result = $rot_result:literal,\n        swap_op = $swap_op:literal,\n        swapped = $swapped:literal,\n        reversed = $reversed:literal,\n        leading_zeros_test = $leading_zeros_test:expr,\n    ) => {\n        #[doc = sign_dependent_expr!{\n            $signedness ?\n            if signed {\n                concat!(\"An [`\", stringify!($Int), \"`] that is known not to equal zero.\")\n            }\n            if unsigned {\n                concat!(\"A [`\", stringify!($Int), \"`] that is known not to equal zero.\")\n            }\n        }]\n        ///\n        /// This enables some memory layout optimization.\n        #[doc = concat!(\"For example, `Option<\", stringify!($Ty), \">` is the same size as `\", stringify!($Int), \"`:\")]\n        ///\n        /// ```rust\n        #[doc = concat!(\"assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", stringify!($Int), \">());\")]\n        /// ```\n        ///\n        /// # Layout\n        ///\n        #[doc = concat!(\"`\", stringify!($Ty), \"` is guaranteed to have the same layout and bit validity as `\", stringify!($Int), \"`\")]\n        /// with the exception that `0` is not a valid instance.\n        #[doc = concat!(\"`Option<\", stringify!($Ty), \">` is guaranteed to be compatible with `\", stringify!($Int), \"`,\")]\n        /// including in FFI.\n        ///\n        /// Thanks to the [null pointer optimization],\n        #[doc = concat!(\"`\", stringify!($Ty), \"` and `Option<\", stringify!($Ty), \">`\")]\n        /// are guaranteed to have the same size and alignment:\n        ///\n        /// ```\n        #[doc = concat!(\"use std::num::\", stringify!($Ty), \";\")]\n        ///\n        #[doc = concat!(\"assert_eq!(size_of::<\", stringify!($Ty), \">(), size_of::<Option<\", stringify!($Ty), \">>());\")]\n        #[doc = concat!(\"assert_eq!(align_of::<\", stringify!($Ty), \">(), align_of::<Option<\", stringify!($Ty), \">>());\")]\n        /// ```\n        ///\n        /// [null pointer optimization]: crate::option#representation\n        #[$stability]\n        pub type $Ty = NonZero<$Int>;\n\n        impl NonZero<$Int> {\n            /// The size of this non-zero integer type in bits.\n            ///\n            #[doc = concat!(\"This value is equal to [`\", stringify!($Int), \"::BITS`].\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            #[doc = concat!(\"assert_eq!(NonZero::<\", stringify!($Int), \">::BITS, \", stringify!($Int), \"::BITS);\")]\n            /// ```\n            #[stable(feature = \"nonzero_bits\", since = \"1.67.0\")]\n            pub const BITS: u32 = <$Int>::BITS;\n\n            /// Returns the number of leading zeros in the binary representation of `self`.\n            ///\n            /// On many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::<\", stringify!($Int), \">::new(\", $leading_zeros_test, \")?;\")]\n            ///\n            /// assert_eq!(n.leading_zeros(), 0);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn leading_zeros(self) -> u32 {\n                // SAFETY: since `self` cannot be zero, it is safe to call `ctlz_nonzero`.\n                unsafe {\n                    intrinsics::ctlz_nonzero(self.get() as $Uint)\n                }\n            }\n\n            /// Returns the number of trailing zeros in the binary representation\n            /// of `self`.\n            ///\n            /// On many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::<\", stringify!($Int), \">::new(0b0101000)?;\")]\n            ///\n            /// assert_eq!(n.trailing_zeros(), 3);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn trailing_zeros(self) -> u32 {\n                // SAFETY: since `self` cannot be zero, it is safe to call `cttz_nonzero`.\n                unsafe {\n                    intrinsics::cttz_nonzero(self.get() as $Uint)\n                }\n            }\n\n            /// Returns `self` with only the most significant bit set.\n            ///\n            /// # Example\n            ///\n            /// ```\n            /// #![feature(isolate_most_least_significant_one)]\n            ///\n            /// # use core::num::NonZero;\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let a = NonZero::<\", stringify!($Int), \">::new(0b_01100100)?;\")]\n            #[doc = concat!(\"let b = NonZero::<\", stringify!($Int), \">::new(0b_01000000)?;\")]\n            ///\n            /// assert_eq!(a.isolate_highest_one(), b);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"isolate_most_least_significant_one\", issue = \"136909\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn isolate_highest_one(self) -> Self {\n                let n = self.get() & (((1 as $Int) << (<$Int>::BITS - 1)).wrapping_shr(self.leading_zeros()));\n\n                // SAFETY:\n                // `self` is non-zero, so masking to preserve only the most\n                // significant set bit will result in a non-zero `n`.\n                unsafe { NonZero::new_unchecked(n) }\n            }\n\n            /// Returns `self` with only the least significant bit set.\n            ///\n            /// # Example\n            ///\n            /// ```\n            /// #![feature(isolate_most_least_significant_one)]\n            ///\n            /// # use core::num::NonZero;\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let a = NonZero::<\", stringify!($Int), \">::new(0b_01100100)?;\")]\n            #[doc = concat!(\"let b = NonZero::<\", stringify!($Int), \">::new(0b_00000100)?;\")]\n            ///\n            /// assert_eq!(a.isolate_lowest_one(), b);\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"isolate_most_least_significant_one\", issue = \"136909\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn isolate_lowest_one(self) -> Self {\n                let n = self.get();\n                let n = n & n.wrapping_neg();\n\n                // SAFETY: `self` is non-zero, so `self` with only its least\n                // significant set bit will remain non-zero.\n                unsafe { NonZero::new_unchecked(n) }\n            }\n\n            /// Returns the number of ones in the binary representation of `self`.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let a = NonZero::<\", stringify!($Int), \">::new(0b100_0000)?;\")]\n            #[doc = concat!(\"let b = NonZero::<\", stringify!($Int), \">::new(0b100_0011)?;\")]\n            ///\n            /// assert_eq!(a.count_ones(), NonZero::new(1)?);\n            /// assert_eq!(b.count_ones(), NonZero::new(3)?);\n            /// # Some(())\n            /// # }\n            /// ```\n            ///\n            #[stable(feature = \"non_zero_count_ones\", since = \"1.86.0\")]\n            #[rustc_const_stable(feature = \"non_zero_count_ones\", since = \"1.86.0\")]\n            #[doc(alias = \"popcount\")]\n            #[doc(alias = \"popcnt\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            #[ensures(|result| result.get() > 0)]\n            pub const fn count_ones(self) -> NonZero<u32> {\n                // SAFETY:\n                // `self` is non-zero, which means it has at least one bit set, which means\n                // that the result of `count_ones` is non-zero.\n                unsafe { NonZero::new_unchecked(self.get().count_ones()) }\n            }\n\n            /// Shifts the bits to the left by a specified amount, `n`,\n            /// wrapping the truncated bits to the end of the resulting integer.\n            ///\n            /// Please note this isn't the same operation as the `<<` shifting operator!\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $rot_op, stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let m = NonZero::new(\", $rot_result, \")?;\")]\n            ///\n            #[doc = concat!(\"assert_eq!(n.rotate_left(\", $rot, \"), m);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            #[ensures(|result| result.get() != 0)]\n            #[ensures(|result| result.rotate_right(n).get() == old(self).get())]\n            pub const fn rotate_left(self, n: u32) -> Self {\n                let result = self.get().rotate_left(n);\n                // SAFETY: Rotating bits preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Shifts the bits to the right by a specified amount, `n`,\n            /// wrapping the truncated bits to the beginning of the resulting\n            /// integer.\n            ///\n            /// Please note this isn't the same operation as the `>>` shifting operator!\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $rot_result, stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let m = NonZero::new(\", $rot_op, \")?;\")]\n            ///\n            #[doc = concat!(\"assert_eq!(n.rotate_right(\", $rot, \"), m);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            #[ensures(|result| result.get() != 0)]\n            #[ensures(|result| result.rotate_left(n).get() == old(self).get())]\n            pub const fn rotate_right(self, n: u32) -> Self {\n                let result = self.get().rotate_right(n);\n                // SAFETY: Rotating bits preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Reverses the byte order of the integer.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $swap_op, stringify!($Int), \")?;\")]\n            /// let m = n.swap_bytes();\n            ///\n            #[doc = concat!(\"assert_eq!(m, NonZero::new(\", $swapped, \")?);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn swap_bytes(self) -> Self {\n                let result = self.get().swap_bytes();\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\n            /// second least-significant bit becomes second most-significant bit, etc.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(\", $swap_op, stringify!($Int), \")?;\")]\n            /// let m = n.reverse_bits();\n            ///\n            #[doc = concat!(\"assert_eq!(m, NonZero::new(\", $reversed, \")?);\")]\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn reverse_bits(self) -> Self {\n                let result = self.get().reverse_bits();\n                // SAFETY: Reversing bits preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts an integer from big endian to the target's endianness.\n            ///\n            /// On big endian this is a no-op. On little endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            #[doc = concat!(\"use std::num::\", stringify!($Ty), \";\")]\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"big\") {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_be(n), n)\")]\n            /// } else {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_be(n), n.swap_bytes())\")]\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use]\n            #[inline(always)]\n            pub const fn from_be(x: Self) -> Self {\n                let result = $Int::from_be(x.get());\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts an integer from little endian to the target's endianness.\n            ///\n            /// On little endian this is a no-op. On big endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            #[doc = concat!(\"use std::num::\", stringify!($Ty), \";\")]\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"little\") {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_le(n), n)\")]\n            /// } else {\n            #[doc = concat!(\"    assert_eq!(\", stringify!($Ty), \"::from_le(n), n.swap_bytes())\")]\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use]\n            #[inline(always)]\n            pub const fn from_le(x: Self) -> Self {\n                let result = $Int::from_le(x.get());\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts `self` to big endian from the target's endianness.\n            ///\n            /// On big endian this is a no-op. On little endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"big\") {\n            ///     assert_eq!(n.to_be(), n)\n            /// } else {\n            ///     assert_eq!(n.to_be(), n.swap_bytes())\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn to_be(self) -> Self {\n                let result = self.get().to_be();\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            /// Converts `self` to little endian from the target's endianness.\n            ///\n            /// On little endian this is a no-op. On big endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_bitwise)]\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let n = NonZero::new(0x1A\", stringify!($Int), \")?;\")]\n            ///\n            /// if cfg!(target_endian = \"little\") {\n            ///     assert_eq!(n.to_le(), n)\n            /// } else {\n            ///     assert_eq!(n.to_le(), n.swap_bytes())\n            /// }\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_bitwise\", issue = \"128281\")]\n            #[must_use = \"this returns the result of the operation, \\\n                        without modifying the original\"]\n            #[inline(always)]\n            pub const fn to_le(self) -> Self {\n                let result = self.get().to_le();\n                // SAFETY: Shuffling bytes preserves the property int > 0.\n                unsafe { Self::new_unchecked(result) }\n            }\n\n            nonzero_integer_signedness_dependent_methods! {\n                Primitive = $signedness $Int,\n                SignedPrimitive = $Sint,\n                UnsignedPrimitive = $Uint,\n            }\n\n            /// Multiplies two non-zero integers together.\n            /// Checks for overflow and returns [`None`] on overflow.\n            /// As a consequence, the result cannot wrap to zero.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let two = NonZero::new(2\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let four = NonZero::new(4\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let max = NonZero::new(\", stringify!($Int), \"::MAX)?;\")]\n            ///\n            /// assert_eq!(Some(four), two.checked_mul(two));\n            /// assert_eq!(None, max.checked_mul(two));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn checked_mul(self, other: Self) -> Option<Self> {\n                if let Some(result) = self.get().checked_mul(other.get()) {\n                    // SAFETY:\n                    // - `checked_mul` returns `None` on overflow\n                    // - `self` and `other` are non-zero\n                    // - the only way to get zero from a multiplication without overflow is for one\n                    //   of the sides to be zero\n                    //\n                    // So the result cannot be zero.\n                    Some(unsafe { Self::new_unchecked(result) })\n                } else {\n                    None\n                }\n            }\n\n            /// Multiplies two non-zero integers together.\n            #[doc = concat!(\"Return [`NonZero::<\", stringify!($Int), \">::MAX`] on overflow.\")]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let two = NonZero::new(2\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let four = NonZero::new(4\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let max = NonZero::new(\", stringify!($Int), \"::MAX)?;\")]\n            ///\n            /// assert_eq!(four, two.saturating_mul(two));\n            /// assert_eq!(max, four.saturating_mul(max));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn saturating_mul(self, other: Self) -> Self {\n                // SAFETY:\n                // - `saturating_mul` returns `u*::MAX`/`i*::MAX`/`i*::MIN` on overflow/underflow,\n                //   all of which are non-zero\n                // - `self` and `other` are non-zero\n                // - the only way to get zero from a multiplication without overflow is for one\n                //   of the sides to be zero\n                //\n                // So the result cannot be zero.\n                unsafe { Self::new_unchecked(self.get().saturating_mul(other.get())) }\n            }\n\n            /// Multiplies two non-zero integers together,\n            /// assuming overflow cannot occur.\n            /// Overflow is unchecked, and it is undefined behavior to overflow\n            /// *even if the result would wrap to a non-zero value*.\n            /// The behavior is undefined as soon as\n            #[doc = sign_dependent_expr!{\n                $signedness ?\n                if signed {\n                    concat!(\"`self * rhs > \", stringify!($Int), \"::MAX`, \",\n                            \"or `self * rhs < \", stringify!($Int), \"::MIN`.\")\n                }\n                if unsigned {\n                    concat!(\"`self * rhs > \", stringify!($Int), \"::MAX`.\")\n                }\n            }]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// #![feature(nonzero_ops)]\n            ///\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let two = NonZero::new(2\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let four = NonZero::new(4\", stringify!($Int), \")?;\")]\n            ///\n            /// assert_eq!(four, unsafe { two.unchecked_mul(two) });\n            /// # Some(())\n            /// # }\n            /// ```\n            #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            #[requires({\n                self.get().checked_mul(other.get()).is_some()\n            })]\n            #[ensures(|result: &Self| {\n                self.get().checked_mul(other.get()).is_some_and(|product| product == result.get())\n            })]\n            pub const unsafe fn unchecked_mul(self, other: Self) -> Self {\n                // SAFETY: The caller ensures there is no overflow.\n                unsafe { Self::new_unchecked(self.get().unchecked_mul(other.get())) }\n            }\n\n            /// Raises non-zero value to an integer power.\n            /// Checks for overflow and returns [`None`] on overflow.\n            /// As a consequence, the result cannot wrap to zero.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let three = NonZero::new(3\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let twenty_seven = NonZero::new(27\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let half_max = NonZero::new(\", stringify!($Int), \"::MAX / 2)?;\")]\n            ///\n            /// assert_eq!(Some(twenty_seven), three.checked_pow(3));\n            /// assert_eq!(None, half_max.checked_pow(3));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn checked_pow(self, other: u32) -> Option<Self> {\n                if let Some(result) = self.get().checked_pow(other) {\n                    // SAFETY:\n                    // - `checked_pow` returns `None` on overflow/underflow\n                    // - `self` is non-zero\n                    // - the only way to get zero from an exponentiation without overflow is\n                    //   for base to be zero\n                    //\n                    // So the result cannot be zero.\n                    Some(unsafe { Self::new_unchecked(result) })\n                } else {\n                    None\n                }\n            }\n\n            /// Raise non-zero value to an integer power.\n            #[doc = sign_dependent_expr!{\n                $signedness ?\n                if signed {\n                    concat!(\"Return [`NonZero::<\", stringify!($Int), \">::MIN`] \",\n                                \"or [`NonZero::<\", stringify!($Int), \">::MAX`] on overflow.\")\n                }\n                if unsigned {\n                    concat!(\"Return [`NonZero::<\", stringify!($Int), \">::MAX`] on overflow.\")\n                }\n            }]\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// # use std::num::NonZero;\n            /// #\n            /// # fn main() { test().unwrap(); }\n            /// # fn test() -> Option<()> {\n            #[doc = concat!(\"let three = NonZero::new(3\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let twenty_seven = NonZero::new(27\", stringify!($Int), \")?;\")]\n            #[doc = concat!(\"let max = NonZero::new(\", stringify!($Int), \"::MAX)?;\")]\n            ///\n            /// assert_eq!(twenty_seven, three.saturating_pow(3));\n            /// assert_eq!(max, max.saturating_pow(3));\n            /// # Some(())\n            /// # }\n            /// ```\n            #[stable(feature = \"nonzero_checked_ops\", since = \"1.64.0\")]\n            #[rustc_const_stable(feature = \"const_nonzero_checked_ops\", since = \"1.64.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[inline]\n            pub const fn saturating_pow(self, other: u32) -> Self {\n                // SAFETY:\n                // - `saturating_pow` returns `u*::MAX`/`i*::MAX`/`i*::MIN` on overflow/underflow,\n                //   all of which are non-zero\n                // - `self` is non-zero\n                // - the only way to get zero from an exponentiation without overflow is\n                //   for base to be zero\n                //\n                // So the result cannot be zero.\n                unsafe { Self::new_unchecked(self.get().saturating_pow(other)) }\n            }\n        }\n\n        #[stable(feature = \"nonzero_parse\", since = \"1.35.0\")]\n        impl FromStr for NonZero<$Int> {\n            type Err = ParseIntError;\n            fn from_str(src: &str) -> Result<Self, Self::Err> {\n                Self::new(<$Int>::from_str_radix(src, 10)?)\n                    .ok_or(ParseIntError {\n                        kind: IntErrorKind::Zero\n                    })\n            }\n        }\n\n        nonzero_integer_signedness_dependent_impls!($signedness $Int);\n    };\n\n    (\n        Self = $Ty:ident,\n        Primitive = unsigned $Int:ident,\n        SignedPrimitive = $Sint:ident,\n        rot = $rot:literal,\n        rot_op = $rot_op:literal,\n        rot_result = $rot_result:literal,\n        swap_op = $swap_op:literal,\n        swapped = $swapped:literal,\n        reversed = $reversed:literal,\n        $(,)?\n    ) => {\n        nonzero_integer! {\n            #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n            Self = $Ty,\n            Primitive = unsigned $Int,\n            SignedPrimitive = $Sint,\n            UnsignedPrimitive = $Int,\n            rot = $rot,\n            rot_op = $rot_op,\n            rot_result = $rot_result,\n            swap_op = $swap_op,\n            swapped = $swapped,\n            reversed = $reversed,\n            leading_zeros_test = concat!(stringify!($Int), \"::MAX\"),\n        }\n    };\n\n    (\n        Self = $Ty:ident,\n        Primitive = signed $Int:ident,\n        UnsignedPrimitive = $Uint:ident,\n        rot = $rot:literal,\n        rot_op = $rot_op:literal,\n        rot_result = $rot_result:literal,\n        swap_op = $swap_op:literal,\n        swapped = $swapped:literal,\n        reversed = $reversed:literal,\n    ) => {\n        nonzero_integer! {\n            #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")]\n            Self = $Ty,\n            Primitive = signed $Int,\n            SignedPrimitive = $Int,\n            UnsignedPrimitive = $Uint,\n            rot = $rot,\n            rot_op = $rot_op,\n            rot_result = $rot_result,\n            swap_op = $swap_op,\n            swapped = $swapped,\n            reversed = $reversed,\n            leading_zeros_test = concat!(\"-1\", stringify!($Int)),\n        }\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "8413912721582228778835144920444015828",
    "174948389658366639395461437428986350606",
    "1249603277186598150516891840811753966518",
    "96797857834202028433736767521767631833",
    "1029155283933590422918156414960766129054",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "887235042902537721816254572592014930578",
    "739520556846959085018120036998133255835"
  ]
}
