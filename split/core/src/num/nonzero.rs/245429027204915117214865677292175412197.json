{
  "file": "core/src/num/nonzero.rs",
  "name": "num::nonzero::verify::nonzero_check_clamp_panic_for_16",
  "hash": "245429027204915117214865677292175412197",
  "hash_direct": "9830962601490540956753036474803540850",
  "proof_kind": "\"Standard\"",
  "attrs": [
    "#[kanitool::should_panic]\n",
    "#[kanitool::proof]\n"
  ],
  "src": "pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min > max, so the function should panic\n                kani::assume(min > max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "nonzero_check_clamp_panic!(core::num::NonZeroI16, nonzero_check_clamp_panic_for_16)",
      "defsite": "macro_rules! nonzero_check_clamp_panic {\n        ($nonzero_type:ty, $nonzero_check_clamp_for:ident) => {\n            #[kani::proof]\n            #[kani::should_panic]\n            pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min > max, so the function should panic\n                kani::assume(min > max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "760616515452318504213703466162062514975",
    "1678882118416531867113664163933951255060",
    "605534954376293849310647576447013231383",
    "266466827199358294113067661536972302700",
    "816423146626932101618290422735086583154",
    "162562988142812920362309614379838072419",
    "151911643321790013536813475838790071308",
    "52755766449402603223135840422116151991",
    "166736664629971473344247814829027580980",
    "556001566055259830713508366928416379428",
    "83748309144765297396476272197807477197",
    "86765439921093133115818795479068985975",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "49046951375888992448327350716309925982",
    "85708581081340283762618311724398346864",
    "550796495935094497912010570408253148875",
    "89386612039774881874541021813294045239",
    "76808226065753919756889035534419314271",
    "1073277843215096439416378744061407037600",
    "31866339049214299944046744547536671161",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "223751754237020507710457877480291630364",
    "1218790289670026660418434748374709001141",
    "399232661239117480517401994520839366833"
  ]
}
