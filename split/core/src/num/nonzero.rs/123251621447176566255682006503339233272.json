{
  "file": "core/src/num/nonzero.rs",
  "name": "num::nonzero::verify::nonzero_check_clamp_for_u64",
  "hash": "123251621447176566255682006503339233272",
  "hash_direct": "1758068859534433315211833388007190862176",
  "proof_kind": "\"Standard\"",
  "attrs": [
    "#[kanitool::proof]\n"
  ],
  "src": "pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min <= max, so the function should no panic\n                kani::assume(min <= max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "nonzero_check_clamp!(core::num::NonZeroU64, nonzero_check_clamp_for_u64)",
      "defsite": "macro_rules! nonzero_check_clamp {\n        ($nonzero_type:ty, $nonzero_check_clamp_for:ident) => {\n            #[kani::proof]\n            pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min <= max, so the function should no panic\n                kani::assume(min <= max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "610816752303557080116092783695730659944",
    "55732587752735335945356669824614635762",
    "172825646023406184821933934370587559302",
    "778713662165510584811932027160146289674",
    "155903546558043130181109834204848741707",
    "162562988142812920362309614379838072419",
    "110627676895616442107840116311482708557",
    "688782017636523604716036101703962629200",
    "762484418174721663513071567709372013136",
    "93293463678004156444643960708769643119",
    "1635424469768243193210820870458831414354",
    "611270727318963213014367260156185100224",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "1280633221096160101417494072020454389800",
    "41441667757989722921858215981358383960",
    "859654358121884493817897385781541455321",
    "15497009557666051108565464389064320125",
    "831470753124463785416189188427488998043",
    "1783210845261203538713498935807640544288",
    "86149906497652422709198706302615219549",
    "181188309777117069329883468812680038631",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "4232761083145976883077505220950492834",
    "1218790289670026660418434748374709001141",
    "399232661239117480517401994520839366833"
  ]
}
