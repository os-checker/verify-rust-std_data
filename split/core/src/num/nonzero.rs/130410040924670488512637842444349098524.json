{
  "file": "core/src/num/nonzero.rs",
  "name": "num::nonzero::verify::nonzero_check_clamp_panic_for_64",
  "hash": "130410040924670488512637842444349098524",
  "hash_direct": "55559228899235906241715183642784587166",
  "proof_kind": "\"Standard\"",
  "attrs": [
    "#[kanitool::should_panic]\n",
    "#[kanitool::proof]\n"
  ],
  "src": "pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min > max, so the function should panic\n                kani::assume(min > max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "nonzero_check_clamp_panic!(core::num::NonZeroI64, nonzero_check_clamp_panic_for_64)",
      "defsite": "macro_rules! nonzero_check_clamp_panic {\n        ($nonzero_type:ty, $nonzero_check_clamp_for:ident) => {\n            #[kani::proof]\n            #[kani::should_panic]\n            pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min > max, so the function should panic\n                kani::assume(min > max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "20764881003415525917678483578325949255",
    "146477521221872206318718349944137895696",
    "180246237150484382802839638638238114255",
    "91135116531165958908997621750933815702",
    "1707350114664415705912018169157381460741",
    "162562988142812920362309614379838072419",
    "9745278047109817941957780214339587305",
    "1207771876616195886310815682927233291955",
    "96099211955268874736077071022599885205",
    "558522322774706845810264038543989882764",
    "1358654074792053602715568425588791662501",
    "1579658759496127426612764035094764908373",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "275949215533994494214783240370975628585",
    "129618744899161292036831378131254984622",
    "30406495824869672562813259968860051586",
    "73817422037045882739439369265321494780",
    "680118960098553195316946807206593166389",
    "139592801832764653561301997095005364333",
    "1733181658383184578815795414129230275454",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "1624549416078244174716803805432047547724",
    "1218790289670026660418434748374709001141",
    "399232661239117480517401994520839366833"
  ]
}
