{
  "file": "core/src/num/nonzero.rs",
  "name": "num::nonzero::verify::nonzero_check_clamp_panic_for_u128",
  "hash": "180916450021261126231786413993270959252",
  "hash_direct": "88807238566800487065759159145984652357",
  "proof_kind": "\"Standard\"",
  "attrs": [
    "#[kanitool::should_panic]\n",
    "#[kanitool::proof]\n"
  ],
  "src": "pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min > max, so the function should panic\n                kani::assume(min > max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "nonzero_check_clamp_panic!(core::num::NonZeroU128, nonzero_check_clamp_panic_for_u128)",
      "defsite": "macro_rules! nonzero_check_clamp_panic {\n        ($nonzero_type:ty, $nonzero_check_clamp_for:ident) => {\n            #[kani::proof]\n            #[kani::should_panic]\n            pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min > max, so the function should panic\n                kani::assume(min > max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "4878601194603369712571946169456617391",
    "173673302196166900717044359131846438027",
    "1173794530322025237515763168462746270255",
    "1382229687897501587812815939443160357278",
    "39138259659936546524089057886974322895",
    "162562988142812920362309614379838072419",
    "17831102584020389159134592920178181088",
    "142501501684997172272822801999022220036",
    "167604581721067505095211763037527842993",
    "68643762020680161854362643853425049318",
    "1407227748083415894016740434254720669213",
    "1326135750167585731917405189369452690072",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "1493456606136188483015082923910675951340",
    "181439564000670492624658361649566888460",
    "106828020863284508027526147124910322550",
    "53443452190887288473999381996289636151",
    "1048662776749122856216106589010375971614",
    "363430980081064933618117764801923073731",
    "79563661471576159077415419664014549419",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "42268267927105284548399160563474763761",
    "1218790289670026660418434748374709001141",
    "399232661239117480517401994520839366833"
  ]
}
