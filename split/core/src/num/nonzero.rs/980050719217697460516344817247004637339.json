{
  "file": "core/src/num/nonzero.rs",
  "name": "num::nonzero::verify::nonzero_check_clamp_for_i8",
  "hash": "980050719217697460516344817247004637339",
  "hash_direct": "1194692668550973525513481428218914086244",
  "proof_kind": "\"Standard\"",
  "attrs": [
    "#[kanitool::proof]\n"
  ],
  "src": "pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min <= max, so the function should no panic\n                kani::assume(min <= max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "nonzero_check_clamp!(core::num::NonZeroI8, nonzero_check_clamp_for_i8)",
      "defsite": "macro_rules! nonzero_check_clamp {\n        ($nonzero_type:ty, $nonzero_check_clamp_for:ident) => {\n            #[kani::proof]\n            pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min <= max, so the function should no panic\n                kani::assume(min <= max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "1599736108041680571510526482488088127337",
    "38319053420238458313650941502281035713",
    "1115704251947056493117255427579281799666",
    "1235036534278514540017751902318322713018",
    "42734778002331341807624758152869269079",
    "162562988142812920362309614379838072419",
    "53322627541715772574233943644716633945",
    "146051804506489056493850992743089741560",
    "875601412784210131718276889574946375285",
    "11991660048720761018068570044269276667",
    "46671902400475213332485578733836225001",
    "112374389592555562024282276568465615709",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "1411300227920981530112669615452872304393",
    "1760979442698386035718320152911412409838",
    "962747366019051302916635884505223465302",
    "74163487716087371689785676036020274561",
    "1567652545966866972115777948745451282485",
    "290143592959047465016900350948408866451",
    "1461745429986084010034901226572810240",
    "104775257362428322342672070488304598211",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "213080460780244126212025333060246619074",
    "1218790289670026660418434748374709001141",
    "399232661239117480517401994520839366833"
  ]
}
