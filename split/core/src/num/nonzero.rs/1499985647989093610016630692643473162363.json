{
  "file": "core/src/num/nonzero.rs",
  "name": "num::nonzero::verify::nonzero_check_clamp_for_u8",
  "hash": "1499985647989093610016630692643473162363",
  "hash_direct": "152583425651284705273118067244721586277",
  "proof_kind": "\"Standard\"",
  "attrs": [
    "#[kanitool::proof]\n"
  ],
  "src": "pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min <= max, so the function should no panic\n                kani::assume(min <= max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "nonzero_check_clamp!(core::num::NonZeroU8, nonzero_check_clamp_for_u8)",
      "defsite": "macro_rules! nonzero_check_clamp {\n        ($nonzero_type:ty, $nonzero_check_clamp_for:ident) => {\n            #[kani::proof]\n            pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min <= max, so the function should no panic\n                kani::assume(min <= max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "1808999288909971976210402688502478229271",
    "162491259761257566482601707483467907610",
    "16905850050235931710509652466048262953",
    "1662070016694227139911860440277225290916",
    "868708452713984376310801203349667993765",
    "162562988142812920362309614379838072419",
    "147326571724930681683605250526187624864",
    "142821932710150996974270111513759469030",
    "1450824968137209211015779136914157765236",
    "152959407567938785186651631479627980",
    "724836357911680015512121746717596905240",
    "163161463220985676922487198705762823548",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "75689197302991944556452337870606411833",
    "1619385649571745539918441967609172922564",
    "85337899905755254637647504787453257301",
    "897970437353430207715394384696646993460",
    "383022761425068984510575181676759645114",
    "554909374466736517315488501066447646710",
    "97350672900508525961549677067486509148",
    "138557105928044815902111975981988676421",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "176215937714928582254709899264658457842",
    "1218790289670026660418434748374709001141",
    "399232661239117480517401994520839366833"
  ]
}
