{
  "file": "core/src/num/nonzero.rs",
  "name": "num::nonzero::verify::nonzero_check_clamp_for_usize",
  "hash": "496635628826221912412167099367798721203",
  "hash_direct": "172569087478120269598169790869131990924",
  "proof_kind": "\"Standard\"",
  "attrs": [
    "#[kanitool::proof]\n"
  ],
  "src": "pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min <= max, so the function should no panic\n                kani::assume(min <= max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "nonzero_check_clamp!(core::num::NonZeroUsize, nonzero_check_clamp_for_usize)",
      "defsite": "macro_rules! nonzero_check_clamp {\n        ($nonzero_type:ty, $nonzero_check_clamp_for:ident) => {\n            #[kani::proof]\n            pub fn $nonzero_check_clamp_for() {\n                let x: $nonzero_type = kani::any();\n                let min: $nonzero_type = kani::any();\n                let max: $nonzero_type = kani::any();\n                // Ensure min <= max, so the function should no panic\n                kani::assume(min <= max);\n                // Use the clamp function and check the result\n                let result = x.clamp(min, max);\n                if x < min {\n                    assert!(result == min);\n                } else if x > max {\n                    assert!(result == max);\n                } else {\n                    assert!(result == x);\n                }\n            }\n        };\n    }"
    }
  ],
  "callees": [
    "1229587828336535439716132135704515518681",
    "306459423763459115515352307666540674473",
    "1272231341001425557216177988119967262403",
    "12523065385450334584774763099255662860",
    "940250525962090252914117803890597989072",
    "162562988142812920362309614379838072419",
    "22860541058604836916644685381819606237",
    "166978573911885884413656410516112185916",
    "1782302304995581167317710885657120714674",
    "65389877135230032264810649823121115526",
    "483924836696802214316937133767840489344",
    "589599466487462365011430963401962118509",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "63694231112350333088634998347708662073",
    "1773703231682104233118298670419218949445",
    "29046410955397636756758233555407614881",
    "218271979903345134017473673378805981004",
    "22824779022286450159455217874778185169",
    "161003650625398914518944455314788757627",
    "375485108047544468212954122974188100514",
    "133406493184733961254247820125865521283",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "136032794974893814259994759472454752644",
    "1218790289670026660418434748374709001141",
    "399232661239117480517401994520839366833"
  ]
}
