{
  "file": "core/src/num/saturating.rs",
  "name": "<num::saturating::Saturating<i32> as ops::arith::AddAssign<i32>>::add_assign",
  "hash": "571706549447418680615508853242220505196",
  "hash_direct": "899860415791939338813050593773272902409",
  "src": "fn add_assign(&mut self, other: $t) {\n                *self = *self + Saturating(other);\n            }",
  "macro_backtrace": [
    {
      "callsite": "saturating_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }",
      "defsite": "macro_rules! saturating_impl {\n    ($($t:ty)*) => ($(\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl Add for Saturating<$t> {\n            type Output = Saturating<$t>;\n\n            #[inline]\n            fn add(self, other: Saturating<$t>) -> Saturating<$t> {\n                Saturating(self.0.saturating_add(other.0))\n            }\n        }\n        forward_ref_binop! { impl Add, add for Saturating<$t>, Saturating<$t>,\n                #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")] }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl AddAssign for Saturating<$t> {\n            #[inline]\n            fn add_assign(&mut self, other: Saturating<$t>) {\n                *self = *self + other;\n            }\n        }\n        forward_ref_op_assign! { impl AddAssign, add_assign for Saturating<$t>, Saturating<$t> }\n\n        #[stable(feature = \"saturating_int_assign_impl\", since = \"1.74.0\")]\n        impl AddAssign<$t> for Saturating<$t> {\n            #[inline]\n            fn add_assign(&mut self, other: $t) {\n                *self = *self + Saturating(other);\n            }\n        }\n        forward_ref_op_assign! { impl AddAssign, add_assign for Saturating<$t>, $t }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl Sub for Saturating<$t> {\n            type Output = Saturating<$t>;\n\n            #[inline]\n            fn sub(self, other: Saturating<$t>) -> Saturating<$t> {\n                Saturating(self.0.saturating_sub(other.0))\n            }\n        }\n        forward_ref_binop! { impl Sub, sub for Saturating<$t>, Saturating<$t>,\n                #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")] }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl SubAssign for Saturating<$t> {\n            #[inline]\n            fn sub_assign(&mut self, other: Saturating<$t>) {\n                *self = *self - other;\n            }\n        }\n        forward_ref_op_assign! { impl SubAssign, sub_assign for Saturating<$t>, Saturating<$t> }\n\n        #[stable(feature = \"saturating_int_assign_impl\", since = \"1.74.0\")]\n        impl SubAssign<$t> for Saturating<$t> {\n            #[inline]\n            fn sub_assign(&mut self, other: $t) {\n                *self = *self - Saturating(other);\n            }\n        }\n        forward_ref_op_assign! { impl SubAssign, sub_assign for Saturating<$t>, $t }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl Mul for Saturating<$t> {\n            type Output = Saturating<$t>;\n\n            #[inline]\n            fn mul(self, other: Saturating<$t>) -> Saturating<$t> {\n                Saturating(self.0.saturating_mul(other.0))\n            }\n        }\n        forward_ref_binop! { impl Mul, mul for Saturating<$t>, Saturating<$t>,\n                #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")] }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl MulAssign for Saturating<$t> {\n            #[inline]\n            fn mul_assign(&mut self, other: Saturating<$t>) {\n                *self = *self * other;\n            }\n        }\n        forward_ref_op_assign! { impl MulAssign, mul_assign for Saturating<$t>, Saturating<$t> }\n\n        #[stable(feature = \"saturating_int_assign_impl\", since = \"1.74.0\")]\n        impl MulAssign<$t> for Saturating<$t> {\n            #[inline]\n            fn mul_assign(&mut self, other: $t) {\n                *self = *self * Saturating(other);\n            }\n        }\n        forward_ref_op_assign! { impl MulAssign, mul_assign for Saturating<$t>, $t }\n\n        /// # Examples\n        ///\n        /// ```\n        /// use std::num::Saturating;\n        ///\n        #[doc = concat!(\"assert_eq!(Saturating(2\", stringify!($t), \"), Saturating(5\", stringify!($t), \") / Saturating(2));\")]\n        #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MAX), Saturating(\", stringify!($t), \"::MAX) / Saturating(1));\")]\n        #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MIN), Saturating(\", stringify!($t), \"::MIN) / Saturating(1));\")]\n        /// ```\n        ///\n        /// ```should_panic\n        /// use std::num::Saturating;\n        ///\n        #[doc = concat!(\"let _ = Saturating(0\", stringify!($t), \") / Saturating(0);\")]\n        /// ```\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl Div for Saturating<$t> {\n            type Output = Saturating<$t>;\n\n            #[inline]\n            fn div(self, other: Saturating<$t>) -> Saturating<$t> {\n                Saturating(self.0.saturating_div(other.0))\n            }\n        }\n        forward_ref_binop! { impl Div, div for Saturating<$t>, Saturating<$t>,\n                #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")] }\n\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl DivAssign for Saturating<$t> {\n            #[inline]\n            fn div_assign(&mut self, other: Saturating<$t>) {\n                *self = *self / other;\n            }\n        }\n        forward_ref_op_assign! { impl DivAssign, div_assign for Saturating<$t>, Saturating<$t> }\n\n        #[stable(feature = \"saturating_int_assign_impl\", since = \"1.74.0\")]\n        impl DivAssign<$t> for Saturating<$t> {\n            #[inline]\n            fn div_assign(&mut self, other: $t) {\n                *self = *self / Saturating(other);\n            }\n        }\n        forward_ref_op_assign! { impl DivAssign, div_assign for Saturating<$t>, $t }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl Rem for Saturating<$t> {\n            type Output = Saturating<$t>;\n\n            #[inline]\n            fn rem(self, other: Saturating<$t>) -> Saturating<$t> {\n                Saturating(self.0.rem(other.0))\n            }\n        }\n        forward_ref_binop! { impl Rem, rem for Saturating<$t>, Saturating<$t>,\n                #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")] }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl RemAssign for Saturating<$t> {\n            #[inline]\n            fn rem_assign(&mut self, other: Saturating<$t>) {\n                *self = *self % other;\n            }\n        }\n        forward_ref_op_assign! { impl RemAssign, rem_assign for Saturating<$t>, Saturating<$t> }\n\n        #[stable(feature = \"saturating_int_assign_impl\", since = \"1.74.0\")]\n        impl RemAssign<$t> for Saturating<$t> {\n            #[inline]\n            fn rem_assign(&mut self, other: $t) {\n                *self = *self % Saturating(other);\n            }\n        }\n        forward_ref_op_assign! { impl RemAssign, rem_assign for Saturating<$t>, $t }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl Not for Saturating<$t> {\n            type Output = Saturating<$t>;\n\n            #[inline]\n            fn not(self) -> Saturating<$t> {\n                Saturating(!self.0)\n            }\n        }\n        forward_ref_unop! { impl Not, not for Saturating<$t>,\n                #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")] }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl BitXor for Saturating<$t> {\n            type Output = Saturating<$t>;\n\n            #[inline]\n            fn bitxor(self, other: Saturating<$t>) -> Saturating<$t> {\n                Saturating(self.0 ^ other.0)\n            }\n        }\n        forward_ref_binop! { impl BitXor, bitxor for Saturating<$t>, Saturating<$t>,\n                #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")] }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl BitXorAssign for Saturating<$t> {\n            #[inline]\n            fn bitxor_assign(&mut self, other: Saturating<$t>) {\n                *self = *self ^ other;\n            }\n        }\n        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Saturating<$t>, Saturating<$t> }\n\n        #[stable(feature = \"saturating_int_assign_impl\", since = \"1.74.0\")]\n        impl BitXorAssign<$t> for Saturating<$t> {\n            #[inline]\n            fn bitxor_assign(&mut self, other: $t) {\n                *self = *self ^ Saturating(other);\n            }\n        }\n        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Saturating<$t>, $t }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl BitOr for Saturating<$t> {\n            type Output = Saturating<$t>;\n\n            #[inline]\n            fn bitor(self, other: Saturating<$t>) -> Saturating<$t> {\n                Saturating(self.0 | other.0)\n            }\n        }\n        forward_ref_binop! { impl BitOr, bitor for Saturating<$t>, Saturating<$t>,\n                #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")] }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl BitOrAssign for Saturating<$t> {\n            #[inline]\n            fn bitor_assign(&mut self, other: Saturating<$t>) {\n                *self = *self | other;\n            }\n        }\n        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Saturating<$t>, Saturating<$t> }\n\n        #[stable(feature = \"saturating_int_assign_impl\", since = \"1.74.0\")]\n        impl BitOrAssign<$t> for Saturating<$t> {\n            #[inline]\n            fn bitor_assign(&mut self, other: $t) {\n                *self = *self | Saturating(other);\n            }\n        }\n        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Saturating<$t>, $t }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl BitAnd for Saturating<$t> {\n            type Output = Saturating<$t>;\n\n            #[inline]\n            fn bitand(self, other: Saturating<$t>) -> Saturating<$t> {\n                Saturating(self.0 & other.0)\n            }\n        }\n        forward_ref_binop! { impl BitAnd, bitand for Saturating<$t>, Saturating<$t>,\n                #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")] }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        impl BitAndAssign for Saturating<$t> {\n            #[inline]\n            fn bitand_assign(&mut self, other: Saturating<$t>) {\n                *self = *self & other;\n            }\n        }\n        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Saturating<$t>, Saturating<$t> }\n\n        #[stable(feature = \"saturating_int_assign_impl\", since = \"1.74.0\")]\n        impl BitAndAssign<$t> for Saturating<$t> {\n            #[inline]\n            fn bitand_assign(&mut self, other: $t) {\n                *self = *self & Saturating(other);\n            }\n        }\n        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Saturating<$t>, $t }\n\n    )*)\n}"
    }
  ],
  "callees": [
    "71557308572101376579485366439342255854",
    "330336612773220793815543557844832902902"
  ]
}
