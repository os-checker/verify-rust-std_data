{
  "file": "core/src/num/saturating.rs",
  "name": "num::saturating::Saturating::<u128>::to_le",
  "hash": "1584022854583661397011261160151782558154",
  "hash_direct": "1226215540350721288017221798663762641448",
  "src": "pub const fn to_le(self) -> Self {\n                Saturating(self.0.to_le())\n            }",
  "macro_backtrace": [
    {
      "callsite": "saturating_int_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }",
      "defsite": "macro_rules! saturating_int_impl {\n    ($($t:ty)*) => ($(\n        impl Saturating<$t> {\n            /// Returns the smallest value that can be represented by this integer type.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"assert_eq!(<Saturating<\", stringify!($t), \">>::MIN, Saturating(\", stringify!($t), \"::MIN));\")]\n            /// ```\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            pub const MIN: Self = Self(<$t>::MIN);\n\n            /// Returns the largest value that can be represented by this integer type.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"assert_eq!(<Saturating<\", stringify!($t), \">>::MAX, Saturating(\", stringify!($t), \"::MAX));\")]\n            /// ```\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            pub const MAX: Self = Self(<$t>::MAX);\n\n            /// Returns the size of this integer type in bits.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"assert_eq!(<Saturating<\", stringify!($t), \">>::BITS, \", stringify!($t), \"::BITS);\")]\n            /// ```\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            pub const BITS: u32 = <$t>::BITS;\n\n            /// Returns the number of ones in the binary representation of `self`.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"let n = Saturating(0b01001100\", stringify!($t), \");\")]\n            ///\n            /// assert_eq!(n.count_ones(), 3);\n            /// ```\n            #[inline]\n            #[doc(alias = \"popcount\")]\n            #[doc(alias = \"popcnt\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            pub const fn count_ones(self) -> u32 {\n                self.0.count_ones()\n            }\n\n            /// Returns the number of zeros in the binary representation of `self`.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"assert_eq!(Saturating(!0\", stringify!($t), \").count_zeros(), 0);\")]\n            /// ```\n            #[inline]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            pub const fn count_zeros(self) -> u32 {\n                self.0.count_zeros()\n            }\n\n            /// Returns the number of trailing zeros in the binary representation of `self`.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"let n = Saturating(0b0101000\", stringify!($t), \");\")]\n            ///\n            /// assert_eq!(n.trailing_zeros(), 3);\n            /// ```\n            #[inline]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            pub const fn trailing_zeros(self) -> u32 {\n                self.0.trailing_zeros()\n            }\n\n            /// Shifts the bits to the left by a specified amount, `n`,\n            /// saturating the truncated bits to the end of the resulting\n            /// integer.\n            ///\n            /// Please note this isn't the same operation as the `<<` shifting\n            /// operator!\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            /// let n: Saturating<i64> = Saturating(0x0123456789ABCDEF);\n            /// let m: Saturating<i64> = Saturating(-0x76543210FEDCBA99);\n            ///\n            /// assert_eq!(n.rotate_left(32), m);\n            /// ```\n            #[inline]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            pub const fn rotate_left(self, n: u32) -> Self {\n                Saturating(self.0.rotate_left(n))\n            }\n\n            /// Shifts the bits to the right by a specified amount, `n`,\n            /// saturating the truncated bits to the beginning of the resulting\n            /// integer.\n            ///\n            /// Please note this isn't the same operation as the `>>` shifting\n            /// operator!\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            /// let n: Saturating<i64> = Saturating(0x0123456789ABCDEF);\n            /// let m: Saturating<i64> = Saturating(-0xFEDCBA987654322);\n            ///\n            /// assert_eq!(n.rotate_right(4), m);\n            /// ```\n            #[inline]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            pub const fn rotate_right(self, n: u32) -> Self {\n                Saturating(self.0.rotate_right(n))\n            }\n\n            /// Reverses the byte order of the integer.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            /// let n: Saturating<i16> = Saturating(0b0000000_01010101);\n            /// assert_eq!(n, Saturating(85));\n            ///\n            /// let m = n.swap_bytes();\n            ///\n            /// assert_eq!(m, Saturating(0b01010101_00000000));\n            /// assert_eq!(m, Saturating(21760));\n            /// ```\n            #[inline]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            pub const fn swap_bytes(self) -> Self {\n                Saturating(self.0.swap_bytes())\n            }\n\n            /// Reverses the bit pattern of the integer.\n            ///\n            /// # Examples\n            ///\n            /// Please note that this example is shared between integer types.\n            /// Which explains why `i16` is used here.\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            /// let n = Saturating(0b0000000_01010101i16);\n            /// assert_eq!(n, Saturating(85));\n            ///\n            /// let m = n.reverse_bits();\n            ///\n            /// assert_eq!(m.0 as u16, 0b10101010_00000000);\n            /// assert_eq!(m, Saturating(-22016));\n            /// ```\n            #[inline]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            pub const fn reverse_bits(self) -> Self {\n                Saturating(self.0.reverse_bits())\n            }\n\n            /// Converts an integer from big endian to the target's endianness.\n            ///\n            /// On big endian this is a no-op. On little endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"let n = Saturating(0x1A\", stringify!($t), \");\")]\n            ///\n            /// if cfg!(target_endian = \"big\") {\n            #[doc = concat!(\"    assert_eq!(<Saturating<\", stringify!($t), \">>::from_be(n), n)\")]\n            /// } else {\n            #[doc = concat!(\"    assert_eq!(<Saturating<\", stringify!($t), \">>::from_be(n), n.swap_bytes())\")]\n            /// }\n            /// ```\n            #[inline]\n            #[must_use]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            pub const fn from_be(x: Self) -> Self {\n                Saturating(<$t>::from_be(x.0))\n            }\n\n            /// Converts an integer from little endian to the target's endianness.\n            ///\n            /// On little endian this is a no-op. On big endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"let n = Saturating(0x1A\", stringify!($t), \");\")]\n            ///\n            /// if cfg!(target_endian = \"little\") {\n            #[doc = concat!(\"    assert_eq!(<Saturating<\", stringify!($t), \">>::from_le(n), n)\")]\n            /// } else {\n            #[doc = concat!(\"    assert_eq!(<Saturating<\", stringify!($t), \">>::from_le(n), n.swap_bytes())\")]\n            /// }\n            /// ```\n            #[inline]\n            #[must_use]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            pub const fn from_le(x: Self) -> Self {\n                Saturating(<$t>::from_le(x.0))\n            }\n\n            /// Converts `self` to big endian from the target's endianness.\n            ///\n            /// On big endian this is a no-op. On little endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"let n = Saturating(0x1A\", stringify!($t), \");\")]\n            ///\n            /// if cfg!(target_endian = \"big\") {\n            ///     assert_eq!(n.to_be(), n)\n            /// } else {\n            ///     assert_eq!(n.to_be(), n.swap_bytes())\n            /// }\n            /// ```\n            #[inline]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            pub const fn to_be(self) -> Self {\n                Saturating(self.0.to_be())\n            }\n\n            /// Converts `self` to little endian from the target's endianness.\n            ///\n            /// On little endian this is a no-op. On big endian the bytes are\n            /// swapped.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"let n = Saturating(0x1A\", stringify!($t), \");\")]\n            ///\n            /// if cfg!(target_endian = \"little\") {\n            ///     assert_eq!(n.to_le(), n)\n            /// } else {\n            ///     assert_eq!(n.to_le(), n.swap_bytes())\n            /// }\n            /// ```\n            #[inline]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            pub const fn to_le(self) -> Self {\n                Saturating(self.0.to_le())\n            }\n\n            /// Raises self to the power of `exp`, using exponentiation by squaring.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"assert_eq!(Saturating(3\", stringify!($t), \").pow(4), Saturating(81));\")]\n            /// ```\n            ///\n            /// Results that are too large are saturated:\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            /// assert_eq!(Saturating(3i8).pow(5), Saturating(127));\n            /// assert_eq!(Saturating(3i8).pow(6), Saturating(127));\n            /// ```\n            #[inline]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            pub const fn pow(self, exp: u32) -> Self {\n                Saturating(self.0.saturating_pow(exp))\n            }\n        }\n    )*)\n}"
    }
  ],
  "callees": [
    "919582778644760206517143176331623874137"
  ]
}
