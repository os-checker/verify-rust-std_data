{
  "file": "core/src/num/saturating.rs",
  "name": "num::saturating::Saturating::<i32>::is_negative",
  "hash": "716021901047466008513426122114199675934",
  "hash_direct": "36883675281325523728096370473861042136",
  "src": "pub const fn is_negative(self) -> bool {\n                self.0.is_negative()\n            }",
  "macro_backtrace": [
    {
      "callsite": "saturating_int_impl_signed! { isize i8 i16 i32 i64 i128 }",
      "defsite": "macro_rules! saturating_int_impl_signed {\n    ($($t:ty)*) => ($(\n        impl Saturating<$t> {\n            /// Returns the number of leading zeros in the binary representation of `self`.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"let n = Saturating(\", stringify!($t), \"::MAX >> 2);\")]\n            ///\n            /// assert_eq!(n.leading_zeros(), 3);\n            /// ```\n            #[inline]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            pub const fn leading_zeros(self) -> u32 {\n                self.0.leading_zeros()\n            }\n\n            /// Saturating absolute value. Computes `self.abs()`, returning `MAX` if `self == MIN`\n            /// instead of overflowing.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"assert_eq!(Saturating(100\", stringify!($t), \").abs(), Saturating(100));\")]\n            #[doc = concat!(\"assert_eq!(Saturating(-100\", stringify!($t), \").abs(), Saturating(100));\")]\n            #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MIN).abs(), Saturating((\", stringify!($t), \"::MIN + 1).abs()));\")]\n            #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MIN).abs(), Saturating(\", stringify!($t), \"::MIN.saturating_abs()));\")]\n            #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MIN).abs(), Saturating(\", stringify!($t), \"::MAX));\")]\n            /// ```\n            #[inline]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            pub const fn abs(self) -> Saturating<$t> {\n                Saturating(self.0.saturating_abs())\n            }\n\n            /// Returns a number representing sign of `self`.\n            ///\n            ///  - `0` if the number is zero\n            ///  - `1` if the number is positive\n            ///  - `-1` if the number is negative\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"assert_eq!(Saturating(10\", stringify!($t), \").signum(), Saturating(1));\")]\n            #[doc = concat!(\"assert_eq!(Saturating(0\", stringify!($t), \").signum(), Saturating(0));\")]\n            #[doc = concat!(\"assert_eq!(Saturating(-10\", stringify!($t), \").signum(), Saturating(-1));\")]\n            /// ```\n            #[inline]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[must_use = \"this returns the result of the operation, \\\n                          without modifying the original\"]\n            pub const fn signum(self) -> Saturating<$t> {\n                Saturating(self.0.signum())\n            }\n\n            /// Returns `true` if `self` is positive and `false` if the number is zero or\n            /// negative.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"assert!(Saturating(10\", stringify!($t), \").is_positive());\")]\n            #[doc = concat!(\"assert!(!Saturating(-10\", stringify!($t), \").is_positive());\")]\n            /// ```\n            #[must_use]\n            #[inline]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            pub const fn is_positive(self) -> bool {\n                self.0.is_positive()\n            }\n\n            /// Returns `true` if `self` is negative and `false` if the number is zero or\n            /// positive.\n            ///\n            /// # Examples\n            ///\n            /// ```\n            /// use std::num::Saturating;\n            ///\n            #[doc = concat!(\"assert!(Saturating(-10\", stringify!($t), \").is_negative());\")]\n            #[doc = concat!(\"assert!(!Saturating(10\", stringify!($t), \").is_negative());\")]\n            /// ```\n            #[must_use]\n            #[inline]\n            #[rustc_const_stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n            pub const fn is_negative(self) -> bool {\n                self.0.is_negative()\n            }\n        }\n\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const Neg for Saturating<$t> {\n            type Output = Self;\n            #[inline]\n            fn neg(self) -> Self {\n                Saturating(self.0.saturating_neg())\n            }\n        }\n        forward_ref_unop! { impl Neg, neg for Saturating<$t>,\n        #[stable(feature = \"saturating_int_impl\", since = \"1.74.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n    )*)\n}"
    }
  ],
  "callees": [
    "152957573567666139458051071799244237150"
  ]
}
