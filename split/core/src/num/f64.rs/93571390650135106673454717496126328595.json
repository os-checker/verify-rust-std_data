{
  "file": "core/src/num/f64.rs",
  "name": "f64::<impl f64>::next_down",
  "hash": "93571390650135106673454717496126328595",
  "hash_direct": "92276863378201560604890887331562774270",
  "src": "pub const fn next_down(self) -> Self {\n        // Some targets violate Rust's assumption of IEEE semantics, e.g. by flushing\n        // denormals to zero. This is in general unsound and unsupported, but here\n        // we do our best to still produce the correct result on such targets.\n        let bits = self.to_bits();\n        if self.is_nan() || bits == Self::NEG_INFINITY.to_bits() {\n            return self;\n        }\n\n        let abs = bits & !Self::SIGN_MASK;\n        let next_bits = if abs == 0 {\n            Self::NEG_TINY_BITS\n        } else if bits == abs {\n            bits - 1\n        } else {\n            bits + 1\n        };\n        Self::from_bits(next_bits)\n    }",
  "callees": [
    "36822172541893058416553893184635977627",
    "175257293156396574608708563526179465699",
    "1033976944350554769714411313899354111723"
  ]
}
