{
  "file": "core/src/num/dec2flt/float.rs",
  "name": "<f32 as num::dec2flt::float::RawFloat>::integer_decode",
  "hash": "122289171234565352427855933242419342621",
  "hash_direct": "69429072416936335759991930126971927460",
  "src": "fn integer_decode(self) -> (u64, i16, i8) {\n        let bits = self.to_bits();\n        let sign: i8 = if bits >> (Self::BITS - 1) == Self::Int::ZERO { 1 } else { -1 };\n        let mut exponent: i16 = ((bits & Self::EXP_MASK) >> Self::SIG_BITS).cast();\n        let mantissa = if exponent == 0 {\n            (bits & Self::SIG_MASK) << 1\n        } else {\n            (bits & Self::SIG_MASK) | (Self::Int::ONE << Self::SIG_BITS)\n        };\n        // Exponent bias + mantissa shift\n        exponent -= (Self::EXP_BIAS + Self::SIG_BITS) as i16;\n        (mantissa.into(), exponent, sign)\n    }",
  "callees": [
    "14788582008995232797761326074092651079",
    "97302468165398262098604785466457492011",
    "1136360611523765204016894861172344305721",
    "643749885405830349618174171670233457290",
    "149559975351884185919646369653297958751",
    "1280257502160233765816408910554470634604",
    "1673863980281935094918086807947924435950",
    "1362525230579241954911680216599631237669",
    "885492306666178193413077054527521590248",
    "364690327770845926311867381198481136970"
  ]
}
