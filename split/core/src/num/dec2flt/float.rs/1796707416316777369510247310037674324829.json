{
  "file": "core/src/num/dec2flt/float.rs",
  "name": "<f32 as num::dec2flt::float::RawFloat>::integer_decode",
  "hash": "1796707416316777369510247310037674324829",
  "hash_direct": "69429072416936335759991930126971927460",
  "src": "fn integer_decode(self) -> (u64, i16, i8) {\n        let bits = self.to_bits();\n        let sign: i8 = if bits >> (Self::BITS - 1) == Self::Int::ZERO { 1 } else { -1 };\n        let mut exponent: i16 = ((bits & Self::EXP_MASK) >> Self::SIG_BITS).cast();\n        let mantissa = if exponent == 0 {\n            (bits & Self::SIG_MASK) << 1\n        } else {\n            (bits & Self::SIG_MASK) | (Self::Int::ONE << Self::SIG_BITS)\n        };\n        // Exponent bias + mantissa shift\n        exponent -= (Self::EXP_BIAS + Self::SIG_BITS) as i16;\n        (mantissa.into(), exponent, sign)\n    }",
  "callees": [
    "145493908791982296621902181110000221268",
    "66628936131314108637013286613714412779",
    "760097703502802382315361126308995570139",
    "111278946214828341879274539483098245666",
    "7867064729465219112724656563380789063",
    "162361112433299032238584891523845488474",
    "107626592447130496229005183898772725397",
    "84585801727040041991628973311117715544",
    "1192789137628358737811148217201323287445",
    "122947779502945346302407199500263704675"
  ]
}
