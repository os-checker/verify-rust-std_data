{
  "file": "core/src/num/dec2flt/decimal.rs",
  "name": "num::dec2flt::decimal::Decimal::try_fast_path::<f16>",
  "hash": "28302716019641956829795754811484190283",
  "hash_direct": "1167834131821021029716769843659076505861",
  "src": "pub fn try_fast_path<F: RawFloat>(&self) -> Option<F> {\n        // Here we need to work around <https://github.com/rust-lang/rust/issues/114479>.\n        // The fast path crucially depends on arithmetic being rounded to the correct number of bits\n        // without any intermediate rounding. On x86 (without SSE or SSE2) this requires the precision\n        // of the x87 FPU stack to be changed so that it directly rounds to 64/32 bit.\n        // The `set_precision` function takes care of setting the precision on architectures which\n        // require setting it by changing the global state (like the control word of the x87 FPU).\n        let _cw = set_precision::<F>();\n\n        if !self.can_use_fast_path::<F>() {\n            return None;\n        }\n\n        let value = if self.exponent <= F::MAX_EXPONENT_FAST_PATH {\n            // normal fast path\n            let value = F::from_u64(self.mantissa);\n            if self.exponent < 0 {\n                value / F::pow10_fast_path((-self.exponent) as _)\n            } else {\n                value * F::pow10_fast_path(self.exponent as _)\n            }\n        } else {\n            // disguised fast path\n            let shift = self.exponent - F::MAX_EXPONENT_FAST_PATH;\n            let mantissa = self.mantissa.checked_mul(INT_POW10[shift as usize])?;\n            if mantissa > F::MAX_MANTISSA_FAST_PATH {\n                return None;\n            }\n            F::from_u64(mantissa) * F::pow10_fast_path(F::MAX_EXPONENT_FAST_PATH as _)\n        };\n\n        if self.negative { Some(-value) } else { Some(value) }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "132064362423520389065483835393419825218",
    "14534063376101289658844515537532987720",
    "1331180765608372746618038457355727292914",
    "1317682522622952007916006180135159464548",
    "146271844041966271011499267315632990270",
    "17322629881004843585167794697912072088",
    "607357767823900722714988361227709155344",
    "30460775194166185987855856242595917692",
    "164840806539152991893600125848246543443",
    "21648343377795889482025751696752958015",
    "1729445853894031691014599074661389694382",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960"
  ]
}
