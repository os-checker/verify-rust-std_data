{
  "file": "core/src/num/wrapping.rs",
  "name": "<num::wrapping::Wrapping<i32> as ops::bit::BitXorAssign<i32>>::bitxor_assign",
  "hash": "1349370728111485909317753689517060027176",
  "hash_direct": "88352500748191411315959549590995029520",
  "src": "fn bitxor_assign(&mut self, other: $t) {\n                *self = *self ^ Wrapping(other);\n            }",
  "macro_backtrace": [
    {
      "callsite": "wrapping_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }",
      "defsite": "macro_rules! wrapping_impl {\n    ($($t:ty)*) => ($(\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl Add for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn add(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_add(other.0))\n            }\n        }\n        forward_ref_binop! { impl Add, add for Wrapping<$t>, Wrapping<$t>,\n                #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        impl AddAssign for Wrapping<$t> {\n            #[inline]\n            fn add_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self + other;\n            }\n        }\n        forward_ref_op_assign! { impl AddAssign, add_assign for Wrapping<$t>, Wrapping<$t> }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        impl AddAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn add_assign(&mut self, other: $t) {\n                *self = *self + Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl AddAssign, add_assign for Wrapping<$t>, $t }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl Sub for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn sub(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_sub(other.0))\n            }\n        }\n        forward_ref_binop! { impl Sub, sub for Wrapping<$t>, Wrapping<$t>,\n                #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        impl SubAssign for Wrapping<$t> {\n            #[inline]\n            fn sub_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self - other;\n            }\n        }\n        forward_ref_op_assign! { impl SubAssign, sub_assign for Wrapping<$t>, Wrapping<$t> }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        impl SubAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn sub_assign(&mut self, other: $t) {\n                *self = *self - Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl SubAssign, sub_assign for Wrapping<$t>, $t }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl Mul for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn mul(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_mul(other.0))\n            }\n        }\n        forward_ref_binop! { impl Mul, mul for Wrapping<$t>, Wrapping<$t>,\n                #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        impl MulAssign for Wrapping<$t> {\n            #[inline]\n            fn mul_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self * other;\n            }\n        }\n        forward_ref_op_assign! { impl MulAssign, mul_assign for Wrapping<$t>, Wrapping<$t> }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        impl MulAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn mul_assign(&mut self, other: $t) {\n                *self = *self * Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl MulAssign, mul_assign for Wrapping<$t>, $t }\n\n        #[stable(feature = \"wrapping_div\", since = \"1.3.0\")]\n        impl Div for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn div(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_div(other.0))\n            }\n        }\n        forward_ref_binop! { impl Div, div for Wrapping<$t>, Wrapping<$t>,\n                #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        impl DivAssign for Wrapping<$t> {\n            #[inline]\n            fn div_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self / other;\n            }\n        }\n        forward_ref_op_assign! { impl DivAssign, div_assign for Wrapping<$t>, Wrapping<$t> }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        impl DivAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn div_assign(&mut self, other: $t) {\n                *self = *self / Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl DivAssign, div_assign for Wrapping<$t>, $t }\n\n        #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n        impl Rem for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn rem(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_rem(other.0))\n            }\n        }\n        forward_ref_binop! { impl Rem, rem for Wrapping<$t>, Wrapping<$t>,\n                #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        impl RemAssign for Wrapping<$t> {\n            #[inline]\n            fn rem_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self % other;\n            }\n        }\n        forward_ref_op_assign! { impl RemAssign, rem_assign for Wrapping<$t>, Wrapping<$t> }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        impl RemAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn rem_assign(&mut self, other: $t) {\n                *self = *self % Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl RemAssign, rem_assign for Wrapping<$t>, $t }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl Not for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn not(self) -> Wrapping<$t> {\n                Wrapping(!self.0)\n            }\n        }\n        forward_ref_unop! { impl Not, not for Wrapping<$t>,\n                #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl BitXor for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn bitxor(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0 ^ other.0)\n            }\n        }\n        forward_ref_binop! { impl BitXor, bitxor for Wrapping<$t>, Wrapping<$t>,\n                #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        impl BitXorAssign for Wrapping<$t> {\n            #[inline]\n            fn bitxor_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self ^ other;\n            }\n        }\n        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Wrapping<$t>, Wrapping<$t> }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        impl BitXorAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn bitxor_assign(&mut self, other: $t) {\n                *self = *self ^ Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Wrapping<$t>, $t }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl BitOr for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn bitor(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0 | other.0)\n            }\n        }\n        forward_ref_binop! { impl BitOr, bitor for Wrapping<$t>, Wrapping<$t>,\n                #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        impl BitOrAssign for Wrapping<$t> {\n            #[inline]\n            fn bitor_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self | other;\n            }\n        }\n        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Wrapping<$t>, Wrapping<$t> }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        impl BitOrAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn bitor_assign(&mut self, other: $t) {\n                *self = *self | Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Wrapping<$t>, $t }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl BitAnd for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn bitand(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                Wrapping(self.0 & other.0)\n            }\n        }\n        forward_ref_binop! { impl BitAnd, bitand for Wrapping<$t>, Wrapping<$t>,\n                #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        impl BitAndAssign for Wrapping<$t> {\n            #[inline]\n            fn bitand_assign(&mut self, other: Wrapping<$t>) {\n                *self = *self & other;\n            }\n        }\n        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Wrapping<$t>, Wrapping<$t> }\n\n        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n        impl BitAndAssign<$t> for Wrapping<$t> {\n            #[inline]\n            fn bitand_assign(&mut self, other: $t) {\n                *self = *self & Wrapping(other);\n            }\n        }\n        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Wrapping<$t>, $t }\n\n        #[stable(feature = \"wrapping_neg\", since = \"1.10.0\")]\n        impl Neg for Wrapping<$t> {\n            type Output = Self;\n            #[inline]\n            fn neg(self) -> Self {\n                Wrapping(0) - self\n            }\n        }\n        forward_ref_unop! { impl Neg, neg for Wrapping<$t>,\n                #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n\n    )*)\n}"
    }
  ],
  "callees": [
    "307001110058800380812190811026181656122"
  ]
}
