{
  "file": "core/src/num/wrapping.rs",
  "name": "<num::wrapping::Wrapping<i32> as ops::bit::ShrAssign<usize>>::shr_assign",
  "hash": "161112051756210745329214968578966200840",
  "hash_direct": "118350950308076378278146838622700063213",
  "src": "fn shr_assign(&mut self, other: $f) {\n                *self = *self >> other;\n            }",
  "macro_backtrace": [
    {
      "callsite": "sh_impl_unsigned! { $t, usize }",
      "defsite": "macro_rules! sh_impl_unsigned {\n    ($t:ident, $f:ident) => {\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl Shl<$f> for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn shl(self, other: $f) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_shl(other as u32))\n            }\n        }\n        forward_ref_binop! { impl Shl, shl for Wrapping<$t>, $f,\n        #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        impl ShlAssign<$f> for Wrapping<$t> {\n            #[inline]\n            fn shl_assign(&mut self, other: $f) {\n                *self = *self << other;\n            }\n        }\n        forward_ref_op_assign! { impl ShlAssign, shl_assign for Wrapping<$t>, $f }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl Shr<$f> for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn shr(self, other: $f) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_shr(other as u32))\n            }\n        }\n        forward_ref_binop! { impl Shr, shr for Wrapping<$t>, $f,\n        #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        impl ShrAssign<$f> for Wrapping<$t> {\n            #[inline]\n            fn shr_assign(&mut self, other: $f) {\n                *self = *self >> other;\n            }\n        }\n        forward_ref_op_assign! { impl ShrAssign, shr_assign for Wrapping<$t>, $f }\n    };\n}"
    },
    {
      "callsite": "sh_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }",
      "defsite": "macro_rules! sh_impl_all {\n    ($($t:ident)*) => ($(\n        //sh_impl_unsigned! { $t, u8 }\n        //sh_impl_unsigned! { $t, u16 }\n        //sh_impl_unsigned! { $t, u32 }\n        //sh_impl_unsigned! { $t, u64 }\n        //sh_impl_unsigned! { $t, u128 }\n        sh_impl_unsigned! { $t, usize }\n\n        //sh_impl_signed! { $t, i8 }\n        //sh_impl_signed! { $t, i16 }\n        //sh_impl_signed! { $t, i32 }\n        //sh_impl_signed! { $t, i64 }\n        //sh_impl_signed! { $t, i128 }\n        //sh_impl_signed! { $t, isize }\n    )*)\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "20249185579654572662939370018292389951",
    "85454097680950499078006857073833743846",
    "134052794674310348079165023106702122990",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "28546486007339839836128558414231522489",
    "399232661239117480517401994520839366833"
  ]
}
