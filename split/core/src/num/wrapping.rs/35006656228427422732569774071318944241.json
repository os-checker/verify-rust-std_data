{
  "file": "core/src/num/wrapping.rs",
  "name": "<num::wrapping::Wrapping<u16> as ops::bit::Shl<usize>>::shl",
  "hash": "35006656228427422732569774071318944241",
  "hash_direct": "1429748552685691552016046788488595415960",
  "src": "fn shl(self, other: $f) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_shl(other as u32))\n            }",
  "macro_backtrace": [
    {
      "callsite": "sh_impl_unsigned! { $t, usize }",
      "defsite": "macro_rules! sh_impl_unsigned {\n    ($t:ident, $f:ident) => {\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const Shl<$f> for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn shl(self, other: $f) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_shl(other as u32))\n            }\n        }\n        forward_ref_binop! { impl Shl, shl for Wrapping<$t>, $f,\n        #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const ShlAssign<$f> for Wrapping<$t> {\n            #[inline]\n            fn shl_assign(&mut self, other: $f) {\n                *self = *self << other;\n            }\n        }\n        forward_ref_op_assign! { impl ShlAssign, shl_assign for Wrapping<$t>, $f,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const Shr<$f> for Wrapping<$t> {\n            type Output = Wrapping<$t>;\n\n            #[inline]\n            fn shr(self, other: $f) -> Wrapping<$t> {\n                Wrapping(self.0.wrapping_shr(other as u32))\n            }\n        }\n        forward_ref_binop! { impl Shr, shr for Wrapping<$t>, $f,\n        #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n\n        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")]\n        impl const ShrAssign<$f> for Wrapping<$t> {\n            #[inline]\n            fn shr_assign(&mut self, other: $f) {\n                *self = *self >> other;\n            }\n        }\n        forward_ref_op_assign! { impl ShrAssign, shr_assign for Wrapping<$t>, $f,\n        #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]\n        #[rustc_const_unstable(feature = \"const_ops\", issue = \"143802\")] }\n    };\n}"
    },
    {
      "callsite": "sh_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }",
      "defsite": "macro_rules! sh_impl_all {\n    ($($t:ident)*) => ($(\n        //sh_impl_unsigned! { $t, u8 }\n        //sh_impl_unsigned! { $t, u16 }\n        //sh_impl_unsigned! { $t, u32 }\n        //sh_impl_unsigned! { $t, u64 }\n        //sh_impl_unsigned! { $t, u128 }\n        sh_impl_unsigned! { $t, usize }\n\n        //sh_impl_signed! { $t, i8 }\n        //sh_impl_signed! { $t, i16 }\n        //sh_impl_signed! { $t, i32 }\n        //sh_impl_signed! { $t, i64 }\n        //sh_impl_signed! { $t, i128 }\n        //sh_impl_signed! { $t, isize }\n    )*)\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "993579594539518272311098602637771076847",
    "752694264416004185114722531946185166717",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "1660735051761607358112447996714284735890",
    "739520556846959085018120036998133255835"
  ]
}
