{
  "file": "core/src/num/flt2dec/strategy/grisu.rs",
  "name": "num::flt2dec::strategy::grisu::format_shortest_opt",
  "hash": "125925646522245252103917981312050510193",
  "hash_direct": "14914699269289605343883140566049975227",
  "src": "pub fn format_shortest_opt<'a>(\n    d: &Decoded,\n    buf: &'a mut [MaybeUninit<u8>],\n) -> Option<(/*digits*/ &'a [u8], /*exp*/ i16)> {\n    assert!(d.mant > 0);\n    assert!(d.minus > 0);\n    assert!(d.plus > 0);\n    assert!(d.mant.checked_add(d.plus).is_some());\n    assert!(d.mant.checked_sub(d.minus).is_some());\n    assert!(buf.len() >= MAX_SIG_DIGITS);\n    assert!(d.mant + d.plus < (1 << 61)); // we need at least three bits of additional precision\n\n    // start with the normalized values with the shared exponent\n    let plus = Fp { f: d.mant + d.plus, e: d.exp }.normalize();\n    let minus = Fp { f: d.mant - d.minus, e: d.exp }.normalize_to(plus.e);\n    let v = Fp { f: d.mant, e: d.exp }.normalize_to(plus.e);\n\n    // find any `cached = 10^minusk` such that `ALPHA <= minusk + plus.e + 64 <= GAMMA`.\n    // since `plus` is normalized, this means `2^(62 + ALPHA) <= plus * cached < 2^(64 + GAMMA)`;\n    // given our choices of `ALPHA` and `GAMMA`, this puts `plus * cached` into `[4, 2^32)`.\n    //\n    // it is obviously desirable to maximize `GAMMA - ALPHA`,\n    // so that we don't need many cached powers of 10, but there are some considerations:\n    //\n    // 1. we want to keep `floor(plus * cached)` within `u32` since it needs a costly division.\n    //    (this is not really avoidable, remainder is required for accuracy estimation.)\n    // 2. the remainder of `floor(plus * cached)` repeatedly gets multiplied by 10,\n    //    and it should not overflow.\n    //\n    // the first gives `64 + GAMMA <= 32`, while the second gives `10 * 2^-ALPHA <= 2^64`;\n    // -60 and -32 is the maximal range with this constraint, and V8 also uses them.\n    let (minusk, cached) = cached_power(ALPHA - plus.e - 64, GAMMA - plus.e - 64);\n\n    // scale fps. this gives the maximal error of 1 ulp (proved from Theorem 5.1).\n    let plus = plus.mul(cached);\n    let minus = minus.mul(cached);\n    let v = v.mul(cached);\n    debug_assert_eq!(plus.e, minus.e);\n    debug_assert_eq!(plus.e, v.e);\n\n    //         +- actual range of minus\n    //   | <---|---------------------- unsafe region --------------------------> |\n    //   |     |                                                                 |\n    //   |  |<--->|  | <--------------- safe region ---------------> |           |\n    //   |  |     |  |                                               |           |\n    //   |1 ulp|1 ulp|                 |1 ulp|1 ulp|                 |1 ulp|1 ulp|\n    //   |<--->|<--->|                 |<--->|<--->|                 |<--->|<--->|\n    //   |-----|-----|-------...-------|-----|-----|-------...-------|-----|-----|\n    //   |   minus   |                 |     v     |                 |   plus    |\n    // minus1     minus0           v - 1 ulp   v + 1 ulp           plus0       plus1\n    //\n    // above `minus`, `v` and `plus` are *quantized* approximations (error < 1 ulp).\n    // as we don't know the error is positive or negative, we use two approximations spaced equally\n    // and have the maximal error of 2 ulps.\n    //\n    // the \"unsafe region\" is a liberal interval which we initially generate.\n    // the \"safe region\" is a conservative interval which we only accept.\n    // we start with the correct repr within the unsafe region, and try to find the closest repr\n    // to `v` which is also within the safe region. if we can't, we give up.\n    let plus1 = plus.f + 1;\n    //  let plus0 = plus.f - 1; // only for explanation\n    //  let minus0 = minus.f + 1; // only for explanation\n    let minus1 = minus.f - 1;\n    let e = -plus.e as usize; // shared exponent\n\n    // divide `plus1` into integral and fractional parts.\n    // integral parts are guaranteed to fit in u32, since cached power guarantees `plus < 2^32`\n    // and normalized `plus.f` is always less than `2^64 - 2^4` due to the precision requirement.\n    let plus1int = (plus1 >> e) as u32;\n    let plus1frac = plus1 & ((1 << e) - 1);\n\n    // calculate the largest `10^max_kappa` no more than `plus1` (thus `plus1 < 10^(max_kappa+1)`).\n    // this is an upper bound of `kappa` below.\n    let (max_kappa, max_ten_kappa) = max_pow10_no_more_than(plus1int);\n\n    let mut i = 0;\n    let exp = max_kappa as i16 - minusk + 1;\n\n    // Theorem 6.2: if `k` is the greatest integer s.t. `0 <= y mod 10^k <= y - x`,\n    //              then `V = floor(y / 10^k) * 10^k` is in `[x, y]` and one of the shortest\n    //              representations (with the minimal number of significant digits) in that range.\n    //\n    // find the digit length `kappa` between `(minus1, plus1)` as per Theorem 6.2.\n    // Theorem 6.2 can be adopted to exclude `x` by requiring `y mod 10^k < y - x` instead.\n    // (e.g., `x` = 32000, `y` = 32777; `kappa` = 2 since `y mod 10^3 = 777 < y - x = 777`.)\n    // the algorithm relies on the later verification phase to exclude `y`.\n    let delta1 = plus1 - minus1;\n    //  let delta1int = (delta1 >> e) as usize; // only for explanation\n    let delta1frac = delta1 & ((1 << e) - 1);\n\n    // render integral parts, while checking for the accuracy at each step.\n    let mut ten_kappa = max_ten_kappa; // 10^kappa\n    let mut remainder = plus1int; // digits yet to be rendered\n    loop {\n        // we always have at least one digit to render, as `plus1 >= 10^kappa`\n        // invariants:\n        // - `delta1int <= remainder < 10^(kappa+1)`\n        // - `plus1int = d[0..n-1] * 10^(kappa+1) + remainder`\n        //   (it follows that `remainder = plus1int % 10^(kappa+1)`)\n\n        // divide `remainder` by `10^kappa`. both are scaled by `2^-e`.\n        let q = remainder / ten_kappa;\n        let r = remainder % ten_kappa;\n        debug_assert!(q < 10);\n        buf[i] = MaybeUninit::new(b'0' + q as u8);\n        i += 1;\n\n        let plus1rem = ((r as u64) << e) + plus1frac; // == (plus1 % 10^kappa) * 2^e\n        if plus1rem < delta1 {\n            // `plus1 % 10^kappa < delta1 = plus1 - minus1`; we've found the correct `kappa`.\n            let ten_kappa = (ten_kappa as u64) << e; // scale 10^kappa back to the shared exponent\n            return round_and_weed(\n                // SAFETY: we initialized that memory above.\n                unsafe { buf[..i].assume_init_mut() },\n                exp,\n                plus1rem,\n                delta1,\n                plus1 - v.f,\n                ten_kappa,\n                1,\n            );\n        }\n\n        // break the loop when we have rendered all integral digits.\n        // the exact number of digits is `max_kappa + 1` as `plus1 < 10^(max_kappa+1)`.\n        if i > max_kappa as usize {\n            debug_assert_eq!(ten_kappa, 1);\n            break;\n        }\n\n        // restore invariants\n        ten_kappa /= 10;\n        remainder = r;\n    }\n\n    // render fractional parts, while checking for the accuracy at each step.\n    // this time we rely on repeated multiplications, as division will lose the precision.\n    let mut remainder = plus1frac;\n    let mut threshold = delta1frac;\n    let mut ulp = 1;\n    loop {\n        // the next digit should be significant as we've tested that before breaking out\n        // invariants, where `m = max_kappa + 1` (# of digits in the integral part):\n        // - `remainder < 2^e`\n        // - `plus1frac * 10^(n-m) = d[m..n-1] * 2^e + remainder`\n\n        remainder *= 10; // won't overflow, `2^e * 10 < 2^64`\n        threshold *= 10;\n        ulp *= 10;\n\n        // divide `remainder` by `10^kappa`.\n        // both are scaled by `2^e / 10^kappa`, so the latter is implicit here.\n        let q = remainder >> e;\n        let r = remainder & ((1 << e) - 1);\n        debug_assert!(q < 10);\n        buf[i] = MaybeUninit::new(b'0' + q as u8);\n        i += 1;\n\n        if r < threshold {\n            let ten_kappa = 1 << e; // implicit divisor\n            return round_and_weed(\n                // SAFETY: we initialized that memory above.\n                unsafe { buf[..i].assume_init_mut() },\n                exp,\n                r,\n                threshold,\n                (plus1 - v.f) * ulp,\n                ten_kappa,\n                ulp,\n            );\n        }\n\n        // restore invariants\n        remainder = r;\n    }\n\n    // we've generated all significant digits of `plus1`, but not sure if it's the optimal one.\n    // for example, if `minus1` is 3.14153... and `plus1` is 3.14158..., there are 5 different\n    // shortest representation from 3.14154 to 3.14158 but we only have the greatest one.\n    // we have to successively decrease the last digit and check if this is the optimal repr.\n    // there are at most 9 candidates (..1 to ..9), so this is fairly quick. (\"rounding\" phase)\n    //\n    // the function checks if this \"optimal\" repr is actually within the ulp ranges,\n    // and also, it is possible that the \"second-to-optimal\" repr can actually be optimal\n    // due to the rounding error. in either cases this returns `None`. (\"weeding\" phase)\n    //\n    // all arguments here are scaled by the common (but implicit) value `k`, so that:\n    // - `remainder = (plus1 % 10^kappa) * k`\n    // - `threshold = (plus1 - minus1) * k` (and also, `remainder < threshold`)\n    // - `plus1v = (plus1 - v) * k` (and also, `threshold > plus1v` from prior invariants)\n    // - `ten_kappa = 10^kappa * k`\n    // - `ulp = 2^-e * k`\n    fn round_and_weed(\n        buf: &mut [u8],\n        exp: i16,\n        remainder: u64,\n        threshold: u64,\n        plus1v: u64,\n        ten_kappa: u64,\n        ulp: u64,\n    ) -> Option<(&[u8], i16)> {\n        assert!(!buf.is_empty());\n\n        // produce two approximations to `v` (actually `plus1 - v`) within 1.5 ulps.\n        // the resulting representation should be the closest representation to both.\n        //\n        // here `plus1 - v` is used since calculations are done with respect to `plus1`\n        // in order to avoid overflow/underflow (hence the seemingly swapped names).\n        let plus1v_down = plus1v + ulp; // plus1 - (v - 1 ulp)\n        let plus1v_up = plus1v - ulp; // plus1 - (v + 1 ulp)\n\n        // decrease the last digit and stop at the closest representation to `v + 1 ulp`.\n        let mut plus1w = remainder; // plus1w(n) = plus1 - w(n)\n        {\n            let last = buf.last_mut().unwrap();\n\n            // we work with the approximated digits `w(n)`, which is initially equal to `plus1 -\n            // plus1 % 10^kappa`. after running the loop body `n` times, `w(n) = plus1 -\n            // plus1 % 10^kappa - n * 10^kappa`. we set `plus1w(n) = plus1 - w(n) =\n            // plus1 % 10^kappa + n * 10^kappa` (thus `remainder = plus1w(0)`) to simplify checks.\n            // note that `plus1w(n)` is always increasing.\n            //\n            // we have three conditions to terminate. any of them will make the loop unable to\n            // proceed, but we then have at least one valid representation known to be closest to\n            // `v + 1 ulp` anyway. we will denote them as TC1 through TC3 for brevity.\n            //\n            // TC1: `w(n) <= v + 1 ulp`, i.e., this is the last repr that can be the closest one.\n            // this is equivalent to `plus1 - w(n) = plus1w(n) >= plus1 - (v + 1 ulp) = plus1v_up`.\n            // combined with TC2 (which checks if `w(n+1)` is valid), this prevents the possible\n            // overflow on the calculation of `plus1w(n)`.\n            //\n            // TC2: `w(n+1) < minus1`, i.e., the next repr definitely does not round to `v`.\n            // this is equivalent to `plus1 - w(n) + 10^kappa = plus1w(n) + 10^kappa >\n            // plus1 - minus1 = threshold`. the left hand side can overflow, but we know\n            // `threshold > plus1v`, so if TC1 is false, `threshold - plus1w(n) >\n            // threshold - (plus1v - 1 ulp) > 1 ulp` and we can safely test if\n            // `threshold - plus1w(n) < 10^kappa` instead.\n            //\n            // TC3: `abs(w(n) - (v + 1 ulp)) <= abs(w(n+1) - (v + 1 ulp))`, i.e., the next repr is\n            // no closer to `v + 1 ulp` than the current repr. given `z(n) = plus1v_up - plus1w(n)`,\n            // this becomes `abs(z(n)) <= abs(z(n+1))`. again assuming that TC1 is false, we have\n            // `z(n) > 0`. we have two cases to consider:\n            //\n            // - when `z(n+1) >= 0`: TC3 becomes `z(n) <= z(n+1)`. as `plus1w(n)` is increasing,\n            //   `z(n)` should be decreasing and this is clearly false.\n            // - when `z(n+1) < 0`:\n            //   - TC3a: the precondition is `plus1v_up < plus1w(n) + 10^kappa`. assuming TC2 is\n            //     false, `threshold >= plus1w(n) + 10^kappa` so it cannot overflow.\n            //   - TC3b: TC3 becomes `z(n) <= -z(n+1)`, i.e., `plus1v_up - plus1w(n) >=\n            //     plus1w(n+1) - plus1v_up = plus1w(n) + 10^kappa - plus1v_up`. the negated TC1\n            //     gives `plus1v_up > plus1w(n)`, so it cannot overflow or underflow when\n            //     combined with TC3a.\n            //\n            // consequently, we should stop when `TC1 || TC2 || (TC3a && TC3b)`. the following is\n            // equal to its inverse, `!TC1 && !TC2 && (!TC3a || !TC3b)`.\n            while plus1w < plus1v_up\n                && threshold - plus1w >= ten_kappa\n                && (plus1w + ten_kappa < plus1v_up\n                    || plus1v_up - plus1w >= plus1w + ten_kappa - plus1v_up)\n            {\n                *last -= 1;\n                debug_assert!(*last > b'0'); // the shortest repr cannot end with `0`\n                plus1w += ten_kappa;\n            }\n        }\n\n        // check if this representation is also the closest representation to `v - 1 ulp`.\n        //\n        // this is simply same to the terminating conditions for `v + 1 ulp`, with all `plus1v_up`\n        // replaced by `plus1v_down` instead. overflow analysis equally holds.\n        if plus1w < plus1v_down\n            && threshold - plus1w >= ten_kappa\n            && (plus1w + ten_kappa < plus1v_down\n                || plus1v_down - plus1w >= plus1w + ten_kappa - plus1v_down)\n        {\n            return None;\n        }\n\n        // now we have the closest representation to `v` between `plus1` and `minus1`.\n        // this is too liberal, though, so we reject any `w(n)` not between `plus0` and `minus0`,\n        // i.e., `plus1 - plus1w(n) <= minus0` or `plus1 - plus1w(n) >= plus0`. we utilize the facts\n        // that `threshold = plus1 - minus1` and `plus1 - plus0 = minus0 - minus1 = 2 ulp`.\n        if 2 * ulp <= plus1w && plus1w <= threshold - 4 * ulp { Some((buf, exp)) } else { None }\n    }\n}",
  "callees": [
    "80887250879108148015413891736608607220",
    "135085831257420105511932492454364625470",
    "125895754419976834712369234308535121418",
    "97974469250681533633362941246048906040",
    "135085831257420105511932492454364625470",
    "56316359647357795184792913202425867352",
    "135085831257420105511932492454364625470",
    "152665689769213460446211199163606995684",
    "1026760530544148215311440132616070242899",
    "7482589000750884340327816351015335759",
    "114515349818180266375604241642404432663",
    "82654341932789732147751919849221457004",
    "155146884437592745449279657258619050520",
    "111948483962809339883106353795926089322",
    "1449318134079626371011274072562212788848",
    "1690717665349811648114279660609265654288",
    "1112587344707468276411885224945392270388",
    "748057349518592079718207019818141295702",
    "122106569399457767686979530207080663367",
    "1216621066653889995610546046327140038790",
    "29334395663381870005864057719351039300",
    "59819684876446801767075723074766688892",
    "9122690305665940051388962439719640221",
    "1618529254100396595012168917465903472121",
    "1310216450780391402111897335122167690877",
    "98692679274177573118020741553755499413",
    "686432449587531607917658283569998762685",
    "2290980464301696929957012594850492860",
    "446641282099743021915035641877345940088",
    "135085831257420105511932492454364625470",
    "81986060615313457313520860313503674379",
    "135085831257420105511932492454364625470",
    "529131735890807885813791093312023364462",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1093476100484343819814987720024391953916",
    "5727355925197697878453733593054842709",
    "885597861861001000511516117324052716088",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1501989787004212717414978504657860592208",
    "1402338422273675223217390840337962552209",
    "262655926825162372615996610610206939850",
    "1433860782927415637210662814835616222341",
    "135085831257420105511932492454364625470",
    "158665653291221107015613368590037312897",
    "69685788101594439601156785383740558303",
    "83726880301168752379603550571476470420",
    "96074532700052856493158655578097167059",
    "440773717992045751110825459058955875559",
    "135085831257420105511932492454364625470",
    "190359819262014031015892687675081007498",
    "1501621636175779253314402450532242777846",
    "150203716713484807054381945197290135428",
    "36380162371624727521206603407905192105",
    "1633046727246801115216304233509619821955",
    "135085831257420105511932492454364625470",
    "75205206017573953596003413438756636876",
    "158834747702222751563622469325806071500",
    "1257449939458569527717077158366407697777",
    "170014296805062216835073969549821561637",
    "55398000924899280461156178934673388121",
    "1286040984527793700010408138982195338134",
    "55374350330118105413720390969416525719",
    "135085831257420105511932492454364625470",
    "243839084150888952911908111539685994713",
    "5816187767072888251886714194878390885",
    "70678707815974353129270849643470718392",
    "7159367661129856143545653945965765610",
    "9007521356456792533806907033713747580",
    "1130219753616140084010892038682713793809",
    "172140117843934269071100695499597161982",
    "4960461046229976118108876182482238045",
    "398351056859449483913563186545567727466",
    "603228037714317177115336914651536545892",
    "880399244184648853615132446538621153208",
    "91308972039969540988091890815065278470",
    "174967394945862090364279848592208296953",
    "549170753248838805613839923749418865350",
    "56038931105331227461010074150263430028",
    "145832005278015056898602186932901300610",
    "103152247881410587012559215338086994587",
    "1112902636459789237811298239367962734076",
    "378716501787352301513606008557613312046",
    "607714210938293373617388292915106423797",
    "1403835990918124847663060065891066320",
    "154765065688066309948072265838097849098",
    "45271875752689560147947427477084707436",
    "1589957386128803173516550292804544979978",
    "284714043698447664813690158290923729236",
    "1318795693586417117412091773506303238138",
    "61351110763685098913444586035352607835",
    "135085831257420105511932492454364625470",
    "1201690793987544803711124358240151195847",
    "1722807143200550912812105592226005945816",
    "1028032724039154942912173433838393851681",
    "282486779280113170118123062714608667876",
    "1552393282631910999018038597724455324146",
    "103420051434103318892837854049723823086",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1122845743808954568315839891299563834211",
    "258820287469578611817448591488600041899",
    "6267750356639735281119899207213949232",
    "326614487408523231211476755719901205690",
    "120281485156880824795476129716396149700",
    "173333575624628564314365600339262332595",
    "4954363668049433906791255335906210806",
    "462518227198375540612885370480640396222",
    "263160489966033609311803218267093119168",
    "179430670899218703853981330836130826858",
    "1109830200500500220213655500434375461070",
    "135085831257420105511932492454364625470",
    "985633247147444923214630796199850707375",
    "6962362284417680556415378392413733050",
    "1415106497522421883676194742336801697",
    "15780086404796901452171114016829526503",
    "135085831257420105511932492454364625470",
    "182589585921433151244757111956503984331",
    "588974892899239543415856878986124229421",
    "83296569981337185257777514719755004891",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1547564489779508118311471276601353146868",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "573750095347314675218420517967106720291",
    "19127809293168330713198522102322069120",
    "146302972784592707345017558525924565358",
    "110489938845591258695432360905480776739",
    "838579135528120850312965158638687856356",
    "8388353940802646364767634772864445262",
    "73108691610225733116596031659328766854",
    "822269050661504501817822006377694013491",
    "247634727651802426813530679984485687857",
    "72993026513347610222044009578620103685",
    "83277592815980822158438974019698900871",
    "53212576593787280828984978559612536749",
    "1266136833068978554216667149679620774580",
    "170263472120930945276863179915420040056",
    "11156965278025928998185987370340964956",
    "110422491957938577782318652431088408899",
    "138705491366165238634028278563846115067",
    "65069040306676020898444859464496431715",
    "1823645488622937895012673111274870809755",
    "6781225442344569542394668875873020156",
    "457879323132651244210037964476759098996",
    "387263740474341501715316744261930101340",
    "402612920088428423016977109980304822932",
    "1820316365630756497411082775870133134724",
    "713596427418837315916034622167448792635",
    "12790910907938237822370326571745403935",
    "61539750939002654969594741517578054227",
    "121917327455978701744454773261590352887",
    "102272585106179812897836035233672297670",
    "69064157634746261873063654620308320827",
    "135928888564588691565994405694153794425",
    "507116607738930391111587036035165972673",
    "135501311693662294132722099136720163935",
    "540564128152414607516220637571452425273",
    "1605633131122579720611961448336401474874",
    "899089149104620122910782754756910095497",
    "564177479688813429716564910718645657356",
    "132979495079251483717565906717834352219",
    "126601631307930206616972114137702790273",
    "1651044975265797863616721065106597564241",
    "38217196742947992835679479997123307043",
    "1342521228831833354715461413551686205925",
    "97895937838022620309026790508679003629",
    "749080744560555709814769272248719962971",
    "146686842676245753349689708687358184876",
    "1231693553175053426510927854933676924735",
    "99603598099498707762068107842012164044",
    "97524482424029537145306757146156791937",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "618708256121172115917225444658205159680",
    "61192806222280460022726642951850667017",
    "118271566347208496455794892186718018856",
    "86743156304664435361459245229429219",
    "135085831257420105511932492454364625470",
    "1181644125006497251615243195645141756784",
    "1831714174379452750816311120289457687105",
    "955476229197528600214265971075818548582",
    "1290451404891277496014582054179652042509",
    "103535699596704774272175336263989487448",
    "797060176539388803210123616756054258696",
    "44331511621808520329232751427851363214",
    "154054957247084842813556838290954484639",
    "753787764165176062015930745751725023672",
    "113976926829195441887553509461786022633",
    "34410515695185066949979771014252260096",
    "1676806814539779643518083197252466559589",
    "73532313635074392944974785695838172453",
    "1530195770348625061718410767804951205478",
    "303127917241666984113380325134893912788",
    "117998536721572181153424129200097728114",
    "1107808469356821499617652381331539337348",
    "24617482615339559914756004717085281567",
    "592548824112144282714422772314322109198",
    "169520961882201194496320957712378488659",
    "143572956432032064744447501745832117320",
    "979090888644938360611991061608854301815",
    "137368381448604167703416046205455599816",
    "44865517427538800504241740979033245306",
    "80466408942777512049363027701449327301",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "157526224548632931644224402393760490185",
    "174107661030119018973646362480685393050",
    "366503061556370158810229951695642705038",
    "136731688598983939127472435238823692605",
    "172853077466930782957249088533345327364",
    "816589233988491856113892611160007340113",
    "1706241664392483122616630414095325426767",
    "1336395986670888604714795400021301436124",
    "180942759258101506955182199119065053589",
    "1779425227385014865413763254225852997980",
    "949119772679999304913254775119628944156",
    "143264002039824653101582016475268727293",
    "821053300062536159115601448644934990736",
    "68648213460155011086108492708709849999",
    "2922976863402117239063671147549004081",
    "1424839172046310268011085042199237354602",
    "601536179585149681911167127175566351660",
    "766763554765936066110108177004670593950",
    "1292179497977935596813342509875710327204",
    "79338743477724285898920606540258882171",
    "28815764710943890042111735716087760171",
    "135562536653374708711117709628363219721",
    "180490860656218517844535655690783186403",
    "61762885803371722481695307475049719440",
    "171487306867941110771102297001636865950",
    "67652595399401995723856827772077875740",
    "1262555611173615611410428101371636009066",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "104100704083858272429199023397677303118",
    "18307414679292374572756071415862685516",
    "1127215449901743380212348814951726849857",
    "14776508591360943885822664010974764823",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1214574077763705187516383491048990527345",
    "58556264066334599336424357434445237777",
    "960898925801407232312924333468692865726",
    "429511501966379024610548772418614005336",
    "53013231170464020982930967155682389250",
    "157452307909752828034879955455996353017",
    "130453669725098768871634540984100509610",
    "1264448150763745905618356639115650703943",
    "141110666132885552924669202659075536526",
    "56252927251435970978636410777602608721",
    "70189786848693324615028118901413603891",
    "1758079100556217157185991271441314538",
    "153492746833767641913665382585991399102",
    "187482952606822645712460029589708661523",
    "1523707018797761236613836373921741997156",
    "126818845945534382313624863669169238336",
    "144119928408074986676617008060073758280",
    "57678861643322857944194165102718529863",
    "594398967705273052918318531949127567864",
    "172590953658237452717460291587113135731",
    "974238557182874992112444884018478807048",
    "949723518165874883315854372086659764362",
    "94456838198084845861692920132229050794",
    "91930047381741681611917147084398403736",
    "89121182156207114064839032294436231789",
    "1585972590187889070117028601346813813214",
    "1606202552653889608810199512646967422438",
    "18036140156580546806629269073307822465",
    "100566549119408744214400768677206684395",
    "167934086960411180903985257275635548275",
    "108552149900633290919250115311635650035",
    "211665252660455842616535517088582326351",
    "173782477784401417119316661677947836083",
    "1684454861121597831915232248789432612198",
    "25925152360804179210989749457528709891",
    "156761099224162496521554063647246510953",
    "93629764868847211533386885481792043",
    "87962768316051763542817110666100781851",
    "979905345926612536015630663886892108940",
    "177028096127130855141974597834504714571",
    "790336683030703749616005572184538464784",
    "18924474281332607947427114014473837479",
    "1468091910298810725816359353565305732045",
    "364484297899500769415938702538049619119",
    "64933755017346766828885993644262595169",
    "2314453704286586957141741655351484658",
    "14202615834488052409859027248238516218",
    "1584226519763055173017297680793969390949",
    "30908084982265817655199528001939896756",
    "696031761158559988717156830525069362848",
    "1448899345559094949112654453072162878043",
    "1641862387002446068116192096070757843303",
    "1292203662441252026118372580930599634835",
    "137858457737126721339050743717226009000",
    "1094251261101801847513288225556855042079",
    "136250958068228316938199731614362970959",
    "677493057230061463812906195098240769208",
    "146722828362882336003877423755490060119",
    "133190003003759925793667076679125824144",
    "119410572960049574203441365705573330364",
    "139997011880036619526085207717010799176",
    "805684210294475109813538994712986997895",
    "293645540748671545017999185713660079650",
    "618087864432337385915594869955572671241",
    "1705039637729676748415488890044718082160",
    "5607578020819944315970194945020012681",
    "510531638386111881910053340190058988939",
    "40886540288475765763037402450466686093",
    "118320558337677119769123625739060418786",
    "68961250522390204303039500197253848819",
    "671334365265236941113753063318744059957",
    "1762126293480126793916319187708925702531",
    "110982975251410379469752288802819811268",
    "700543147431208495615048645222424964691",
    "11172017460127122262247192747398001865",
    "999894065589869448612231539797228218231",
    "86952898111294821451658113502791201350",
    "115305965424151250157684815253829770404",
    "1255593489441337196411111792584951488284",
    "772090384102639362198216457510496193",
    "5918423063880594543047647226827857654",
    "1660358534197915130918065586581585625625",
    "158669007246384560107761733536387868399",
    "1008627084322143835013959721941971697897",
    "3959983230967520511574185766120518907",
    "131951491516562017324429114881873478958",
    "147353619306145463894433932701739289836",
    "73934633302749851638600744339908206828",
    "141296000771128581945497538145890845343",
    "124743396873944380901919017967253874067",
    "150243093200272651816225092713556841110",
    "777454966023882485213336970821447203461",
    "798871996884082421610081782312663349463",
    "13863098581405631524288807864350146405",
    "613513255856977139911489735802844904928",
    "322749754952635112812467217236515710998",
    "97310642151613347726349452651452877766",
    "126337418415726794399520714079003318010",
    "173488751360057668935869030627777552292",
    "124798334296612191009914873740072641817",
    "4874888224965231630903852514116604247",
    "1113702662891479336314686028484409217895",
    "1014498806628630430116225554036073706840",
    "116118328140173292352234138909078520946",
    "312764843754118395216426254195474798174",
    "11313441816960027727538720719474296904",
    "105155837525522083449912883665304934776",
    "1404731032427000255717859115232501530921",
    "1513333453617937806712878309090792611957",
    "63824875704704228052884797545106788461",
    "37611015082660603716849267229566955360",
    "1006965550971568470513339634703718564510",
    "33331637534491476913440505814675408305",
    "1821553421238437798512207917672639540169",
    "14031239273799417297806782851617180873",
    "103695068283875105018623992302427237269",
    "53569486981529370344752868158650318763",
    "33020214437710035965402411197660679021",
    "3297309995462571210361513208440932689",
    "99505528804453027457861451108826778638",
    "404530585981013310415620289049541730647",
    "719049603193869984913180724586595888983",
    "556160511185732132213865142485227929702",
    "54338610666023313538785988934735143030",
    "813368619794702869414005756234477751011",
    "1359933470730887149416155830775469624234",
    "133941792012963290912121566695757883799",
    "179782706227535055097755371789106436416",
    "135085831257420105511932492454364625470",
    "28753697929221812287482212449517425755",
    "1676603290518039711418379565247484306913",
    "26163254850140342816131642431332460302",
    "109942998688311418033066856034581260283",
    "18516835299922195437230623424259419907",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1491305867414706213015161036740010050407",
    "180418702711060811601049271977599275130",
    "169890989984787760587841791387523712921",
    "11119406790923360834756731176691512413",
    "8988378904843992411522866968540141971",
    "182905984608557862932815513141399110877",
    "87610347679382204374849514063484826969",
    "135085831257420105511932492454364625470",
    "794694008638894565610503689879218203131",
    "171204665790647804337468407324534125555",
    "135085831257420105511932492454364625470",
    "79497215699703751765219082252269329184",
    "135085831257420105511932492454364625470",
    "180175623099158380248987811409809941831",
    "123489981763517494699775008546456061720",
    "115883727412415935571812162924229901730",
    "138902882366249903201239198490399945031",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "916171224115845112513401658283232826040",
    "98253406515198135092164211014980363661",
    "343942489170785946313945651402980657563",
    "1574076206413902276617103312132801420117",
    "135085831257420105511932492454364625470",
    "85588869322922048345445133830972928954",
    "46392132837367044793605408606640691738",
    "1100378328373936882818045327951760769678",
    "1366933002792501403514034768478701870222",
    "57544741910791006372460750620625338790",
    "93823778961912885171861814854836367565",
    "321688735089620358916457935724896313889",
    "83221429070676654997276869294717336401",
    "15659711577820632603287999978545437062",
    "19470982920213640634975089122141652435",
    "471019930735214455010790195510470539657",
    "943048867924649835013779616421314460758",
    "208257619197928444113832208997346155109",
    "90550453206581869791970009265946291996",
    "553913370659958613617397748244320672206",
    "1681045938191596506412316969696714615302",
    "178193152802508385064568305969678402720",
    "42824507231917785589406404051488242365",
    "95696153499528458313901596214115751145",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "136315757471550957542716891555713129836",
    "1637911438640321783717995568863978104742",
    "6070603776637052609765524141950388493",
    "67912827598195659661304478068192403362",
    "1094842765693892546910520378412041552806",
    "1246549294390316174211520358684701550573",
    "1528987468365251607818125127476060370393",
    "21639280041443497202806099100564393988",
    "827100470220406160910650394273344518714",
    "144160729758818962774870203617558065261",
    "100623443557313280538751593615269684508",
    "47822370175813177448723454097252028703",
    "135085831257420105511932492454364625470",
    "38246831695363040158059248428708217203",
    "136304994639276996811277527976407166479",
    "497499364745128359314402117207900903418",
    "118573796773268922105256773661754746281",
    "18627758387703203046724246868492382542",
    "1679207499139484451917512311688469788867",
    "40265862868123904401909777138035216629",
    "411805792864265543417403918021470104007",
    "33537404157592852811592413282780955689",
    "5646439217058838061875000808900958241",
    "358571424882708899413310170471965259775",
    "94991374756337164216687314359149512939",
    "183942889134990626643214750014121392010",
    "945408849728034117516202938996026270345",
    "75004213001905193955715579484657661560",
    "98114927019826253102817332717172441868",
    "979605271246805204117717884328990531057",
    "180168108041645642368736335759857072520",
    "119668517586734080878390935967434516036",
    "978973849962745378212641441183594156354",
    "579087111844842619511528504666396934533",
    "1153959874226978119913857890632071810994",
    "1290872813666562319511413746722512367019",
    "39117030210078960345467688189971296476",
    "42675708704912587986905307549981316387",
    "133774208422544204712385208594916672852",
    "1076664590807474698013860243586089992698",
    "53744828640510478502430396508799097231",
    "58675320035953499899532680283682396280",
    "596564398432010081814808260562835248359",
    "296491127499601218917065895757213605938",
    "90933695478604663001573090783200358337",
    "20689955926650303163515534893265746746",
    "135085831257420105511932492454364625470",
    "1743153353454633366017320764647572977881",
    "683289855890887679216359651262730033383",
    "115468292258839821343722232521061340376",
    "135085831257420105511932492454364625470",
    "137147026445318887422604340055542353314",
    "1443519380077829511910627264749460202598",
    "664501847647250298311149032319303144827",
    "135085831257420105511932492454364625470",
    "46590510295835804303049911055833441641",
    "106663972824342135956571018803816649195",
    "30819441612753718577366232250007643490",
    "852298530973108873212161851321200820382",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "317131734443709433116505601136930857147",
    "135085831257420105511932492454364625470",
    "1030984695525452447715424858409070299032",
    "19621519501541880893262169693639313799",
    "535312728641325414318433154446926392210",
    "79957517381934331374505463763239679871",
    "109849097723912452994088294171860151303",
    "486164287917427656918200146926298480057",
    "947833919457653120214810965083035955432",
    "87977286206191110206643684053945734595",
    "154911443990380340341563367924870465980",
    "611027897215340775410757839603478111815",
    "36990817497430174858508344623774643994",
    "819756211280848030917202637728825520633",
    "112954101278082009685742498530365011169",
    "126048648882406442003602795325732745334",
    "60020754642282354823285669083003912494",
    "1006928117247909106515604664996585110540",
    "92658835324565758495130762072978604201",
    "982812517398244847818134688650878457542",
    "147417290197272725234607004164769047407",
    "56448737519681294968960799914289695112",
    "51920321377442756437204742573348251158",
    "1320801548407176755117757300189063729311",
    "151177604553563121726407199103432119959",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
