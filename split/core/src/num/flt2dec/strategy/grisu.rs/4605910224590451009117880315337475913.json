{
  "file": "core/src/num/flt2dec/strategy/grisu.rs",
  "name": "num::flt2dec::strategy::grisu::format_exact_opt",
  "hash": "4605910224590451009117880315337475913",
  "hash_direct": "685338723306296867117134604035809612814",
  "src": "pub fn format_exact_opt<'a>(\n    d: &Decoded,\n    buf: &'a mut [MaybeUninit<u8>],\n    limit: i16,\n) -> Option<(/*digits*/ &'a [u8], /*exp*/ i16)> {\n    assert!(d.mant > 0);\n    assert!(d.mant < (1 << 61)); // we need at least three bits of additional precision\n    assert!(!buf.is_empty());\n\n    // normalize and scale `v`.\n    let v = Fp { f: d.mant, e: d.exp }.normalize();\n    let (minusk, cached) = cached_power(ALPHA - v.e - 64, GAMMA - v.e - 64);\n    let v = v.mul(cached);\n\n    // divide `v` into integral and fractional parts.\n    let e = -v.e as usize;\n    let vint = (v.f >> e) as u32;\n    let vfrac = v.f & ((1 << e) - 1);\n\n    let requested_digits = buf.len();\n\n    const POW10_UP_TO_9: [u32; 10] =\n        [1, 10, 100, 1000, 10_000, 100_000, 1_000_000, 10_000_000, 100_000_000, 1_000_000_000];\n\n    // We deviate from the original algorithm here and do some early checks to determine if we can satisfy requested_digits.\n    // If we determine that we can't, we exit early and avoid most of the heavy lifting that the algorithm otherwise does.\n    //\n    // When vfrac is zero, we can easily determine if vint can satisfy requested digits:\n    //      If requested_digits >= 11, vint is not able to exhaust the count by itself since 10^(11 -1) > u32 max value >= vint.\n    //      If vint < 10^(requested_digits - 1), vint cannot exhaust the count.\n    //      Otherwise, vint might be able to exhaust the count and we need to execute the rest of the code.\n    if (vfrac == 0) && ((requested_digits >= 11) || (vint < POW10_UP_TO_9[requested_digits - 1])) {\n        return None;\n    }\n\n    // both old `v` and new `v` (scaled by `10^-k`) has an error of < 1 ulp (Theorem 5.1).\n    // as we don't know the error is positive or negative, we use two approximations\n    // spaced equally and have the maximal error of 2 ulps (same to the shortest case).\n    //\n    // the goal is to find the exactly rounded series of digits that are common to\n    // both `v - 1 ulp` and `v + 1 ulp`, so that we are maximally confident.\n    // if this is not possible, we don't know which one is the correct output for `v`,\n    // so we give up and fall back.\n    //\n    // `err` is defined as `1 ulp * 2^e` here (same to the ulp in `vfrac`),\n    // and we will scale it whenever `v` gets scaled.\n    let mut err = 1;\n\n    // calculate the largest `10^max_kappa` no more than `v` (thus `v < 10^(max_kappa+1)`).\n    // this is an upper bound of `kappa` below.\n    let (max_kappa, max_ten_kappa) = max_pow10_no_more_than(vint);\n\n    let mut i = 0;\n    let exp = max_kappa as i16 - minusk + 1;\n\n    // if we are working with the last-digit limitation, we need to shorten the buffer\n    // before the actual rendering in order to avoid double rounding.\n    // note that we have to enlarge the buffer again when rounding up happens!\n    let len = if exp <= limit {\n        // oops, we cannot even produce *one* digit.\n        // this is possible when, say, we've got something like 9.5 and it's being rounded to 10.\n        //\n        // in principle we can immediately call `possibly_round` with an empty buffer,\n        // but scaling `max_ten_kappa << e` by 10 can result in overflow.\n        // thus we are being sloppy here and widen the error range by a factor of 10.\n        // this will increase the false negative rate, but only very, *very* slightly;\n        // it can only matter noticeably when the mantissa is bigger than 60 bits.\n        //\n        // SAFETY: `len=0`, so the obligation of having initialized this memory is trivial.\n        return unsafe {\n            possibly_round(buf, 0, exp, limit, v.f / 10, (max_ten_kappa as u64) << e, err << e)\n        };\n    } else if ((exp as i32 - limit as i32) as usize) < buf.len() {\n        (exp - limit) as usize\n    } else {\n        buf.len()\n    };\n    debug_assert!(len > 0);\n\n    // render integral parts.\n    // the error is entirely fractional, so we don't need to check it in this part.\n    let mut kappa = max_kappa as i16;\n    let mut ten_kappa = max_ten_kappa; // 10^kappa\n    let mut remainder = vint; // digits yet to be rendered\n    loop {\n        // we always have at least one digit to render\n        // invariants:\n        // - `remainder < 10^(kappa+1)`\n        // - `vint = d[0..n-1] * 10^(kappa+1) + remainder`\n        //   (it follows that `remainder = vint % 10^(kappa+1)`)\n\n        // divide `remainder` by `10^kappa`. both are scaled by `2^-e`.\n        let q = remainder / ten_kappa;\n        let r = remainder % ten_kappa;\n        debug_assert!(q < 10);\n        buf[i] = MaybeUninit::new(b'0' + q as u8);\n        i += 1;\n\n        // is the buffer full? run the rounding pass with the remainder.\n        if i == len {\n            let vrem = ((r as u64) << e) + vfrac; // == (v % 10^kappa) * 2^e\n            // SAFETY: we have initialized `len` many bytes.\n            return unsafe {\n                possibly_round(buf, len, exp, limit, vrem, (ten_kappa as u64) << e, err << e)\n            };\n        }\n\n        // break the loop when we have rendered all integral digits.\n        // the exact number of digits is `max_kappa + 1` as `plus1 < 10^(max_kappa+1)`.\n        if i > max_kappa as usize {\n            debug_assert_eq!(ten_kappa, 1);\n            debug_assert_eq!(kappa, 0);\n            break;\n        }\n\n        // restore invariants\n        kappa -= 1;\n        ten_kappa /= 10;\n        remainder = r;\n    }\n\n    // render fractional parts.\n    //\n    // in principle we can continue to the last available digit and check for the accuracy.\n    // unfortunately we are working with the finite-sized integers, so we need some criterion\n    // to detect the overflow. V8 uses `remainder > err`, which becomes false when\n    // the first `i` significant digits of `v - 1 ulp` and `v` differ. however this rejects\n    // too many otherwise valid input.\n    //\n    // since the later phase has a correct overflow detection, we instead use tighter criterion:\n    // we continue til `err` exceeds `10^kappa / 2`, so that the range between `v - 1 ulp` and\n    // `v + 1 ulp` definitely contains two or more rounded representations. this is same to\n    // the first two comparisons from `possibly_round`, for the reference.\n    let mut remainder = vfrac;\n    let maxerr = 1 << (e - 1);\n    while err < maxerr {\n        // invariants, where `m = max_kappa + 1` (# of digits in the integral part):\n        // - `remainder < 2^e`\n        // - `vfrac * 10^(n-m) = d[m..n-1] * 2^e + remainder`\n        // - `err = 10^(n-m)`\n\n        remainder *= 10; // won't overflow, `2^e * 10 < 2^64`\n        err *= 10; // won't overflow, `err * 10 < 2^e * 5 < 2^64`\n\n        // divide `remainder` by `10^kappa`.\n        // both are scaled by `2^e / 10^kappa`, so the latter is implicit here.\n        let q = remainder >> e;\n        let r = remainder & ((1 << e) - 1);\n        debug_assert!(q < 10);\n        buf[i] = MaybeUninit::new(b'0' + q as u8);\n        i += 1;\n\n        // is the buffer full? run the rounding pass with the remainder.\n        if i == len {\n            // SAFETY: we have initialized `len` many bytes.\n            return unsafe { possibly_round(buf, len, exp, limit, r, 1 << e, err) };\n        }\n\n        // restore invariants\n        remainder = r;\n    }\n\n    // further calculation is useless (`possibly_round` definitely fails), so we give up.\n    return None;\n\n    // we've generated all requested digits of `v`, which should be also same to corresponding\n    // digits of `v - 1 ulp`. now we check if there is a unique representation shared by\n    // both `v - 1 ulp` and `v + 1 ulp`; this can be either same to generated digits, or\n    // to the rounded-up version of those digits. if the range contains multiple representations\n    // of the same length, we cannot be sure and should return `None` instead.\n    //\n    // all arguments here are scaled by the common (but implicit) value `k`, so that:\n    // - `remainder = (v % 10^kappa) * k`\n    // - `ten_kappa = 10^kappa * k`\n    // - `ulp = 2^-e * k`\n    //\n    // SAFETY: the first `len` bytes of `buf` must be initialized.\n    unsafe fn possibly_round(\n        buf: &mut [MaybeUninit<u8>],\n        mut len: usize,\n        mut exp: i16,\n        limit: i16,\n        remainder: u64,\n        ten_kappa: u64,\n        ulp: u64,\n    ) -> Option<(&[u8], i16)> {\n        debug_assert!(remainder < ten_kappa);\n\n        //           10^kappa\n        //    :   :   :<->:   :\n        //    :   :   :   :   :\n        //    :|1 ulp|1 ulp|  :\n        //    :|<--->|<--->|  :\n        // ----|-----|-----|----\n        //     |     v     |\n        // v - 1 ulp   v + 1 ulp\n        //\n        // (for the reference, the dotted line indicates the exact value for\n        // possible representations in given number of digits.)\n        //\n        // error is too large that there are at least three possible representations\n        // between `v - 1 ulp` and `v + 1 ulp`. we cannot determine which one is correct.\n        if ulp >= ten_kappa {\n            return None;\n        }\n\n        //    10^kappa\n        //   :<------->:\n        //   :         :\n        //   : |1 ulp|1 ulp|\n        //   : |<--->|<--->|\n        // ----|-----|-----|----\n        //     |     v     |\n        // v - 1 ulp   v + 1 ulp\n        //\n        // in fact, 1/2 ulp is enough to introduce two possible representations.\n        // (remember that we need a unique representation for both `v - 1 ulp` and `v + 1 ulp`.)\n        // this won't overflow, as `ulp < ten_kappa` from the first check.\n        if ten_kappa - ulp <= ulp {\n            return None;\n        }\n\n        //     remainder\n        //       :<->|                           :\n        //       :   |                           :\n        //       :<--------- 10^kappa ---------->:\n        //     | :   |                           :\n        //     |1 ulp|1 ulp|                     :\n        //     |<--->|<--->|                     :\n        // ----|-----|-----|------------------------\n        //     |     v     |\n        // v - 1 ulp   v + 1 ulp\n        //\n        // if `v + 1 ulp` is closer to the rounded-down representation (which is already in `buf`),\n        // then we can safely return. note that `v - 1 ulp` *can* be less than the current\n        // representation, but as `1 ulp < 10^kappa / 2`, this condition is enough:\n        // the distance between `v - 1 ulp` and the current representation\n        // cannot exceed `10^kappa / 2`.\n        //\n        // the condition equals to `remainder + ulp < 10^kappa / 2`.\n        // since this can easily overflow, first check if `remainder < 10^kappa / 2`.\n        // we've already verified that `ulp < 10^kappa / 2`, so as long as\n        // `10^kappa` did not overflow after all, the second check is fine.\n        if ten_kappa - remainder > remainder && ten_kappa - 2 * remainder >= 2 * ulp {\n            // SAFETY: our caller initialized that memory.\n            return Some((unsafe { buf[..len].assume_init_ref() }, exp));\n        }\n\n        //   :<------- remainder ------>|   :\n        //   :                          |   :\n        //   :<--------- 10^kappa --------->:\n        //   :                    |     |   : |\n        //   :                    |1 ulp|1 ulp|\n        //   :                    |<--->|<--->|\n        // -----------------------|-----|-----|-----\n        //                        |     v     |\n        //                    v - 1 ulp   v + 1 ulp\n        //\n        // on the other hands, if `v - 1 ulp` is closer to the rounded-up representation,\n        // we should round up and return. for the same reason we don't need to check `v + 1 ulp`.\n        //\n        // the condition equals to `remainder - ulp >= 10^kappa / 2`.\n        // again we first check if `remainder > ulp` (note that this is not `remainder >= ulp`,\n        // as `10^kappa` is never zero). also note that `remainder - ulp <= 10^kappa`,\n        // so the second check does not overflow.\n        if remainder > ulp && ten_kappa - (remainder - ulp) <= remainder - ulp {\n            if let Some(c) =\n                // SAFETY: our caller must have initialized that memory.\n                round_up(unsafe { buf[..len].assume_init_mut() })\n            {\n                // only add an additional digit when we've been requested the fixed precision.\n                // we also need to check that, if the original buffer was empty,\n                // the additional digit can only be added when `exp == limit` (edge case).\n                exp += 1;\n                if exp > limit && len < buf.len() {\n                    buf[len] = MaybeUninit::new(c);\n                    len += 1;\n                }\n            }\n            // SAFETY: we and our caller initialized that memory.\n            return Some((unsafe { buf[..len].assume_init_ref() }, exp));\n        }\n\n        // otherwise we are doomed (i.e., some values between `v - 1 ulp` and `v + 1 ulp` are\n        // rounding down and others are rounding up) and give up.\n        None\n    }\n}",
  "callees": [
    "21711908612579563914872185813592704681",
    "1363736816890242968813291297505934676086",
    "1096154568935207292118411765173724766739",
    "1615780015787215128316594883786605832883",
    "1363736816890242968813291297505934676086",
    "40063093336585792095766602796070126518",
    "1363736816890242968813291297505934676086",
    "32379270059602019354235921731882813982",
    "56302926392345337717408510197239954979",
    "162904158373319495369070442937212273978",
    "11879697526668758218117833999951598353",
    "377691149689623775011313779246785124838",
    "145493908791982296621902181110000221268",
    "400496564369738839516535843282634752069",
    "569006077262986796812405551728371512007",
    "1531529736665207119716166291560277808459",
    "589599466487462365011430963401962118509",
    "173804791060645997939431648088044898019",
    "345779094652510990013028497657958621628",
    "1627068949243052817915838286928528342465",
    "87917181078797516101814801417554460859",
    "633647834542374266612707027049512022895",
    "697460064680243425913637757097126534899",
    "491501190642785328215657853710567654624",
    "963445940455787412316298237032570014032",
    "45755338440053891812429711640309937578",
    "117083133034458006019709376097028492273",
    "1024742476765853774512537154307721785418",
    "1214258652200928387411644436693302022198",
    "116838725589658364762125035485285727797",
    "543262562578205611814193723889232631679",
    "52447312959119204751725989402363811285",
    "178740761294011342347851287405474276941",
    "1363736816890242968813291297505934676086",
    "133438993749786418975081779688101424321",
    "1363736816890242968813291297505934676086",
    "1399429456846979953611102041165781521260",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "124505100155499374672517322928734740357",
    "17564752812027543017921499519819593186",
    "415843772060095450495024404503354748",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "141734674420942826793676645643806909910",
    "1449958889715960797216832526184590351740",
    "1405688574831102906613841440741292834949",
    "1424142493480027721713494200009767155633",
    "1363736816890242968813291297505934676086",
    "102681047625715816715891697912487007516",
    "1483747998184312351214211820640300015532",
    "1456038200519160613311076457066716778749",
    "341598835693790048112693026507179291352",
    "1363736816890242968813291297505934676086",
    "3631011255984099811723442155502233758",
    "107434598387902432754329628792529310410",
    "126856515018227567717268281677679773089",
    "1541892164474739153210412766107034883087",
    "17071058974145005632186640793723653443",
    "1363736816890242968813291297505934676086",
    "160497103329191699902136713012782731632",
    "114307678585105788705826351831663929507",
    "36516702880102455035412356603021119879",
    "66230658810213716923364242359817003494",
    "758521721130535942311471025828986597656",
    "1061164724759219763815645675397447440252",
    "87403439848434419247064420115731773013",
    "1363736816890242968813291297505934676086",
    "1557257459089412723814481849913677699848",
    "1252490680533338683910412060151507734433",
    "1749354356376422432110307264409629560948",
    "1258466857914554525112404871973680747085",
    "44257266364374505814542935723980878695",
    "483065282508714011512484774123351954088",
    "14903543624694794243644002717478558678",
    "110497420964184345517185892364398759782",
    "967906768493376431218217451737112282259",
    "120545667060787152649831833770488558658",
    "35398161789749681612681774609204698030",
    "1179015178765463762414234671921766134145",
    "174685213766893048749650677724114385749",
    "10509237598131848814549591882127413984",
    "1419929269136862299211262519240416130702",
    "2525690855871891794335583325292858699",
    "1363736816890242968813291297505934676086",
    "92775991830685629292697099870061522488",
    "1363736816890242968813291297505934676086",
    "113300360601603711317753218038969623773",
    "127422485754702836426048484396928248775",
    "177015337230654335527510608574068762225",
    "85954746138896127215759194079554738885",
    "147140364761497764245859604611097836389",
    "1596895408968513533410088921895846228595",
    "1715961766004996638713399184730656425507",
    "1117101410359867868117501421588521925974",
    "907262641331167394614307029369849733944",
    "543091232183759163717545959961485667535",
    "133301826442651448018317101353447852851",
    "1363736816890242968813291297505934676086",
    "102125231500955338629808105611083014416",
    "623639168654963913411684007357416775607",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "19612539614550781067210372486361090721",
    "49583959702732379411077282633483476976",
    "47199191733691449547172525385406110161",
    "1045310264982455842316057249879093988914",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1316970106710505483515384541553369764410",
    "47323665595455568617290020941376774286",
    "115294443576414182704230118141076863162",
    "128628521680464556275047697473333251596",
    "35752260820018148097275620372696192568",
    "117180827392012273508876188211897901",
    "33648701090774792381476499826703911309",
    "17059090463224209834835470382370244130",
    "1390948765080590250516343632946970173132",
    "302040922402546323014383629325615453738",
    "117836303292740045575997300646174980297",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "11139495935450220752286966752445431093",
    "25768524018977866517055903022448790318",
    "161564724136622141702746708115603924802",
    "1363736816890242968813291297505934676086",
    "152285539358858202906893558643461357037",
    "111425599901702694743874629435682172347",
    "10411882274122721321347434438360460579",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "47278574192031232971799194590021398469",
    "84909938954906103112758184730426842057",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "43065787078031739421302414489234141137",
    "141422989953676177975345808590037882245",
    "599811874247088556214270119820779031432",
    "116307730265010107496063883445928110555",
    "51249814573059736397300350198312706573",
    "14314158248731667467224830801301140817",
    "20556606504130694934441291267858631687",
    "63343181121905511768887728585050322379",
    "1740349853341161241318022375811744789656",
    "163420631485670102514812722236596958075",
    "117866791398837999916729913240660212602",
    "78937725557049865865312472258624739921",
    "24965143184079381448082111781766640478",
    "120187458746217755377061356638344375303",
    "979929479181667570414120095459269589167",
    "26018933144073124403117386256735640375",
    "146047412284994450699670763407526667493",
    "370986840755973263713704597144407313708",
    "1269044022939676954011330908751210391833",
    "1814608415178812336916584953075633412492",
    "5155095549190106808117025562379125071",
    "75394659216236705807755120079500716356",
    "231144133455543717611650225582136294816",
    "658338601979133096511997313224278252199",
    "279139698799614514916515091634607686006",
    "1386932868725969591817741044941664680589",
    "1614019611353877008011078295776030189782",
    "122529376138248236262181364630884265848",
    "168808893922624482353144964771536079081",
    "1373954867253511233510412862011267463900",
    "118312983481738621787939326110261417317",
    "1443801087974407715313972555121628268092",
    "55549683683119533987529308576431567352",
    "1825802593323653189615183082969984235050",
    "353836335514715551415901371272464802770",
    "1259853796123792531010116020849677170944",
    "11663475863125548442297136621169599847",
    "694680042487375838617016048567631445241",
    "1469238626115971997416556324389651615960",
    "772065526016577495817057948738175729677",
    "164222581612569613775862371766786294469",
    "168545836479171427075036933182194130275",
    "1245138925531671967011772485621443291799",
    "84531025305994381986874028925223812083",
    "1767855557361537621413279623076098939355",
    "1737790711272917069411654923375177111580",
    "1034317870221814136813621446782838396319",
    "107365534946901948286099583667090509800",
    "1712898201300478840215074793236064467963",
    "1067675883129992420314174327751912045205",
    "7832507060962758874697651425918563686",
    "123199657751927714737688987421644772585",
    "288904415555692187016830851534559216638",
    "1363736816890242968813291297505934676086",
    "2882998074660974561505463681177903479",
    "10683611494615164496255508785088586476",
    "1657977473695841854811276965273939985065",
    "1750905057206390645012008901543136988467",
    "1455651996402066124810316458983108570535",
    "1797688252619773536115131771670367998727",
    "279805444279401301914559817621231097640",
    "1514299462074004957746938536342825673",
    "1831642939133997202912172367628995853179",
    "1346109299577794330213239226645252939906",
    "6221741227072437069508312353437850718",
    "841528230883583910260472553997390736",
    "59784951958023534311340742558790816074",
    "161003650625398914518944455314788757627",
    "375485108047544468212954122974188100514",
    "1259350752486802697010822022220260946961",
    "173105439367020071767957153438588951894",
    "164769300933020566656262923669273525158",
    "823919606921056216412405359771911898343",
    "48354854979115560144022655123531408337",
    "42236118570899595848210039267000800337",
    "841346702487865802717731804342903065853",
    "290360310864386898714327273451929980463",
    "1617054938297627622011998382328717871744",
    "1187394330470290540315609612625104918416",
    "643349473068727846115780678007450923004",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "94922797404227066110182963288288755980",
    "1290129509806421189411347835193128335421",
    "80473291589023587618236839647443177135",
    "99587791594069289972258845907757832101",
    "34844195959167899216995270741793392016",
    "1440950763975467621710982502069073665218",
    "115914492802736206513942422914514650180",
    "10472345935978673833158369420689244465",
    "590329942313453995443993872612632776",
    "124585850382406476533630795656715220155",
    "58004076551979108867624014250612795185",
    "315331140686166457616644577557668814534",
    "392414261785278668815725499572289607221",
    "57879252225118024599041161508222342189",
    "13877762789521041542129457574643169972",
    "39733537437022171613682062970386769295",
    "116482898840396402477616122367703643717",
    "126012008154782159615214827713093461635",
    "176742512093848468045239021356424772729",
    "1332220011502853693912113825838893369096",
    "489491009154422080613291037190739219235",
    "172988202723925134796567682468931265149",
    "161899346824042420066809545955353317373",
    "142848115973206406239372863350872744477",
    "121437425240318612285099463628436266366",
    "862746525473562901814208597568406058076",
    "18807870376557811914137072961455205803",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1434156875906603652615187501249620802995",
    "105848699252206129871890218355961784087",
    "1454824814301064456718425928793229767588",
    "53589810041120365110998933211304468616",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "14289085791843058303972699274315536239",
    "772849497340941696512651691449279859789",
    "172651811582921907362991207281968133556",
    "55767955768979135724569809046456107380",
    "138498210655847367337117318085891081738",
    "602553655434272852810568520159081802816",
    "118399811559831053152713406198401957826",
    "37177017281071971897146112828522083495",
    "12843798981703387312528981449504705678",
    "258383674090471065712097594685693339627",
    "16219137135012567795854520876341648395",
    "1110994844594451591212495732224461740413",
    "102887121523905452179262747329207775596",
    "703663108277374327010040438608357482834",
    "18025038300022165797237903038339257643",
    "1100495660517602822510660091708953776518",
    "261114641164087560416314538374841383619",
    "104831405656903467145249333363974848645",
    "166731958795390711014401438738375660172",
    "170643549057433678244294044399486155477",
    "45778466392467191607407869613497036936",
    "928576257219350686410540489380463230637",
    "316650073974070898314677646691025099244",
    "699677282037119441912902108102153124040",
    "82172937758979852922952239791072303378",
    "440548634769728996212603275541854349848",
    "58610947851065178096877308904752748129",
    "11646453575295718315251820797250120902",
    "180824515799235861855048294605620195261",
    "6920580184232348336779953785783275216",
    "10280076113730517359836576566793155285",
    "1341558659220454468114614057400541737257",
    "1183413710834440225216569966721040242434",
    "53270843576615726617640898710751015013",
    "134444069993780397564703136863158148716",
    "1281311138712451019216655529596617870816",
    "1694562113052794749410144451898650894237",
    "4869154787378134257815739629728386905",
    "1265976456585539210516529077192093398642",
    "115773568660767031455181763448941131845",
    "136032794974893814259994759472454752644",
    "432839679267479096014829068154253700423",
    "1794599000442827535116488920139961158750",
    "2986389593417097136138451070897405411",
    "120554772527146371477803731781472626688",
    "1575180643816959680013764123585909653935",
    "533869513189164612717115776816606455221",
    "39498763786986515562043840216548811868",
    "1301552843662473815815562437677364454669",
    "25269069644916694782526525713115896132",
    "705720955307329014517734924079983333105",
    "106194760576608812086033306050055808545",
    "26709420718515964610399689521027368728",
    "647229011481470722711384925118784833376",
    "195916256607314082811658914690236691420",
    "781603672758780177711142029625885084089",
    "491291023697495753013211284803811616795",
    "184353680265586730536158755300629755859",
    "150805697079257168915708122934999652421",
    "19032683183423540915807324370118535654",
    "843102896095261732816452208300794916411",
    "183304351666724829317590170706630038849",
    "1614903415506775741017981287843401206816",
    "1740741091750212443512988176670821833323",
    "169017152061146820209827866672499117723",
    "176175348416071052808448244681033673599",
    "148575031114542006631514846264054548534",
    "1775677520341811851814469906126811626471",
    "116738536460889801267781784641205834958",
    "335215210776670050614472036033464965023",
    "63316748377020640678862326185202615069",
    "31390187068039156922254347795038548724",
    "1365351597739011160412231277592213691479",
    "96938268585662610632095129526323472062",
    "1065899137889618750313994535315221966910",
    "62964906474134410292844024784991518817",
    "591163883570913488917341250007887670228",
    "1191898201809378325315295870108407566549",
    "1180283320154936987317687023111507811148",
    "1313672206338891747615103280559224089796",
    "96372891677808677613400092139271508855",
    "28615990301751085456623670194523588843",
    "934375696446284627516563118665690549226",
    "90717827950038266317724794688744091509",
    "374600997420842104113073418159306638921",
    "676158778818239148118032927577101369525",
    "20465072737965727702865968861132587689",
    "164270848150013505114031889181489753537",
    "15152045824856044406894168005740738415",
    "1619664696269114311311148142649633607940",
    "132338405727806576551962422346647404382",
    "148942728659230088417108897615339309934",
    "39540448515855064678826919862848152559",
    "1138206188600112614014052369198511966956",
    "1444520060167597438013590316361883534441",
    "840327692597851529715494429944416660710",
    "110592357029254507637069415658458618835",
    "659668705778703132618263658943022009102",
    "104042909831277084814695630352375939457",
    "151694591507088409946921766244030956793",
    "199204638009217392510037902431469110881",
    "84778723771253399612701136067425341362",
    "145447226859878511083700582225257315850",
    "50060506762358864813111719587773515328",
    "183861757727510342134448172129871973284",
    "105672144727691370147417363250736312873",
    "484471573878144096018004521534736974390",
    "1709809215670154039418099455961948399924",
    "96916315473583579836508686922498622791",
    "182814095904945352917555422878847155718",
    "1672506487484979046115422262272100075989",
    "6463863983616385316457268455777407968",
    "565703400213878621116612569146298479102",
    "28736061727494506023412962124683958890",
    "33266587737904114784644542366524180286",
    "334303462732756290216309246141683003630",
    "21719508563266996657990482115758623513",
    "66698550878882944999797753749781566130",
    "1060448573230263915014803683681339895296",
    "58110682308819786796654183007581184910",
    "1454902756454700245417169407534621781519",
    "1302514623760732210917631482165556335973",
    "50824866008468108414977877049644057765",
    "1028023859496283824714006082102994000183",
    "1375602339865304183616456573312626826122",
    "1107283495849277278117296354366898453379",
    "277270871561828570218406540162843059579",
    "1038091007637423756616843932505132086543",
    "13445532662779670761228880372488293329",
    "1163068038768334523712968925068122539241",
    "1262939944460148277811000139254508406606",
    "139679375284959323487025069545409596711",
    "18715316072765276746430930647862132791",
    "111607676992080912514849326215626188409",
    "156699801464166307163042354284108788791",
    "22866183673949532009302817089247357249",
    "481760318323362098310716245514364463126",
    "64610587145495125376527745759424960225",
    "1224955055955126069915106408301904372143",
    "1363736816890242968813291297505934676086",
    "126141077251671387694770399036796691982",
    "182972684513709302288440602073677891408",
    "129529501755306007823509332047388210927",
    "46951060227140590465148676449871328723",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "757582883714685463901852637522961818",
    "126692834448097932228994692025940173998",
    "25558485697757400065874176408609551720",
    "3070792398821344367711524405851230424",
    "176202107802907917596318099016612540923",
    "100982178162748778518184747487145268773",
    "1309835973007280609915569531429584049128",
    "1168250850099297564614674330731516573335",
    "1730156553098966156318256096338569794492",
    "1363736816890242968813291297505934676086",
    "258015149311769650815595893692783623165",
    "511478505957911151817582639665615596786",
    "115089781178111953465042746492396906682",
    "1363736816890242968813291297505934676086",
    "4768865047025781386858654976183727069",
    "25791650335055976151577255390452448375",
    "102912482032531431507256694298118876674",
    "1363736816890242968813291297505934676086",
    "72206699492837620961391515713423967445",
    "13755615706890703333392644145431563331",
    "159756182951594195141958974558316251741",
    "125503965774672678587505966790704230026",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "800893046819772829414463551845917966732",
    "1363736816890242968813291297505934676086",
    "630591683811249915517985898218048560806",
    "183356576306483702334574723869456676428",
    "254980726983347633512203575532483066364",
    "27239306046078710208621715496220229574",
    "66706820410345849277836174571153878427",
    "56280834011826648107990160430231866711",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "410539056495057654816027084297333494253",
    "77174816795140902716242581103966137591",
    "2789128693349703173502163395333061757",
    "166633686087748340273888470960266707358",
    "803349082160475719615953068480273372134",
    "94056652019881819791956374760214426656",
    "754759722796109215815456571656250183671",
    "1759901199729611034616971071765351824769",
    "1713539753654745329215868145254478021527",
    "617092763968904127517665973127834451336",
    "15270023205217578333049352204880089381",
    "127855099164131056444917757662188434041",
    "949395388449823663510769715854278378985",
    "1104235390298522963816456402510698856634",
    "5815968703736580963562790859338858979",
    "911776701760282171617604846768629435744",
    "1775737194777331674985764993211109601",
    "182534260348495718753381397354609581701",
    "93791665689154294105164219372535530500",
    "4934620328571622263466073158373293264",
    "13099194159144109028351753407828076782",
    "12648906865206745938310425055021489000",
    "608729603554387759112665830559747788319",
    "17942302198640903099897416856451704995",
    "873553439411192054217928980363503086913",
    "1256571648311385372818048563868553671913",
    "1256571648311385372818048563868553671913",
    "1256571648311385372818048563868553671913",
    "1256571648311385372818048563868553671913",
    "99865840988228285693998358138491244126",
    "99865840988228285693998358138491244126",
    "99865840988228285693998358138491244126",
    "99865840988228285693998358138491244126",
    "30545534060300319003176930052732022160",
    "302067364229160357212378258499441578857",
    "302067364229160357212378258499441578857",
    "302067364229160357212378258499441578857",
    "302067364229160357212378258499441578857",
    "284555045731488463910941043858609989409",
    "284555045731488463910941043858609989409",
    "284555045731488463910941043858609989409",
    "284555045731488463910941043858609989409",
    "146974890213594219449252497930155406314",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "174687280503843252966785365579092840489",
    "175571384913906199332529456767936114324",
    "30538736193800974802435154402903504258",
    "114738990432469285116290634385075634137",
    "15983849791221256564812498585385603744",
    "1079004244994411241413554978492739965599",
    "82091519569599138729539588385833891722",
    "1043753670404697738110369474677413471996",
    "134630569674812166108190301509193162762",
    "13319693877906475969745999911508592033",
    "1803080631077045177915667721738419071984",
    "1840089712819150440011289622865836852783",
    "156130332443363785142369276941490088427",
    "1363736816890242968813291297505934676086",
    "111563176161824120207892662240373812006",
    "69113001718728000933280786850497169271",
    "685067228267738706816520200651034208821",
    "806886716273422490012922041462466388021",
    "27923647172126753103299190047630517613",
    "115856108157746351228331922333992335396",
    "101529499612274583310256215612263406146",
    "1530284227476743347713341144208972169947",
    "47867114697845434864733977363775125036",
    "690191742356000119711662071594594489591",
    "2359618996072093344825228041002286558",
    "1809343474275607681211888501461793289939",
    "28165847745982066288778377828776142451",
    "88493681086475254713711651785051145947",
    "191955226679272286116324456769319086740",
    "82869399406577355236900753945207284521",
    "1312337259679107324810632236067710137987",
    "1281491428722655105812293039240564558174",
    "1003330821210552932912035065246129125121",
    "179654496502614639316000517910785552386",
    "81865490382594657408046274180724905068",
    "166919050687909314661017061178177074704",
    "66599713186481874098045660477071569787",
    "121719316555113793862003739913395039268",
    "1378841877187097314016728178981803040846",
    "143855658971075482716496001174473796264",
    "774656650382130508918215221937405910597",
    "87921322259985553812333634501742816676",
    "49735939736064522815836904066037473747",
    "1371444395219499039416884212293696836317",
    "137858276920179648721963909130383298377",
    "600212582708984139817168672437512081975",
    "179055790507985182579992344567348443326",
    "995177949111625568612353687436321299644",
    "5310558452957964718858737086270628046",
    "1363736816890242968813291297505934676086",
    "1791498998900760371016093261305107956284",
    "3564196776402835410996067600986058440",
    "15167305530142968353259369112121275803",
    "1363736816890242968813291297505934676086",
    "45819503778375231969038300244556098990",
    "11275800218733998915358478622531324152",
    "1875738746069546053588724721861696954",
    "1363736816890242968813291297505934676086",
    "1425886142144039943111129160147777313265",
    "20475840513559464912888937342908332014",
    "103529232425067372948580977297303381856",
    "500039049531792023414807911624995133090",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "1363736816890242968813291297505934676086",
    "999550419794171197017667664885549974755",
    "1363736816890242968813291297505934676086",
    "106681772045087936513629764546266919219",
    "638878529771811441416671099064984594214",
    "4939948683197044415599526564423792146",
    "135531080111925582411467416475571761960",
    "802603331907130014710293248879007229107",
    "1793199026846464691616255721034512928348",
    "121973516639670562835557836045994389718",
    "113814366055626271438047374284421353461",
    "109562649191060178038182565159088266799",
    "138774632689772549819578629668035245923",
    "158338167874674576194838212405987326951",
    "90175179397242369455372712796954544135",
    "550150895960312460312176584159342455723",
    "160761334367309494176444203284255754796",
    "3060735069095531695579360726350017976",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "7839859953712079114640771271960005865",
    "1137271765924114987514947403158445640283",
    "393974833682574441515290398983271504453",
    "182908810388331326478630133303460182053",
    "180126912453652104473132457509626900161",
    "1149265318701628438811160570489210589004",
    "1624379938933529147317881339677401093926",
    "1473335491240830543017777776437787647078",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
