{
  "file": "core/src/num/flt2dec/decoder.rs",
  "name": "num::flt2dec::decoder::decode::<f64>",
  "hash": "11064443321976073477244871922872432691",
  "hash_direct": "1536945378933106258111977347840338077049",
  "src": "pub fn decode<T: DecodableFloat>(v: T) -> (/*negative?*/ bool, FullDecoded) {\n    let (mant, exp, sign) = v.integer_decode();\n    let even = (mant & 1) == 0;\n    let decoded = match v.classify() {\n        FpCategory::Nan => FullDecoded::Nan,\n        FpCategory::Infinite => FullDecoded::Infinite,\n        FpCategory::Zero => FullDecoded::Zero,\n        FpCategory::Subnormal => {\n            // neighbors: (mant - 2, exp) -- (mant, exp) -- (mant + 2, exp)\n            // Float::integer_decode always preserves the exponent,\n            // so the mantissa is scaled for subnormals.\n            FullDecoded::Finite(Decoded { mant, minus: 1, plus: 1, exp, inclusive: even })\n        }\n        FpCategory::Normal => {\n            let minnorm = <T as DecodableFloat>::min_pos_norm_value().integer_decode();\n            if mant == minnorm.0 {\n                // neighbors: (maxmant, exp - 1) -- (minnormmant, exp) -- (minnormmant + 1, exp)\n                // where maxmant = minnormmant * 2 - 1\n                FullDecoded::Finite(Decoded {\n                    mant: mant << 2,\n                    minus: 1,\n                    plus: 2,\n                    exp: exp - 2,\n                    inclusive: even,\n                })\n            } else {\n                // neighbors: (mant - 1, exp) -- (mant, exp) -- (mant + 1, exp)\n                FullDecoded::Finite(Decoded {\n                    mant: mant << 1,\n                    minus: 1,\n                    plus: 1,\n                    exp: exp - 1,\n                    inclusive: even,\n                })\n            }\n        }\n    };\n    (sign < 0, decoded)\n}",
  "callees": [
    "762484418174721663513071567709372013136",
    "55295120284764659869020411630045985731",
    "1826292820406642714414563807574772186023",
    "124298188645276224878809849554780729789",
    "1708968781940648710717439176282927091489",
    "141559984418901664399565561463953748867",
    "568655774299591228617312074412775920003",
    "162537370977980029316478152370412396428",
    "85253214614932633916524759824229868238",
    "162331121968024766477542139387619839881",
    "157384825566194582281443637416363853707",
    "1074668066197654286811568059305248982842",
    "42124438380263116169932795754435635924",
    "71224684941573721096956691946966245309"
  ]
}
