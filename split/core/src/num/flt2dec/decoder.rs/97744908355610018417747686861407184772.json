{
  "file": "core/src/num/flt2dec/decoder.rs",
  "name": "num::flt2dec::decoder::decode::<f32>",
  "hash": "97744908355610018417747686861407184772",
  "hash_direct": "83532077476599703717591559847344183240",
  "src": "pub fn decode<T: DecodableFloat>(v: T) -> (/*negative?*/ bool, FullDecoded) {\n    let (mant, exp, sign) = v.integer_decode();\n    let even = (mant & 1) == 0;\n    let decoded = match v.classify() {\n        FpCategory::Nan => FullDecoded::Nan,\n        FpCategory::Infinite => FullDecoded::Infinite,\n        FpCategory::Zero => FullDecoded::Zero,\n        FpCategory::Subnormal => {\n            // neighbors: (mant - 2, exp) -- (mant, exp) -- (mant + 2, exp)\n            // Float::integer_decode always preserves the exponent,\n            // so the mantissa is scaled for subnormals.\n            FullDecoded::Finite(Decoded { mant, minus: 1, plus: 1, exp, inclusive: even })\n        }\n        FpCategory::Normal => {\n            let minnorm = <T as DecodableFloat>::min_pos_norm_value().integer_decode();\n            if mant == minnorm.0 {\n                // neighbors: (maxmant, exp - 1) -- (minnormmant, exp) -- (minnormmant + 1, exp)\n                // where maxmant = minnormmant * 2 - 1\n                FullDecoded::Finite(Decoded {\n                    mant: mant << 2,\n                    minus: 1,\n                    plus: 2,\n                    exp: exp - 2,\n                    inclusive: even,\n                })\n            } else {\n                // neighbors: (mant - 1, exp) -- (mant, exp) -- (mant + 1, exp)\n                FullDecoded::Finite(Decoded {\n                    mant: mant << 1,\n                    minus: 1,\n                    plus: 1,\n                    exp: exp - 1,\n                    inclusive: even,\n                })\n            }\n        }\n    };\n    (sign < 0, decoded)\n}",
  "callees": [
    "145493908791982296621902181110000221268",
    "66628936131314108637013286613714412779",
    "760097703502802382315361126308995570139",
    "154795349396181500551758663392331568488",
    "1796707416316777369510247310037674324829",
    "111278946214828341879274539483098245666",
    "7867064729465219112724656563380789063",
    "18427937391375551140814136183166666164",
    "162361112433299032238584891523845488474",
    "183602376003035992122778774284106907808",
    "107626592447130496229005183898772725397",
    "84585801727040041991628973311117715544",
    "1192789137628358737811148217201323287445",
    "122947779502945346302407199500263704675"
  ]
}
