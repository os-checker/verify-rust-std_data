{
  "file": "core/src/num/bignum.rs",
  "name": "num::bignum::Big32x40::div_rem",
  "hash": "142952364420949618811464516718376401559",
  "hash_direct": "1814201322693961430268142745387777261",
  "src": "pub fn div_rem(&self, d: &$name, q: &mut $name, r: &mut $name) {\n                // Stupid slow base-2 long division taken from\n                // https://en.wikipedia.org/wiki/Division_algorithm\n                // FIXME use a greater base ($ty) for the long division.\n                assert!(!d.is_zero());\n                let digitbits = <$ty>::BITS as usize;\n                for digit in &mut q.base[..] {\n                    *digit = 0;\n                }\n                for digit in &mut r.base[..] {\n                    *digit = 0;\n                }\n                r.size = d.size;\n                q.size = 1;\n                let mut q_is_zero = true;\n                let end = self.bit_length();\n                for i in (0..end).rev() {\n                    r.mul_pow2(1);\n                    r.base[0] |= self.get_bit(i) as $ty;\n                    if &*r >= d {\n                        r.sub(d);\n                        // Set bit `i` of q to 1.\n                        let digit_idx = i / digitbits;\n                        let bit_idx = i % digitbits;\n                        if q_is_zero {\n                            q.size = digit_idx + 1;\n                            q_is_zero = false;\n                        }\n                        q.base[digit_idx] |= 1 << bit_idx;\n                    }\n                }\n                debug_assert!(q.base[q.size..].iter().all(|&d| d == 0));\n                debug_assert!(r.base[r.size..].iter().all(|&d| d == 0));\n            }",
  "macro_backtrace": [
    {
      "callsite": "define_bignum!(Big32x40: type=Digit32, n=40)",
      "defsite": "macro_rules! define_bignum {\n    ($name:ident: type=$ty:ty, n=$n:expr) => {\n        /// Stack-allocated arbitrary-precision (up to certain limit) integer.\n        ///\n        /// This is backed by a fixed-size array of given type (\"digit\").\n        /// While the array is not very large (normally some hundred bytes),\n        /// copying it recklessly may result in the performance hit.\n        /// Thus this is intentionally not `Copy`.\n        ///\n        /// All operations available to bignums panic in the case of overflows.\n        /// The caller is responsible to use large enough bignum types.\n        pub struct $name {\n            /// One plus the offset to the maximum \"digit\" in use.\n            /// This does not decrease, so be aware of the computation order.\n            /// `base[size..]` should be zero.\n            size: usize,\n            /// Digits. `[a, b, c, ...]` represents `a + b*2^W + c*2^(2W) + ...`\n            /// where `W` is the number of bits in the digit type.\n            base: [$ty; $n],\n        }\n\n        impl $name {\n            /// Makes a bignum from one digit.\n            pub fn from_small(v: $ty) -> $name {\n                let mut base = [0; $n];\n                base[0] = v;\n                $name { size: 1, base }\n            }\n\n            /// Makes a bignum from `u64` value.\n            pub fn from_u64(mut v: u64) -> $name {\n                let mut base = [0; $n];\n                let mut sz = 0;\n                while v > 0 {\n                    base[sz] = v as $ty;\n                    v >>= <$ty>::BITS;\n                    sz += 1;\n                }\n                $name { size: sz, base }\n            }\n\n            /// Returns the internal digits as a slice `[a, b, c, ...]` such that the numeric\n            /// value is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\n            /// the digit type.\n            pub fn digits(&self) -> &[$ty] {\n                &self.base[..self.size]\n            }\n\n            /// Returns the `i`-th bit where bit 0 is the least significant one.\n            /// In other words, the bit with weight `2^i`.\n            pub fn get_bit(&self, i: usize) -> u8 {\n                let digitbits = <$ty>::BITS as usize;\n                let d = i / digitbits;\n                let b = i % digitbits;\n                ((self.base[d] >> b) & 1) as u8\n            }\n\n            /// Returns `true` if the bignum is zero.\n            pub fn is_zero(&self) -> bool {\n                self.digits().iter().all(|&v| v == 0)\n            }\n\n            /// Returns the number of bits necessary to represent this value. Note that zero\n            /// is considered to need 0 bits.\n            pub fn bit_length(&self) -> usize {\n                let digitbits = <$ty>::BITS as usize;\n                let digits = self.digits();\n                // Find the most significant non-zero digit.\n                let msd = digits.iter().rposition(|&x| x != 0);\n                match msd {\n                    Some(msd) => msd * digitbits + digits[msd].ilog2() as usize + 1,\n                    // There are no non-zero digits, i.e., the number is zero.\n                    _ => 0,\n                }\n            }\n\n            /// Adds `other` to itself and returns its own mutable reference.\n            pub fn add<'a>(&'a mut self, other: &$name) -> &'a mut $name {\n                use crate::{cmp, iter};\n\n                let mut sz = cmp::max(self.size, other.size);\n                let mut carry = false;\n                for (a, b) in iter::zip(&mut self.base[..sz], &other.base[..sz]) {\n                    let (v, c) = (*a).carrying_add(*b, carry);\n                    *a = v;\n                    carry = c;\n                }\n                if carry {\n                    self.base[sz] = 1;\n                    sz += 1;\n                }\n                self.size = sz;\n                self\n            }\n\n            pub fn add_small(&mut self, other: $ty) -> &mut $name {\n                let (v, mut carry) = self.base[0].carrying_add(other, false);\n                self.base[0] = v;\n                let mut i = 1;\n                while carry {\n                    let (v, c) = self.base[i].carrying_add(0, carry);\n                    self.base[i] = v;\n                    carry = c;\n                    i += 1;\n                }\n                if i > self.size {\n                    self.size = i;\n                }\n                self\n            }\n\n            /// Subtracts `other` from itself and returns its own mutable reference.\n            pub fn sub<'a>(&'a mut self, other: &$name) -> &'a mut $name {\n                use crate::{cmp, iter};\n\n                let sz = cmp::max(self.size, other.size);\n                let mut noborrow = true;\n                for (a, b) in iter::zip(&mut self.base[..sz], &other.base[..sz]) {\n                    let (v, c) = (*a).carrying_add(!*b, noborrow);\n                    *a = v;\n                    noborrow = c;\n                }\n                assert!(noborrow);\n                self.size = sz;\n                self\n            }\n\n            /// Multiplies itself by a digit-sized `other` and returns its own\n            /// mutable reference.\n            pub fn mul_small(&mut self, other: $ty) -> &mut $name {\n                let mut sz = self.size;\n                let mut carry = 0;\n                for a in &mut self.base[..sz] {\n                    let (v, c) = (*a).carrying_mul(other, carry);\n                    *a = v;\n                    carry = c;\n                }\n                if carry > 0 {\n                    self.base[sz] = carry;\n                    sz += 1;\n                }\n                self.size = sz;\n                self\n            }\n\n            /// Multiplies itself by `2^bits` and returns its own mutable reference.\n            pub fn mul_pow2(&mut self, bits: usize) -> &mut $name {\n                let digitbits = <$ty>::BITS as usize;\n                let digits = bits / digitbits;\n                let bits = bits % digitbits;\n\n                assert!(digits < $n);\n                debug_assert!(self.base[$n - digits..].iter().all(|&v| v == 0));\n                debug_assert!(bits == 0 || (self.base[$n - digits - 1] >> (digitbits - bits)) == 0);\n\n                // shift by `digits * digitbits` bits\n                for i in (0..self.size).rev() {\n                    self.base[i + digits] = self.base[i];\n                }\n                for i in 0..digits {\n                    self.base[i] = 0;\n                }\n\n                // shift by `bits` bits\n                let mut sz = self.size + digits;\n                if bits > 0 {\n                    let last = sz;\n                    let overflow = self.base[last - 1] >> (digitbits - bits);\n                    if overflow > 0 {\n                        self.base[last] = overflow;\n                        sz += 1;\n                    }\n                    for i in (digits + 1..last).rev() {\n                        self.base[i] =\n                            (self.base[i] << bits) | (self.base[i - 1] >> (digitbits - bits));\n                    }\n                    self.base[digits] <<= bits;\n                    // self.base[..digits] is zero, no need to shift\n                }\n\n                self.size = sz;\n                self\n            }\n\n            /// Multiplies itself by `5^e` and returns its own mutable reference.\n            pub fn mul_pow5(&mut self, mut e: usize) -> &mut $name {\n                use crate::num::bignum::SMALL_POW5;\n\n                // There are exactly n trailing zeros on 2^n, and the only relevant digit sizes\n                // are consecutive powers of two, so this is well suited index for the table.\n                let table_index = size_of::<$ty>().trailing_zeros() as usize;\n                let (small_power, small_e) = SMALL_POW5[table_index];\n                let small_power = small_power as $ty;\n\n                // Multiply with the largest single-digit power as long as possible ...\n                while e >= small_e {\n                    self.mul_small(small_power);\n                    e -= small_e;\n                }\n\n                // ... then finish off the remainder.\n                let mut rest_power = 1;\n                for _ in 0..e {\n                    rest_power *= 5;\n                }\n                self.mul_small(rest_power);\n\n                self\n            }\n\n            /// Multiplies itself by a number described by `other[0] + other[1] * 2^W +\n            /// other[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\n            /// and returns its own mutable reference.\n            pub fn mul_digits<'a>(&'a mut self, other: &[$ty]) -> &'a mut $name {\n                // the internal routine. works best when aa.len() <= bb.len().\n                fn mul_inner(ret: &mut [$ty; $n], aa: &[$ty], bb: &[$ty]) -> usize {\n                    use crate::num::bignum::FullOps;\n\n                    let mut retsz = 0;\n                    for (i, &a) in aa.iter().enumerate() {\n                        if a == 0 {\n                            continue;\n                        }\n                        let mut sz = bb.len();\n                        let mut carry = 0;\n                        for (j, &b) in bb.iter().enumerate() {\n                            let (c, v) = a.full_mul_add(b, ret[i + j], carry);\n                            ret[i + j] = v;\n                            carry = c;\n                        }\n                        if carry > 0 {\n                            ret[i + sz] = carry;\n                            sz += 1;\n                        }\n                        if retsz < i + sz {\n                            retsz = i + sz;\n                        }\n                    }\n                    retsz\n                }\n\n                let mut ret = [0; $n];\n                let retsz = if self.size < other.len() {\n                    mul_inner(&mut ret, &self.digits(), other)\n                } else {\n                    mul_inner(&mut ret, other, &self.digits())\n                };\n                self.base = ret;\n                self.size = retsz;\n                self\n            }\n\n            /// Divides itself by a digit-sized `other` and returns its own\n            /// mutable reference *and* the remainder.\n            pub fn div_rem_small(&mut self, other: $ty) -> (&mut $name, $ty) {\n                use crate::num::bignum::FullOps;\n\n                assert!(other > 0);\n\n                let sz = self.size;\n                let mut borrow = 0;\n                for a in self.base[..sz].iter_mut().rev() {\n                    let (q, r) = (*a).full_div_rem(other, borrow);\n                    *a = q;\n                    borrow = r;\n                }\n                (self, borrow)\n            }\n\n            /// Divide self by another bignum, overwriting `q` with the quotient and `r` with the\n            /// remainder.\n            pub fn div_rem(&self, d: &$name, q: &mut $name, r: &mut $name) {\n                // Stupid slow base-2 long division taken from\n                // https://en.wikipedia.org/wiki/Division_algorithm\n                // FIXME use a greater base ($ty) for the long division.\n                assert!(!d.is_zero());\n                let digitbits = <$ty>::BITS as usize;\n                for digit in &mut q.base[..] {\n                    *digit = 0;\n                }\n                for digit in &mut r.base[..] {\n                    *digit = 0;\n                }\n                r.size = d.size;\n                q.size = 1;\n                let mut q_is_zero = true;\n                let end = self.bit_length();\n                for i in (0..end).rev() {\n                    r.mul_pow2(1);\n                    r.base[0] |= self.get_bit(i) as $ty;\n                    if &*r >= d {\n                        r.sub(d);\n                        // Set bit `i` of q to 1.\n                        let digit_idx = i / digitbits;\n                        let bit_idx = i % digitbits;\n                        if q_is_zero {\n                            q.size = digit_idx + 1;\n                            q_is_zero = false;\n                        }\n                        q.base[digit_idx] |= 1 << bit_idx;\n                    }\n                }\n                debug_assert!(q.base[q.size..].iter().all(|&d| d == 0));\n                debug_assert!(r.base[r.size..].iter().all(|&d| d == 0));\n            }\n        }\n\n        impl crate::cmp::PartialEq for $name {\n            fn eq(&self, other: &$name) -> bool {\n                self.base[..] == other.base[..]\n            }\n        }\n\n        impl crate::cmp::Eq for $name {}\n\n        impl crate::cmp::PartialOrd for $name {\n            fn partial_cmp(&self, other: &$name) -> crate::option::Option<crate::cmp::Ordering> {\n                crate::option::Option::Some(self.cmp(other))\n            }\n        }\n\n        impl crate::cmp::Ord for $name {\n            fn cmp(&self, other: &$name) -> crate::cmp::Ordering {\n                use crate::cmp::max;\n                let sz = max(self.size, other.size);\n                let lhs = self.base[..sz].iter().cloned().rev();\n                let rhs = other.base[..sz].iter().cloned().rev();\n                lhs.cmp(rhs)\n            }\n        }\n\n        impl crate::clone::Clone for $name {\n            fn clone(&self) -> Self {\n                Self { size: self.size, base: self.base }\n            }\n        }\n\n        impl crate::clone::UseCloned for $name {}\n\n        impl crate::fmt::Debug for $name {\n            fn fmt(&self, f: &mut crate::fmt::Formatter<'_>) -> crate::fmt::Result {\n                let sz = if self.size < 1 { 1 } else { self.size };\n                let digitlen = <$ty>::BITS as usize / 4;\n\n                write!(f, \"{:#x}\", self.base[sz - 1])?;\n                for &v in self.base[..sz - 1].iter().rev() {\n                    write!(f, \"_{:01$x}\", v, digitlen)?;\n                }\n                crate::result::Result::Ok(())\n            }\n        }\n    };\n}"
    }
  ],
  "callees": [
    "80887250879108148015413891736608607220",
    "135085831257420105511932492454364625470",
    "1454070050164267465610284730730031458364",
    "154384917268578880807436018840564530418",
    "70872991649851725721720082061677501472",
    "1530327746051294791416269569847354575461",
    "125895754419976834712369234308535121418",
    "97974469250681533633362941246048906040",
    "135085831257420105511932492454364625470",
    "56316359647357795184792913202425867352",
    "135085831257420105511932492454364625470",
    "152665689769213460446211199163606995684",
    "1026760530544148215311440132616070242899",
    "10603719114885247727214992470050664594",
    "13915196733700316379441363684357729453",
    "366752582573636662618041715036916609810",
    "7482589000750884340327816351015335759",
    "1599087357710868766316850218022372470465",
    "77015241674195912492077004693443111248",
    "131804240691040385559237509421631119204",
    "114515349818180266375604241642404432663",
    "174723727336540696129780246797032249003",
    "82654341932789732147751919849221457004",
    "155146884437592745449279657258619050520",
    "170486207337946700033815843014261966755",
    "111948483962809339883106353795926089322",
    "1449318134079626371011274072562212788848",
    "122106569399457767686979530207080663367",
    "1216621066653889995610546046327140038790",
    "29334395663381870005864057719351039300",
    "59819684876446801767075723074766688892",
    "9122690305665940051388962439719640221",
    "686432449587531607917658283569998762685",
    "2290980464301696929957012594850492860",
    "446641282099743021915035641877345940088",
    "135085831257420105511932492454364625470",
    "81986060615313457313520860313503674379",
    "135085831257420105511932492454364625470",
    "529131735890807885813791093312023364462",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1093476100484343819814987720024391953916",
    "5727355925197697878453733593054842709",
    "885597861861001000511516117324052716088",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1501989787004212717414978504657860592208",
    "1402338422273675223217390840337962552209",
    "262655926825162372615996610610206939850",
    "135085831257420105511932492454364625470",
    "158665653291221107015613368590037312897",
    "96074532700052856493158655578097167059",
    "135085831257420105511932492454364625470",
    "190359819262014031015892687675081007498",
    "1501621636175779253314402450532242777846",
    "150203716713484807054381945197290135428",
    "36380162371624727521206603407905192105",
    "135085831257420105511932492454364625470",
    "158834747702222751563622469325806071500",
    "1257449939458569527717077158366407697777",
    "170014296805062216835073969549821561637",
    "55398000924899280461156178934673388121",
    "1286040984527793700010408138982195338134",
    "55374350330118105413720390969416525719",
    "135085831257420105511932492454364625470",
    "243839084150888952911908111539685994713",
    "5816187767072888251886714194878390885",
    "70678707815974353129270849643470718392",
    "7159367661129856143545653945965765610",
    "9007521356456792533806907033713747580",
    "1130219753616140084010892038682713793809",
    "172140117843934269071100695499597161982",
    "4960461046229976118108876182482238045",
    "398351056859449483913563186545567727466",
    "603228037714317177115336914651536545892",
    "880399244184648853615132446538621153208",
    "91308972039969540988091890815065278470",
    "174967394945862090364279848592208296953",
    "45271875752689560147947427477084707436",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1122845743808954568315839891299563834211",
    "258820287469578611817448591488600041899",
    "6267750356639735281119899207213949232",
    "173333575624628564314365600339262332595",
    "4954363668049433906791255335906210806",
    "462518227198375540612885370480640396222",
    "263160489966033609311803218267093119168",
    "179430670899218703853981330836130826858",
    "135085831257420105511932492454364625470",
    "985633247147444923214630796199850707375",
    "6962362284417680556415378392413733050",
    "1415106497522421883676194742336801697",
    "250800211300164603812517143290931935490",
    "135085831257420105511932492454364625470",
    "588974892899239543415856878986124229421",
    "1838426776534850726011140257129710975471",
    "83296569981337185257777514719755004891",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "1529875730411415803517587657844377161231",
    "1547564489779508118311471276601353146868",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "106218985081224309251788900714859220455",
    "160750840222714036114624455924249858809",
    "439665812756319186615555147686743729321",
    "1289352213330166136813520327819453219155",
    "31131441629303120586534570246951384916",
    "573750095347314675218420517967106720291",
    "19127809293168330713198522102322069120",
    "146302972784592707345017558525924565358",
    "110489938845591258695432360905480776739",
    "838579135528120850312965158638687856356",
    "8388353940802646364767634772864445262",
    "73108691610225733116596031659328766854",
    "822269050661504501817822006377694013491",
    "247634727651802426813530679984485687857",
    "72993026513347610222044009578620103685",
    "83277592815980822158438974019698900871",
    "53212576593787280828984978559612536749",
    "178073803934344908772227834068453959264",
    "562858937010496420512997950420518372886",
    "681465720115474298817558361040200202189",
    "466965738328432115613981715983556943623",
    "111893148674317480745590608994062193214",
    "48078688464816231767679483814304666491",
    "74054431999572018108566924539479527152",
    "1387392059777837767217691729391144140767",
    "130490453494838730212835712658479500348",
    "153591391028987165713744226795342938707",
    "146427388597813305115614774206760905815",
    "1266136833068978554216667149679620774580",
    "58079812985260614779074871743441829358",
    "66864498598691340555271615596370346896",
    "170263472120930945276863179915420040056",
    "174583527470119019351759393122367854049",
    "61537032802646890302053131132263133848",
    "15281129090904038428498981268854200284",
    "11156965278025928998185987370340964956",
    "1670765222083267730010075026643490075615",
    "110422491957938577782318652431088408899",
    "138705491366165238634028278563846115067",
    "65069040306676020898444859464496431715",
    "1823645488622937895012673111274870809755",
    "1766419557751222345812921308493737272619",
    "24502394795559680767584204508227377419",
    "91828177523488678516727916315478285867",
    "6781225442344569542394668875873020156",
    "56992650673164436291130925969138191855",
    "457879323132651244210037964476759098996",
    "387263740474341501715316744261930101340",
    "123696889953178610121137062797100825934",
    "628326724818000602414971470788631811913",
    "402612920088428423016977109980304822932",
    "53483265836252150227060653137900107146",
    "6471011342489470065671250638044264707",
    "158138538197473672926228488215579187501",
    "165583547543647191393840577345573825125",
    "90771261734924938883465308637020449641",
    "1820316365630756497411082775870133134724",
    "713596427418837315916034622167448792635",
    "6163687794705778621762988110224741273",
    "12790910907938237822370326571745403935",
    "61539750939002654969594741517578054227",
    "121917327455978701744454773261590352887",
    "102272585106179812897836035233672297670",
    "69064157634746261873063654620308320827",
    "135928888564588691565994405694153794425",
    "628711064140184156111204300519501382323",
    "268609994953603453817058973523592484220",
    "995721313352431236211876080613584415456",
    "59125680210606302577934297432234591194",
    "156115378340755200816388888990442720714",
    "1484494050490426185011876262077857113448",
    "114145505477335079129878761091207882084",
    "507116607738930391111587036035165972673",
    "540564128152414607516220637571452425273",
    "1605633131122579720611961448336401474874",
    "899089149104620122910782754756910095497",
    "564177479688813429716564910718645657356",
    "132979495079251483717565906717834352219",
    "126601631307930206616972114137702790273",
    "1651044975265797863616721065106597564241",
    "38217196742947992835679479997123307043",
    "1342521228831833354715461413551686205925",
    "97895937838022620309026790508679003629",
    "749080744560555709814769272248719962971",
    "146686842676245753349689708687358184876",
    "99603598099498707762068107842012164044",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "618708256121172115917225444658205159680",
    "59938049419510669711062024995335921297",
    "19684188516265566771651004715206449247",
    "170651548469663780724298579953072999915",
    "1458073842082296808514850432200098465238",
    "64482042172957680597458376848546031781",
    "88981638874699733429423167641514216425",
    "5951847532016482261350307995733767351",
    "325062202126984603410165208796385002580",
    "246753510483060322916261866593464369166",
    "50895421408680332561373967228856809720",
    "1306336661249133475411987841834629563858",
    "158604924746549110348582116596392478405",
    "93779494020190075273166049545136126639",
    "135085831257420105511932492454364625470",
    "50186211171463953727684864518369695334",
    "64998410348949013165534729523823375850",
    "101445464642493846677061784532715524123",
    "113976926829195441887553509461786022633",
    "127479067396745407510631415782656719",
    "711331408230061058510143181124449542544",
    "8519184813837493931929929104770129184",
    "164296814541557895995765105686728665676",
    "34410515695185066949979771014252260096",
    "1676806814539779643518083197252466559589",
    "73532313635074392944974785695838172453",
    "1530195770348625061718410767804951205478",
    "261014684496488860815274184919639441933",
    "1316789790294380822713332472693854414052",
    "1282254678211740802116912487747935677297",
    "1838931587116817017713713097074245899829",
    "303127917241666984113380325134893912788",
    "143572956432032064744447501745832117320",
    "979090888644938360611991061608854301815",
    "137368381448604167703416046205455599816",
    "44865517427538800504241740979033245306",
    "80466408942777512049363027701449327301",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "157526224548632931644224402393760490185",
    "174107661030119018973646362480685393050",
    "366503061556370158810229951695642705038",
    "136731688598983939127472435238823692605",
    "172853077466930782957249088533345327364",
    "79928093417813389671008001961354549468",
    "25245669868667836524270736366418365813",
    "98825003596630730661950896480270233459",
    "102517973830009543381480318350821537303",
    "24480911602824689964334182183791757301",
    "114373907360500914182459005567327642045",
    "54715342662778911473244799235189690191",
    "816589233988491856113892611160007340113",
    "1706241664392483122616630414095325426767",
    "1336395986670888604714795400021301436124",
    "180942759258101506955182199119065053589",
    "1779425227385014865413763254225852997980",
    "949119772679999304913254775119628944156",
    "143264002039824653101582016475268727293",
    "821053300062536159115601448644934990736",
    "68648213460155011086108492708709849999",
    "2922976863402117239063671147549004081",
    "1424839172046310268011085042199237354602",
    "601536179585149681911167127175566351660",
    "1292179497977935596813342509875710327204",
    "90390894752775125493942880926964066259",
    "79338743477724285898920606540258882171",
    "761357746302744357015843439486948610375",
    "28815764710943890042111735716087760171",
    "135562536653374708711117709628363219721",
    "180490860656218517844535655690783186403",
    "61762885803371722481695307475049719440",
    "171487306867941110771102297001636865950",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1214574077763705187516383491048990527345",
    "58556264066334599336424357434445237777",
    "960898925801407232312924333468692865726",
    "429511501966379024610548772418614005336",
    "1379440301701713821317247647227648939965",
    "53013231170464020982930967155682389250",
    "157452307909752828034879955455996353017",
    "130453669725098768871634540984100509610",
    "1264448150763745905618356639115650703943",
    "141110666132885552924669202659075536526",
    "56252927251435970978636410777602608721",
    "70189786848693324615028118901413603891",
    "1758079100556217157185991271441314538",
    "124136043214748897212366978666582003224",
    "46403460040447917584474138551510745026",
    "1299320173005259176217029432174392215732",
    "153492746833767641913665382585991399102",
    "187482952606822645712460029589708661523",
    "1523707018797761236613836373921741997156",
    "126818845945534382313624863669169238336",
    "144119928408074986676617008060073758280",
    "57678861643322857944194165102718529863",
    "594398967705273052918318531949127567864",
    "172590953658237452717460291587113135731",
    "974238557182874992112444884018478807048",
    "949723518165874883315854372086659764362",
    "94456838198084845861692920132229050794",
    "91930047381741681611917147084398403736",
    "89121182156207114064839032294436231789",
    "1585972590187889070117028601346813813214",
    "1606202552653889608810199512646967422438",
    "18036140156580546806629269073307822465",
    "71448428762585758257932024797442946749",
    "100566549119408744214400768677206684395",
    "167934086960411180903985257275635548275",
    "108552149900633290919250115311635650035",
    "211665252660455842616535517088582326351",
    "156761099224162496521554063647246510953",
    "93629764868847211533386885481792043",
    "87962768316051763542817110666100781851",
    "979905345926612536015630663886892108940",
    "214516282329371282514551354368920362045",
    "73563695999853273521444140283253875813",
    "82049383623308333818081850169682522905",
    "177028096127130855141974597834504714571",
    "790336683030703749616005572184538464784",
    "177514769518540065432700141126543643261",
    "12583040371049054649997982659979050806",
    "18924474281332607947427114014473837479",
    "1468091910298810725816359353565305732045",
    "364484297899500769415938702538049619119",
    "64933755017346766828885993644262595169",
    "99953159891513391294033566922780542055",
    "2314453704286586957141741655351484658",
    "14202615834488052409859027248238516218",
    "11445433211995086415249652590866561494",
    "48625294403159850114584937371918901379",
    "1590865042255905518111988361959130107113",
    "57035761928011945712201355386485524065",
    "126426817255171623761230239468041855684",
    "1584226519763055173017297680793969390949",
    "30908084982265817655199528001939896756",
    "696031761158559988717156830525069362848",
    "1448899345559094949112654453072162878043",
    "1641862387002446068116192096070757843303",
    "1292203662441252026118372580930599634835",
    "137858457737126721339050743717226009000",
    "1094251261101801847513288225556855042079",
    "1326947131710622430311013605150371745982",
    "136250958068228316938199731614362970959",
    "677493057230061463812906195098240769208",
    "146722828362882336003877423755490060119",
    "133190003003759925793667076679125824144",
    "119410572960049574203441365705573330364",
    "20946831672102756615324517140542342935",
    "139997011880036619526085207717010799176",
    "805684210294475109813538994712986997895",
    "1139694531532457387315266791604027348206",
    "64494649325624075067926298093129009693",
    "293645540748671545017999185713660079650",
    "618087864432337385915594869955572671241",
    "1705039637729676748415488890044718082160",
    "5607578020819944315970194945020012681",
    "510531638386111881910053340190058988939",
    "40886540288475765763037402450466686093",
    "118320558337677119769123625739060418786",
    "129467395471765524418520994966618689871",
    "309156818045176825517218295948054089004",
    "110164275832919402274699015720275906831",
    "1137478830075394179710321564206986343125",
    "167727689149889732012371385327419155313",
    "68961250522390204303039500197253848819",
    "671334365265236941113753063318744059957",
    "1762126293480126793916319187708925702531",
    "110982975251410379469752288802819811268",
    "700543147431208495615048645222424964691",
    "11172017460127122262247192747398001865",
    "999894065589869448612231539797228218231",
    "86952898111294821451658113502791201350",
    "1727553854790856278011052472099747994665",
    "115305965424151250157684815253829770404",
    "1255593489441337196411111792584951488284",
    "772090384102639362198216457510496193",
    "5918423063880594543047647226827857654",
    "1660358534197915130918065586581585625625",
    "158669007246384560107761733536387868399",
    "1008627084322143835013959721941971697897",
    "3959983230967520511574185766120518907",
    "131951491516562017324429114881873478958",
    "147353619306145463894433932701739289836",
    "73934633302749851638600744339908206828",
    "141296000771128581945497538145890845343",
    "124743396873944380901919017967253874067",
    "150243093200272651816225092713556841110",
    "777454966023882485213336970821447203461",
    "798871996884082421610081782312663349463",
    "13863098581405631524288807864350146405",
    "126305104619962271371784891153497802945",
    "1158861151257444367413252165885433366400",
    "14068452129205684021721482473250612230",
    "10044693719423595159435737627777218116",
    "613513255856977139911489735802844904928",
    "322749754952635112812467217236515710998",
    "97310642151613347726349452651452877766",
    "126337418415726794399520714079003318010",
    "173488751360057668935869030627777552292",
    "124798334296612191009914873740072641817",
    "4874888224965231630903852514116604247",
    "1113702662891479336314686028484409217895",
    "1014498806628630430116225554036073706840",
    "105155837525522083449912883665304934776",
    "1404731032427000255717859115232501530921",
    "1513333453617937806712878309090792611957",
    "63824875704704228052884797545106788461",
    "37611015082660603716849267229566955360",
    "1006965550971568470513339634703718564510",
    "150078872849429602735832397785542156102",
    "68133959610867490038770326815218367687",
    "33331637534491476913440505814675408305",
    "1512091111473861295010674915588079355189",
    "1821553421238437798512207917672639540169",
    "14031239273799417297806782851617180873",
    "125700026936981565915595512472711521472",
    "129554570757985733413117109142277739837",
    "96525101279524185041479064529078161766",
    "103695068283875105018623992302427237269",
    "53569486981529370344752868158650318763",
    "33020214437710035965402411197660679021",
    "3297309995462571210361513208440932689",
    "99505528804453027457861451108826778638",
    "404530585981013310415620289049541730647",
    "719049603193869984913180724586595888983",
    "556160511185732132213865142485227929702",
    "54338610666023313538785988934735143030",
    "813368619794702869414005756234477751011",
    "1359933470730887149416155830775469624234",
    "133941792012963290912121566695757883799",
    "179782706227535055097755371789106436416",
    "135085831257420105511932492454364625470",
    "28753697929221812287482212449517425755",
    "1676603290518039711418379565247484306913",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "1491305867414706213015161036740010050407",
    "180418702711060811601049271977599275130",
    "169890989984787760587841791387523712921",
    "11119406790923360834756731176691512413",
    "448997466490340479215512073326950007740",
    "1822062948955263170715777757981092221022",
    "183798407417951036237884871475025983723",
    "182905984608557862932815513141399110877",
    "87610347679382204374849514063484826969",
    "135085831257420105511932492454364625470",
    "794694008638894565610503689879218203131",
    "1240292617551639614511624216833231095374",
    "141075866154720550232226687388065455908",
    "171204665790647804337468407324534125555",
    "135085831257420105511932492454364625470",
    "102158074081008205498407343669368368587",
    "172710565586391650359697506248348391188",
    "1533244698667794314112030080286685869124",
    "135085831257420105511932492454364625470",
    "180175623099158380248987811409809941831",
    "123489981763517494699775008546456061720",
    "115883727412415935571812162924229901730",
    "138902882366249903201239198490399945031",
    "135085831257420105511932492454364625470",
    "1817032082084973303216305273335369327562",
    "135085831257420105511932492454364625470",
    "4411635645139544073134441760900293246",
    "135085831257420105511932492454364625470",
    "51807250877859821869923753435696206660",
    "69342406655165066384307565967815052789",
    "7673976832169634765500274640192278862",
    "343942489170785946313945651402980657563",
    "87906432113648210882449560281230451738",
    "1574076206413902276617103312132801420117",
    "135085831257420105511932492454364625470",
    "85588869322922048345445133830972928954",
    "46392132837367044793605408606640691738",
    "1109179535867802539212624129409937984356",
    "1100378328373936882818045327951760769678",
    "106642479921810326734420864206947026039",
    "1366933002792501403514034768478701870222",
    "57544741910791006372460750620625338790",
    "93823778961912885171861814854836367565",
    "321688735089620358916457935724896313889",
    "112230851453125851423205293281516054891",
    "83221429070676654997276869294717336401",
    "15659711577820632603287999978545437062",
    "19470982920213640634975089122141652435",
    "479998404619941926510892638354253877426",
    "471019930735214455010790195510470539657",
    "943048867924649835013779616421314460758",
    "208257619197928444113832208997346155109",
    "113730046543618521871398730518877807929",
    "133990963359221941784725201392347774645",
    "757827061700391223111491523488572616915",
    "2637339624263907545631923538614826499",
    "456586698823309441114989337439595634714",
    "1792405046306644556912608259548643013292",
    "43804121266590111503292180144973032661",
    "17410516131621613293191657474630514694",
    "105792806908007282896552408473238244685",
    "90550453206581869791970009265946291996",
    "553913370659958613617397748244320672206",
    "1681045938191596506412316969696714615302",
    "178193152802508385064568305969678402720",
    "70293413154999304838446760397884392704",
    "181826805738271706783313086342346691044",
    "68783216042388186728844704327938900696",
    "1746874140526031250810154978985975748619",
    "136726814943322160857908111799408521674",
    "42824507231917785589406404051488242365",
    "132977040173719154057256981446941835376",
    "164643665969303161784589187279160706768",
    "164643665969303161784589187279160706768",
    "164643665969303161784589187279160706768",
    "164643665969303161784589187279160706768",
    "75024443840977746512279587011776429810",
    "75024443840977746512279587011776429810",
    "75024443840977746512279587011776429810",
    "75024443840977746512279587011776429810",
    "67422619050628989531877668274484584789",
    "124946062864253098859824032834605834653",
    "124946062864253098859824032834605834653",
    "124946062864253098859824032834605834653",
    "124946062864253098859824032834605834653",
    "1382484063922912829917745756449869514900",
    "1382484063922912829917745756449869514900",
    "1382484063922912829917745756449869514900",
    "1382484063922912829917745756449869514900",
    "95696153499528458313901596214115751145",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "136315757471550957542716891555713129836",
    "1637911438640321783717995568863978104742",
    "6070603776637052609765524141950388493",
    "67912827598195659661304478068192403362",
    "1094842765693892546910520378412041552806",
    "1246549294390316174211520358684701550573",
    "1528987468365251607818125127476060370393",
    "21639280041443497202806099100564393988",
    "1628474576436772980215031976562618365786",
    "91792862523901063945101512736130485517",
    "827100470220406160910650394273344518714",
    "144160729758818962774870203617558065261",
    "100623443557313280538751593615269684508",
    "47822370175813177448723454097252028703",
    "135085831257420105511932492454364625470",
    "38246831695363040158059248428708217203",
    "136304994639276996811277527976407166479",
    "118573796773268922105256773661754746281",
    "1679207499139484451917512311688469788867",
    "40265862868123904401909777138035216629",
    "411805792864265543417403918021470104007",
    "33537404157592852811592413282780955689",
    "5646439217058838061875000808900958241",
    "358571424882708899413310170471965259775",
    "94991374756337164216687314359149512939",
    "183942889134990626643214750014121392010",
    "945408849728034117516202938996026270345",
    "75004213001905193955715579484657661560",
    "98114927019826253102817332717172441868",
    "979605271246805204117717884328990531057",
    "180168108041645642368736335759857072520",
    "119668517586734080878390935967434516036",
    "978973849962745378212641441183594156354",
    "579087111844842619511528504666396934533",
    "1153959874226978119913857890632071810994",
    "1290872813666562319511413746722512367019",
    "39117030210078960345467688189971296476",
    "42675708704912587986905307549981316387",
    "133774208422544204712385208594916672852",
    "1076664590807474698013860243586089992698",
    "53744828640510478502430396508799097231",
    "58675320035953499899532680283682396280",
    "596564398432010081814808260562835248359",
    "296491127499601218917065895757213605938",
    "90933695478604663001573090783200358337",
    "20689955926650303163515534893265746746",
    "135085831257420105511932492454364625470",
    "1743153353454633366017320764647572977881",
    "683289855890887679216359651262730033383",
    "115468292258839821343722232521061340376",
    "135085831257420105511932492454364625470",
    "137147026445318887422604340055542353314",
    "1443519380077829511910627264749460202598",
    "664501847647250298311149032319303144827",
    "135085831257420105511932492454364625470",
    "46590510295835804303049911055833441641",
    "106663972824342135956571018803816649195",
    "30819441612753718577366232250007643490",
    "852298530973108873212161851321200820382",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "135085831257420105511932492454364625470",
    "317131734443709433116505601136930857147",
    "135085831257420105511932492454364625470",
    "1030984695525452447715424858409070299032",
    "19621519501541880893262169693639313799",
    "535312728641325414318433154446926392210",
    "79957517381934331374505463763239679871",
    "109849097723912452994088294171860151303",
    "486164287917427656918200146926298480057",
    "947833919457653120214810965083035955432",
    "87977286206191110206643684053945734595",
    "154911443990380340341563367924870465980",
    "611027897215340775410757839603478111815",
    "36990817497430174858508344623774643994",
    "819756211280848030917202637728825520633",
    "1283868160390231989212228490164833471738",
    "112954101278082009685742498530365011169",
    "126048648882406442003602795325732745334",
    "60020754642282354823285669083003912494",
    "1006928117247909106515604664996585110540",
    "92658835324565758495130762072978604201",
    "982812517398244847818134688650878457542",
    "147417290197272725234607004164769047407",
    "56448737519681294968960799914289695112",
    "51920321377442756437204742573348251158",
    "1320801548407176755117757300189063729311",
    "151177604553563121726407199103432119959",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
