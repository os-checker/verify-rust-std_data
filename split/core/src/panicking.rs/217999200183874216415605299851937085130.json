{
  "file": "core/src/panicking.rs",
  "name": "panicking::panic_const::panic_const_async_fn_resumed_drop",
  "hash": "217999200183874216415605299851937085130",
  "hash_direct": "6240253423410532179947205825021378031",
  "src": "pub const fn $lang() -> ! {\n                // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially\n                // reduce size overhead. The format_args! macro uses str's Display trait to\n                // write expr, which calls Formatter::pad, which must accommodate string\n                // truncation and padding (even though none is used here). Using\n                // Arguments::new_const may allow the compiler to omit Formatter::pad from the\n                // output binary, saving up to a few kilobytes.\n                panic_fmt(fmt::Arguments::new_const(&[$message]));\n            }",
  "macro_backtrace": [
    {
      "callsite": "panic_const! {\n        panic_const_coroutine_resumed_drop = \"coroutine resumed after async drop\",\n        panic_const_async_fn_resumed_drop = \"`async fn` resumed after async drop\",\n        panic_const_async_gen_fn_resumed_drop = \"`async gen fn` resumed after async drop\",\n        panic_const_gen_fn_none_drop = \"`gen fn` resumed after async drop\",\n    }",
      "defsite": "macro_rules! panic_const {\n    ($($lang:ident = $message:expr,)+) => {\n        $(\n            /// This is a panic called with a message that's a result of a MIR-produced Assert.\n            //\n            // never inline unless panic_immediate_abort to avoid code\n            // bloat at the call sites as much as possible\n            #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n            #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n            #[track_caller]\n            #[rustc_const_stable_indirect] // must follow stable const rules since it is exposed to stable\n            #[lang = stringify!($lang)]\n            pub const fn $lang() -> ! {\n                // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially\n                // reduce size overhead. The format_args! macro uses str's Display trait to\n                // write expr, which calls Formatter::pad, which must accommodate string\n                // truncation and padding (even though none is used here). Using\n                // Arguments::new_const may allow the compiler to omit Formatter::pad from the\n                // output binary, saving up to a few kilobytes.\n                panic_fmt(fmt::Arguments::new_const(&[$message]));\n            }\n        )+\n    }\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810"
  ]
}
