{
  "file": "core/src/str/traits.rs",
  "name": "str::traits::<impl slice::index::SliceIndex<str> for range::Range<usize>>::get_unchecked",
  "hash": "139148435525961323908375834886836295500",
  "hash_direct": "843495343916621402014271411332720149951",
  "src": "unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {\n        let slice = slice as *const [u8];\n\n        assert_unsafe_precondition!(\n            // We'd like to check that the bounds are on char boundaries,\n            // but there's not really a way to do so without reading\n            // behind the pointer, which has aliasing implications.\n            // It's also not possible to move this check up to\n            // `str::get_unchecked` without adding a special function\n            // to `SliceIndex` just for this.\n            check_library_ub,\n            \"str::get_unchecked requires that the range is within the string slice\",\n            (\n                start: usize = self.start,\n                end: usize = self.end,\n                len: usize = slice.len()\n            ) => end >= start && end <= len,\n        );\n\n        // SAFETY: the caller guarantees that `self` is in bounds of `slice`\n        // which satisfies all the conditions for `add`.\n        unsafe {\n            let new_len = unchecked_sub(self.end, self.start);\n            ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), new_len) as *const str\n        }\n    }",
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "16824420916691935049705640393259467449",
    "1712898201300478840215074793236064467963",
    "841346702487865802717731804342903065853",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "152018209062913109616942758022114057971",
    "138498210655847367337117318085891081738",
    "602553655434272852810568520159081802816",
    "102887121523905452179262747329207775596",
    "316650073974070898314677646691025099244",
    "180824515799235861855048294605620195261",
    "25269069644916694782526525713115896132",
    "7839859953712079114640771271960005865",
    "127199659559777400810316453468540309982",
    "399232661239117480517401994520839366833"
  ]
}
