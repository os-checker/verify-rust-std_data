{
  "file": "core/src/str/traits.rs",
  "name": "str::traits::<impl slice::index::SliceIndex<str> for range::Range<usize>>::get_unchecked",
  "hash": "1779227607596489894112534411564555627894",
  "hash_direct": "843495343916621402014271411332720149951",
  "src": "unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {\n        let slice = slice as *const [u8];\n\n        assert_unsafe_precondition!(\n            // We'd like to check that the bounds are on char boundaries,\n            // but there's not really a way to do so without reading\n            // behind the pointer, which has aliasing implications.\n            // It's also not possible to move this check up to\n            // `str::get_unchecked` without adding a special function\n            // to `SliceIndex` just for this.\n            check_library_ub,\n            \"str::get_unchecked requires that the range is within the string slice\",\n            (\n                start: usize = self.start,\n                end: usize = self.end,\n                len: usize = slice.len()\n            ) => end >= start && end <= len,\n        );\n\n        // SAFETY: the caller guarantees that `self` is in bounds of `slice`\n        // which satisfies all the conditions for `add`.\n        unsafe {\n            let new_len = unchecked_sub(self.end, self.start);\n            ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), new_len) as *const str\n        }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "23815256893174302637797703719499456373",
    "121097281700569241807917519510076722724",
    "97892229237199250718782565098232937194",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "8161291837423649642305263678029669375",
    "53013231170464020982930967155682389250",
    "157452307909752828034879955455996353017",
    "698375928041891685218332199603984089953",
    "94456838198084845861692920132229050794",
    "100566549119408744214400768677206684395",
    "696031761158559988717156830525069362848",
    "1703660345011483495218041991169194027213",
    "1129281868751164994310653221266111116623",
    "739520556846959085018120036998133255835"
  ]
}
