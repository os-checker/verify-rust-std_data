{
  "file": "core/src/str/traits.rs",
  "name": "core::str::traits::<impl core::slice::SliceIndex<str> for core::ops::Range<usize>>::get_unchecked",
  "hash": "638553453736908932114737833443950029057",
  "hash_direct": "75434390611911470383342630156582181848",
  "src": "unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {\n        let slice = slice as *const [u8];\n\n        assert_unsafe_precondition!(\n            // We'd like to check that the bounds are on char boundaries,\n            // but there's not really a way to do so without reading\n            // behind the pointer, which has aliasing implications.\n            // It's also not possible to move this check up to\n            // `str::get_unchecked` without adding a special function\n            // to `SliceIndex` just for this.\n            check_library_ub,\n            \"str::get_unchecked requires that the range is within the string slice\",\n            (\n                start: usize = self.start,\n                end: usize = self.end,\n                len: usize = slice.len()\n            ) => end >= start && end <= len,\n        );\n\n        // SAFETY: the caller guarantees that `self` is in bounds of `slice`\n        // which satisfies all the conditions for `add`.\n        unsafe {\n            let new_len = unchecked_sub(self.end, self.start);\n            ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), new_len) as *const str\n        }\n    }",
  "callees": [
    "12281449246394340237926324936375242532",
    "99835071136844477394667148890151411684",
    "73694171442177138896992135977130617471",
    "181267529910573756716102767087485333561",
    "1362727304153836450215186853291845605124",
    "1824545319189397521315695847785602896178",
    "1055043272310861592713228670863657256034",
    "17976542625295060605041426324269334020",
    "170846580729842163074659927269266210653",
    "8010637041282557608011263416999007001",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "63085389524472853348886374617170044294",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "927601772743169303216908637897944691801",
    "679068406596947487114951777856761158861",
    "1227509350711597297112970073629001043324",
    "1574198065840570931715496922327374750806",
    "121866230926415018332270093276707107239",
    "752644167293716817117721550981127924220",
    "1427536526616347568511859223439081842037",
    "356896403557560017460350669106551612",
    "993678613939722418714263592608125620377",
    "112989397975222255532054380452996322405"
  ]
}
