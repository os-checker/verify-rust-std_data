{
  "file": "core/src/str/pattern.rs",
  "name": "str::pattern::TwoWaySearcher::maximal_suffix",
  "hash": "1375742427797428725517187467221692967505",
  "hash_direct": "92008394063408625382341163999528883048",
  "src": "fn maximal_suffix(arr: &[u8], order_greater: bool) -> (usize, usize) {\n        let mut left = 0; // Corresponds to i in the paper\n        let mut right = 1; // Corresponds to j in the paper\n        let mut offset = 0; // Corresponds to k in the paper, but starting at 0\n        // to match 0-based indexing.\n        let mut period = 1; // Corresponds to p in the paper\n\n        while let Some(&a) = arr.get(right + offset) {\n            // `left` will be inbounds when `right` is.\n            let b = arr[left + offset];\n            if (a < b && !order_greater) || (a > b && order_greater) {\n                // Suffix is smaller, period is entire prefix so far.\n                right += offset + 1;\n                offset = 0;\n                period = right - left;\n            } else if a == b {\n                // Advance through repetition of the current period.\n                if offset + 1 == period {\n                    right += offset + 1;\n                    offset = 0;\n                } else {\n                    offset += 1;\n                }\n            } else {\n                // Suffix is larger, start over from current location.\n                left = right;\n                right += 1;\n                offset = 0;\n                period = 1;\n            }\n        }\n        (left, period)\n    }",
  "callees": [
    "760499024176919446914647389213438349877",
    "18415684320297405220951080584907961160"
  ]
}
