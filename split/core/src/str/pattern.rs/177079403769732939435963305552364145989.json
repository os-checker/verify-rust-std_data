{
  "file": "core/src/str/pattern.rs",
  "name": "<&[char] as str::pattern::Pattern>::into_searcher",
  "hash": "177079403769732939435963305552364145989",
  "hash_direct": "1822153411871711410811060702271817185225",
  "src": "fn into_searcher<$a>(self, haystack: &$a str) -> $t {\n            ($smap)(($pmap)(self).into_searcher(haystack))\n        }",
  "macro_backtrace": [
    {
      "callsite": "pattern_methods!('a, CharSliceSearcher<'a, 'b>, MultiCharEqPattern, CharSliceSearcher)",
      "defsite": "macro_rules! pattern_methods {\n    ($a:lifetime, $t:ty, $pmap:expr, $smap:expr) => {\n        type Searcher<$a> = $t;\n\n        #[inline]\n        fn into_searcher<$a>(self, haystack: &$a str) -> $t {\n            ($smap)(($pmap)(self).into_searcher(haystack))\n        }\n\n        #[inline]\n        fn is_contained_in<$a>(self, haystack: &$a str) -> bool {\n            ($pmap)(self).is_contained_in(haystack)\n        }\n\n        #[inline]\n        fn is_prefix_of<$a>(self, haystack: &$a str) -> bool {\n            ($pmap)(self).is_prefix_of(haystack)\n        }\n\n        #[inline]\n        fn strip_prefix_of<$a>(self, haystack: &$a str) -> Option<&$a str> {\n            ($pmap)(self).strip_prefix_of(haystack)\n        }\n\n        #[inline]\n        fn is_suffix_of<$a>(self, haystack: &$a str) -> bool\n        where\n            $t: ReverseSearcher<$a>,\n        {\n            ($pmap)(self).is_suffix_of(haystack)\n        }\n\n        #[inline]\n        fn strip_suffix_of<$a>(self, haystack: &$a str) -> Option<&$a str>\n        where\n            $t: ReverseSearcher<$a>,\n        {\n            ($pmap)(self).strip_suffix_of(haystack)\n        }\n    };\n}"
    }
  ],
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "84909938954906103112758184730426842057",
    "16824420916691935049705640393259467449",
    "1712898201300478840215074793236064467963",
    "841346702487865802717731804342903065853",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "781603672758780177711142029625885084089",
    "843102896095261732816452208300794916411",
    "169017152061146820209827866672499117723",
    "1365351597739011160412231277592213691479",
    "151694591507088409946921766244030956793",
    "199204638009217392510037902431469110881",
    "145447226859878511083700582225257315850",
    "1028023859496283824714006082102994000183",
    "1713539753654745329215868145254478021527",
    "27923647172126753103299190047630517613",
    "45819503778375231969038300244556098990",
    "11275800218733998915358478622531324152",
    "1875738746069546053588724721861696954",
    "68114001366497879786871564675092073801",
    "393974833682574441515290398983271504453",
    "399232661239117480517401994520839366833"
  ]
}
