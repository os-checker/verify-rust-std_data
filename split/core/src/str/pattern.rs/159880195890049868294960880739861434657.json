{
  "file": "core/src/str/pattern.rs",
  "name": "str::pattern::TwoWaySearcher::next::<str::pattern::RejectAndMatch>",
  "hash": "159880195890049868294960880739861434657",
  "hash_direct": "129412231866225671688657888490136766077",
  "src": "fn next<S>(&mut self, haystack: &[u8], needle: &[u8], long_period: bool) -> S::Output\n    where\n        S: TwoWayStrategy,\n    {\n        // `next()` uses `self.position` as its cursor\n        let old_pos = self.position;\n        let needle_last = needle.len() - 1;\n        'search: loop {\n            // Check that we have room to search in\n            // position + needle_last can not overflow if we assume slices\n            // are bounded by isize's range.\n            let tail_byte = match haystack.get(self.position + needle_last) {\n                Some(&b) => b,\n                None => {\n                    self.position = haystack.len();\n                    return S::rejecting(old_pos, self.position);\n                }\n            };\n\n            if S::use_early_reject() && old_pos != self.position {\n                return S::rejecting(old_pos, self.position);\n            }\n\n            // Quickly skip by large portions unrelated to our substring\n            if !self.byteset_contains(tail_byte) {\n                self.position += needle.len();\n                if !long_period {\n                    self.memory = 0;\n                }\n                continue 'search;\n            }\n\n            // See if the right part of the needle matches\n            let start =\n                if long_period { self.crit_pos } else { cmp::max(self.crit_pos, self.memory) };\n            for i in start..needle.len() {\n                if needle[i] != haystack[self.position + i] {\n                    self.position += i - self.crit_pos + 1;\n                    if !long_period {\n                        self.memory = 0;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // See if the left part of the needle matches\n            let start = if long_period { 0 } else { self.memory };\n            for i in (start..self.crit_pos).rev() {\n                if needle[i] != haystack[self.position + i] {\n                    self.position += self.period;\n                    if !long_period {\n                        self.memory = needle.len() - self.period;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // We have found a match!\n            let match_pos = self.position;\n\n            // Note: add self.period instead of needle.len() to have overlapping matches\n            self.position += needle.len();\n            if !long_period {\n                self.memory = 0; // set to needle.len() - self.period for overlapping matches\n            }\n\n            return S::matching(match_pos, match_pos + needle.len());\n        }\n    }",
  "callees": [
    "366752582573636662618041715036916609810",
    "155146884437592745449279657258619050520",
    "170486207337946700033815843014261966755",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "167165721111217593893743718785627578467",
    "111893148674317480745590608994062193214",
    "11996021044221125357274189770344285829",
    "2266474927748722104589482484269181849",
    "106331898439077953744539516180016762298",
    "6914657791414926604643248476891087136",
    "117885714964136718011412517610531756244",
    "12115540591965961592218455255086567020",
    "24502394795559680767584204508227377419",
    "56992650673164436291130925969138191855",
    "90771261734924938883465308637020449641",
    "125312877505429677902664359715729802479",
    "1204668293620499224013336883119093261459",
    "5667765796385169624800112337147502292",
    "171593739300022194915526452191835401234",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "18924474281332607947427114014473837479",
    "760499024176919446914647389213438349877",
    "18415684320297405220951080584907961160",
    "25147898751268070724297523336675951399",
    "84124346961803484191975811234606759065",
    "44839495425802162711973928630568384066",
    "179238937216206703897978799586879197334",
    "1737046666080539081914974966237099365643",
    "621698472431332816417792581602959129152",
    "739520556846959085018120036998133255835"
  ]
}
