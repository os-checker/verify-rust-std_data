{
  "file": "core/src/str/pattern.rs",
  "name": "core::str::pattern::TwoWaySearcher::next::<core::str::pattern::RejectAndMatch>",
  "hash": "1653999992248286827416462808581984371004",
  "hash_direct": "1486610483874393807416222692462554124773",
  "src": "fn next<S>(&mut self, haystack: &[u8], needle: &[u8], long_period: bool) -> S::Output\n    where\n        S: TwoWayStrategy,\n    {\n        // `next()` uses `self.position` as its cursor\n        let old_pos = self.position;\n        let needle_last = needle.len() - 1;\n        'search: loop {\n            // Check that we have room to search in\n            // position + needle_last can not overflow if we assume slices\n            // are bounded by isize's range.\n            let tail_byte = match haystack.get(self.position + needle_last) {\n                Some(&b) => b,\n                None => {\n                    self.position = haystack.len();\n                    return S::rejecting(old_pos, self.position);\n                }\n            };\n\n            if S::use_early_reject() && old_pos != self.position {\n                return S::rejecting(old_pos, self.position);\n            }\n\n            // Quickly skip by large portions unrelated to our substring\n            if !self.byteset_contains(tail_byte) {\n                self.position += needle.len();\n                if !long_period {\n                    self.memory = 0;\n                }\n                continue 'search;\n            }\n\n            // See if the right part of the needle matches\n            let start =\n                if long_period { self.crit_pos } else { cmp::max(self.crit_pos, self.memory) };\n            for i in start..needle.len() {\n                if needle[i] != haystack[self.position + i] {\n                    self.position += i - self.crit_pos + 1;\n                    if !long_period {\n                        self.memory = 0;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // See if the left part of the needle matches\n            let start = if long_period { 0 } else { self.memory };\n            for i in (start..self.crit_pos).rev() {\n                if needle[i] != haystack[self.position + i] {\n                    self.position += self.period;\n                    if !long_period {\n                        self.memory = needle.len() - self.period;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // We have found a match!\n            let match_pos = self.position;\n\n            // Note: add self.period instead of needle.len() to have overlapping matches\n            self.position += needle.len();\n            if !long_period {\n                self.memory = 0; // set to needle.len() - self.period for overlapping matches\n            }\n\n            return S::matching(match_pos, match_pos + needle.len());\n        }\n    }",
  "callees": [
    "158282381428406867768271957564824561002",
    "1760151968317278624513482005825546212798",
    "894490025856992822210419454876496026284",
    "12281449246394340237926324936375242532",
    "181267529910573756716102767087485333561",
    "1824545319189397521315695847785602896178",
    "25554929025457378716042267507361008869",
    "175902738860881228615483607864010986597",
    "806608401546285073416583488309030248740",
    "129027694980846849712294755095785889196",
    "163079746810750480252313458600207514496",
    "1390917187629079949812427169424512137623",
    "145589541181952283159784619082887052114",
    "4833310887722852675564040932252536797",
    "222725598122421332810622840183709038894",
    "4985460341548456644715340132601722906",
    "146105268075378471708202374381697028730",
    "170846580729842163074659927269266210653",
    "8358020412969843293369480817801214853",
    "89553991991390806369608823483879896538",
    "1483436051876589682917815592106303415640",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "63085389524472853348886374617170044294",
    "19058764743854314419670517218317949449",
    "1576059258124862397814684958146640809205",
    "138864908789298630857141888322162684323",
    "5130933157796353909368991377448416710",
    "536261535131305517410470927862664321828",
    "16883950177352497257478937804445229014",
    "1204110943740971163315322114289093829849",
    "116953387026626631555337908913709999943",
    "180635224128130815714204029673366671286",
    "112989397975222255532054380452996322405"
  ]
}
