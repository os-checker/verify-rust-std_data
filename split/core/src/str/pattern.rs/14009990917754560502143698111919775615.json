{
  "file": "core/src/str/pattern.rs",
  "name": "<str::pattern::CharPredicateSearcher<'_, fn(char) -> bool {char::methods::<impl char>::is_whitespace}> as str::pattern::Searcher<'_>>::next_reject",
  "hash": "14009990917754560502143698111919775615",
  "hash_direct": "4301158699060932666906929541608013840",
  "src": "fn next_reject(&mut self) -> Option<(usize, usize)> {\n            self.0.next_reject()\n        }",
  "macro_backtrace": [
    {
      "callsite": "searcher_methods!(forward)",
      "defsite": "macro_rules! searcher_methods {\n    (forward) => {\n        #[inline]\n        fn haystack(&self) -> &'a str {\n            self.0.haystack()\n        }\n        #[inline]\n        fn next(&mut self) -> SearchStep {\n            self.0.next()\n        }\n        #[inline]\n        fn next_match(&mut self) -> Option<(usize, usize)> {\n            self.0.next_match()\n        }\n        #[inline]\n        fn next_reject(&mut self) -> Option<(usize, usize)> {\n            self.0.next_reject()\n        }\n    };\n    (reverse) => {\n        #[inline]\n        fn next_back(&mut self) -> SearchStep {\n            self.0.next_back()\n        }\n        #[inline]\n        fn next_match_back(&mut self) -> Option<(usize, usize)> {\n            self.0.next_match_back()\n        }\n        #[inline]\n        fn next_reject_back(&mut self) -> Option<(usize, usize)> {\n            self.0.next_reject_back()\n        }\n    };\n}"
    }
  ],
  "callees": [
    "125895754419976834712369234308535121418",
    "97974469250681533633362941246048906040",
    "56316359647357795184792913202425867352",
    "121872163624966698483225952656434249831",
    "183702634530756494073025673838836651007",
    "258820287469578611817448591488600041899",
    "1415106497522421883676194742336801697",
    "17421822894816687532325615181214565887",
    "1529875730411415803517587657844377161231",
    "23815256893174302637797703719499456373",
    "121097281700569241807917519510076722724",
    "303127917241666984113380325134893912788",
    "157526224548632931644224402393760490185",
    "366503061556370158810229951695642705038",
    "1492489932263133402213267674984925131529",
    "180942759258101506955182199119065053589",
    "1424839172046310268011085042199237354602",
    "79338743477724285898920606540258882171",
    "171487306867941110771102297001636865950",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "1214574077763705187516383491048990527345",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "144119928408074986676617008060073758280",
    "1584226519763055173017297680793969390949",
    "139997011880036619526085207717010799176",
    "671334365265236941113753063318744059957",
    "1762126293480126793916319187708925702531",
    "115305965424151250157684815253829770404",
    "103695068283875105018623992302427237269",
    "53569486981529370344752868158650318763",
    "33020214437710035965402411197660679021",
    "3297309995462571210361513208440932689",
    "1676603290518039711418379565247484306913",
    "90550453206581869791970009265946291996",
    "1681045938191596506412316969696714615302",
    "596564398432010081814808260562835248359",
    "90933695478604663001573090783200358337",
    "20689955926650303163515534893265746746",
    "405744096882824240213110808365915244444",
    "576094505828493470010210865585900501168",
    "11111726732240127144119276831063656774",
    "79957517381934331374505463763239679871",
    "109849097723912452994088294171860151303",
    "486164287917427656918200146926298480057",
    "611027897215340775410757839603478111815",
    "819756211280848030917202637728825520633",
    "60020754642282354823285669083003912494",
    "92658835324565758495130762072978604201",
    "739520556846959085018120036998133255835",
    "42593226902273250284228501629666851752"
  ]
}
