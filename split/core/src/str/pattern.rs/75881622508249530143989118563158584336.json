{
  "file": "core/src/str/pattern.rs",
  "name": "str::pattern::TwoWaySearcher::next::<str::pattern::MatchOnly>",
  "hash": "75881622508249530143989118563158584336",
  "hash_direct": "68493649846180508329808623885599270215",
  "src": "fn next<S>(&mut self, haystack: &[u8], needle: &[u8], long_period: bool) -> S::Output\n    where\n        S: TwoWayStrategy,\n    {\n        // `next()` uses `self.position` as its cursor\n        let old_pos = self.position;\n        let needle_last = needle.len() - 1;\n        'search: loop {\n            // Check that we have room to search in\n            // position + needle_last can not overflow if we assume slices\n            // are bounded by isize's range.\n            let tail_byte = match haystack.get(self.position + needle_last) {\n                Some(&b) => b,\n                None => {\n                    self.position = haystack.len();\n                    return S::rejecting(old_pos, self.position);\n                }\n            };\n\n            if S::use_early_reject() && old_pos != self.position {\n                return S::rejecting(old_pos, self.position);\n            }\n\n            // Quickly skip by large portions unrelated to our substring\n            if !self.byteset_contains(tail_byte) {\n                self.position += needle.len();\n                if !long_period {\n                    self.memory = 0;\n                }\n                continue 'search;\n            }\n\n            // See if the right part of the needle matches\n            let start =\n                if long_period { self.crit_pos } else { cmp::max(self.crit_pos, self.memory) };\n            for i in start..needle.len() {\n                if needle[i] != haystack[self.position + i] {\n                    self.position += i - self.crit_pos + 1;\n                    if !long_period {\n                        self.memory = 0;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // See if the left part of the needle matches\n            let start = if long_period { 0 } else { self.memory };\n            for i in (start..self.crit_pos).rev() {\n                if needle[i] != haystack[self.position + i] {\n                    self.position += self.period;\n                    if !long_period {\n                        self.memory = needle.len() - self.period;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // We have found a match!\n            let match_pos = self.position;\n\n            // Note: add self.period instead of needle.len() to have overlapping matches\n            self.position += needle.len();\n            if !long_period {\n                self.memory = 0; // set to needle.len() - self.period for overlapping matches\n            }\n\n            return S::matching(match_pos, match_pos + needle.len());\n        }\n    }",
  "callees": [
    "1098097363774377275016969441593029895798",
    "589599466487462365011430963401962118509",
    "1011714002625413459616499351526972005335",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "84041372649682785889844836039084079894",
    "1728531953254762460916325834585472426982",
    "1438611585775203574910130895685408999981",
    "164499247419474032715135467342069728508",
    "103649489784811006526625132462472248149",
    "180874735662080423702617202418949819065",
    "1194365697027496133111619491071087150844",
    "1388505351152652276212287879007466526739",
    "1342849835466405409710461719769802605500",
    "526814189773195139817557993623059721647",
    "97728446667492592338346092068331699738",
    "1182371843420022111010336901757313084440",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "136032794974893814259994759472454752644",
    "3600424921079027518406387297978205971",
    "1295305430755090081516099295166961669593",
    "146507627476814107677104441925797118965",
    "1772952725560717790113998343690175182842",
    "10689862468822940221927397400941920163",
    "632586763026986584910358085677244274300",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "399232661239117480517401994520839366833"
  ]
}
