{
  "file": "core/src/str/pattern.rs",
  "name": "str::pattern::TwoWaySearcher::next_back::<str::pattern::RejectAndMatch>",
  "hash": "1759409357094798244216813877850650349321",
  "hash_direct": "1133295238842720277318341207909613647826",
  "src": "fn next_back<S>(&mut self, haystack: &[u8], needle: &[u8], long_period: bool) -> S::Output\n    where\n        S: TwoWayStrategy,\n    {\n        // `next_back()` uses `self.end` as its cursor -- so that `next()` and `next_back()`\n        // are independent.\n        let old_end = self.end;\n        'search: loop {\n            // Check that we have room to search in\n            // end - needle.len() will wrap around when there is no more room,\n            // but due to slice length limits it can never wrap all the way back\n            // into the length of haystack.\n            let front_byte = match haystack.get(self.end.wrapping_sub(needle.len())) {\n                Some(&b) => b,\n                None => {\n                    self.end = 0;\n                    return S::rejecting(0, old_end);\n                }\n            };\n\n            if S::use_early_reject() && old_end != self.end {\n                return S::rejecting(self.end, old_end);\n            }\n\n            // Quickly skip by large portions unrelated to our substring\n            if !self.byteset_contains(front_byte) {\n                self.end -= needle.len();\n                if !long_period {\n                    self.memory_back = needle.len();\n                }\n                continue 'search;\n            }\n\n            // See if the left part of the needle matches\n            let crit = if long_period {\n                self.crit_pos_back\n            } else {\n                cmp::min(self.crit_pos_back, self.memory_back)\n            };\n            for i in (0..crit).rev() {\n                if needle[i] != haystack[self.end - needle.len() + i] {\n                    self.end -= self.crit_pos_back - i;\n                    if !long_period {\n                        self.memory_back = needle.len();\n                    }\n                    continue 'search;\n                }\n            }\n\n            // See if the right part of the needle matches\n            let needle_end = if long_period { needle.len() } else { self.memory_back };\n            for i in self.crit_pos_back..needle_end {\n                if needle[i] != haystack[self.end - needle.len() + i] {\n                    self.end -= self.period;\n                    if !long_period {\n                        self.memory_back = self.period;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // We have found a match!\n            let match_pos = self.end - needle.len();\n            // Note: sub self.period instead of needle.len() to have overlapping matches\n            self.end -= needle.len();\n            if !long_period {\n                self.memory_back = needle.len();\n            }\n\n            return S::matching(match_pos, match_pos + needle.len());\n        }\n    }",
  "callees": [
    "162904158373319495369070442937212273978",
    "589599466487462365011430963401962118509",
    "173804791060645997939431648088044898019",
    "47323665595455568617290020941376774286",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "84041372649682785889844836039084079894",
    "1728531953254762460916325834585472426982",
    "1438611585775203574910130895685408999981",
    "164499247419474032715135467342069728508",
    "103649489784811006526625132462472248149",
    "180874735662080423702617202418949819065",
    "1194365697027496133111619491071087150844",
    "1388505351152652276212287879007466526739",
    "1342849835466405409710461719769802605500",
    "526814189773195139817557993623059721647",
    "97728446667492592338346092068331699738",
    "1182371843420022111010336901757313084440",
    "1801932849287312231112662193894546046488",
    "13796074939706337624507826801091410480",
    "844957821118050201712037424530049556280",
    "1290129509806421189411347835193128335421",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "136032794974893814259994759472454752644",
    "3600424921079027518406387297978205971",
    "1295305430755090081516099295166961669593",
    "1206730974527364627516341888692559949819",
    "294887974428220338713064789742687613384",
    "4409820085065835207846628885485317057",
    "632586763026986584910358085677244274300",
    "156558724737321886766153526308848840146",
    "478505109661826463711850093418602871650",
    "399232661239117480517401994520839366833"
  ]
}
