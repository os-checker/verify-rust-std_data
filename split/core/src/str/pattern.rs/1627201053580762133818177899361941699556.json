{
  "file": "core/src/str/pattern.rs",
  "name": "core::str::pattern::TwoWaySearcher::next::<core::str::pattern::MatchOnly>",
  "hash": "1627201053580762133818177899361941699556",
  "hash_direct": "53718345202402446497868071660760849111",
  "src": "fn next<S>(&mut self, haystack: &[u8], needle: &[u8], long_period: bool) -> S::Output\n    where\n        S: TwoWayStrategy,\n    {\n        // `next()` uses `self.position` as its cursor\n        let old_pos = self.position;\n        let needle_last = needle.len() - 1;\n        'search: loop {\n            // Check that we have room to search in\n            // position + needle_last can not overflow if we assume slices\n            // are bounded by isize's range.\n            let tail_byte = match haystack.get(self.position + needle_last) {\n                Some(&b) => b,\n                None => {\n                    self.position = haystack.len();\n                    return S::rejecting(old_pos, self.position);\n                }\n            };\n\n            if S::use_early_reject() && old_pos != self.position {\n                return S::rejecting(old_pos, self.position);\n            }\n\n            // Quickly skip by large portions unrelated to our substring\n            if !self.byteset_contains(tail_byte) {\n                self.position += needle.len();\n                if !long_period {\n                    self.memory = 0;\n                }\n                continue 'search;\n            }\n\n            // See if the right part of the needle matches\n            let start =\n                if long_period { self.crit_pos } else { cmp::max(self.crit_pos, self.memory) };\n            for i in start..needle.len() {\n                if needle[i] != haystack[self.position + i] {\n                    self.position += i - self.crit_pos + 1;\n                    if !long_period {\n                        self.memory = 0;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // See if the left part of the needle matches\n            let start = if long_period { 0 } else { self.memory };\n            for i in (start..self.crit_pos).rev() {\n                if needle[i] != haystack[self.position + i] {\n                    self.position += self.period;\n                    if !long_period {\n                        self.memory = needle.len() - self.period;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // We have found a match!\n            let match_pos = self.position;\n\n            // Note: add self.period instead of needle.len() to have overlapping matches\n            self.position += needle.len();\n            if !long_period {\n                self.memory = 0; // set to needle.len() - self.period for overlapping matches\n            }\n\n            return S::matching(match_pos, match_pos + needle.len());\n        }\n    }",
  "callees": [
    "158282381428406867768271957564824561002",
    "1760151968317278624513482005825546212798",
    "894490025856992822210419454876496026284",
    "12281449246394340237926324936375242532",
    "181267529910573756716102767087485333561",
    "1824545319189397521315695847785602896178",
    "41841476971372777735891767137129117221",
    "175902738860881228615483607864010986597",
    "87062518103154485528422368842656325288",
    "1694199854161170483015459729801544692763",
    "90447285944066577365183955915312838575",
    "3658313454039325477944363122213121015",
    "1012208838649859820212683585969879833351",
    "815298085534125605714469750090114749026",
    "222725598122421332810622840183709038894",
    "4985460341548456644715340132601722906",
    "146105268075378471708202374381697028730",
    "105784042461548404615622384875082564775",
    "167720725353303677441984078993999087147",
    "104367634591107546717821077127163354051",
    "349732893336648829317640041454262824981",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "63085389524472853348886374617170044294",
    "19058764743854314419670517218317949449",
    "1576059258124862397814684958146640809205",
    "138864908789298630857141888322162684323",
    "624182571693006029516925068915991842952",
    "769936388386110392815013714447814718596",
    "112278149574192827075196980217052564097",
    "1204110943740971163315322114289093829849",
    "1751182092721409607066971085433427634",
    "1396369027985523187512983890317312644464",
    "112989397975222255532054380452996322405"
  ]
}
