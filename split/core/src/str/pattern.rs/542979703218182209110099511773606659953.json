{
  "file": "core/src/str/pattern.rs",
  "name": "str::pattern::TwoWaySearcher::next::<str::pattern::MatchOnly>",
  "hash": "542979703218182209110099511773606659953",
  "hash_direct": "68493649846180508329808623885599270215",
  "src": "fn next<S>(&mut self, haystack: &[u8], needle: &[u8], long_period: bool) -> S::Output\n    where\n        S: TwoWayStrategy,\n    {\n        // `next()` uses `self.position` as its cursor\n        let old_pos = self.position;\n        let needle_last = needle.len() - 1;\n        'search: loop {\n            // Check that we have room to search in\n            // position + needle_last can not overflow if we assume slices\n            // are bounded by isize's range.\n            let tail_byte = match haystack.get(self.position + needle_last) {\n                Some(&b) => b,\n                None => {\n                    self.position = haystack.len();\n                    return S::rejecting(old_pos, self.position);\n                }\n            };\n\n            if S::use_early_reject() && old_pos != self.position {\n                return S::rejecting(old_pos, self.position);\n            }\n\n            // Quickly skip by large portions unrelated to our substring\n            if !self.byteset_contains(tail_byte) {\n                self.position += needle.len();\n                if !long_period {\n                    self.memory = 0;\n                }\n                continue 'search;\n            }\n\n            // See if the right part of the needle matches\n            let start =\n                if long_period { self.crit_pos } else { cmp::max(self.crit_pos, self.memory) };\n            for i in start..needle.len() {\n                if needle[i] != haystack[self.position + i] {\n                    self.position += i - self.crit_pos + 1;\n                    if !long_period {\n                        self.memory = 0;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // See if the left part of the needle matches\n            let start = if long_period { 0 } else { self.memory };\n            for i in (start..self.crit_pos).rev() {\n                if needle[i] != haystack[self.position + i] {\n                    self.position += self.period;\n                    if !long_period {\n                        self.memory = needle.len() - self.period;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // We have found a match!\n            let match_pos = self.position;\n\n            // Note: add self.period instead of needle.len() to have overlapping matches\n            self.position += needle.len();\n            if !long_period {\n                self.memory = 0; // set to needle.len() - self.period for overlapping matches\n            }\n\n            return S::matching(match_pos, match_pos + needle.len());\n        }\n    }",
  "callees": [
    "366752582573636662618041715036916609810",
    "155146884437592745449279657258619050520",
    "170486207337946700033815843014261966755",
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "681465720115474298817558361040200202189",
    "111893148674317480745590608994062193214",
    "58079812985260614779074871743441829358",
    "66864498598691340555271615596370346896",
    "174583527470119019351759393122367854049",
    "61537032802646890302053131132263133848",
    "15281129090904038428498981268854200284",
    "1670765222083267730010075026643490075615",
    "24502394795559680767584204508227377419",
    "56992650673164436291130925969138191855",
    "90771261734924938883465308637020449641",
    "13303575705867660165971022725037666878",
    "157526224548632931644224402393760490185",
    "174107661030119018973646362480685393050",
    "366503061556370158810229951695642705038",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "478753423337745817613297159272845606672",
    "18924474281332607947427114014473837479",
    "760499024176919446914647389213438349877",
    "18415684320297405220951080584907961160",
    "1296411750804674058315087202364841236804",
    "921040717020639707211435762660647759802",
    "313548882690528367412077569528013544642",
    "179238937216206703897978799586879197334",
    "126048648882406442003602795325732745334",
    "60020754642282354823285669083003912494",
    "739520556846959085018120036998133255835"
  ]
}
