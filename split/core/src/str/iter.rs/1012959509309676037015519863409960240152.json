{
  "file": "core/src/str/iter.rs",
  "name": "<str::iter::EscapeUnicode<'_> as iter::traits::iterator::Iterator>::size_hint",
  "hash": "1012959509309676037015519863409960240152",
  "hash_direct": "729637494958336147515367392174175613528",
  "src": "fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }",
  "macro_backtrace": [
    {
      "callsite": "escape_types_impls!(EscapeDebug, EscapeDefault, EscapeUnicode)",
      "defsite": "macro_rules! escape_types_impls {\n    ($( $Name: ident ),+) => {$(\n        #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n        impl<'a> fmt::Display for $Name<'a> {\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                self.clone().try_for_each(|c| f.write_char(c))\n            }\n        }\n\n        #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n        impl<'a> Iterator for $Name<'a> {\n            type Item = char;\n\n            #[inline]\n            fn next(&mut self) -> Option<char> { self.inner.next() }\n\n            #[inline]\n            fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n\n            #[inline]\n            fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n                Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Output = Acc>\n            {\n                self.inner.try_fold(init, fold)\n            }\n\n            #[inline]\n            fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n                where Fold: FnMut(Acc, Self::Item) -> Acc,\n            {\n                self.inner.fold(init, fold)\n            }\n        }\n\n        #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n        impl<'a> FusedIterator for $Name<'a> {}\n    )+}\n}"
    }
  ],
  "callees": [
    "105478058656958201033706608385635715348",
    "9122690305665940051388962439719640221",
    "6481093660164787647198171041158156151",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "1529875730411415803517587657844377161231",
    "23815256893174302637797703719499456373",
    "16302334392257479488019020963094697472",
    "1080545207228836334818257519151109445219",
    "978392858487402246214836988031725395463",
    "317641503427312837515642175110966954218",
    "26698563944067306788214842846617385019",
    "121097281700569241807917519510076722724",
    "79628754160654265195868607472716161204",
    "143572956432032064744447501745832117320",
    "1716115695399316423118044476678068147651",
    "761861023504359043615820998596748928032",
    "163344409514712153181005119158175808957",
    "1563086521540655781917580885661803727599",
    "146950355894543752523119223258562201306",
    "8912198003459420415317352584525771235",
    "935327613547407926313303453668085555306",
    "1415508711647638229511912595862604596327",
    "65227893797142329191985415659225325531",
    "88822435589931470504094706956089828792",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "1214574077763705187516383491048990527345",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "144119928408074986676617008060073758280",
    "66631883600104442883671173806470690647",
    "580249689936400260514404781608174812569",
    "1762126293480126793916319187708925702531",
    "53569486981529370344752868158650318763",
    "3297309995462571210361513208440932689",
    "90550453206581869791970009265946291996",
    "141752745247609934556107182773323414975",
    "92658835324565758495130762072978604201",
    "739520556846959085018120036998133255835"
  ]
}
