{
  "file": "core/src/str/iter.rs",
  "name": "<str::iter::EncodeUtf16<'_> as iter::traits::iterator::Iterator>::size_hint",
  "hash": "892827400923592403113527830988433583284",
  "hash_direct": "256470543024743392015175777729259716571",
  "src": "fn size_hint(&self) -> (usize, Option<usize>) {\n        let len = self.chars.iter.len();\n        // The highest bytes:code units ratio occurs for 3-byte sequences,\n        // since a 4-byte sequence results in 2 code units. The lower bound\n        // is therefore determined by assuming the remaining bytes contain as\n        // many 3-byte sequences as possible. The highest bytes:code units\n        // ratio is for 1-byte sequences, so use this for the upper bound.\n        // `(len + 2)` can't overflow, because we know that the `slice::Iter`\n        // belongs to a slice in memory which has a maximum length of\n        // `isize::MAX` (that's well below `usize::MAX`)\n        if self.extra == 0 {\n            (len.div_ceil(3), Some(len))\n        } else {\n            // We're in the middle of a surrogate pair, so add the remaining\n            // surrogate to the bounds.\n            (len.div_ceil(3) + 1, Some(len + 1))\n        }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "17421822894816687532325615181214565887",
    "1529875730411415803517587657844377161231",
    "23815256893174302637797703719499456373",
    "121097281700569241807917519510076722724",
    "1716115695399316423118044476678068147651",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "1214574077763705187516383491048990527345",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "144119928408074986676617008060073758280",
    "1762126293480126793916319187708925702531",
    "53569486981529370344752868158650318763",
    "3297309995462571210361513208440932689",
    "90550453206581869791970009265946291996",
    "92658835324565758495130762072978604201",
    "739520556846959085018120036998133255835"
  ]
}
