{
  "file": "core/src/str/iter.rs",
  "name": "<str::iter::EscapeDebug<'_> as iter::traits::iterator::Iterator>::size_hint",
  "hash": "37812438545737418336056674734469263454",
  "hash_direct": "628962128379989813413184921668279760494",
  "src": "fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }",
  "macro_backtrace": [
    {
      "callsite": "escape_types_impls!(EscapeDebug, EscapeDefault, EscapeUnicode)",
      "defsite": "macro_rules! escape_types_impls {\n    ($( $Name: ident ),+) => {$(\n        #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n        impl<'a> fmt::Display for $Name<'a> {\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                self.clone().try_for_each(|c| f.write_char(c))\n            }\n        }\n\n        #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n        impl<'a> Iterator for $Name<'a> {\n            type Item = char;\n\n            #[inline]\n            fn next(&mut self) -> Option<char> { self.inner.next() }\n\n            #[inline]\n            fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n\n            #[inline]\n            fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n                Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Output = Acc>\n            {\n                self.inner.try_fold(init, fold)\n            }\n\n            #[inline]\n            fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n                where Fold: FnMut(Acc, Self::Item) -> Acc,\n            {\n                self.inner.fold(init, fold)\n            }\n        }\n\n        #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n        impl<'a> FusedIterator for $Name<'a> {}\n    )+}\n}"
    }
  ],
  "callees": [
    "141232631085634144581455427783437903111",
    "75328591623096787827877074291818888632",
    "119539198841178170095714608677850051781",
    "1054359425812398629415438404882291537966",
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "1529875730411415803517587657844377161231",
    "23815256893174302637797703719499456373",
    "1399424242103049126314894610211616889390",
    "78218468122450608946834132910070473865",
    "54183978797746290528948065223761022203",
    "15485259336261800821245375852072682854",
    "42980508398958516939033234360740387878",
    "25921040619588314925379810629003934764",
    "61904346926671211328867343054738396745",
    "1264393684285630405317447300702446308445",
    "1148478860049936098517848989844684086393",
    "121097281700569241807917519510076722724",
    "38173889201636315922757092210776486888",
    "97892229237199250718782565098232937194",
    "76217497761975253402336742341930803263",
    "632379827537218859118037651046044448068",
    "159822079557008185828209445829366525941",
    "530329434428699031818396369573342280682",
    "119925498028853727189218668192324708635",
    "141091565112319649316451373017675590864",
    "13034654745545134522760268294272540782",
    "1067221418430980488216616268130754935254",
    "8912198003459420415317352584525771235",
    "935327613547407926313303453668085555306",
    "1415508711647638229511912595862604596327",
    "303529987439250935711380511177693305160",
    "3146941474667876217278248361469421016",
    "106290951634049928979107449778510088264",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "1214574077763705187516383491048990527345",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "144119928408074986676617008060073758280",
    "66631883600104442883671173806470690647",
    "162249355548134443272627281487101785401",
    "1762126293480126793916319187708925702531",
    "53569486981529370344752868158650318763",
    "3297309995462571210361513208440932689",
    "90550453206581869791970009265946291996",
    "92629160347041616169292893266155646330",
    "92658835324565758495130762072978604201",
    "739520556846959085018120036998133255835"
  ]
}
