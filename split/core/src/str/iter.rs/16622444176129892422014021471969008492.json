{
  "file": "core/src/str/iter.rs",
  "name": "<str::iter::Split<'_, str::IsWhitespace> as clone::Clone>::clone",
  "hash": "16622444176129892422014021471969008492",
  "hash_direct": "1317475491312767852110738275954847605050",
  "src": "fn clone(&self) -> Self {\n                $forward_iterator(self.0.clone())\n            }",
  "macro_backtrace": [
    {
      "callsite": "generate_pattern_iterators! {\n    forward:\n        /// Created with the method [`split`].\n        ///\n        /// [`split`]: str::split\n        struct Split;\n    reverse:\n        /// Created with the method [`rsplit`].\n        ///\n        /// [`rsplit`]: str::rsplit\n        struct RSplit;\n    stability:\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    internal:\n        SplitInternal yielding (&'a str);\n    delegate double ended;\n}",
      "defsite": "macro_rules! generate_pattern_iterators {\n    {\n        // Forward iterator\n        forward:\n            $(#[$forward_iterator_attribute:meta])*\n            struct $forward_iterator:ident;\n\n        // Reverse iterator\n        reverse:\n            $(#[$reverse_iterator_attribute:meta])*\n            struct $reverse_iterator:ident;\n\n        // Stability of all generated items\n        stability:\n            $(#[$common_stability_attribute:meta])*\n\n        // Internal almost-iterator that is being delegated to\n        internal:\n            $internal_iterator:ident yielding ($iterty:ty);\n\n        // Kind of delegation - either single ended or double ended\n        delegate $($t:tt)*\n    } => {\n        $(#[$forward_iterator_attribute])*\n        $(#[$common_stability_attribute])*\n        pub struct $forward_iterator<'a, P: Pattern>(pub(super) $internal_iterator<'a, P>);\n\n        $(#[$common_stability_attribute])*\n        impl<'a, P> fmt::Debug for $forward_iterator<'a, P>\n        where\n            P: Pattern<Searcher<'a>: fmt::Debug>,\n        {\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                f.debug_tuple(stringify!($forward_iterator))\n                    .field(&self.0)\n                    .finish()\n            }\n        }\n\n        $(#[$common_stability_attribute])*\n        impl<'a, P: Pattern> Iterator for $forward_iterator<'a, P> {\n            type Item = $iterty;\n\n            #[inline]\n            fn next(&mut self) -> Option<$iterty> {\n                self.0.next()\n            }\n        }\n\n        $(#[$common_stability_attribute])*\n        impl<'a, P> Clone for $forward_iterator<'a, P>\n        where\n            P: Pattern<Searcher<'a>: Clone>,\n        {\n            fn clone(&self) -> Self {\n                $forward_iterator(self.0.clone())\n            }\n        }\n\n        $(#[$reverse_iterator_attribute])*\n        $(#[$common_stability_attribute])*\n        pub struct $reverse_iterator<'a, P: Pattern>(pub(super) $internal_iterator<'a, P>);\n\n        $(#[$common_stability_attribute])*\n        impl<'a, P> fmt::Debug for $reverse_iterator<'a, P>\n        where\n            P: Pattern<Searcher<'a>: fmt::Debug>,\n        {\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                f.debug_tuple(stringify!($reverse_iterator))\n                    .field(&self.0)\n                    .finish()\n            }\n        }\n\n        $(#[$common_stability_attribute])*\n        impl<'a, P> Iterator for $reverse_iterator<'a, P>\n        where\n            P: Pattern<Searcher<'a>: ReverseSearcher<'a>>,\n        {\n            type Item = $iterty;\n\n            #[inline]\n            fn next(&mut self) -> Option<$iterty> {\n                self.0.next_back()\n            }\n        }\n\n        $(#[$common_stability_attribute])*\n        impl<'a, P> Clone for $reverse_iterator<'a, P>\n        where\n            P: Pattern<Searcher<'a>: Clone>,\n        {\n            fn clone(&self) -> Self {\n                $reverse_iterator(self.0.clone())\n            }\n        }\n\n        #[stable(feature = \"fused\", since = \"1.26.0\")]\n        impl<'a, P: Pattern> FusedIterator for $forward_iterator<'a, P> {}\n\n        #[stable(feature = \"fused\", since = \"1.26.0\")]\n        impl<'a, P> FusedIterator for $reverse_iterator<'a, P>\n        where\n            P: Pattern<Searcher<'a>: ReverseSearcher<'a>>,\n        {}\n\n        generate_pattern_iterators!($($t)* with $(#[$common_stability_attribute])*,\n                                                $forward_iterator,\n                                                $reverse_iterator, $iterty);\n    };\n    {\n        double ended; with $(#[$common_stability_attribute:meta])*,\n                           $forward_iterator:ident,\n                           $reverse_iterator:ident, $iterty:ty\n    } => {\n        $(#[$common_stability_attribute])*\n        impl<'a, P> DoubleEndedIterator for $forward_iterator<'a, P>\n        where\n            P: Pattern<Searcher<'a>: DoubleEndedSearcher<'a>>,\n        {\n            #[inline]\n            fn next_back(&mut self) -> Option<$iterty> {\n                self.0.next_back()\n            }\n        }\n\n        $(#[$common_stability_attribute])*\n        impl<'a, P> DoubleEndedIterator for $reverse_iterator<'a, P>\n        where\n            P: Pattern<Searcher<'a>: DoubleEndedSearcher<'a>>,\n        {\n            #[inline]\n            fn next_back(&mut self) -> Option<$iterty> {\n                self.0.next()\n            }\n        }\n    };\n    {\n        single ended; with $(#[$common_stability_attribute:meta])*,\n                           $forward_iterator:ident,\n                           $reverse_iterator:ident, $iterty:ty\n    } => {}\n}"
    }
  ],
  "callees": [
    "1127448244019747137816948501807508054133",
    "1693168866218668197215000934965764485951",
    "415636605586044597014511502347166535165",
    "610604595479581894013457754181440398822",
    "34849895375469610708345764686731926756",
    "1427069616467194401517585746306096742189",
    "136046183273530314302999051361857756204"
  ]
}
