{
  "file": "core/src/str/mod.rs",
  "name": "core::str::<impl str>::as_bytes_mut",
  "hash": "74733034934764643473295135155427043186",
  "hash_direct": "905333501216134060510895470388530445203",
  "src": "pub const unsafe fn as_bytes_mut(&mut self) -> &mut [u8] {\n        // SAFETY: the cast from `&str` to `&[u8]` is safe since `str`\n        // has the same layout as `&[u8]` (only std can make this guarantee).\n        // The pointer dereference is safe since it comes from a mutable reference which\n        // is guaranteed to be valid for writes.\n        unsafe { &mut *(self as *mut str as *mut [u8]) }\n    }"
}
