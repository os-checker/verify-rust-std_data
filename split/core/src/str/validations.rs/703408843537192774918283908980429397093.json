{
  "file": "core/src/str/validations.rs",
  "name": "core::str::validations::next_code_point_reverse::<'_, core::slice::Iter<'_, u8>>",
  "hash": "703408843537192774918283908980429397093",
  "hash_direct": "1590700808368036000913498634159403270466",
  "src": "pub(super) unsafe fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>\nwhere\n    I: DoubleEndedIterator<Item = &'a u8>,\n{\n    // Decode UTF-8\n    let w = match *bytes.next_back()? {\n        next_byte if next_byte < 128 => return Some(next_byte as u32),\n        back_byte => back_byte,\n    };\n\n    // Multibyte case follows\n    // Decode from a byte combination out of: [x [y [z w]]]\n    let mut ch;\n    // SAFETY: `bytes` produces an UTF-8-like string,\n    // so the iterator must produce a value here.\n    let z = unsafe { *bytes.next_back().unwrap_unchecked() };\n    ch = utf8_first_byte(z, 2);\n    if utf8_is_cont_byte(z) {\n        // SAFETY: `bytes` produces an UTF-8-like string,\n        // so the iterator must produce a value here.\n        let y = unsafe { *bytes.next_back().unwrap_unchecked() };\n        ch = utf8_first_byte(y, 3);\n        if utf8_is_cont_byte(y) {\n            // SAFETY: `bytes` produces an UTF-8-like string,\n            // so the iterator must produce a value here.\n            let x = unsafe { *bytes.next_back().unwrap_unchecked() };\n            ch = utf8_first_byte(x, 4);\n            ch = utf8_acc_cont_byte(ch, y);\n        }\n        ch = utf8_acc_cont_byte(ch, z);\n    }\n    ch = utf8_acc_cont_byte(ch, w);\n\n    Some(ch)\n}",
  "callees": [
    "12281449246394340237926324936375242532",
    "1552988011012146591114896816323571303973",
    "99835071136844477394667148890151411684",
    "73694171442177138896992135977130617471",
    "181267529910573756716102767087485333561",
    "1824545319189397521315695847785602896178",
    "167414915618570747466942362975710735704",
    "13341056042940392023339679442572153997",
    "16907477943652998274434215545923907743",
    "1070701508596510069314634318856054217121",
    "182056224738756981514078113564136896850",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "170281423934441608902372914597711355436",
    "146612017564224181584303574960223420416",
    "63085389524472853348886374617170044294",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "1265377832065113567412235914195731474121",
    "34425135371534504401023918703804855472",
    "1121825575012330479117046270460961910099",
    "1213241336815109722310271468032047462595",
    "181717373102152254895109628399379607332",
    "129298276867850405466757356839549852569",
    "14059835365210270201591674573402235375",
    "436320853132735905614689283933197931412",
    "576250432121440483217684352594314650577",
    "942824446178677257618158978831174017519",
    "532731138753265603818327567228254687081",
    "12337570696782316672762337738898954680",
    "112509633394280496177289388307343064194",
    "142090999081130336771330973658743083770",
    "1218082887775329343115840213804342330545",
    "134575816391913882811034622838318378111",
    "130576010702224875763332084068159311794",
    "1474760624071151604015593296552200388678",
    "177476608551010153348524169883854946115",
    "8931440026799091994906864179889734396",
    "16751170306113008464239378171551252370",
    "68146042946016511478524945822289260304",
    "84452584173405620737677116564911328924",
    "111407659007488109734195947710449385996",
    "1440556295303948986611180338974523334149",
    "720128794276240586813308836808068821438",
    "184047305280025903591388419102500649936",
    "45275466585467893411663171962594366595",
    "59214609251057229535872533893360073076",
    "115481664012670090729456290692676191535",
    "414067426002036798312624266174828264739",
    "254750187630407980110034678645695049576",
    "1349879990858633985615465432111373267034",
    "101448569670760544001825674377089576267",
    "112989397975222255532054380452996322405"
  ]
}
