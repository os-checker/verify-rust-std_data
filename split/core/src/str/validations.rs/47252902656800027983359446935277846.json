{
  "file": "core/src/str/validations.rs",
  "name": "str::validations::next_code_point_reverse::<'_, slice::iter::Iter<'_, u8>>",
  "hash": "47252902656800027983359446935277846",
  "hash_direct": "125613857219438926662249932955204475346",
  "src": "pub(super) unsafe fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>\nwhere\n    I: DoubleEndedIterator<Item = &'a u8>,\n{\n    // Decode UTF-8\n    let w = match *bytes.next_back()? {\n        next_byte if next_byte < 128 => return Some(next_byte as u32),\n        back_byte => back_byte,\n    };\n\n    // Multibyte case follows\n    // Decode from a byte combination out of: [x [y [z w]]]\n    let mut ch;\n    // SAFETY: `bytes` produces an UTF-8-like string,\n    // so the iterator must produce a value here.\n    let z = unsafe { *bytes.next_back().unwrap_unchecked() };\n    ch = utf8_first_byte(z, 2);\n    if utf8_is_cont_byte(z) {\n        // SAFETY: `bytes` produces an UTF-8-like string,\n        // so the iterator must produce a value here.\n        let y = unsafe { *bytes.next_back().unwrap_unchecked() };\n        ch = utf8_first_byte(y, 3);\n        if utf8_is_cont_byte(y) {\n            // SAFETY: `bytes` produces an UTF-8-like string,\n            // so the iterator must produce a value here.\n            let x = unsafe { *bytes.next_back().unwrap_unchecked() };\n            ch = utf8_first_byte(x, 4);\n            ch = utf8_acc_cont_byte(ch, y);\n        }\n        ch = utf8_acc_cont_byte(ch, z);\n    }\n    ch = utf8_acc_cont_byte(ch, w);\n\n    Some(ch)\n}",
  "callees": [
    "258820287469578611817448591488600041899",
    "1415106497522421883676194742336801697",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "23815256893174302637797703719499456373",
    "153380105951445071398010207846457168641",
    "34406283556650756559915574730829163350",
    "180942759258101506955182199119065053589",
    "1424839172046310268011085042199237354602",
    "79338743477724285898920606540258882171",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "229282620068738124516643974501969903000",
    "69893069659343665423091634361181161066",
    "671334365265236941113753063318744059957",
    "115305965424151250157684815253829770404",
    "53569486981529370344752868158650318763",
    "33020214437710035965402411197660679021",
    "61832321833168172414891909952066628566",
    "809559143095479859714922575727720211916",
    "174452803182786068186224119970594700812",
    "179271748716953759124606205886400836632",
    "112224826515755759615170433420829930099",
    "132977040173719154057256981446941835376",
    "58392407700799511755287538562328636651",
    "58392407700799511755287538562328636651",
    "58392407700799511755287538562328636651",
    "58392407700799511755287538562328636651",
    "171103174678191354385881825173134270213",
    "171103174678191354385881825173134270213",
    "171103174678191354385881825173134270213",
    "171103174678191354385881825173134270213",
    "67422619050628989531877668274484584789",
    "67708966930769958617679162683566997821",
    "67708966930769958617679162683566997821",
    "67708966930769958617679162683566997821",
    "67708966930769958617679162683566997821",
    "1519530991981792435917141154700341988379",
    "1519530991981792435917141154700341988379",
    "1519530991981792435917141154700341988379",
    "1519530991981792435917141154700341988379",
    "109849097723912452994088294171860151303",
    "486164287917427656918200146926298480057",
    "947833919457653120214810965083035955432",
    "819756211280848030917202637728825520633",
    "168503001671177803527283064745478359906",
    "739520556846959085018120036998133255835"
  ]
}
