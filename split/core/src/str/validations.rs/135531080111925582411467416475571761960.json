{
  "file": "core/src/str/validations.rs",
  "name": "str::validations::next_code_point::<'_, slice::iter::Iter<'_, u8>>",
  "hash": "135531080111925582411467416475571761960",
  "hash_direct": "1414697300313044380410537850217619449386",
  "src": "pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {\n    // Decode UTF-8\n    let x = *bytes.next()?;\n    if x < 128 {\n        return Some(x as u32);\n    }\n\n    // Multibyte case follows\n    // Decode from a byte combination out of: [[[x y] z] w]\n    // NOTE: Performance is sensitive to the exact formulation here\n    let init = utf8_first_byte(x, 2);\n    // SAFETY: `bytes` produces an UTF-8-like string,\n    // so the iterator must produce a value here.\n    let y = unsafe { *bytes.next().unwrap_unchecked() };\n    let mut ch = utf8_acc_cont_byte(init, y);\n    if x >= 0xE0 {\n        // [[x y z] w] case\n        // 5th bit in 0xE0 .. 0xEF is always clear, so `init` is still valid\n        // SAFETY: `bytes` produces an UTF-8-like string,\n        // so the iterator must produce a value here.\n        let z = unsafe { *bytes.next().unwrap_unchecked() };\n        let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);\n        ch = init << 12 | y_z;\n        if x >= 0xF0 {\n            // [x y z w] case\n            // use only the lower 3 bits of `init`\n            // SAFETY: `bytes` produces an UTF-8-like string,\n            // so the iterator must produce a value here.\n            let w = unsafe { *bytes.next().unwrap_unchecked() };\n            ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);\n        }\n    }\n\n    Some(ch)\n}",
  "callees": [
    "47323665595455568617290020941376774286",
    "25768524018977866517055903022448790318",
    "1329845230409163288212548289525672875535",
    "16824420916691935049705640393259467449",
    "1801932849287312231112662193894546046488",
    "844957821118050201712037424530049556280",
    "315331140686166457616644577557668814534",
    "176742512093848468045239021356424772729",
    "172988202723925134796567682468931265149",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "105125143701458073564296455695110349394",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "843102896095261732816452208300794916411",
    "62964906474134410292844024784991518817",
    "934375696446284627516563118665690549226",
    "1302514623760732210917631482165556335973",
    "1028023859496283824714006082102994000183",
    "1375602339865304183616456573312626826122",
    "182534260348495718753381397354609581701",
    "802603331907130014710293248879007229107",
    "1793199026846464691616255721034512928348",
    "550150895960312460312176584159342455723",
    "478505109661826463711850093418602871650",
    "399232661239117480517401994520839366833"
  ]
}
