{
  "file": "core/src/str/validations.rs",
  "name": "core::str::next_code_point::<'_, core::slice::Iter<'_, u8>>",
  "hash": "1010320278110026877215798050238858703054",
  "hash_direct": "201430789701323822317172995942376947179",
  "src": "pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {\n    // Decode UTF-8\n    let x = *bytes.next()?;\n    if x < 128 {\n        return Some(x as u32);\n    }\n\n    // Multibyte case follows\n    // Decode from a byte combination out of: [[[x y] z] w]\n    // NOTE: Performance is sensitive to the exact formulation here\n    let init = utf8_first_byte(x, 2);\n    // SAFETY: `bytes` produces an UTF-8-like string,\n    // so the iterator must produce a value here.\n    let y = unsafe { *bytes.next().unwrap_unchecked() };\n    let mut ch = utf8_acc_cont_byte(init, y);\n    if x >= 0xE0 {\n        // [[x y z] w] case\n        // 5th bit in 0xE0 .. 0xEF is always clear, so `init` is still valid\n        // SAFETY: `bytes` produces an UTF-8-like string,\n        // so the iterator must produce a value here.\n        let z = unsafe { *bytes.next().unwrap_unchecked() };\n        let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);\n        ch = init << 12 | y_z;\n        if x >= 0xF0 {\n            // [x y z w] case\n            // use only the lower 3 bits of `init`\n            // SAFETY: `bytes` produces an UTF-8-like string,\n            // so the iterator must produce a value here.\n            let w = unsafe { *bytes.next().unwrap_unchecked() };\n            ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);\n        }\n    }\n\n    Some(ch)\n}",
  "callees": [
    "12281449246394340237926324936375242532",
    "1552988011012146591114896816323571303973",
    "181267529910573756716102767087485333561",
    "1824545319189397521315695847785602896178",
    "8358020412969843293369480817801214853",
    "1483436051876589682917815592106303415640",
    "16907477943652998274434215545923907743",
    "1070701508596510069314634318856054217121",
    "182056224738756981514078113564136896850",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "63085389524472853348886374617170044294",
    "1793681111599931821712213635413918902143",
    "55408212128999564608147158566316072753",
    "717317897984632901316617723476110950437",
    "1121825575012330479117046270460961910099",
    "1213241336815109722310271468032047462595",
    "92005998086269722606437028357039395831",
    "181717373102152254895109628399379607332",
    "129298276867850405466757356839549852569",
    "43014631508606307693660626116761567117",
    "115481664012670090729456290692676191535",
    "414067426002036798312624266174828264739",
    "1349879990858633985615465432111373267034",
    "180635224128130815714204029673366671286",
    "112989397975222255532054380452996322405"
  ]
}
