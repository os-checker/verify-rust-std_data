{
  "file": "core/src/str/validations.rs",
  "name": "str::validations::run_utf8_validation",
  "hash": "47797129675991144585807847344926797523",
  "hash_direct": "1141485820825796657813602816705684131749",
  "src": "pub(super) const fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n    let mut index = 0;\n    let len = v.len();\n\n    const USIZE_BYTES: usize = size_of::<usize>();\n\n    let ascii_block_size = 2 * USIZE_BYTES;\n    let blocks_end = if len >= ascii_block_size { len - ascii_block_size + 1 } else { 0 };\n    // Below, we safely fall back to a slower codepath if the offset is `usize::MAX`,\n    // so the end-to-end behavior is the same at compiletime and runtime.\n    let align = const_eval_select!(\n        @capture { v: &[u8] } -> usize:\n        if const {\n            usize::MAX\n        } else {\n            v.as_ptr().align_offset(USIZE_BYTES)\n        }\n    );\n\n    #[safety::loop_invariant(index <= len + ascii_block_size)]\n    while index < len {\n        let old_offset = index;\n        macro_rules! err {\n            ($error_len: expr) => {\n                return Err(Utf8Error { valid_up_to: old_offset, error_len: $error_len })\n            };\n        }\n\n        macro_rules! next {\n            () => {{\n                index += 1;\n                // we needed data, but there was none: error!\n                if index >= len {\n                    err!(None)\n                }\n                v[index]\n            }};\n        }\n\n        let first = v[index];\n        if first >= 128 {\n            let w = utf8_char_width(first);\n            // 2-byte encoding is for codepoints  \\u{0080} to  \\u{07ff}\n            //        first  C2 80        last DF BF\n            // 3-byte encoding is for codepoints  \\u{0800} to  \\u{ffff}\n            //        first  E0 A0 80     last EF BF BF\n            //   excluding surrogates codepoints  \\u{d800} to  \\u{dfff}\n            //               ED A0 80 to       ED BF BF\n            // 4-byte encoding is for codepoints \\u{10000} to \\u{10ffff}\n            //        first  F0 90 80 80  last F4 8F BF BF\n            //\n            // Use the UTF-8 syntax from the RFC\n            //\n            // https://tools.ietf.org/html/rfc3629\n            // UTF8-1      = %x00-7F\n            // UTF8-2      = %xC2-DF UTF8-tail\n            // UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /\n            //               %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )\n            // UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /\n            //               %xF4 %x80-8F 2( UTF8-tail )\n            match w {\n                2 => {\n                    if next!() as i8 >= -64 {\n                        err!(Some(1))\n                    }\n                }\n                3 => {\n                    match (first, next!()) {\n                        (0xE0, 0xA0..=0xBF)\n                        | (0xE1..=0xEC, 0x80..=0xBF)\n                        | (0xED, 0x80..=0x9F)\n                        | (0xEE..=0xEF, 0x80..=0xBF) => {}\n                        _ => err!(Some(1)),\n                    }\n                    if next!() as i8 >= -64 {\n                        err!(Some(2))\n                    }\n                }\n                4 => {\n                    match (first, next!()) {\n                        (0xF0, 0x90..=0xBF) | (0xF1..=0xF3, 0x80..=0xBF) | (0xF4, 0x80..=0x8F) => {}\n                        _ => err!(Some(1)),\n                    }\n                    if next!() as i8 >= -64 {\n                        err!(Some(2))\n                    }\n                    if next!() as i8 >= -64 {\n                        err!(Some(3))\n                    }\n                }\n                _ => err!(Some(1)),\n            }\n            index += 1;\n        } else {\n            // Ascii case, try to skip forward quickly.\n            // When the pointer is aligned, read 2 words of data per iteration\n            // until we find a word containing a non-ascii byte.\n            if align != usize::MAX && align.wrapping_sub(index).is_multiple_of(USIZE_BYTES) {\n                let ptr = v.as_ptr();\n                #[safety::loop_invariant(index <= blocks_end + ascii_block_size && align.wrapping_sub(index) % USIZE_BYTES == 0)]\n                while index < blocks_end {\n                    // SAFETY: since `align - index` and `ascii_block_size` are\n                    // multiples of `USIZE_BYTES`, `block = ptr.add(index)` is\n                    // always aligned with a `usize` so it's safe to dereference\n                    // both `block` and `block.add(1)`.\n                    unsafe {\n                        let block = ptr.add(index) as *const usize;\n                        // break if there is a nonascii byte\n                        let zu = contains_nonascii(*block);\n                        let zv = contains_nonascii(*block.add(1));\n                        if zu || zv {\n                            break;\n                        }\n                    }\n                    index += ascii_block_size;\n                }\n                // step from the point where the wordwise loop stopped\n                #[safety::loop_invariant(index <= len)]\n                while index < len && v[index] < 128 {\n                    index += 1;\n                }\n            } else {\n                index += 1;\n            }\n        }\n    }\n\n    Ok(())\n}",
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "933364159754657673613583748622063573405",
    "16824420916691935049705640393259467449",
    "1712898201300478840215074793236064467963",
    "1067675883129992420314174327751912045205",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "643349473068727846115780678007450923004",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "1290129509806421189411347835193128335421",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "152018209062913109616942758022114057971",
    "102887121523905452179262747329207775596",
    "703663108277374327010040438608357482834",
    "18025038300022165797237903038339257643",
    "1100495660517602822510660091708953776518",
    "104831405656903467145249333363974848645",
    "6920580184232348336779953785783275216",
    "10280076113730517359836576566793155285",
    "156130332443363785142369276941490088427",
    "53703104570138002865479014552427780648",
    "177654207720279896464631270099131912070",
    "7839859953712079114640771271960005865",
    "399232661239117480517401994520839366833"
  ]
}
