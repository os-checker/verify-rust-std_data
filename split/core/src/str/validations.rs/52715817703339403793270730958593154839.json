{
  "file": "core/src/str/validations.rs",
  "name": "core::str::validations::run_utf8_validation",
  "hash": "52715817703339403793270730958593154839",
  "hash_direct": "238508719912720676211635025834860317996",
  "src": "pub(super) const fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n    let mut index = 0;\n    let len = v.len();\n\n    const USIZE_BYTES: usize = size_of::<usize>();\n\n    let ascii_block_size = 2 * USIZE_BYTES;\n    let blocks_end = if len >= ascii_block_size { len - ascii_block_size + 1 } else { 0 };\n    // Below, we safely fall back to a slower codepath if the offset is `usize::MAX`,\n    // so the end-to-end behavior is the same at compiletime and runtime.\n    let align = const_eval_select!(\n        @capture { v: &[u8] } -> usize:\n        if const {\n            usize::MAX\n        } else {\n            v.as_ptr().align_offset(USIZE_BYTES)\n        }\n    );\n\n    #[safety::loop_invariant(index <= len + ascii_block_size)]\n    while index < len {\n        let old_offset = index;\n        macro_rules! err {\n            ($error_len: expr) => {\n                return Err(Utf8Error { valid_up_to: old_offset, error_len: $error_len })\n            };\n        }\n\n        macro_rules! next {\n            () => {{\n                index += 1;\n                // we needed data, but there was none: error!\n                if index >= len {\n                    err!(None)\n                }\n                v[index]\n            }};\n        }\n\n        let first = v[index];\n        if first >= 128 {\n            let w = utf8_char_width(first);\n            // 2-byte encoding is for codepoints  \\u{0080} to  \\u{07ff}\n            //        first  C2 80        last DF BF\n            // 3-byte encoding is for codepoints  \\u{0800} to  \\u{ffff}\n            //        first  E0 A0 80     last EF BF BF\n            //   excluding surrogates codepoints  \\u{d800} to  \\u{dfff}\n            //               ED A0 80 to       ED BF BF\n            // 4-byte encoding is for codepoints \\u{10000} to \\u{10ffff}\n            //        first  F0 90 80 80  last F4 8F BF BF\n            //\n            // Use the UTF-8 syntax from the RFC\n            //\n            // https://tools.ietf.org/html/rfc3629\n            // UTF8-1      = %x00-7F\n            // UTF8-2      = %xC2-DF UTF8-tail\n            // UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /\n            //               %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )\n            // UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /\n            //               %xF4 %x80-8F 2( UTF8-tail )\n            match w {\n                2 => {\n                    if next!() as i8 >= -64 {\n                        err!(Some(1))\n                    }\n                }\n                3 => {\n                    match (first, next!()) {\n                        (0xE0, 0xA0..=0xBF)\n                        | (0xE1..=0xEC, 0x80..=0xBF)\n                        | (0xED, 0x80..=0x9F)\n                        | (0xEE..=0xEF, 0x80..=0xBF) => {}\n                        _ => err!(Some(1)),\n                    }\n                    if next!() as i8 >= -64 {\n                        err!(Some(2))\n                    }\n                }\n                4 => {\n                    match (first, next!()) {\n                        (0xF0, 0x90..=0xBF) | (0xF1..=0xF3, 0x80..=0xBF) | (0xF4, 0x80..=0x8F) => {}\n                        _ => err!(Some(1)),\n                    }\n                    if next!() as i8 >= -64 {\n                        err!(Some(2))\n                    }\n                    if next!() as i8 >= -64 {\n                        err!(Some(3))\n                    }\n                }\n                _ => err!(Some(1)),\n            }\n            index += 1;\n        } else {\n            // Ascii case, try to skip forward quickly.\n            // When the pointer is aligned, read 2 words of data per iteration\n            // until we find a word containing a non-ascii byte.\n            if align != usize::MAX && align.wrapping_sub(index).is_multiple_of(USIZE_BYTES) {\n                let ptr = v.as_ptr();\n                #[safety::loop_invariant(index <= blocks_end + ascii_block_size && align.wrapping_sub(index) % USIZE_BYTES == 0)]\n                while index < blocks_end {\n                    // SAFETY: since `align - index` and `ascii_block_size` are\n                    // multiples of `USIZE_BYTES`, `block = ptr.add(index)` is\n                    // always aligned with a `usize` so it's safe to dereference\n                    // both `block` and `block.add(1)`.\n                    unsafe {\n                        let block = ptr.add(index) as *const usize;\n                        // break if there is a nonascii byte\n                        let zu = contains_nonascii(*block);\n                        let zv = contains_nonascii(*block.add(1));\n                        if zu || zv {\n                            break;\n                        }\n                    }\n                    index += ascii_block_size;\n                }\n                // step from the point where the wordwise loop stopped\n                #[safety::loop_invariant(index <= len)]\n                while index < len && v[index] < 128 {\n                    index += 1;\n                }\n            } else {\n                index += 1;\n            }\n        }\n    }\n\n    Ok(())\n}",
  "callees": [
    "12281449246394340237926324936375242532",
    "99835071136844477394667148890151411684",
    "73694171442177138896992135977130617471",
    "181267529910573756716102767087485333561",
    "1362727304153836450215186853291845605124",
    "268948540394100045818230183448913195704",
    "1824545319189397521315695847785602896178",
    "1055043272310861592713228670863657256034",
    "149201007125728463455320865149411692001",
    "17976542625295060605041426324269334020",
    "897265533945643607115272871669854221703",
    "1605274151986183575712752596768333119248",
    "89502211078669479795623704974378882516",
    "170846580729842163074659927269266210653",
    "8010637041282557608011263416999007001",
    "1402743757155005823915607433842538879575",
    "986792852990965178117440249555081278778",
    "90818112465881722349174357944217011292",
    "146612017564224181584303574960223420416",
    "63085389524472853348886374617170044294",
    "175623961004431005849298709567805707658",
    "33067340742295788584221598515845050786",
    "927601772743169303216908637897944691801",
    "1574198065840570931715496922327374750806",
    "1793681111599931821712213635413918902143",
    "1148686515064754250815627714420871318321",
    "55408212128999564608147158566316072753",
    "1151330760316278949212555508268191192264",
    "222498892104036848916498256494801876148",
    "1670871865166106544517920089333181878250",
    "47672539441842164771342608976601968881",
    "4951833658330039795044234471525440054",
    "1267235988961751185115088510779182060971",
    "356896403557560017460350669106551612",
    "112989397975222255532054380452996322405"
  ]
}
