{
  "file": "core/src/str/validations.rs",
  "name": "str::validations::run_utf8_validation",
  "hash": "49857735120668107313002888744798436353",
  "hash_direct": "1141485820825796657813602816705684131749",
  "src": "pub(super) const fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n    let mut index = 0;\n    let len = v.len();\n\n    const USIZE_BYTES: usize = size_of::<usize>();\n\n    let ascii_block_size = 2 * USIZE_BYTES;\n    let blocks_end = if len >= ascii_block_size { len - ascii_block_size + 1 } else { 0 };\n    // Below, we safely fall back to a slower codepath if the offset is `usize::MAX`,\n    // so the end-to-end behavior is the same at compiletime and runtime.\n    let align = const_eval_select!(\n        @capture { v: &[u8] } -> usize:\n        if const {\n            usize::MAX\n        } else {\n            v.as_ptr().align_offset(USIZE_BYTES)\n        }\n    );\n\n    #[safety::loop_invariant(index <= len + ascii_block_size)]\n    while index < len {\n        let old_offset = index;\n        macro_rules! err {\n            ($error_len: expr) => {\n                return Err(Utf8Error { valid_up_to: old_offset, error_len: $error_len })\n            };\n        }\n\n        macro_rules! next {\n            () => {{\n                index += 1;\n                // we needed data, but there was none: error!\n                if index >= len {\n                    err!(None)\n                }\n                v[index]\n            }};\n        }\n\n        let first = v[index];\n        if first >= 128 {\n            let w = utf8_char_width(first);\n            // 2-byte encoding is for codepoints  \\u{0080} to  \\u{07ff}\n            //        first  C2 80        last DF BF\n            // 3-byte encoding is for codepoints  \\u{0800} to  \\u{ffff}\n            //        first  E0 A0 80     last EF BF BF\n            //   excluding surrogates codepoints  \\u{d800} to  \\u{dfff}\n            //               ED A0 80 to       ED BF BF\n            // 4-byte encoding is for codepoints \\u{10000} to \\u{10ffff}\n            //        first  F0 90 80 80  last F4 8F BF BF\n            //\n            // Use the UTF-8 syntax from the RFC\n            //\n            // https://tools.ietf.org/html/rfc3629\n            // UTF8-1      = %x00-7F\n            // UTF8-2      = %xC2-DF UTF8-tail\n            // UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /\n            //               %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )\n            // UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /\n            //               %xF4 %x80-8F 2( UTF8-tail )\n            match w {\n                2 => {\n                    if next!() as i8 >= -64 {\n                        err!(Some(1))\n                    }\n                }\n                3 => {\n                    match (first, next!()) {\n                        (0xE0, 0xA0..=0xBF)\n                        | (0xE1..=0xEC, 0x80..=0xBF)\n                        | (0xED, 0x80..=0x9F)\n                        | (0xEE..=0xEF, 0x80..=0xBF) => {}\n                        _ => err!(Some(1)),\n                    }\n                    if next!() as i8 >= -64 {\n                        err!(Some(2))\n                    }\n                }\n                4 => {\n                    match (first, next!()) {\n                        (0xF0, 0x90..=0xBF) | (0xF1..=0xF3, 0x80..=0xBF) | (0xF4, 0x80..=0x8F) => {}\n                        _ => err!(Some(1)),\n                    }\n                    if next!() as i8 >= -64 {\n                        err!(Some(2))\n                    }\n                    if next!() as i8 >= -64 {\n                        err!(Some(3))\n                    }\n                }\n                _ => err!(Some(1)),\n            }\n            index += 1;\n        } else {\n            // Ascii case, try to skip forward quickly.\n            // When the pointer is aligned, read 2 words of data per iteration\n            // until we find a word containing a non-ascii byte.\n            if align != usize::MAX && align.wrapping_sub(index).is_multiple_of(USIZE_BYTES) {\n                let ptr = v.as_ptr();\n                #[safety::loop_invariant(index <= blocks_end + ascii_block_size && align.wrapping_sub(index) % USIZE_BYTES == 0)]\n                while index < blocks_end {\n                    // SAFETY: since `align - index` and `ascii_block_size` are\n                    // multiples of `USIZE_BYTES`, `block = ptr.add(index)` is\n                    // always aligned with a `usize` so it's safe to dereference\n                    // both `block` and `block.add(1)`.\n                    unsafe {\n                        let block = ptr.add(index) as *const usize;\n                        // break if there is a nonascii byte\n                        let zu = contains_nonascii(*block);\n                        let zv = contains_nonascii(*block.add(1));\n                        if zu || zv {\n                            break;\n                        }\n                    }\n                    index += ascii_block_size;\n                }\n                // step from the point where the wordwise loop stopped\n                #[safety::loop_invariant(index <= len)]\n                while index < len && v[index] < 128 {\n                    index += 1;\n                }\n            } else {\n                index += 1;\n            }\n        }\n    }\n\n    Ok(())\n}",
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "118374646670586892012209298582368425689",
    "23815256893174302637797703719499456373",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "681932933892771600113755084868377368020",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "350987180030767754610510964114749211972",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "8161291837423649642305263678029669375",
    "698375928041891685218332199603984089953",
    "187482952606822645712460029589708661523",
    "1413561713996145578711397341497777047075",
    "126818845945534382313624863669169238336",
    "1032722381226407642916192559235445092884",
    "52821609522733004265605098066925811747",
    "108552149900633290919250115311635650035",
    "47822370175813177448723454097252028703",
    "174654506174121724337210882592953964221",
    "96426103444183050012757094728170995506",
    "1703660345011483495218041991169194027213",
    "739520556846959085018120036998133255835"
  ]
}
