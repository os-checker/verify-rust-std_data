{
  "file": "core/src/convert/num.rs",
  "name": "convert::num::<impl convert::TryFrom<i64> for u32>::try_from",
  "hash": "958696317549386270716553612277697463463",
  "hash_direct": "145003350379611890283682533344732489000",
  "src": "fn try_from(u: $source) -> Result<Self, Self::Error> {\n                let min = Self::MIN as $source;\n                let max = Self::MAX as $source;\n                if u < min || u > max {\n                    Err(TryFromIntError(()))\n                } else {\n                    Ok(u as Self)\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "impl_try_from_both_bounded!(i64 => u8, u16, u32)",
      "defsite": "macro_rules! impl_try_from_both_bounded {\n    ($source:ty => $($target:ty),+) => {$(\n        #[stable(feature = \"try_from\", since = \"1.34.0\")]\n        #[rustc_const_unstable(feature = \"const_convert\", issue = \"143773\")]\n        impl const TryFrom<$source> for $target {\n            type Error = TryFromIntError;\n\n            /// Tries to create the target number type from a source\n            /// number type. This returns an error if the source value\n            /// is outside of the range of the target type.\n            #[inline]\n            fn try_from(u: $source) -> Result<Self, Self::Error> {\n                let min = Self::MIN as $source;\n                let max = Self::MAX as $source;\n                if u < min || u > max {\n                    Err(TryFromIntError(()))\n                } else {\n                    Ok(u as Self)\n                }\n            }\n        }\n    )*}\n}"
    }
  ]
}
