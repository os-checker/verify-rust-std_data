{
  "file": "core/src/convert/num.rs",
  "name": "convert::num::ptr_try_from_impls::<impl convert::TryFrom<u32> for usize>::try_from",
  "hash": "92936935846902606246615418880539885029",
  "hash_direct": "171996329821137807108242313944257920643",
  "src": "fn try_from(value: $source) -> Result<Self, Self::Error> {\n                Ok(value as Self)\n            }",
  "macro_backtrace": [
    {
      "callsite": "$mac!($target => $source)",
      "defsite": "macro_rules! impl_try_from_unbounded {\n    ($source:ty => $($target:ty),+) => {$(\n        #[stable(feature = \"try_from\", since = \"1.34.0\")]\n        #[rustc_const_unstable(feature = \"const_convert\", issue = \"143773\")]\n        impl const TryFrom<$source> for $target {\n            type Error = TryFromIntError;\n\n            /// Tries to create the target number type from a source\n            /// number type. This returns an error if the source value\n            /// is outside of the range of the target type.\n            #[inline]\n            fn try_from(value: $source) -> Result<Self, Self::Error> {\n                Ok(value as Self)\n            }\n        }\n    )*}\n}"
    },
    {
      "callsite": "rev!(impl_try_from_unbounded, usize => u32, u64)",
      "defsite": "macro_rules! rev {\n    ($mac:ident, $source:ty => $($target:ty),+) => {$(\n        $mac!($target => $source);\n    )*}\n}"
    }
  ]
}
