{
  "file": "core/src/convert/num.rs",
  "name": "convert::num::<impl convert::From<u32> for i128>::from",
  "hash": "37471479290145605712541564470327110274",
  "hash_direct": "130322790983208570348821212597109047292",
  "src": "fn from(small: $Small) -> Self {\n                small as Self\n            }",
  "macro_backtrace": [
    {
      "callsite": "impl_from!(\n            $Small => $Large,\n            #[$attr],\n            concat!(\"Converts [`\", stringify!($Small), \"`] to [`\", stringify!($Large), \"`] losslessly.\"),\n        )",
      "defsite": "macro_rules! impl_from {\n    (bool => $Int:ty $(,)?) => {\n        impl_from!(\n            bool => $Int,\n            #[stable(feature = \"from_bool\", since = \"1.28.0\")],\n            concat!(\n                \"Converts a [`bool`] to [`\", stringify!($Int), \"`] losslessly.\\n\",\n                \"The resulting value is `0` for `false` and `1` for `true` values.\\n\",\n                \"\\n\",\n                \"# Examples\\n\",\n                \"\\n\",\n                \"```\\n\",\n                \"assert_eq!(\", stringify!($Int), \"::from(true), 1);\\n\",\n                \"assert_eq!(\", stringify!($Int), \"::from(false), 0);\\n\",\n                \"```\\n\",\n            ),\n        );\n    };\n    ($Small:ty => $Large:ty, #[$attr:meta] $(,)?) => {\n        impl_from!(\n            $Small => $Large,\n            #[$attr],\n            concat!(\"Converts [`\", stringify!($Small), \"`] to [`\", stringify!($Large), \"`] losslessly.\"),\n        );\n    };\n    ($Small:ty => $Large:ty, #[$attr:meta], $doc:expr $(,)?) => {\n        #[$attr]\n        #[rustc_const_unstable(feature = \"const_convert\", issue = \"143773\")]\n        impl const From<$Small> for $Large {\n            // Rustdocs on the impl block show a \"[+] show undocumented items\" toggle.\n            // Rustdocs on functions do not.\n            #[doc = $doc]\n            #[cfg_attr(flux, flux::spec(fn(small:$Small) -> $Large[cast(small)]))]\n            #[inline(always)]\n            fn from(small: $Small) -> Self {\n                small as Self\n            }\n        }\n    };\n}"
    },
    {
      "callsite": "impl_from!(u32 => i128, #[stable(feature = \"i128\", since = \"1.26.0\")])",
      "defsite": "macro_rules! impl_from {\n    (bool => $Int:ty $(,)?) => {\n        impl_from!(\n            bool => $Int,\n            #[stable(feature = \"from_bool\", since = \"1.28.0\")],\n            concat!(\n                \"Converts a [`bool`] to [`\", stringify!($Int), \"`] losslessly.\\n\",\n                \"The resulting value is `0` for `false` and `1` for `true` values.\\n\",\n                \"\\n\",\n                \"# Examples\\n\",\n                \"\\n\",\n                \"```\\n\",\n                \"assert_eq!(\", stringify!($Int), \"::from(true), 1);\\n\",\n                \"assert_eq!(\", stringify!($Int), \"::from(false), 0);\\n\",\n                \"```\\n\",\n            ),\n        );\n    };\n    ($Small:ty => $Large:ty, #[$attr:meta] $(,)?) => {\n        impl_from!(\n            $Small => $Large,\n            #[$attr],\n            concat!(\"Converts [`\", stringify!($Small), \"`] to [`\", stringify!($Large), \"`] losslessly.\"),\n        );\n    };\n    ($Small:ty => $Large:ty, #[$attr:meta], $doc:expr $(,)?) => {\n        #[$attr]\n        #[rustc_const_unstable(feature = \"const_convert\", issue = \"143773\")]\n        impl const From<$Small> for $Large {\n            // Rustdocs on the impl block show a \"[+] show undocumented items\" toggle.\n            // Rustdocs on functions do not.\n            #[doc = $doc]\n            #[cfg_attr(flux, flux::spec(fn(small:$Small) -> $Large[cast(small)]))]\n            #[inline(always)]\n            fn from(small: $Small) -> Self {\n                small as Self\n            }\n        }\n    };\n}"
    }
  ]
}
