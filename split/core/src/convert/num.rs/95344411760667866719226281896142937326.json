{
  "file": "core/src/convert/num.rs",
  "name": "convert::num::<impl convert::TryFrom<i128> for num::nonzero::NonZero<i128>>::try_from",
  "hash": "95344411760667866719226281896142937326",
  "hash_direct": "177530809809622073110288870240055148332",
  "src": "fn try_from(value: $Int) -> Result<Self, Self::Error> {\n                Self::new(value).ok_or(TryFromIntError(()))\n            }",
  "macro_backtrace": [
    {
      "callsite": "impl_nonzero_int_try_from_int!(i128)",
      "defsite": "macro_rules! impl_nonzero_int_try_from_int {\n    ($Int:ty) => {\n        #[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")]\n        impl TryFrom<$Int> for NonZero<$Int> {\n            type Error = TryFromIntError;\n\n            // Rustdocs on the impl block show a \"[+] show undocumented items\" toggle.\n            // Rustdocs on functions do not.\n            #[doc = concat!(\"Attempts to convert [`\", stringify!($Int), \"`] \")]\n            #[doc = concat!(\"to <code>[NonZero]\\\\<[\", stringify!($Int), \"]></code>.\")]\n            #[inline]\n            fn try_from(value: $Int) -> Result<Self, Self::Error> {\n                Self::new(value).ok_or(TryFromIntError(()))\n            }\n        }\n    };\n}"
    }
  ],
  "callees": [
    "422227233868703869115214172499681347219",
    "1639836952856063465710847972281640812684",
    "1265976456585539210516529077192093398642"
  ]
}
