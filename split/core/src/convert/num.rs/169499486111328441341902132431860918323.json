{
  "file": "core/src/convert/num.rs",
  "name": "convert::num::<impl convert::From<bool> for f128>::from",
  "hash": "169499486111328441341902132431860918323",
  "hash_direct": "103732307582281466763831565416824635162",
  "src": "fn from(small: bool) -> Self {\n                small as u8 as Self\n            }",
  "macro_backtrace": [
    {
      "callsite": "impl_float_from_bool!(\n    f128;\n    doctest_prefix:\n    ///#![feature(f128)]\n    ///# #[cfg(all(target_arch = \"x86_64\", target_os = \"linux\"))] {\n    ///\n    doctest_suffix:\n    ///# }\n)",
      "defsite": "macro_rules! impl_float_from_bool {\n    (\n        $float:ty $(;\n            doctest_prefix: $(#[doc = $doctest_prefix:literal])*\n            doctest_suffix: $(#[doc = $doctest_suffix:literal])*\n        )?\n    ) => {\n        #[stable(feature = \"float_from_bool\", since = \"1.68.0\")]\n        #[rustc_const_unstable(feature = \"const_try\", issue = \"74935\")]\n            impl const From<bool> for $float {\n            #[doc = concat!(\"Converts a [`bool`] to [`\", stringify!($float),\"`] losslessly.\")]\n            /// The resulting value is positive `0.0` for `false` and `1.0` for `true` values.\n            ///\n            /// # Examples\n            /// ```\n            $($(#[doc = $doctest_prefix])*)?\n            #[doc = concat!(\"let x: \", stringify!($float),\" = false.into();\")]\n            /// assert_eq!(x, 0.0);\n            /// assert!(x.is_sign_positive());\n            ///\n            #[doc = concat!(\"let y: \", stringify!($float),\" = true.into();\")]\n            /// assert_eq!(y, 1.0);\n            $($(#[doc = $doctest_suffix])*)?\n            /// ```\n            #[inline]\n            fn from(small: bool) -> Self {\n                small as u8 as Self\n            }\n        }\n    };\n}"
    }
  ]
}
