{
  "file": "core/src/convert/num.rs",
  "name": "<f128 as convert::num::FloatToInt<i128>>::to_int_unchecked",
  "hash": "104645809721132181797906762590267398330",
  "hash_direct": "131186220613809785979099498304631676709",
  "src": "unsafe fn to_int_unchecked(self) -> $Int {\n                    // SAFETY: the safety contract must be upheld by the caller.\n                    unsafe { crate::intrinsics::float_to_int_unchecked(self) }\n                }",
  "macro_backtrace": [
    {
      "callsite": "impl_float_to_int!(f128 => u8, u16, u32, u64, u128, usize, i8, i16, i32, i64, i128, isize)",
      "defsite": "macro_rules! impl_float_to_int {\n    ($Float:ty => $($Int:ty),+) => {\n        #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n        impl private::Sealed for $Float {}\n        $(\n            #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n            impl FloatToInt<$Int> for $Float {\n                #[inline]\n                #[requires(\n                    self.is_finite() && float_to_int_in_range::<$Float, $Int>(self)\n                )]\n                unsafe fn to_int_unchecked(self) -> $Int {\n                    // SAFETY: the safety contract must be upheld by the caller.\n                    unsafe { crate::intrinsics::float_to_int_unchecked(self) }\n                }\n            }\n        )+\n    }\n}"
    }
  ]
}
