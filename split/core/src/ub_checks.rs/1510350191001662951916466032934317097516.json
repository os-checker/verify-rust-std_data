{
  "file": "core/src/ub_checks.rs",
  "name": "str::<impl str>::as_ascii_unchecked::precondition_check",
  "hash": "1510350191001662951916466032934317097516",
  "hash_direct": "54046799830537356164711346502048843989",
  "src": "const fn precondition_check($($name:$ty),*) {\n                if !$e {\n                    let msg = concat!(\"unsafe precondition(s) violated: \", $message,\n                        \"\\n\\nThis indicates a bug in the program. \\\n                        This Undefined Behavior check is optional, and cannot be relied on for safety.\");\n                    ::core::panicking::panic_nounwind_fmt(::core::fmt::Arguments::new_const(&[msg]), false);\n                }\n            }",
  "macro_backtrace": [
    {
      "callsite": "assert_unsafe_precondition!(\n            check_library_ub,\n            \"as_ascii_unchecked requires that the string is valid ASCII\",\n            (it: &str = self) => it.is_ascii()\n        )",
      "defsite": "macro_rules! assert_unsafe_precondition {\n    ($kind:ident, $message:expr, ($($name:ident:$ty:ty = $arg:expr),*$(,)?) => $e:expr $(,)?) => {\n        {\n            // This check is inlineable, but not by the MIR inliner.\n            // The reason for this is that the MIR inliner is in an exceptionally bad position\n            // to think about whether or not to inline this. In MIR, this call is gated behind `debug_assertions`,\n            // which will codegen to `false` in release builds. Inlining the check would be wasted work in that case and\n            // would be bad for compile times.\n            //\n            // LLVM on the other hand sees the constant branch, so if it's `false`, it can immediately delete it without\n            // inlining the check. If it's `true`, it can inline it and get significantly better performance.\n            #[rustc_no_mir_inline]\n            #[inline]\n            #[rustc_nounwind]\n            #[track_caller]\n            const fn precondition_check($($name:$ty),*) {\n                if !$e {\n                    let msg = concat!(\"unsafe precondition(s) violated: \", $message,\n                        \"\\n\\nThis indicates a bug in the program. \\\n                        This Undefined Behavior check is optional, and cannot be relied on for safety.\");\n                    ::core::panicking::panic_nounwind_fmt(::core::fmt::Arguments::new_const(&[msg]), false);\n                }\n            }\n\n            if ::core::ub_checks::$kind() {\n                precondition_check($($arg,)*);\n            }\n        }\n    };\n}"
    }
  ],
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "344205184641161321414779255303253264915",
    "27480086118489678191003877857780025576",
    "17184344353108238453456947736140641438",
    "23815256893174302637797703719499456373",
    "47704708250653028710044748737554169683",
    "3348037517594157114729719856894976905",
    "1819947172139969375117075366088933977903",
    "172945843078855720802584938355221151874",
    "131222986955785330327440861924041509492",
    "38217196742947992835679479997123307043",
    "1342521228831833354715461413551686205925",
    "121097281700569241807917519510076722724",
    "1749362715435459353511933873995340031229",
    "152957573567666139458051071799244237150",
    "1440311084109427911411767598402928151278",
    "110553296291267690486764538235023897629",
    "1095980910905451195915776472035072742717",
    "462846610869204213514639900340099405177",
    "758800371710587469314073968176229651883",
    "83296026332579416941842209678709993328",
    "97892229237199250718782565098232937194",
    "37868078735602925891573318122962819320",
    "1578703703635175719018067387082881800385",
    "125312877505429677902664359715729802479",
    "632379827537218859118037651046044448068",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "243931809744896974812513529918607549579",
    "1752989996936949203916036071159051010960",
    "760723331888050409213108094994821248586",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "625849434625814717716494369484959093162",
    "1566168013061370513711054548557151263674",
    "8161291837423649642305263678029669375",
    "1068637569658805762318411432081459704427",
    "698375928041891685218332199603984089953",
    "187482952606822645712460029589708661523",
    "1413561713996145578711397341497777047075",
    "126818845945534382313624863669169238336",
    "813578382545998277312366744418950688761",
    "3158087186225067104207623212949621094",
    "1032722381226407642916192559235445092884",
    "594398967705273052918318531949127567864",
    "172590953658237452717460291587113135731",
    "72831492073099224595472311669935434925",
    "919518386164868713916971876477044250567",
    "1723599536204470635113497313051694197046",
    "17025964970216739033246484943915817852",
    "52821609522733004265605098066925811747",
    "108552149900633290919250115311635650035",
    "39667799822193410508007861328948464447",
    "172260194559773182629656345293376304049",
    "616383506846132264113707383050342900735",
    "278689749018535990515552346042570732443",
    "499519683212257418611027105764133001507",
    "159833986241638017215846691414292743759",
    "781231686659779181411439904165139827836",
    "47822370175813177448723454097252028703",
    "497499364745128359314402117207900903418",
    "137147026445318887422604340055542353314",
    "46727113463522556709844421433999518913",
    "1703660345011483495218041991169194027213",
    "92293406756414262231157972400238103749",
    "76610361547970390014041401956375253519",
    "739520556846959085018120036998133255835",
    "5533079644241704014802052529604371844",
    "101520258712339119345830936586852421312",
    "179112378572194142739537177584691521062"
  ]
}
