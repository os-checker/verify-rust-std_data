{
  "file": "core/src/option.rs",
  "name": "option::Option::<u32>::as_slice",
  "hash": "1220560568382605955513885913416730274601",
  "hash_direct": "125149695870019106526378381004390724928",
  "src": "pub const fn as_slice(&self) -> &[T] {\n        // SAFETY: When the `Option` is `Some`, we're using the actual pointer\n        // to the payload, with a length of 1, so this is equivalent to\n        // `slice::from_ref`, and thus is safe.\n        // When the `Option` is `None`, the length used is 0, so to be safe it\n        // just needs to be aligned, which it is because `&self` is aligned and\n        // the offset used is a multiple of alignment.\n        //\n        // Here we assume that `offset_of!` always returns an offset to an\n        // in-bounds and correctly aligned position for a `T` (even if in the\n        // `None` case it's just padding).\n        unsafe {\n            slice::from_raw_parts(\n                (self as *const Self).byte_add(core::mem::offset_of!(Self, Some.0)).cast(),\n                self.len(),\n            )\n        }\n    }",
  "callees": [
    "258820287469578611817448591488600041899",
    "588974892899239543415856878986124229421",
    "690438059002452523915046149102377829082",
    "17421822894816687532325615181214565887",
    "313288670142853245916792507642081759284",
    "27480086118489678191003877857780025576",
    "23815256893174302637797703719499456373",
    "1639190511405576016712069487289226138136",
    "158959414668720189031913592930207227087",
    "99603598099498707762068107842012164044",
    "121097281700569241807917519510076722724",
    "143572956432032064744447501745832117320",
    "137368381448604167703416046205455599816",
    "156396365605833484958181337486344432065",
    "13303575705867660165971022725037666878",
    "761861023504359043615820998596748928032",
    "34186979044273285356793804808902719797",
    "1113032932815665948217565294476098756403",
    "41505289739977656509611396154325757795",
    "1752989996936949203916036071159051010960",
    "478753423337745817613297159272845606672",
    "3658730781980743391697756456907208995",
    "176386771705132260856587306647620489942",
    "24720139230274117689328858551755358968",
    "1566168013061370513711054548557151263674",
    "375960559020688079617955032586718986019",
    "1824083497982951695411403259503031760104",
    "103476114162737745216145826015144209565",
    "128495282025516206308425791596079070891",
    "153492746833767641913665382585991399102",
    "187482952606822645712460029589708661523",
    "126818845945534382313624863669169238336",
    "626207283129094171111676173400384605105",
    "218834276175767504515328027281012437761",
    "116364500958062534389898380650884286716",
    "159401738627378639878611080411153702009",
    "152206577154351304493888433837304075634",
    "92125261803031702789570328297059667507",
    "1006928117247909106515604664996585110540",
    "51920321377442756437204742573348251158",
    "739520556846959085018120036998133255835",
    "154579918799348646172273891119983850679",
    "71112245793085408723525187754979718597",
    "1217330957027791981411010835694243116934"
  ]
}
