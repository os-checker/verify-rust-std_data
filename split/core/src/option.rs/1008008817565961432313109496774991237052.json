{
  "file": "core/src/option.rs",
  "name": "option::Option::<u32>::as_slice",
  "hash": "1008008817565961432313109496774991237052",
  "hash_direct": "125149695870019106526378381004390724928",
  "src": "pub const fn as_slice(&self) -> &[T] {\n        // SAFETY: When the `Option` is `Some`, we're using the actual pointer\n        // to the payload, with a length of 1, so this is equivalent to\n        // `slice::from_ref`, and thus is safe.\n        // When the `Option` is `None`, the length used is 0, so to be safe it\n        // just needs to be aligned, which it is because `&self` is aligned and\n        // the offset used is a multiple of alignment.\n        //\n        // Here we assume that `offset_of!` always returns an offset to an\n        // in-bounds and correctly aligned position for a `T` (even if in the\n        // `None` case it's just padding).\n        unsafe {\n            slice::from_raw_parts(\n                (self as *const Self).byte_add(core::mem::offset_of!(Self, Some.0)).cast(),\n                self.len(),\n            )\n        }\n    }",
  "callees": [
    "47323665595455568617290020941376774286",
    "111425599901702694743874629435682172347",
    "714811817540972740211524868124730226803",
    "1329845230409163288212548289525672875535",
    "80772345035046942210372022594843481570",
    "109763229663154342343123224747831634619",
    "16824420916691935049705640393259467449",
    "561445107989240208511361370086377379752",
    "1318686654956897216711385591645864997868",
    "107365534946901948286099583667090509800",
    "1712898201300478840215074793236064467963",
    "841346702487865802717731804342903065853",
    "1617054938297627622011998382328717871744",
    "1196638383615410162910723134175805433641",
    "1182371843420022111010336901757313084440",
    "26064680123257945312537992217601395168",
    "61324068168977176312433676740423576843",
    "841904668883726495316837415609641023349",
    "1258931108755458209614962827106116332072",
    "1243847030362955698517207199029174369810",
    "105125143701458073564296455695110349394",
    "25930241974724637292994171257021210872",
    "617554482545947003412104686554524783687",
    "1445917162577882149418297081791436471284",
    "849628185942532211610194183090257053256",
    "152018209062913109616942758022114057971",
    "66566631872134911775144848023861874236",
    "178161028101479775534350541152105648249",
    "935106538192853954912228901913841026663",
    "102887121523905452179262747329207775596",
    "703663108277374327010040438608357482834",
    "1100495660517602822510660091708953776518",
    "574207083393858307415460964322536601327",
    "14519802542504413592318552666121024534",
    "109719734841431085993695935665262868409",
    "54816798378906845441007843819663014789",
    "1064203217473128011511952902978152301917",
    "152928245264552852917025301865021459252",
    "7839859953712079114640771271960005865",
    "1149265318701628438811160570489210589004",
    "399232661239117480517401994520839366833",
    "1366691609966069760614771012231218686545",
    "165260604638305226342101042842060873588",
    "34478597508049401479557782585707843723"
  ]
}
